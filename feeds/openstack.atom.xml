<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom"><title>Be Care Free - openstack</title><link href="https://fengxia41103.github.io/myblog/" rel="alternate"></link><link href="https://fengxia41103.github.io/myblog/feeds/openstack.atom.xml" rel="self"></link><id>https://fengxia41103.github.io/myblog/</id><updated>2019-03-15T00:00:00-04:00</updated><subtitle></subtitle><entry><title>Juju GUI nginx proxy</title><link href="https://fengxia41103.github.io/myblog/juju%20gui%20nginx%20proxy.html" rel="alternate"></link><published>2017-10-22T22:21:00-04:00</published><updated>2017-10-22T22:21:00-04:00</updated><author><name>Feng Xia</name></author><id>tag:fengxia41103.github.io,2017-10-22:/myblog/juju gui nginx proxy.html</id><summary type="html">&lt;p&gt;In &lt;a href="https://fengxia41103.github.io/myblog/juju local LXD.html"&gt;LXD on localhost&lt;/a&gt; we introduced using
LXD container to bootstrap a Juju controller. 
But how to access the Juju GUI? Launching it is easy
enough with &lt;code&gt;$ juju gui&lt;/code&gt; from juju host; 
accessing it from anywhere outside
the host is a challenge. One way is through &lt;code&gt;$ ssh -X&lt;/code&gt; to 
the LXD and launch firefox. &lt;/p&gt;
&lt;p&gt;Another option is to use &lt;a href="https://www.nginx.com/resources/admin-guide/reverse-proxy/"&gt;&lt;code&gt;nginx&lt;/code&gt; to proxy&lt;/a&gt; the GUI service. The
quirk here is to enable &lt;code&gt;ssl&lt;/code&gt; proxy (notice the &lt;code&gt;https&lt;/code&gt;?)&lt;/p&gt;
&lt;figure class="col s12 center"&gt;
  &lt;img src="images/juju%20gui%20nginx.png"/&gt;
  &lt;figcaption&gt;Juju GUI with Nginx proxy&lt;/figcaption&gt;
&lt;/figure&gt;

&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;Get SSL cert in &lt;code&gt;/etc/nginx&lt;/code&gt;. This will create two files in this
   directory: &lt;code&gt;cert.key&lt;/code&gt; and &lt;code&gt;cert.crt&lt;/code&gt;.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;```shell
$ sudo openssl req -x509 -nodes -days 365 -newkey rsa:2048 -keyout /etc/nginx/cert.key -out /etc/nginx/cert.crt
```
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;In LXD host, use &lt;code&gt;$ juju gui&lt;/code&gt; to find out its server address and
   port, for example:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="err"&gt;```&lt;/span&gt;&lt;span class="n"&gt;shell&lt;/span&gt;
&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;dev&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;fengxia&lt;/span&gt;&lt;span class="nv"&gt;@ubuntu&lt;/span&gt;&lt;span class="err"&gt;:&lt;/span&gt;&lt;span class="o"&gt;~&lt;/span&gt;&lt;span class="err"&gt;$&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;juju&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;gui&lt;/span&gt;
&lt;span class="n"&gt;GUI&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mf"&gt;2.10.2&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;for&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;model&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="ss"&gt;&amp;quot;admin/default&amp;quot;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;is&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;enabled&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;at&lt;/span&gt;&lt;span class="err"&gt;:&lt;/span&gt;
&lt;span class="nl"&gt;https&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="o"&gt;//&lt;/span&gt;&lt;span class="mf"&gt;10.175.135.193&lt;/span&gt;&lt;span class="err"&gt;:&lt;/span&gt;&lt;span class="mi"&gt;17070&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;gui&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;u&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="k"&gt;admin&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="k"&gt;default&lt;/span&gt;
&lt;span class="n"&gt;Your&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;login&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;credential&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;is&lt;/span&gt;&lt;span class="err"&gt;:&lt;/span&gt;
&lt;span class="nl"&gt;username&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;admin&lt;/span&gt;
&lt;span class="nl"&gt;password&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;049&lt;/span&gt;&lt;span class="n"&gt;ab8c2284b3b7fa7e87933df18da15&lt;/span&gt;
&lt;span class="err"&gt;```&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;So the â€¦&lt;/p&gt;&lt;/li&gt;&lt;/ol&gt;</summary><content type="html">&lt;p&gt;In &lt;a href="https://fengxia41103.github.io/myblog/juju local LXD.html"&gt;LXD on localhost&lt;/a&gt; we introduced using
LXD container to bootstrap a Juju controller. 
But how to access the Juju GUI? Launching it is easy
enough with &lt;code&gt;$ juju gui&lt;/code&gt; from juju host; 
accessing it from anywhere outside
the host is a challenge. One way is through &lt;code&gt;$ ssh -X&lt;/code&gt; to 
the LXD and launch firefox. &lt;/p&gt;
&lt;p&gt;Another option is to use &lt;a href="https://www.nginx.com/resources/admin-guide/reverse-proxy/"&gt;&lt;code&gt;nginx&lt;/code&gt; to proxy&lt;/a&gt; the GUI service. The
quirk here is to enable &lt;code&gt;ssl&lt;/code&gt; proxy (notice the &lt;code&gt;https&lt;/code&gt;?)&lt;/p&gt;
&lt;figure class="col s12 center"&gt;
  &lt;img src="images/juju%20gui%20nginx.png"/&gt;
  &lt;figcaption&gt;Juju GUI with Nginx proxy&lt;/figcaption&gt;
&lt;/figure&gt;

&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;Get SSL cert in &lt;code&gt;/etc/nginx&lt;/code&gt;. This will create two files in this
   directory: &lt;code&gt;cert.key&lt;/code&gt; and &lt;code&gt;cert.crt&lt;/code&gt;.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;```shell
$ sudo openssl req -x509 -nodes -days 365 -newkey rsa:2048 -keyout /etc/nginx/cert.key -out /etc/nginx/cert.crt
```
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;In LXD host, use &lt;code&gt;$ juju gui&lt;/code&gt; to find out its server address and
   port, for example:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="err"&gt;```&lt;/span&gt;&lt;span class="n"&gt;shell&lt;/span&gt;
&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;dev&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;fengxia&lt;/span&gt;&lt;span class="nv"&gt;@ubuntu&lt;/span&gt;&lt;span class="err"&gt;:&lt;/span&gt;&lt;span class="o"&gt;~&lt;/span&gt;&lt;span class="err"&gt;$&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;juju&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;gui&lt;/span&gt;
&lt;span class="n"&gt;GUI&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mf"&gt;2.10.2&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;for&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;model&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="ss"&gt;&amp;quot;admin/default&amp;quot;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;is&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;enabled&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;at&lt;/span&gt;&lt;span class="err"&gt;:&lt;/span&gt;
&lt;span class="nl"&gt;https&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="o"&gt;//&lt;/span&gt;&lt;span class="mf"&gt;10.175.135.193&lt;/span&gt;&lt;span class="err"&gt;:&lt;/span&gt;&lt;span class="mi"&gt;17070&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;gui&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;u&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="k"&gt;admin&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="k"&gt;default&lt;/span&gt;
&lt;span class="n"&gt;Your&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;login&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;credential&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;is&lt;/span&gt;&lt;span class="err"&gt;:&lt;/span&gt;
&lt;span class="nl"&gt;username&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;admin&lt;/span&gt;
&lt;span class="nl"&gt;password&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;049&lt;/span&gt;&lt;span class="n"&gt;ab8c2284b3b7fa7e87933df18da15&lt;/span&gt;
&lt;span class="err"&gt;```&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;So the server's ip is &lt;code&gt;10.175.135.193&lt;/code&gt; and port &lt;code&gt;17070&lt;/code&gt;.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;(Optionally), you can change the Juju password here:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;```shell
$ juju change-user-password
```
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Create &lt;code&gt;juju.conf&lt;/code&gt; in &lt;code&gt;/etc/nginx/site-available&lt;/code&gt;. Note that this
   server listens port &lt;code&gt;443&lt;/code&gt;!&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="err"&gt;```&lt;/span&gt;&lt;span class="nx"&gt;shell&lt;/span&gt;
&lt;span class="nx"&gt;map&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="err"&gt;$&lt;/span&gt;&lt;span class="nx"&gt;http_upgrade&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="err"&gt;$&lt;/span&gt;&lt;span class="nx"&gt;connection_upgrade&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;default&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;upgrade&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="err"&gt;&amp;#39;&amp;#39;&lt;/span&gt;&lt;span class="w"&gt;      &lt;/span&gt;&lt;span class="nx"&gt;close&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="nx"&gt;upstream&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;jujugui&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;server&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="m m-Double"&gt;10.175.135.193&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="mi"&gt;17070&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="nx"&gt;server&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;listen&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;443&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;server_name&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="m m-Double"&gt;192.168.122.214&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="err"&gt;#&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;your&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;IP&lt;/span&gt;
&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;ssl_certificate&lt;/span&gt;&lt;span class="w"&gt;           &lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="nx"&gt;etc&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="nx"&gt;nginx&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="nx"&gt;cert&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;crt&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;ssl_certificate_key&lt;/span&gt;&lt;span class="w"&gt;       &lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="nx"&gt;etc&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="nx"&gt;nginx&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="nx"&gt;cert&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;key&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;ssl&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;on&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;ssl_session_cache&lt;/span&gt;&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="nx"&gt;builtin&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="mi"&gt;1000&lt;/span&gt;&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="nx"&gt;shared&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="nx"&gt;SSL&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="mi"&gt;10&lt;/span&gt;&lt;span class="nx"&gt;m&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;ssl_protocols&lt;/span&gt;&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="nx"&gt;TLSv1&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;TLSv1&lt;/span&gt;&lt;span class="m m-Double"&gt;.1&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;TLSv1&lt;/span&gt;&lt;span class="m m-Double"&gt;.2&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;ssl_ciphers&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;HIGH&lt;/span&gt;&lt;span class="p"&gt;:!&lt;/span&gt;&lt;span class="nx"&gt;aNULL&lt;/span&gt;&lt;span class="p"&gt;:!&lt;/span&gt;&lt;span class="nx"&gt;eNULL&lt;/span&gt;&lt;span class="p"&gt;:!&lt;/span&gt;&lt;span class="nx"&gt;EXPORT&lt;/span&gt;&lt;span class="p"&gt;:!&lt;/span&gt;&lt;span class="nx"&gt;CAMELLIA&lt;/span&gt;&lt;span class="p"&gt;:!&lt;/span&gt;&lt;span class="nx"&gt;DES&lt;/span&gt;&lt;span class="p"&gt;:!&lt;/span&gt;&lt;span class="nx"&gt;MD5&lt;/span&gt;&lt;span class="p"&gt;:!&lt;/span&gt;&lt;span class="nx"&gt;PSK&lt;/span&gt;&lt;span class="p"&gt;:!&lt;/span&gt;&lt;span class="nx"&gt;RC4&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;ssl_prefer_server_ciphers&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;on&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;location&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
&lt;span class="w"&gt;   &lt;/span&gt;&lt;span class="nx"&gt;proxy_pass&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;https&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="c1"&gt;//jujugui;&lt;/span&gt;
&lt;span class="w"&gt;   &lt;/span&gt;&lt;span class="nx"&gt;proxy_set_header&lt;/span&gt;&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="nx"&gt;Host&lt;/span&gt;&lt;span class="w"&gt;            &lt;/span&gt;&lt;span class="err"&gt;$&lt;/span&gt;&lt;span class="nx"&gt;host&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="w"&gt;   &lt;/span&gt;&lt;span class="nx"&gt;proxy_set_header&lt;/span&gt;&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="nx"&gt;X&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="nx"&gt;Real&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="nx"&gt;IP&lt;/span&gt;&lt;span class="w"&gt;       &lt;/span&gt;&lt;span class="err"&gt;$&lt;/span&gt;&lt;span class="nx"&gt;remote_addr&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="w"&gt;   &lt;/span&gt;&lt;span class="nx"&gt;proxy_set_header&lt;/span&gt;&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="nx"&gt;X&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="nx"&gt;Forwarded&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="k"&gt;for&lt;/span&gt;&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="err"&gt;$&lt;/span&gt;&lt;span class="nx"&gt;proxy_add_x_forwarded_for&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="w"&gt;   &lt;/span&gt;&lt;span class="nx"&gt;proxy_connect_timeout&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;300&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="w"&gt;   &lt;/span&gt;&lt;span class="nx"&gt;port_in_redirect&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;off&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="w"&gt;   &lt;/span&gt;&lt;span class="nx"&gt;proxy_http_version&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="m m-Double"&gt;1.1&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="w"&gt;   &lt;/span&gt;&lt;span class="nx"&gt;proxy_set_header&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;Upgrade&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="err"&gt;$&lt;/span&gt;&lt;span class="nx"&gt;http_upgrade&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="w"&gt;   &lt;/span&gt;&lt;span class="nx"&gt;proxy_set_header&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;Connection&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s"&gt;&amp;quot;upgrade&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="w"&gt;   &lt;/span&gt;&lt;span class="nx"&gt;proxy_read_timeout&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;86400&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="err"&gt;```&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Reload &lt;code&gt;$ sudo service nginx reload&lt;/code&gt;, and browse to
&lt;code&gt;https://[yourip]/gui&lt;/code&gt;, you shall see the Juju GUI.&lt;/p&gt;</content><category term="openstack"></category><category term="lenovo"></category></entry><entry><title>Juju local LXD</title><link href="https://fengxia41103.github.io/myblog/juju%20local%20LXD.html" rel="alternate"></link><published>2017-09-06T13:21:00-04:00</published><updated>2017-09-06T13:21:00-04:00</updated><author><name>Feng Xia</name></author><id>tag:fengxia41103.github.io,2017-09-06:/myblog/juju local LXD.html</id><summary type="html">&lt;p&gt;Using Juju's &lt;a href="https://jujucharms.com/docs/2.0/clouds-LXD"&gt;LXD provider&lt;/a&gt; is the least-hassle way to start an
experience of Juju and its charms. However, if you have done charm
development for a while, you know making a one line of code change,
deploying charm, then wait to see the &lt;em&gt;new&lt;/em&gt; code got executed &amp;larr;
it's good 5-10 minutes per cycle. These add up quickly when you are in
the middle of churning out code to get your ideas written. Not to
mention creating a new &lt;code&gt;machine&lt;/code&gt; is 2x slower, and bootstraping a new
controller is even worse. I had experience in Shanghai sitting 30+
minutes for a new controller due to the location's unreliable
connections, and sometimes it just failed w/ a timeout. &lt;/p&gt;
&lt;p&gt;What to do? The goal is to create a way to reduce this trial-error
cycle as much as possible so to speed up code development.&lt;/p&gt;
&lt;h1&gt;Challenge&lt;/h1&gt;
&lt;p&gt;If you watch &lt;code&gt;juju debug-log&lt;/code&gt; while it deploys a charm, you start to
realize that there are roughly seven steps:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;creating a container (will discuss &lt;code&gt;--to&lt;/code&gt; switch later)&lt;/li&gt;
&lt;li&gt;update/upgrade the new container â€¦&lt;/li&gt;&lt;/ol&gt;</summary><content type="html">&lt;p&gt;Using Juju's &lt;a href="https://jujucharms.com/docs/2.0/clouds-LXD"&gt;LXD provider&lt;/a&gt; is the least-hassle way to start an
experience of Juju and its charms. However, if you have done charm
development for a while, you know making a one line of code change,
deploying charm, then wait to see the &lt;em&gt;new&lt;/em&gt; code got executed &amp;larr;
it's good 5-10 minutes per cycle. These add up quickly when you are in
the middle of churning out code to get your ideas written. Not to
mention creating a new &lt;code&gt;machine&lt;/code&gt; is 2x slower, and bootstraping a new
controller is even worse. I had experience in Shanghai sitting 30+
minutes for a new controller due to the location's unreliable
connections, and sometimes it just failed w/ a timeout. &lt;/p&gt;
&lt;p&gt;What to do? The goal is to create a way to reduce this trial-error
cycle as much as possible so to speed up code development.&lt;/p&gt;
&lt;h1&gt;Challenge&lt;/h1&gt;
&lt;p&gt;If you watch &lt;code&gt;juju debug-log&lt;/code&gt; while it deploys a charm, you start to
realize that there are roughly seven steps:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;creating a container (will discuss &lt;code&gt;--to&lt;/code&gt; switch later)&lt;/li&gt;
&lt;li&gt;update/upgrade the new container&lt;/li&gt;
&lt;li&gt;provisioning container with Juju agent&lt;/li&gt;
&lt;li&gt;installing charm software. This itself includes:&lt;/li&gt;
&lt;li&gt;transfering charm files to container&lt;/li&gt;
&lt;li&gt;installing &lt;code&gt;/wheelhouse&lt;/code&gt; packages&lt;/li&gt;
&lt;li&gt;run charm's &lt;code&gt;hooks/install&lt;/code&gt; to kick of charm code&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;The last step is what we care about, the rest are there to construct a
runtime environment for charm code. So, can we eliminate them or
reduce them?&lt;/p&gt;
&lt;p&gt;Also, the most time consuming pieces are when Juju/agent is hitting
a remote repo for system update or package installation. Therefore,
limiting these is greatly desired.&lt;/p&gt;
&lt;h1&gt;Remedy&lt;/h1&gt;
&lt;p&gt;Strategy we are to present here is to use a custom-built image so that
it has &lt;strong&gt;all&lt;/strong&gt; required package pre-installed. This does not eliminate
repo-hit completly, but it reduces the necessity of downloading 100+M
of packages, each time! Package installer (&lt;code&gt;apt&lt;/code&gt;, &lt;code&gt;yum&lt;/code&gt;, &lt;code&gt;pip&lt;/code&gt; ) will
simply reply &lt;em&gt;package xyz is already installed&lt;/em&gt; &amp;mdash; much faster.&lt;/p&gt;
&lt;h2&gt;create a gold image&lt;/h2&gt;
&lt;p&gt;First, we create a gold copy that has everything pre-installed,
pre-configured as much as you'd like to:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;Follow &lt;a href="https://insights.ubuntu.com/2016/03/22/lxd-2-0-your-first-lxd-container/"&gt;instruction&lt;/a&gt; to launch a standard image:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;```shell
$ lxc launch ubuntu:14.04 gold
```
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;SSH to your new container, install system packages:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;```&lt;span class="nv"&gt;shell&lt;/span&gt;
$&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nv"&gt;lxc&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;exec&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nv"&gt;gold&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nv"&gt;bash&lt;/span&gt;
$&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nv"&gt;apt&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nv"&gt;update&lt;/span&gt;
$&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nv"&gt;apt&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nv"&gt;install&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nv"&gt;build&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="nv"&gt;essential&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nv"&gt;libssl&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="nv"&gt;dev&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nv"&gt;libffi&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="nv"&gt;dev&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nv"&gt;python&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="nv"&gt;pip&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nv"&gt;python&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="nv"&gt;dev&lt;/span&gt;
```
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Update user &lt;code&gt;ubuntu&lt;/code&gt;'s password:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;```shell
$ passwd ubuntu
```
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Enable SSH password authentication:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;```shell
$ nano /etc/ssh/sshd_config
&lt;span class="gh"&gt;#&lt;/span&gt; Change to no to disable tunnelled clear text passwords
PasswordAuthentication yes # &amp;lt;-- change to &amp;quot;yes&amp;quot;
```
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Upgrade &lt;code&gt;pip&lt;/code&gt;. This is necessary to install &lt;code&gt;/wheelhouse&lt;/code&gt; contents
   properly.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;```shell
$ pip install pip --upgrade
```
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;In your charm's dist, there will be a &lt;code&gt;/wheelhouse&lt;/code&gt; folder, which
   hosts a list of &lt;code&gt;.gz&lt;/code&gt; files and such. They are python packages
   needed by charm. Since they are packages into each charm, it makes
   file transfer to container slower, and installing them is rather
   redundant if a container is hosting multiple charms.&lt;/p&gt;
&lt;p&gt;Using &lt;code&gt;scp&lt;/code&gt; and &lt;code&gt;ubuntu&lt;/code&gt; credential (see step #3) to copy
&lt;code&gt;/wheelhouse&lt;/code&gt; to container. Install them:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;```shell
$ pip install wheelhouse/*
```
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Any other customization you have in mind, go ahead with it.&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h2&gt;create an image for Juju&lt;/h2&gt;
&lt;p&gt;Using the gold image, we are a few command lines away to create a new
LXD image Juju (2.1+) uses when creating a new machine:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;Create a snapshot of the &lt;code&gt;gold&lt;/code&gt; image:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;```shell
$ lxc snapshot gold
```
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;To verify snapshot, &lt;code&gt;lxc info gold&lt;/code&gt;, an example output:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="err"&gt;```&lt;/span&gt;&lt;span class="n"&gt;shell&lt;/span&gt;
&lt;span class="n"&gt;fengxia&lt;/span&gt;&lt;span class="err"&gt;@&lt;/span&gt;&lt;span class="n"&gt;local&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;charmdev&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="o"&gt;$&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;lxc&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;info&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;gold&lt;/span&gt;
&lt;span class="n"&gt;Name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;gold&lt;/span&gt;
&lt;span class="n"&gt;Remote&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;unix&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="k"&gt;var&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;lib&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;lxd&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;unix&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;socket&lt;/span&gt;
&lt;span class="n"&gt;Architecture&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;x86_64&lt;/span&gt;
&lt;span class="n"&gt;Created&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;2017&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="mi"&gt;08&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="mi"&gt;30&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;21&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="mi"&gt;13&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;UTC&lt;/span&gt;
&lt;span class="n"&gt;Status&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;Running&lt;/span&gt;
&lt;span class="n"&gt;Type&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;persistent&lt;/span&gt;
&lt;span class="n"&gt;Profiles&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;default&lt;/span&gt;
&lt;span class="n"&gt;Pid&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;1858&lt;/span&gt;
&lt;span class="n"&gt;Ips&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
&lt;span class="n"&gt;eth0&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt;   &lt;/span&gt;&lt;span class="n"&gt;inet&lt;/span&gt;&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="mf"&gt;10.129&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="mf"&gt;186.150&lt;/span&gt;&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="n"&gt;vethWQ2SSG&lt;/span&gt;
&lt;span class="n"&gt;eth0&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt;   &lt;/span&gt;&lt;span class="n"&gt;inet6&lt;/span&gt;&lt;span class="w"&gt;   &lt;/span&gt;&lt;span class="n"&gt;fe80&lt;/span&gt;&lt;span class="p"&gt;::&lt;/span&gt;&lt;span class="mi"&gt;216&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="n"&gt;eff&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="n"&gt;fede&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="mi"&gt;5152&lt;/span&gt;&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="n"&gt;vethWQ2SSG&lt;/span&gt;
&lt;span class="n"&gt;lo&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;inet&lt;/span&gt;&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="mf"&gt;127.0&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="mf"&gt;0.1&lt;/span&gt;
&lt;span class="n"&gt;lo&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;inet6&lt;/span&gt;&lt;span class="w"&gt;   &lt;/span&gt;&lt;span class="p"&gt;::&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;
&lt;span class="n"&gt;Resources&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
&lt;span class="n"&gt;Processes&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;15&lt;/span&gt;
&lt;span class="n"&gt;Memory&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;usage&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
&lt;span class="n"&gt;Memory&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;current&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mf"&gt;18.14&lt;/span&gt;&lt;span class="n"&gt;MB&lt;/span&gt;
&lt;span class="n"&gt;Memory&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;peak&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mf"&gt;116.85&lt;/span&gt;&lt;span class="n"&gt;MB&lt;/span&gt;
&lt;span class="n"&gt;Network&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;usage&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
&lt;span class="n"&gt;eth0&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="n"&gt;Bytes&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;received&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mf"&gt;30.95&lt;/span&gt;&lt;span class="n"&gt;kB&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="n"&gt;Bytes&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;sent&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mf"&gt;7.24&lt;/span&gt;&lt;span class="n"&gt;kB&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="n"&gt;Packets&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;received&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;286&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="n"&gt;Packets&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;sent&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;64&lt;/span&gt;
&lt;span class="n"&gt;lo&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="n"&gt;Bytes&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;received&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="n"&gt;B&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="n"&gt;Bytes&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;sent&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="n"&gt;B&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="n"&gt;Packets&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;received&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="n"&gt;Packets&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;sent&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;
&lt;span class="n"&gt;Snapshots&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
&lt;span class="n"&gt;snap3&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;taken&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;at&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;2017&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="mi"&gt;09&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="mi"&gt;04&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;00&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="mi"&gt;18&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;UTC&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;stateless&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="err"&gt;```&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Export snapshot to an image. Note: the &lt;a href="https://bugs.launchpad.net/juju/+bug/1650651"&gt;alias format&lt;/a&gt; is
   significant (&lt;code&gt;juju/$series/$arch&lt;/code&gt;).&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;```shell
$ lxc publish gold/snap3 --alias juju/trusty/amd64
```
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;You can verify image by &lt;code&gt;lxc image list&lt;/code&gt;. A sample output:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;fengxia@local-charmdev:~$&lt;span class="w"&gt; &lt;/span&gt;lxc&lt;span class="w"&gt; &lt;/span&gt;image&lt;span class="w"&gt; &lt;/span&gt;list
+------------------------+--------------+--------+-----------------------------------------------+--------+----------+------------------------------+
&lt;span class="p"&gt;|&lt;/span&gt;&lt;span class="w"&gt;         &lt;/span&gt;ALIAS&lt;span class="w"&gt;          &lt;/span&gt;&lt;span class="p"&gt;|&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;FINGERPRINT&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="p"&gt;|&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;PUBLIC&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;|&lt;/span&gt;&lt;span class="w"&gt;                  &lt;/span&gt;DESCRIPTION&lt;span class="w"&gt;                  &lt;/span&gt;&lt;span class="p"&gt;|&lt;/span&gt;&lt;span class="w"&gt;  &lt;/span&gt;ARCH&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="p"&gt;|&lt;/span&gt;&lt;span class="w"&gt;   &lt;/span&gt;SIZE&lt;span class="w"&gt;   &lt;/span&gt;&lt;span class="p"&gt;|&lt;/span&gt;&lt;span class="w"&gt;         &lt;/span&gt;UPLOAD&lt;span class="w"&gt; &lt;/span&gt;DATE&lt;span class="w"&gt;          &lt;/span&gt;&lt;span class="p"&gt;|&lt;/span&gt;
+------------------------+--------------+--------+-----------------------------------------------+--------+----------+------------------------------+
&lt;span class="p"&gt;|&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;juju/trusty/amd64&lt;span class="w"&gt;      &lt;/span&gt;&lt;span class="p"&gt;|&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;b95d3291e3ae&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;|&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;no&lt;span class="w"&gt;     &lt;/span&gt;&lt;span class="p"&gt;|&lt;/span&gt;&lt;span class="w"&gt;                                               &lt;/span&gt;&lt;span class="p"&gt;|&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;x86_64&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;|&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="m"&gt;377&lt;/span&gt;.03MB&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;|&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;Sep&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="m"&gt;6&lt;/span&gt;,&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="m"&gt;2017&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;at&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="m"&gt;2&lt;/span&gt;:10pm&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;UTC&lt;span class="o"&gt;)&lt;/span&gt;&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="p"&gt;|&lt;/span&gt;
+------------------------+--------------+--------+-----------------------------------------------+--------+----------+------------------------------+
&lt;span class="p"&gt;|&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;ubuntu-xenial&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="m"&gt;1&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;more&lt;span class="o"&gt;)&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;|&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;58f90cbf6892&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;|&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;no&lt;span class="w"&gt;     &lt;/span&gt;&lt;span class="p"&gt;|&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;ubuntu&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="m"&gt;16&lt;/span&gt;.04&lt;span class="w"&gt; &lt;/span&gt;LTS&lt;span class="w"&gt; &lt;/span&gt;amd64&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;release&lt;span class="o"&gt;)&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="m"&gt;20170815&lt;/span&gt;.1&lt;span class="o"&gt;)&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;|&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;x86_64&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;|&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="m"&gt;154&lt;/span&gt;.11MB&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;|&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;Aug&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="m"&gt;17&lt;/span&gt;,&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="m"&gt;2017&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;at&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="m"&gt;4&lt;/span&gt;:19pm&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;UTC&lt;span class="o"&gt;)&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;|&lt;/span&gt;
+------------------------+--------------+--------+-----------------------------------------------+--------+----------+------------------------------+
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;h1&gt;To use gold image&lt;/h1&gt;
&lt;p&gt;There are two ways to use the gold copy &amp;mdash; either have Juju
automatically use this image for new machine (requires Juju v2.1+), or
create machines &lt;strong&gt;manually&lt;/strong&gt;, for example, via an external
orchestration tool.&lt;/p&gt;
&lt;h2&gt;Juju uses gold image&lt;/h2&gt;
&lt;p&gt;The only requirement is to have Juju version 2.1+.&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;(optional) Delete standard LXD image:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;```shell
$ lxc image delete ubuntu-trusty
```
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Update juju to 2.1+:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;```shell
$ sudo snap install juju --classic
```
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;After upgrading juju, re-bootstrap a controller (&lt;code&gt;juju bootstrap
   localhost [pick a name]&lt;/code&gt;).&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;code&gt;juju deploy mycharm&lt;/code&gt;: will create a new machine using a local
   image w/ alias &lt;code&gt;juju/trusty/amd64&lt;/code&gt; for new machine. This can be
   verified by &lt;code&gt;watch -n 1 lxc image list&lt;/code&gt; to monitor whether it will
   still download a stock image.&lt;/li&gt;
&lt;/ol&gt;
&lt;h2&gt;add machine manually&lt;/h2&gt;
&lt;p&gt;If there is other orchestration mechanism outside Juju, we can also
have it create machines &lt;em&gt;manually&lt;/em&gt;:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;Create a new LXD container using the image (or snapshot):&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;```shell
$ lxc launch juju/trusty/amd64 testme &amp;amp;&amp;amp; lxc start testme
$ lxc copy gold/snap3 testme &amp;amp;&amp;amp; lxc start me
```
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Add machine to Juju:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;```shell
$ juju add-machine ssh:ubuntu@[container&amp;#39;s ip]
```
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;juju deploy mycharm --to [machine #]&lt;/code&gt;. Without the &lt;code&gt;--to&lt;/code&gt;, Juju
   will create a new machine by default. &lt;span class="myhighlight"&gt;Be aware.&lt;/span&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h1&gt;No more update&lt;/h1&gt;
&lt;p&gt;To speed up the machine even further, we need to disable system
update (on by default) so newly created machine (by Juju) will not hit
repo for system updates.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;$&lt;span class="w"&gt; &lt;/span&gt;juju&lt;span class="w"&gt; &lt;/span&gt;model-config&lt;span class="w"&gt; &lt;/span&gt;enable-os-refresh-update&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="nb"&gt;false&lt;/span&gt;
$&lt;span class="w"&gt; &lt;/span&gt;juju&lt;span class="w"&gt; &lt;/span&gt;model-config&lt;span class="w"&gt; &lt;/span&gt;enable-os-upgrade&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="nb"&gt;false&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;h1&gt;Comparison results&lt;/h1&gt;</content><category term="openstack"></category><category term="lenovo"></category></entry><entry><title>Charm Ansible integration</title><link href="https://fengxia41103.github.io/myblog/charm%20ansible%20integration.html" rel="alternate"></link><published>2017-07-06T13:00:00-04:00</published><updated>2017-07-06T13:00:00-04:00</updated><author><name>Feng Xia</name></author><id>tag:fengxia41103.github.io,2017-07-06:/myblog/charm ansible integration.html</id><summary type="html">&lt;p&gt;Let's face it. Ansible has the mouth (and market) share these
days. For our modeling purpose, we are to utilize its procedural
strength to carry out actions, which provides an abstraction instead
of coding in charm's Python files.&lt;/p&gt;
&lt;p&gt;Design objectives:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Design as reusable &lt;a href="https://jujucharms.com/docs/2.1/developer-layers"&gt;layer(s)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Be compatible with Ubuntu and CentOS&lt;/li&gt;
&lt;li&gt;Simple pattern to execute a playbook&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Assumption:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Playbooks will be local (in charm) so to maintain the
   atomic nature of a HW charm &amp;mdash; the model contains both the
   declaration of attributes and actions to handle runtime state transitions.&lt;/li&gt;
&lt;/ol&gt;
&lt;h1&gt;Method 1: layer-ansible&lt;/h1&gt;
&lt;p&gt;Method 1 is to use an existing project, &lt;a href="https://github.com/chuckbutler/charms.ansible"&gt;layer-ansible&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Examine its code reveals a typical pattern one would use to introduce
a new function:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;Install Ansible. The approach it took is to use a
   &lt;code&gt;ppa:ansible/ansible&lt;/code&gt; source and installed by calling
   &lt;code&gt;charmhelpers.fetch.apt_install&lt;/code&gt;. The key issue here is using &lt;code&gt;ppa&lt;/code&gt;
   which is an &lt;strong&gt;hardcoded&lt;/strong&gt; Ubuntu approach.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;```python
def install_ansible_support(from_ppa=True, ppa_location=&amp;#39;ppa:ansible/ansible&amp;#39;):
  if from_ppa:
      charmhelpers.fetch.add_source(ppa_location)
      charmhelpers.fetch.apt_update(fatal=True)
  charmhelpers.fetch.apt_install(&amp;#39;ansible&amp;#39;)
  with â€¦&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/li&gt;&lt;/ol&gt;</summary><content type="html">&lt;p&gt;Let's face it. Ansible has the mouth (and market) share these
days. For our modeling purpose, we are to utilize its procedural
strength to carry out actions, which provides an abstraction instead
of coding in charm's Python files.&lt;/p&gt;
&lt;p&gt;Design objectives:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Design as reusable &lt;a href="https://jujucharms.com/docs/2.1/developer-layers"&gt;layer(s)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Be compatible with Ubuntu and CentOS&lt;/li&gt;
&lt;li&gt;Simple pattern to execute a playbook&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Assumption:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Playbooks will be local (in charm) so to maintain the
   atomic nature of a HW charm &amp;mdash; the model contains both the
   declaration of attributes and actions to handle runtime state transitions.&lt;/li&gt;
&lt;/ol&gt;
&lt;h1&gt;Method 1: layer-ansible&lt;/h1&gt;
&lt;p&gt;Method 1 is to use an existing project, &lt;a href="https://github.com/chuckbutler/charms.ansible"&gt;layer-ansible&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Examine its code reveals a typical pattern one would use to introduce
a new function:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;Install Ansible. The approach it took is to use a
   &lt;code&gt;ppa:ansible/ansible&lt;/code&gt; source and installed by calling
   &lt;code&gt;charmhelpers.fetch.apt_install&lt;/code&gt;. The key issue here is using &lt;code&gt;ppa&lt;/code&gt;
   which is an &lt;strong&gt;hardcoded&lt;/strong&gt; Ubuntu approach.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;```python
def install_ansible_support(from_ppa=True, ppa_location=&amp;#39;ppa:ansible/ansible&amp;#39;):
  if from_ppa:
      charmhelpers.fetch.add_source(ppa_location)
      charmhelpers.fetch.apt_update(fatal=True)
  charmhelpers.fetch.apt_install(&amp;#39;ansible&amp;#39;)
  with open(ansible_hosts_path, &amp;#39;w+&amp;#39;) as hosts_file:
      hosts_file.write(&amp;#39;localhost ansible_connection=local&amp;#39;)
```
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Helper function to execute. Clearly the approach here is to use
   &lt;code&gt;subprocess.check_call&lt;/code&gt; which is calling &lt;code&gt;ansible-playbook&lt;/code&gt; as
   CLI. This works fine but then think about all the CLI switches that
   &lt;code&gt;ansible-playbook&lt;/code&gt; can take which in turn need to be exposed
   through this function &amp;larr; currently it supports &lt;code&gt;tags&lt;/code&gt; and &lt;code&gt;extra-vars&lt;/code&gt;.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="err"&gt;```&lt;/span&gt;&lt;span class="n"&gt;python&lt;/span&gt;
&lt;span class="n"&gt;def&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;apply_playbook&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;playbook&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;tags&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;None&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;extra_vars&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;None&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="o"&gt;....&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="n"&gt;call&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;
&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;ansible-playbook&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;-c&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;local&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="n"&gt;playbook&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="k"&gt;if&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;tags&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="n"&gt;call&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;extend&lt;/span&gt;&lt;span class="p"&gt;([&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;--tags&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;{}&amp;#39;&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;format&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;tags&lt;/span&gt;&lt;span class="p"&gt;)])&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="k"&gt;if&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;extra_vars&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="n"&gt;extra&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;&lt;span class="si"&gt;%s&lt;/span&gt;&lt;span class="s2"&gt;=&lt;/span&gt;&lt;span class="si"&gt;%s&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;%&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;k&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;v&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;for&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;k&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;v&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="ow"&gt;in&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;extra_vars&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;items&lt;/span&gt;&lt;span class="p"&gt;()]&lt;/span&gt;
&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="n"&gt;call&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;extend&lt;/span&gt;&lt;span class="p"&gt;([&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;--extra-vars&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;&amp;quot; &amp;quot;&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;join&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;extra&lt;/span&gt;&lt;span class="p"&gt;)])&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="n"&gt;subprocess&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;check_call&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;call&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;env&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;env&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="err"&gt;```&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;A nice feature of this library is the implementation of &lt;a href="https://jujucharms.com/docs/stable/authors-charm-hooks"&gt;hooks&lt;/a&gt; and
&lt;a href="https://jujucharms.com/docs/stable/actions"&gt;actions&lt;/a&gt; so that Ansible can answer to &lt;code&gt;hook&lt;/code&gt; event and can be
executed as &lt;code&gt;action&lt;/code&gt;.&lt;/p&gt;
&lt;h1&gt;Method 2: layer-myansible&lt;/h1&gt;
&lt;p&gt;This method is inspired by &lt;a href="https://serversforhackers.com/running-ansible-2-programmatically"&gt;this article&lt;/a&gt;. This is to take
advantage of the &lt;a href="http://docs.ansible.com/ansible/dev_guide/developing_api.html"&gt;Ansible Python API&lt;/a&gt;. &lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;Install prerequisites. Installing &lt;code&gt;Ansible&lt;/code&gt; will fail on a vanilla
   Ubuntu because it misses a few dependencies. Using &lt;a href="https://github.com/juju-solutions/layer-basic"&gt;layer-basic&lt;/a&gt;
   by listing them out in &lt;code&gt;layer.yaml&lt;/code&gt;:&lt;/p&gt;
&lt;p&gt;&lt;code&gt;yaml
    includes:
      - 'layer:basic'
    options:
      basic:
        packages:
          - libffi-dev
          - libssl-dev
          - python
          - python3-dev&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Install Ansible.  Use Python &lt;a href="https://packaging.python.org/discussions/wheel-vs-egg/?highlight=wheel"&gt;wheel&lt;/a&gt; supported
   by &lt;a href="https://github.com/juju-solutions/layer-basic"&gt;layer-basic&lt;/a&gt;. In &lt;code&gt;wheelhouse.txt&lt;/code&gt;:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;```shell
ansible==2.2.0
```
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;ansible.cfg&lt;/code&gt;. Instead of using a global config, this is local so
   each charm can have its own variation if desired.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="err"&gt;```&lt;/span&gt;&lt;span class="n"&gt;shell&lt;/span&gt;
&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="n"&gt;defaults&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt;
&lt;span class="n"&gt;inventory&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;hosts&lt;/span&gt;
&lt;span class="n"&gt;log_path&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="nf"&gt;var&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="nf"&gt;log&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;ansible&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;ansible&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;log&lt;/span&gt;
&lt;span class="n"&gt;remote_tmp&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="err"&gt;$&lt;/span&gt;&lt;span class="n"&gt;HOME&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;ansible&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;tmp&lt;/span&gt;
&lt;span class="n"&gt;local_tmp&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="err"&gt;$&lt;/span&gt;&lt;span class="n"&gt;HOME&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;ansible&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;tmp&lt;/span&gt;
&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="n"&gt;ssh_connection&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt;
&lt;span class="n"&gt;ssh_args&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;o&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;UserKnownHostsFile&lt;/span&gt;&lt;span class="o"&gt;=/&lt;/span&gt;&lt;span class="n"&gt;dev&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="k"&gt;null&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;o&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;StrictHostKeyChecking&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="k"&gt;no&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;o&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;IdentitiesOnly&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;yes&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;o&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;ControlMaster&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;auto&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;o&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;ControlPersist&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;60&lt;/span&gt;&lt;span class="n"&gt;s&lt;/span&gt;
&lt;span class="n"&gt;control_path&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;~/&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;ansible&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;cp&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;ansible&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;ssh&lt;/span&gt;&lt;span class="o"&gt;-%%&lt;/span&gt;&lt;span class="n"&gt;h&lt;/span&gt;&lt;span class="o"&gt;-%%&lt;/span&gt;&lt;span class="n"&gt;p&lt;/span&gt;&lt;span class="o"&gt;-%%&lt;/span&gt;&lt;span class="n"&gt;r&lt;/span&gt;
&lt;span class="err"&gt;```&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Options. Constructed a class to be the abstraction of Ansible
   options:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="err"&gt;```&lt;/span&gt;&lt;span class="n"&gt;python&lt;/span&gt;
&lt;span class="k"&gt;class&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;Options&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;object&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="sd"&gt;&amp;quot;&amp;quot;&amp;quot;&lt;/span&gt;
&lt;span class="sd"&gt;    Options class to replace Ansible OptParser&lt;/span&gt;
&lt;span class="sd"&gt;    &amp;quot;&amp;quot;&amp;quot;&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="o"&gt;....&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="n"&gt;verbosity&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;None&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="n"&gt;inventory&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;None&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="n"&gt;listhosts&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;None&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="n"&gt;subset&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;None&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="n"&gt;module_paths&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;None&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="n"&gt;extra_vars&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;None&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="n"&gt;forks&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;None&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="n"&gt;ask_vault_pass&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;None&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="n"&gt;vault_password_files&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;None&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="n"&gt;new_vault_password_file&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;None&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="n"&gt;output_file&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;None&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="n"&gt;tags&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;None&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="n"&gt;skip_tags&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;[],&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="n"&gt;one_line&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;None&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="n"&gt;tree&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;None&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="n"&gt;ask_sudo_pass&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;None&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="n"&gt;ask_su_pass&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;None&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="n"&gt;sudo&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;None&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="n"&gt;sudo_user&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;None&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="n"&gt;become&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;None&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="n"&gt;become_method&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;None&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="n"&gt;become_user&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;None&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="n"&gt;become_ask_pass&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;None&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="n"&gt;ask_pass&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;None&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="n"&gt;private_key_file&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;None&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="n"&gt;remote_user&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;None&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="n"&gt;connection&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;None&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="n"&gt;timeout&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;None&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="n"&gt;ssh_common_args&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;None&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="n"&gt;sftp_extra_args&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;None&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="n"&gt;scp_extra_args&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;None&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="n"&gt;ssh_extra_args&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;None&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="n"&gt;poll_interval&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;None&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="n"&gt;seconds&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;None&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="n"&gt;check&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;None&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="n"&gt;syntax&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;None&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="n"&gt;diff&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;None&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="n"&gt;force_handlers&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;None&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="n"&gt;flush_cache&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;None&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="n"&gt;listtasks&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;None&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="n"&gt;listtags&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;[],&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="n"&gt;module_path&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;None&lt;/span&gt;
&lt;span class="err"&gt;```&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Playbook execution. Running it is to use
   Ansible's API call &lt;code&gt;PlaybookExecutor&lt;/code&gt;.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="err"&gt;```&lt;/span&gt;&lt;span class="n"&gt;python&lt;/span&gt;
&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;pbex&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;playbook_executor&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;PlaybookExecutor&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="n"&gt;playbooks&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;pbs&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="n"&gt;inventory&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;inventory&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="n"&gt;variable_manager&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;variable_manager&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="n"&gt;loader&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;loader&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="n"&gt;options&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;options&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="n"&gt;passwords&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;passwords&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="o"&gt;....&lt;/span&gt;
&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;pbex&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;run&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="err"&gt;```&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;/li&gt;
&lt;/ol&gt;
&lt;h1&gt;Charm integration&lt;/h1&gt;
&lt;p&gt;Using &lt;code&gt;layer-myansible&lt;/code&gt; for example, integrating with charm takes the
followings:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;Include layer. In &lt;code&gt;layer.yaml&lt;/code&gt;:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;```yaml
includes:
  - &amp;#39;layer:basic&amp;#39;
  - &amp;#39;layer:myansible&amp;#39;
```
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Create a &lt;code&gt;playbooks&lt;/code&gt; folder and place playbooks here:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;```shell
.
â”œâ”€â”€ config.yaml
â”œâ”€â”€ icon.svg
â”œâ”€â”€ layer.yaml
â”œâ”€â”€ metadata.yaml
â”œâ”€â”€ playbooks
â”‚Â Â  â””â”€â”€ test.yaml
â””â”€â”€ reactive
    â””â”€â”€ solution.py
```
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Using &lt;code&gt;config.yaml&lt;/code&gt; to pass in playbook for each action that is
   defined in the charm states. For example, define &lt;code&gt;test.yaml&lt;/code&gt; for an
   action in &lt;code&gt;state-0&lt;/code&gt;:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="err"&gt;```&lt;/span&gt;&lt;span class="nx"&gt;yaml&lt;/span&gt;
&lt;span class="nx"&gt;options&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="nx"&gt;state&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="nx"&gt;playbook&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="k"&gt;type&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="kt"&gt;string&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="k"&gt;default&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s"&gt;&amp;quot;test.yaml&amp;quot;&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="nx"&gt;description&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s"&gt;&amp;quot;Playbook for...&amp;quot;&lt;/span&gt;
&lt;span class="err"&gt;```&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Define the playbook. For example, a &lt;em&gt;hello world&lt;/em&gt; that will create
   a file `/tmp/testfile.txt'.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;```yaml
-&lt;span class="w"&gt; &lt;/span&gt;name:&lt;span class="w"&gt; &lt;/span&gt;This&lt;span class="w"&gt; &lt;/span&gt;is&lt;span class="w"&gt; &lt;/span&gt;a&lt;span class="w"&gt; &lt;/span&gt;hello-world&lt;span class="w"&gt; &lt;/span&gt;example
&lt;span class="w"&gt;  &lt;/span&gt;hosts:&lt;span class="w"&gt; &lt;/span&gt;127.0.0.1
&lt;span class="w"&gt;  &lt;/span&gt;tasks:
&lt;span class="w"&gt;  &lt;/span&gt;-&lt;span class="w"&gt; &lt;/span&gt;name:&lt;span class="w"&gt; &lt;/span&gt;Create&lt;span class="w"&gt; &lt;/span&gt;a&lt;span class="w"&gt; &lt;/span&gt;file&lt;span class="w"&gt; &lt;/span&gt;called&lt;span class="w"&gt; &lt;/span&gt;&amp;#39;/tmp/testfile.txt&amp;#39;&lt;span class="w"&gt; &lt;/span&gt;with&lt;span class="w"&gt; &lt;/span&gt;the&lt;span class="w"&gt; &lt;/span&gt;content&lt;span class="w"&gt; &lt;/span&gt;&amp;#39;hello&lt;span class="w"&gt; &lt;/span&gt;world&amp;#39;.
&lt;span class="w"&gt;    &lt;/span&gt;copy:&lt;span class="w"&gt; &lt;/span&gt;content=&amp;quot;hello&lt;span class="w"&gt; &lt;/span&gt;world\n&amp;quot;&lt;span class="w"&gt; &lt;/span&gt;dest=/tmp/testfile.txt
&lt;span class="w"&gt;    &lt;/span&gt;tags:
&lt;span class="w"&gt;      &lt;/span&gt;-&lt;span class="w"&gt; &lt;/span&gt;sth
```
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Note that &lt;code&gt;tags&lt;/code&gt; value &lt;code&gt;sth&lt;/code&gt; must match playbook run call (see
below).&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;In charm &lt;code&gt;.py&lt;/code&gt; file, &lt;code&gt;from charms.layer.task import Runner&lt;/code&gt;, then
   in &lt;code&gt;state-0&lt;/code&gt; to call given playbook:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="err"&gt;```&lt;/span&gt;&lt;span class="n"&gt;python&lt;/span&gt;
&lt;span class="n"&gt;playbook&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;config&lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="n"&gt;&amp;#39;state-0-playbook&amp;#39;&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt;
&lt;span class="n"&gt;runner&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;Runner&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="n"&gt;tags&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;sth&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="err"&gt;#&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="c1"&gt;-- must match the tag in the playbook&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="k"&gt;connection&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;local&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="err"&gt;#&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="c1"&gt;-- must be &amp;quot;local&amp;quot;&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="n"&gt;hostnames&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;127.0.0.1&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="err"&gt;#&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="c1"&gt;-- assuming execution in localhost&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="n"&gt;playbooks&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="n"&gt;playbook&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="n"&gt;private_key_file&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="n"&gt;run_data&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="err"&gt;{}&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="n"&gt;become_pass&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="n"&gt;verbosity&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;
&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;stats&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;runner&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;run&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="err"&gt;```&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;That's it. Now you can build a charm by including &lt;code&gt;layer-myansible&lt;/code&gt;
and run any playbooks in your charm by following this design pattern
while taking full advantage of the &lt;a href="http://docs.ansible.com/ansible/dev_guide/developing_api.html"&gt;Ansible Python API&lt;/a&gt;. Beautiful.&lt;/p&gt;</content><category term="openstack"></category><category term="lenovo"></category></entry><entry><title>Charm layer-basic</title><link href="https://fengxia41103.github.io/myblog/charm%20layer-basic.html" rel="alternate"></link><published>2017-05-29T09:22:00-04:00</published><updated>2017-05-29T09:22:00-04:00</updated><author><name>Feng Xia</name></author><id>tag:fengxia41103.github.io,2017-05-29:/myblog/charm layer-basic.html</id><summary type="html">&lt;p&gt;Have you ever wondered what &lt;a href="https://github.com/juju-solutions/layer-basic.git"&gt;layer-basic&lt;/a&gt; is for? and why every
charm needs to include it? In this article we will take a look
at its code base to decipher this mystery.&lt;/p&gt;
&lt;h1&gt;Hooks&lt;/h1&gt;
&lt;p&gt;We already know hooks are hardcoded. Juju expects certain hooks and
hook sequence is always executed in an order that is dictated by Juju
code.&lt;/p&gt;
&lt;figure class="s12 center"&gt;
  &lt;img src="images/charm%20hooks.png" /&gt;
  &lt;figcaption&gt;Sequence of charm hooks&lt;/figcaption&gt;
&lt;/figure&gt;

&lt;p&gt;What do we see in hooks? If you run &lt;code&gt;charm build&lt;/code&gt; and examine the &lt;code&gt;dist&lt;/code&gt; folder,
hooks live in &lt;code&gt;dist/yourcharm/hooks&lt;/code&gt; folder:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;.
â”œâ”€â”€&lt;span class="w"&gt; &lt;/span&gt;config-changed
â”œâ”€â”€&lt;span class="w"&gt; &lt;/span&gt;hook.template
â”œâ”€â”€&lt;span class="w"&gt; &lt;/span&gt;install
â”œâ”€â”€&lt;span class="w"&gt; &lt;/span&gt;leader-elected
â”œâ”€â”€&lt;span class="w"&gt; &lt;/span&gt;leader-settings-changed
â”œâ”€â”€&lt;span class="w"&gt; &lt;/span&gt;relations
â”‚&lt;span class="w"&gt;Â Â  &lt;/span&gt;â””â”€â”€&lt;span class="w"&gt; &lt;/span&gt;rack-pdu
â”‚&lt;span class="w"&gt;Â Â      &lt;/span&gt;â”œâ”€â”€&lt;span class="w"&gt; &lt;/span&gt;__init__.py
â”‚&lt;span class="w"&gt;Â Â      &lt;/span&gt;â”œâ”€â”€&lt;span class="w"&gt; &lt;/span&gt;interface.yaml
â”‚&lt;span class="w"&gt;Â Â      &lt;/span&gt;â”œâ”€â”€&lt;span class="w"&gt; &lt;/span&gt;provides.py
â”‚&lt;span class="w"&gt;Â Â      &lt;/span&gt;â””â”€â”€&lt;span class="w"&gt; &lt;/span&gt;requires.py
â”œâ”€â”€&lt;span class="w"&gt; &lt;/span&gt;start
â”œâ”€â”€&lt;span class="w"&gt; &lt;/span&gt;stop
â”œâ”€â”€&lt;span class="w"&gt; &lt;/span&gt;update-status
â””â”€â”€&lt;span class="w"&gt; &lt;/span&gt;upgrade-charm
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;We know we haven't defined any custom hook code for this charm,
so how were they generated? Even more interesting is
that all hooks are strangely &lt;strong&gt;identical&lt;/strong&gt;.
Take &lt;code&gt;install&lt;/code&gt; hook script for example:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="ch"&gt;#!/usr/bin/env python3&lt;/span&gt;

&lt;span class="c1"&gt;# Load modules from $JUJU_CHARM_DIR/lib&lt;/span&gt;
&lt;span class="kn"&gt;import&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nn"&gt;sys&lt;/span&gt;

&lt;span class="kn"&gt;from&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nn"&gt;charms.layer&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;basic&lt;/span&gt;

&lt;span class="c1"&gt;# This will load and run the appropriate @hook and other decorated&lt;/span&gt;
&lt;span class="c1"&gt;# handlers from $JUJU_CHARM_DIR/reactive, $JUJU_CHARM_DIR/hooks/reactive,&lt;/span&gt;
&lt;span class="c1"&gt;# and $JUJU_CHARM_DIR/hooks â€¦&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;</summary><content type="html">&lt;p&gt;Have you ever wondered what &lt;a href="https://github.com/juju-solutions/layer-basic.git"&gt;layer-basic&lt;/a&gt; is for? and why every
charm needs to include it? In this article we will take a look
at its code base to decipher this mystery.&lt;/p&gt;
&lt;h1&gt;Hooks&lt;/h1&gt;
&lt;p&gt;We already know hooks are hardcoded. Juju expects certain hooks and
hook sequence is always executed in an order that is dictated by Juju
code.&lt;/p&gt;
&lt;figure class="s12 center"&gt;
  &lt;img src="images/charm%20hooks.png" /&gt;
  &lt;figcaption&gt;Sequence of charm hooks&lt;/figcaption&gt;
&lt;/figure&gt;

&lt;p&gt;What do we see in hooks? If you run &lt;code&gt;charm build&lt;/code&gt; and examine the &lt;code&gt;dist&lt;/code&gt; folder,
hooks live in &lt;code&gt;dist/yourcharm/hooks&lt;/code&gt; folder:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;.
â”œâ”€â”€&lt;span class="w"&gt; &lt;/span&gt;config-changed
â”œâ”€â”€&lt;span class="w"&gt; &lt;/span&gt;hook.template
â”œâ”€â”€&lt;span class="w"&gt; &lt;/span&gt;install
â”œâ”€â”€&lt;span class="w"&gt; &lt;/span&gt;leader-elected
â”œâ”€â”€&lt;span class="w"&gt; &lt;/span&gt;leader-settings-changed
â”œâ”€â”€&lt;span class="w"&gt; &lt;/span&gt;relations
â”‚&lt;span class="w"&gt;Â Â  &lt;/span&gt;â””â”€â”€&lt;span class="w"&gt; &lt;/span&gt;rack-pdu
â”‚&lt;span class="w"&gt;Â Â      &lt;/span&gt;â”œâ”€â”€&lt;span class="w"&gt; &lt;/span&gt;__init__.py
â”‚&lt;span class="w"&gt;Â Â      &lt;/span&gt;â”œâ”€â”€&lt;span class="w"&gt; &lt;/span&gt;interface.yaml
â”‚&lt;span class="w"&gt;Â Â      &lt;/span&gt;â”œâ”€â”€&lt;span class="w"&gt; &lt;/span&gt;provides.py
â”‚&lt;span class="w"&gt;Â Â      &lt;/span&gt;â””â”€â”€&lt;span class="w"&gt; &lt;/span&gt;requires.py
â”œâ”€â”€&lt;span class="w"&gt; &lt;/span&gt;start
â”œâ”€â”€&lt;span class="w"&gt; &lt;/span&gt;stop
â”œâ”€â”€&lt;span class="w"&gt; &lt;/span&gt;update-status
â””â”€â”€&lt;span class="w"&gt; &lt;/span&gt;upgrade-charm
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;We know we haven't defined any custom hook code for this charm,
so how were they generated? Even more interesting is
that all hooks are strangely &lt;strong&gt;identical&lt;/strong&gt;.
Take &lt;code&gt;install&lt;/code&gt; hook script for example:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="ch"&gt;#!/usr/bin/env python3&lt;/span&gt;

&lt;span class="c1"&gt;# Load modules from $JUJU_CHARM_DIR/lib&lt;/span&gt;
&lt;span class="kn"&gt;import&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nn"&gt;sys&lt;/span&gt;

&lt;span class="kn"&gt;from&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nn"&gt;charms.layer&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;basic&lt;/span&gt;

&lt;span class="c1"&gt;# This will load and run the appropriate @hook and other decorated&lt;/span&gt;
&lt;span class="c1"&gt;# handlers from $JUJU_CHARM_DIR/reactive, $JUJU_CHARM_DIR/hooks/reactive,&lt;/span&gt;
&lt;span class="c1"&gt;# and $JUJU_CHARM_DIR/hooks/relations.&lt;/span&gt;
&lt;span class="c1"&gt;#&lt;/span&gt;
&lt;span class="c1"&gt;# See https://jujucharms.com/docs/stable/authors-charm-building&lt;/span&gt;
&lt;span class="c1"&gt;# for more information on this pattern.&lt;/span&gt;

&lt;span class="kn"&gt;from&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nn"&gt;charms.reactive&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;main&lt;/span&gt;
&lt;span class="n"&gt;sys&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;path&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;append&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;lib&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;basic&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;bootstrap_charm_deps&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="n"&gt;basic&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;init_config_states&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="n"&gt;main&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;You can diff all of them, and they are all the same! &lt;span
class="myhighlight"&gt;and they are all copies of the
&lt;code&gt;hook.template&lt;/code&gt;&lt;/span&gt;. The &lt;code&gt;from charms.layer import basic&lt;/code&gt; actually
clearly states that these hooks are &lt;span
class="myhighlight"&gt;&lt;strong&gt;depending&lt;/strong&gt;&lt;/span&gt; on &lt;code&gt;layer-basic&lt;/code&gt;. There, is
why all charms are using it.&lt;/p&gt;
&lt;p&gt;This actually gives us a clue to further investigate how dependent
charms are to &lt;code&gt;layer-basic&lt;/code&gt;. It turned out not as necessary as we
thought.&lt;/p&gt;
&lt;h1&gt;charm build&lt;/h1&gt;
&lt;p&gt;Source of &lt;code&gt;charm build&lt;/code&gt; is &lt;a href="https://github.com/juju/charm-tools"&gt;here&lt;/a&gt;. Looking into the charm &lt;code&gt;Builder&lt;/code&gt; class:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="k"&gt;class&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nc"&gt;Builder&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;object&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="sd"&gt;&amp;quot;&amp;quot;&amp;quot;&lt;/span&gt;
&lt;span class="sd"&gt;    Handle the processing of overrides, implements the policy of BuildConfig&lt;/span&gt;
&lt;span class="sd"&gt;    &amp;quot;&amp;quot;&amp;quot;&lt;/span&gt;
    &lt;span class="n"&gt;HOOK_TEMPLATE_FILE&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;path&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;hooks/hook.template&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Ah ha, that's where it is expecting &lt;code&gt;hook.template&lt;/code&gt;. Following this we have discovered the followings:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;Relatioin hooks and storage hooks are dynamically generated. For
   this to work, &lt;strong&gt;at least one layer must provide&lt;/strong&gt; &lt;code&gt;hook.template&lt;/code&gt;. The
   interesting point is that it doesn't relie on &lt;code&gt;layer-basic&lt;/code&gt;
   anymore. If you charm has a &lt;code&gt;/hooks/hook.template&lt;/code&gt;, it will work.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;```python
def plan_interfaces(self, layers, output_files, plan):
  ......
  if not meta and layers.get(&amp;#39;interfaces&amp;#39;):
      raise BuildError(
          &amp;#39;Includes interfaces but no metadata.yaml to bind them&amp;#39;)
  elif self.HOOK_TEMPLATE_FILE not in output_files:
      raise BuildError(&amp;#39;At least one layer must provide %s&amp;#39;,
                       self.HOOK_TEMPLATE_FILE)
```
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;If you didn't define those &lt;strong&gt;must-have&lt;/strong&gt; hooks, eg. &lt;code&gt;install&lt;/code&gt; hook,
charm build will happily make the dist, but it will fail at run
time. What is happening!? It turned out &lt;code&gt;charm&lt;/code&gt; binary has an option
to make &lt;code&gt;proof&lt;/code&gt;, and this will complain if you miss expected hooks
(&lt;a href="https://github.com/juju/charm-tools/issues/325"&gt;bug #325&lt;/a&gt;), but the proof isn't part of the &lt;code&gt;charm build&lt;/code&gt; process.&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;Code expected hooks:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;    ```python
    lint.check_hook(&amp;#39;install&amp;#39;, hooks_path, recommended=True)
    lint.check_hook(&amp;#39;start&amp;#39;, hooks_path, recommended=True)
    lint.check_hook(&amp;#39;stop&amp;#39;, hooks_path, recommended=True)
    if os.path.exists(os.path.join(charm_path, &amp;#39;config.yaml&amp;#39;)):
        lint.check_hook(&amp;#39;config-changed&amp;#39;, hooks_path, recommended=True)
    else:
        lint.check_hook(&amp;#39;config-changed&amp;#39;, hooks_path)
    ```
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;charm proof&lt;/code&gt; will catch the missing hooks:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="err"&gt;```&lt;/span&gt;&lt;span class="n"&gt;shell&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="n"&gt;fengxia&lt;/span&gt;&lt;span class="nv"&gt;@fengxia&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;xenial&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="nl"&gt;dev&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="o"&gt;~/&lt;/span&gt;&lt;span class="n"&gt;workspace&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;wss&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;charms&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;charm&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;pdu&lt;/span&gt;&lt;span class="err"&gt;$&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;charm&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;proof&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="nl"&gt;I&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;metadata&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;pdu&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;must&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;match&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;directory&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;charm&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;pdu&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;exactly&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;for&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;local&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;deployment&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="nl"&gt;W&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;no&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;copyright&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;file&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="nl"&gt;W&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;no&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;README&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;file&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="nl"&gt;I&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;relation&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;rack&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;has&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;no&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;hooks&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="nl"&gt;I&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;missing&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;recommended&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;hook&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;install&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="nl"&gt;I&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;missing&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;recommended&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;hook&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;start&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="err"&gt;```&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;If charm is executed, &lt;code&gt;install&lt;/code&gt; hook will run first, which
then call two functions from &lt;code&gt;layer-basic&lt;/code&gt;:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;code&gt;basic.bootstrap_charm_deps()&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;basic.init_config_states()&lt;/code&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Let's take a look them respectively.&lt;/p&gt;
&lt;h1&gt;&lt;code&gt;boostrap_charm_deps&lt;/code&gt;&lt;/h1&gt;
&lt;p&gt;This function is to setup the host Python environment for charms.&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;charm-pre-install&lt;/code&gt;: execute any nested file named &lt;code&gt;charm-pre-install&lt;/code&gt;
   under an &lt;code&gt;exec.d&lt;/code&gt; folder. It uses &lt;code&gt;check_call&lt;/code&gt; so any script will work.
   Once the script has been executed without error, a hidden file
   &lt;code&gt;.{}_{}.done'.format(module_name, submodule_name))&lt;/code&gt; will be created so
   the same preinstall script will only run ONCE &amp;rarr; this is the
   way to make the execution only once regardless the sequence of
   hooks. Therefore whoever runs it once will write this file as
   breadcrumb for others to check.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Install packages in &lt;code&gt;wheelhouse&lt;/code&gt; folder. Again, if this has run,
   a hidden file &lt;code&gt;wheelhouse/.bootstrapped&lt;/code&gt; is created so all these
   packages are installed ONCE (reference: &lt;a href="https://docs.python.org/3/install/index.html#inst-config-files"&gt;distutils&lt;/a&gt;, &lt;a href="http://setuptools.readthedocs.io/en/latest/easy_install.html#configuration-files"&gt;easy_install&lt;/a&gt;).&lt;/p&gt;
&lt;p&gt;In &lt;code&gt;wheelhouse.txt&lt;/code&gt; file:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;```shell
pip&amp;gt;=7.0.0,&amp;lt;8.2.0
charmhelpers&amp;gt;=0.4.0,&amp;lt;1.0.0
charms.reactive&amp;gt;=0.1.0,&amp;lt;2.0.0
```
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Install &lt;code&gt;python-virtualenv&lt;/code&gt; if it is included in &lt;code&gt;config.yaml&lt;/code&gt;.&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h1&gt;&lt;code&gt;init_config_states&lt;/code&gt;&lt;/h1&gt;
&lt;p&gt;This is where charms will start using Juju commands (via
&lt;a href="https://pythonhosted.org/charmhelpers/"&gt;charmhelpers&lt;/a&gt; lib) to set states with Juju controller.  I'm
copying the codes below since they are fairly self-explanatory.
Unlike &lt;code&gt;bootstrap_charm_deps&lt;/code&gt;, there is no magic file or flag to
prevent this block executed multiple times. This makes sense since
each hook can potentially modify charm states, thus run this in each
hook is necessary.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="k"&gt;def&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nf"&gt;init_config_states&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt;
    &lt;span class="kn"&gt;import&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nn"&gt;yaml&lt;/span&gt;
    &lt;span class="kn"&gt;from&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nn"&gt;charmhelpers.core&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;hookenv&lt;/span&gt;
    &lt;span class="kn"&gt;from&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nn"&gt;charms.reactive&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;set_state&lt;/span&gt;
    &lt;span class="kn"&gt;from&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nn"&gt;charms.reactive&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;toggle_state&lt;/span&gt;
    &lt;span class="n"&gt;config&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;hookenv&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;config&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
    &lt;span class="n"&gt;config_defaults&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{}&lt;/span&gt;
    &lt;span class="n"&gt;config_defs&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{}&lt;/span&gt;
    &lt;span class="n"&gt;config_yaml&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;os&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;path&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;join&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;hookenv&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;charm_dir&lt;/span&gt;&lt;span class="p"&gt;(),&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;config.yaml&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;os&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;path&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;exists&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;config_yaml&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="k"&gt;with&lt;/span&gt; &lt;span class="nb"&gt;open&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;config_yaml&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;as&lt;/span&gt; &lt;span class="n"&gt;fp&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
            &lt;span class="n"&gt;config_defs&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;yaml&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;safe_load&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;fp&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;options&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;{})&lt;/span&gt;
            &lt;span class="n"&gt;config_defaults&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="n"&gt;key&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;value&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;default&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
                               &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;key&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;value&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;config_defs&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;items&lt;/span&gt;&lt;span class="p"&gt;()}&lt;/span&gt;
    &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;opt&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;config_defs&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;keys&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt;
        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;config&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;changed&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;opt&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
            &lt;span class="n"&gt;set_state&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;config.changed&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
            &lt;span class="n"&gt;set_state&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;config.changed.&lt;/span&gt;&lt;span class="si"&gt;{}&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;format&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;opt&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
        &lt;span class="n"&gt;toggle_state&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;config.set.&lt;/span&gt;&lt;span class="si"&gt;{}&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;format&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;opt&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="n"&gt;config&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;opt&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
        &lt;span class="n"&gt;toggle_state&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;config.default.&lt;/span&gt;&lt;span class="si"&gt;{}&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;format&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;opt&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;
                     &lt;span class="n"&gt;config&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;opt&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="n"&gt;config_defaults&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;opt&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt;
    &lt;span class="n"&gt;hookenv&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;atexit&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;clear_config_states&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="k"&gt;def&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nf"&gt;clear_config_states&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt;
    &lt;span class="kn"&gt;from&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nn"&gt;charmhelpers.core&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;hookenv&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;unitdata&lt;/span&gt;
    &lt;span class="kn"&gt;from&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nn"&gt;charms.reactive&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;remove_state&lt;/span&gt;
    &lt;span class="n"&gt;config&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;hookenv&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;config&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
    &lt;span class="n"&gt;remove_state&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;config.changed&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;opt&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;config&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;keys&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt;
        &lt;span class="n"&gt;remove_state&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;config.changed.&lt;/span&gt;&lt;span class="si"&gt;{}&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;format&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;opt&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
        &lt;span class="n"&gt;remove_state&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;config.set.&lt;/span&gt;&lt;span class="si"&gt;{}&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;format&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;opt&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
        &lt;span class="n"&gt;remove_state&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;config.default.&lt;/span&gt;&lt;span class="si"&gt;{}&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;format&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;opt&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
    &lt;span class="n"&gt;unitdata&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;kv&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;flush&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;h1&gt;Conclusion&lt;/h1&gt;
&lt;p&gt;&lt;code&gt;layer-basic&lt;/code&gt; is the foundation of charm building because it provides
the entry point to call preinstall scripts, to setup the host Python
environment and to initialize charm states. It has many hardcoded
lines for using &lt;code&gt;apt-get&lt;/code&gt; CLI and expecting an Ubuntu
environment. These have been addressed somewhat in &lt;a href="https://fengxia41103.github.io/myblog/python2 charm.html"&gt;python2 charm&lt;/a&gt;.
Going forward, the code base can use some work to support host other
than Ubuntu and Python2 instead of 3.&lt;/p&gt;</content><category term="openstack"></category><category term="lenovo"></category></entry><entry><title>Juju charm Python2</title><link href="https://fengxia41103.github.io/myblog/python2%20charm.html" rel="alternate"></link><published>2017-05-27T10:00:00-04:00</published><updated>2017-05-27T10:00:00-04:00</updated><author><name>Feng Xia</name></author><id>tag:fengxia41103.github.io,2017-05-27:/myblog/python2 charm.html</id><summary type="html">&lt;p&gt;Charm is based on Python 3 while RHEL/CentOS7 ships&lt;/p&gt;</summary><content type="html">&lt;p&gt;Python 2. So we dived into charm code to see which feature is blocking
on P2 so we can run charms in CentOS.&lt;/p&gt;
&lt;p&gt;Why do we want to build Python2 charms? Charms are claimed to built
for Python3. However, the catch is that charms are also built for
Ubuntu ecosystems &lt;span class="myhighlight"&gt;ONLY&lt;/span&gt; if you care to
examine its code base.&lt;/p&gt;
&lt;p&gt;Take &lt;code&gt;__init__.py&lt;/code&gt; in &lt;a href="https://pythonhosted.org/charmhelpers/"&gt;&lt;code&gt;charmhelpers/charmhelpers&lt;/code&gt;&lt;/a&gt; for example:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="k"&gt;try&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="kn"&gt;import&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nn"&gt;six&lt;/span&gt;  &lt;span class="c1"&gt;# flake8: noqa&lt;/span&gt;
&lt;span class="k"&gt;except&lt;/span&gt; &lt;span class="ne"&gt;ImportError&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;sys&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;version_info&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;major&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="n"&gt;subprocess&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;check_call&lt;/span&gt;&lt;span class="p"&gt;([&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;apt-get&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;install&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;-y&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;python-six&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt;
    &lt;span class="k"&gt;else&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="n"&gt;subprocess&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;check_call&lt;/span&gt;&lt;span class="p"&gt;([&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;apt-get&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;install&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;-y&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;python3-six&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt;
    &lt;span class="kn"&gt;import&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nn"&gt;six&lt;/span&gt;  &lt;span class="c1"&gt;# flake8: noqa&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Command line &lt;code&gt;apt-get&lt;/code&gt; is a clue, isn't it? There are many such
hardcoded lines who shout out that Ubuntu is the way to go, and of
course, charms are developed by Canonical, and you are expected to use
them the way they were designed for.&lt;/p&gt;
&lt;p&gt;Well, this is fine &lt;span class="myhighlight"&gt;
until you want to deploy them on &lt;strong&gt;CentOS&lt;/strong&gt;.&lt;/span&gt;&lt;/p&gt;
&lt;h1&gt;CentOS challenge&lt;/h1&gt;
&lt;p&gt;CentOS and RHEL remain to dominate enterprise. CentOS7 is shipped with
Python27. We enabled &lt;code&gt;EPEL-RELEASE&lt;/code&gt; repo, but then
charm install gave us an error &lt;code&gt;no module yum found&lt;/code&gt;. The call is made
in &lt;code&gt;charmhelpers/fetch.centos.py&lt;/code&gt;, and python34 has no &lt;code&gt;yum&lt;/code&gt; module!&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="kn"&gt;import&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nn"&gt;yum&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;And trace it one step further, it came from
&lt;code&gt;charm-helpers/charmhelpers/fetch/__init__.py&lt;/code&gt;:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;__platform__&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;ubuntu&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="n"&gt;apt_cache&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;fetch&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;apt_cache&lt;/span&gt;
    &lt;span class="n"&gt;apt_install&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;fetch&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;install&lt;/span&gt;
    &lt;span class="n"&gt;apt_update&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;fetch&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;update&lt;/span&gt;
    &lt;span class="n"&gt;apt_upgrade&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;fetch&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;upgrade&lt;/span&gt;
    &lt;span class="n"&gt;apt_purge&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;fetch&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;purge&lt;/span&gt;
    &lt;span class="n"&gt;apt_mark&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;fetch&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;apt_mark&lt;/span&gt;
    &lt;span class="n"&gt;apt_hold&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;fetch&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;apt_hold&lt;/span&gt;
    &lt;span class="n"&gt;apt_unhold&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;fetch&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;apt_unhold&lt;/span&gt;
    &lt;span class="n"&gt;get_upstream_version&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;fetch&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;get_upstream_version&lt;/span&gt;
&lt;span class="k"&gt;elif&lt;/span&gt; &lt;span class="n"&gt;__platform__&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;centos&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="n"&gt;yum_search&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;fetch&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;yum_search&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Here we are making a mapping between defined function definitions and
the function names that will be used in other places in the
lib. Needless to say, CentOS definitions are missing a lot comparing
to Ubuntu's. So yes, &lt;code&gt;import yum&lt;/code&gt; is just the tip of the iceberg,
execution will break anywhere &lt;code&gt;apt_&lt;/code&gt; is called. Take &lt;code&gt;apt_install&lt;/code&gt; for
example, here is a search result where this function is expected:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;-*-&lt;span class="w"&gt; &lt;/span&gt;mode:&lt;span class="w"&gt; &lt;/span&gt;grep&lt;span class="p"&gt;;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;default-directory:&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;~/workspace/wss/hack/charmhelpers-0.15.0/&amp;quot;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;-*-
Grep&lt;span class="w"&gt; &lt;/span&gt;started&lt;span class="w"&gt; &lt;/span&gt;at&lt;span class="w"&gt; &lt;/span&gt;Sat&lt;span class="w"&gt; &lt;/span&gt;May&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="m"&gt;27&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="m"&gt;22&lt;/span&gt;:32:10

find&lt;span class="w"&gt; &lt;/span&gt;.&lt;span class="w"&gt; &lt;/span&gt;-type&lt;span class="w"&gt; &lt;/span&gt;d&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="se"&gt;\(&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;-path&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="se"&gt;\*&lt;/span&gt;/SCCS&lt;span class="w"&gt; &lt;/span&gt;-o&lt;span class="w"&gt; &lt;/span&gt;-path&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="se"&gt;\*&lt;/span&gt;/RCS&lt;span class="w"&gt; &lt;/span&gt;-o&lt;span class="w"&gt; &lt;/span&gt;-path&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="se"&gt;\*&lt;/span&gt;/CVS&lt;span class="w"&gt; &lt;/span&gt;-o&lt;span class="w"&gt; &lt;/span&gt;-path&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="se"&gt;\*&lt;/span&gt;/MCVS&lt;span class="w"&gt; &lt;/span&gt;-o&lt;span class="w"&gt; &lt;/span&gt;-path&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="se"&gt;\*&lt;/span&gt;/.src&lt;span class="w"&gt; &lt;/span&gt;-o&lt;span class="w"&gt; &lt;/span&gt;-path&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="se"&gt;\*&lt;/span&gt;/.svn&lt;span class="w"&gt; &lt;/span&gt;-o&lt;span class="w"&gt; &lt;/span&gt;-path&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="se"&gt;\*&lt;/span&gt;/.git&lt;span class="w"&gt; &lt;/span&gt;-o&lt;span class="w"&gt; &lt;/span&gt;-path&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="se"&gt;\*&lt;/span&gt;/.hg&lt;span class="w"&gt; &lt;/span&gt;-o&lt;span class="w"&gt; &lt;/span&gt;-path&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="se"&gt;\*&lt;/span&gt;/.bzr&lt;span class="w"&gt; &lt;/span&gt;-o&lt;span class="w"&gt; &lt;/span&gt;-path&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="se"&gt;\*&lt;/span&gt;/_MTN&lt;span class="w"&gt; &lt;/span&gt;-o&lt;span class="w"&gt; &lt;/span&gt;-path&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="se"&gt;\*&lt;/span&gt;/_darcs&lt;span class="w"&gt; &lt;/span&gt;-o&lt;span class="w"&gt; &lt;/span&gt;-path&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="se"&gt;\*&lt;/span&gt;/&lt;span class="se"&gt;\{&lt;/span&gt;arch&lt;span class="se"&gt;\}&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="se"&gt;\)&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;-prune&lt;span class="w"&gt; &lt;/span&gt;-o&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="se"&gt;\!&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;-type&lt;span class="w"&gt; &lt;/span&gt;d&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="se"&gt;\(&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;-name&lt;span class="w"&gt; &lt;/span&gt;.&lt;span class="se"&gt;\#\*&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;-o&lt;span class="w"&gt; &lt;/span&gt;-name&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="se"&gt;\*&lt;/span&gt;.beam&lt;span class="w"&gt; &lt;/span&gt;-o&lt;span class="w"&gt; &lt;/span&gt;-name&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="se"&gt;\*&lt;/span&gt;.vee&lt;span class="w"&gt; &lt;/span&gt;-o&lt;span class="w"&gt; &lt;/span&gt;-name&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="se"&gt;\*&lt;/span&gt;.jam&lt;span class="w"&gt; &lt;/span&gt;-o&lt;span class="w"&gt; &lt;/span&gt;-name&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="se"&gt;\*&lt;/span&gt;.hi&lt;span class="w"&gt; &lt;/span&gt;-o&lt;span class="w"&gt; &lt;/span&gt;-name&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="se"&gt;\*&lt;/span&gt;.o&lt;span class="w"&gt; &lt;/span&gt;-o&lt;span class="w"&gt; &lt;/span&gt;-name&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="se"&gt;\*\~&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;-o&lt;span class="w"&gt; &lt;/span&gt;-name&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="se"&gt;\*&lt;/span&gt;.bin&lt;span class="w"&gt; &lt;/span&gt;-o&lt;span class="w"&gt; &lt;/span&gt;-name&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="se"&gt;\*&lt;/span&gt;.lbin&lt;span class="w"&gt; &lt;/span&gt;-o&lt;span class="w"&gt; &lt;/span&gt;-name&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="se"&gt;\*&lt;/span&gt;.so&lt;span class="w"&gt; &lt;/span&gt;-o&lt;span class="w"&gt; &lt;/span&gt;-name&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="se"&gt;\*&lt;/span&gt;.a&lt;span class="w"&gt; &lt;/span&gt;-o&lt;span class="w"&gt; &lt;/span&gt;-name&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="se"&gt;\*&lt;/span&gt;.ln&lt;span class="w"&gt; &lt;/span&gt;-o&lt;span class="w"&gt; &lt;/span&gt;-name&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="se"&gt;\*&lt;/span&gt;.blg&lt;span class="w"&gt; &lt;/span&gt;-o&lt;span class="w"&gt; &lt;/span&gt;-name&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="se"&gt;\*&lt;/span&gt;.bbl&lt;span class="w"&gt; &lt;/span&gt;-o&lt;span class="w"&gt; &lt;/span&gt;-name&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="se"&gt;\*&lt;/span&gt;.elc&lt;span class="w"&gt; &lt;/span&gt;-o&lt;span class="w"&gt; &lt;/span&gt;-name&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="se"&gt;\*&lt;/span&gt;.lof&lt;span class="w"&gt; &lt;/span&gt;-o&lt;span class="w"&gt; &lt;/span&gt;-name&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="se"&gt;\*&lt;/span&gt;.glo&lt;span class="w"&gt; &lt;/span&gt;-o&lt;span class="w"&gt; &lt;/span&gt;-name&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="se"&gt;\*&lt;/span&gt;.idx&lt;span class="w"&gt; &lt;/span&gt;-o&lt;span class="w"&gt; &lt;/span&gt;-name&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="se"&gt;\*&lt;/span&gt;.lot&lt;span class="w"&gt; &lt;/span&gt;-o&lt;span class="w"&gt; &lt;/span&gt;-name&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="se"&gt;\*&lt;/span&gt;.fmt&lt;span class="w"&gt; &lt;/span&gt;-o&lt;span class="w"&gt; &lt;/span&gt;-name&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="se"&gt;\*&lt;/span&gt;.tfm&lt;span class="w"&gt; &lt;/span&gt;-o&lt;span class="w"&gt; &lt;/span&gt;-name&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="se"&gt;\*&lt;/span&gt;.class&lt;span class="w"&gt; &lt;/span&gt;-o&lt;span class="w"&gt; &lt;/span&gt;-name&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="se"&gt;\*&lt;/span&gt;.fas&lt;span class="w"&gt; &lt;/span&gt;-o&lt;span class="w"&gt; &lt;/span&gt;-name&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="se"&gt;\*&lt;/span&gt;.lib&lt;span class="w"&gt; &lt;/span&gt;-o&lt;span class="w"&gt; &lt;/span&gt;-name&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="se"&gt;\*&lt;/span&gt;.mem&lt;span class="w"&gt; &lt;/span&gt;-o&lt;span class="w"&gt; &lt;/span&gt;-name&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="se"&gt;\*&lt;/span&gt;.x86f&lt;span class="w"&gt; &lt;/span&gt;-o&lt;span class="w"&gt; &lt;/span&gt;-name&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="se"&gt;\*&lt;/span&gt;.sparcf&lt;span class="w"&gt; &lt;/span&gt;-o&lt;span class="w"&gt; &lt;/span&gt;-name&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="se"&gt;\*&lt;/span&gt;.dfsl&lt;span class="w"&gt; &lt;/span&gt;-o&lt;span class="w"&gt; &lt;/span&gt;-name&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="se"&gt;\*&lt;/span&gt;.pfsl&lt;span class="w"&gt; &lt;/span&gt;-o&lt;span class="w"&gt; &lt;/span&gt;-name&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="se"&gt;\*&lt;/span&gt;.d64fsl&lt;span class="w"&gt; &lt;/span&gt;-o&lt;span class="w"&gt; &lt;/span&gt;-name&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="se"&gt;\*&lt;/span&gt;.p64fsl&lt;span class="w"&gt; &lt;/span&gt;-o&lt;span class="w"&gt; &lt;/span&gt;-name&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="se"&gt;\*&lt;/span&gt;.lx64fsl&lt;span class="w"&gt; &lt;/span&gt;-o&lt;span class="w"&gt; &lt;/span&gt;-name&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="se"&gt;\*&lt;/span&gt;.lx32fsl&lt;span class="w"&gt; &lt;/span&gt;-o&lt;span class="w"&gt; &lt;/span&gt;-name&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="se"&gt;\*&lt;/span&gt;.dx64fsl&lt;span class="w"&gt; &lt;/span&gt;-o&lt;span class="w"&gt; &lt;/span&gt;-name&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="se"&gt;\*&lt;/span&gt;.dx32fsl&lt;span class="w"&gt; &lt;/span&gt;-o&lt;span class="w"&gt; &lt;/span&gt;-name&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="se"&gt;\*&lt;/span&gt;.fx64fsl&lt;span class="w"&gt; &lt;/span&gt;-o&lt;span class="w"&gt; &lt;/span&gt;-name&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="se"&gt;\*&lt;/span&gt;.fx32fsl&lt;span class="w"&gt; &lt;/span&gt;-o&lt;span class="w"&gt; &lt;/span&gt;-name&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="se"&gt;\*&lt;/span&gt;.sx64fsl&lt;span class="w"&gt; &lt;/span&gt;-o&lt;span class="w"&gt; &lt;/span&gt;-name&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="se"&gt;\*&lt;/span&gt;.sx32fsl&lt;span class="w"&gt; &lt;/span&gt;-o&lt;span class="w"&gt; &lt;/span&gt;-name&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="se"&gt;\*&lt;/span&gt;.wx64fsl&lt;span class="w"&gt; &lt;/span&gt;-o&lt;span class="w"&gt; &lt;/span&gt;-name&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="se"&gt;\*&lt;/span&gt;.wx32fsl&lt;span class="w"&gt; &lt;/span&gt;-o&lt;span class="w"&gt; &lt;/span&gt;-name&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="se"&gt;\*&lt;/span&gt;.fasl&lt;span class="w"&gt; &lt;/span&gt;-o&lt;span class="w"&gt; &lt;/span&gt;-name&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="se"&gt;\*&lt;/span&gt;.ufsl&lt;span class="w"&gt; &lt;/span&gt;-o&lt;span class="w"&gt; &lt;/span&gt;-name&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="se"&gt;\*&lt;/span&gt;.fsl&lt;span class="w"&gt; &lt;/span&gt;-o&lt;span class="w"&gt; &lt;/span&gt;-name&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="se"&gt;\*&lt;/span&gt;.dxl&lt;span class="w"&gt; &lt;/span&gt;-o&lt;span class="w"&gt; &lt;/span&gt;-name&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="se"&gt;\*&lt;/span&gt;.lo&lt;span class="w"&gt; &lt;/span&gt;-o&lt;span class="w"&gt; &lt;/span&gt;-name&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="se"&gt;\*&lt;/span&gt;.la&lt;span class="w"&gt; &lt;/span&gt;-o&lt;span class="w"&gt; &lt;/span&gt;-name&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="se"&gt;\*&lt;/span&gt;.gmo&lt;span class="w"&gt; &lt;/span&gt;-o&lt;span class="w"&gt; &lt;/span&gt;-name&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="se"&gt;\*&lt;/span&gt;.mo&lt;span class="w"&gt; &lt;/span&gt;-o&lt;span class="w"&gt; &lt;/span&gt;-name&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="se"&gt;\*&lt;/span&gt;.toc&lt;span class="w"&gt; &lt;/span&gt;-o&lt;span class="w"&gt; &lt;/span&gt;-name&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="se"&gt;\*&lt;/span&gt;.aux&lt;span class="w"&gt; &lt;/span&gt;-o&lt;span class="w"&gt; &lt;/span&gt;-name&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="se"&gt;\*&lt;/span&gt;.cp&lt;span class="w"&gt; &lt;/span&gt;-o&lt;span class="w"&gt; &lt;/span&gt;-name&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="se"&gt;\*&lt;/span&gt;.fn&lt;span class="w"&gt; &lt;/span&gt;-o&lt;span class="w"&gt; &lt;/span&gt;-name&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="se"&gt;\*&lt;/span&gt;.ky&lt;span class="w"&gt; &lt;/span&gt;-o&lt;span class="w"&gt; &lt;/span&gt;-name&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="se"&gt;\*&lt;/span&gt;.pg&lt;span class="w"&gt; &lt;/span&gt;-o&lt;span class="w"&gt; &lt;/span&gt;-name&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="se"&gt;\*&lt;/span&gt;.tp&lt;span class="w"&gt; &lt;/span&gt;-o&lt;span class="w"&gt; &lt;/span&gt;-name&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="se"&gt;\*&lt;/span&gt;.vr&lt;span class="w"&gt; &lt;/span&gt;-o&lt;span class="w"&gt; &lt;/span&gt;-name&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="se"&gt;\*&lt;/span&gt;.cps&lt;span class="w"&gt; &lt;/span&gt;-o&lt;span class="w"&gt; &lt;/span&gt;-name&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="se"&gt;\*&lt;/span&gt;.fns&lt;span class="w"&gt; &lt;/span&gt;-o&lt;span class="w"&gt; &lt;/span&gt;-name&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="se"&gt;\*&lt;/span&gt;.kys&lt;span class="w"&gt; &lt;/span&gt;-o&lt;span class="w"&gt; &lt;/span&gt;-name&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="se"&gt;\*&lt;/span&gt;.pgs&lt;span class="w"&gt; &lt;/span&gt;-o&lt;span class="w"&gt; &lt;/span&gt;-name&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="se"&gt;\*&lt;/span&gt;.tps&lt;span class="w"&gt; &lt;/span&gt;-o&lt;span class="w"&gt; &lt;/span&gt;-name&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="se"&gt;\*&lt;/span&gt;.vrs&lt;span class="w"&gt; &lt;/span&gt;-o&lt;span class="w"&gt; &lt;/span&gt;-name&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="se"&gt;\*&lt;/span&gt;.pyc&lt;span class="w"&gt; &lt;/span&gt;-o&lt;span class="w"&gt; &lt;/span&gt;-name&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="se"&gt;\*&lt;/span&gt;.pyo&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="se"&gt;\)&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;-prune&lt;span class="w"&gt; &lt;/span&gt;-o&lt;span class="w"&gt;  &lt;/span&gt;-type&lt;span class="w"&gt; &lt;/span&gt;f&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="se"&gt;\(&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;-name&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="se"&gt;\*&lt;/span&gt;.py&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="se"&gt;\)&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;-exec&lt;span class="w"&gt; &lt;/span&gt;grep&lt;span class="w"&gt; &lt;/span&gt;-i&lt;span class="w"&gt; &lt;/span&gt;-nH&lt;span class="w"&gt; &lt;/span&gt;-e&lt;span class="w"&gt; &lt;/span&gt;apt_install&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="se"&gt;\{\}&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;+
./charmhelpers/contrib/hardening/host/checks/pam.py:26:&lt;span class="w"&gt;    &lt;/span&gt;apt_install,
./charmhelpers/contrib/hardening/host/checks/pam.py:89:&lt;span class="w"&gt;            &lt;/span&gt;apt_install&lt;span class="o"&gt;(&lt;/span&gt;pkg&lt;span class="o"&gt;)&lt;/span&gt;
./charmhelpers/contrib/hardening/host/checks/pam.py:125:&lt;span class="w"&gt;        &lt;/span&gt;apt_install&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;libpam-modules&amp;#39;&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;
./charmhelpers/contrib/hardening/ssh/checks/config.py:27:&lt;span class="w"&gt;    &lt;/span&gt;apt_install,
./charmhelpers/contrib/hardening/ssh/checks/config.py:199:&lt;span class="w"&gt;        &lt;/span&gt;apt_install&lt;span class="o"&gt;(&lt;/span&gt;settings&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;client&amp;#39;&lt;/span&gt;&lt;span class="o"&gt;][&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;package&amp;#39;&lt;/span&gt;&lt;span class="o"&gt;])&lt;/span&gt;
./charmhelpers/contrib/hardening/ssh/checks/config.py:277:&lt;span class="w"&gt;        &lt;/span&gt;apt_install&lt;span class="o"&gt;(&lt;/span&gt;settings&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;server&amp;#39;&lt;/span&gt;&lt;span class="o"&gt;][&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;package&amp;#39;&lt;/span&gt;&lt;span class="o"&gt;])&lt;/span&gt;
./charmhelpers/contrib/hardening/templating.py:27:&lt;span class="w"&gt;    &lt;/span&gt;from&lt;span class="w"&gt; &lt;/span&gt;charmhelpers.fetch&lt;span class="w"&gt; &lt;/span&gt;import&lt;span class="w"&gt; &lt;/span&gt;apt_install
./charmhelpers/contrib/hardening/templating.py:31:&lt;span class="w"&gt;        &lt;/span&gt;apt_install&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;python-jinja2&amp;#39;&lt;/span&gt;,&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nv"&gt;fatal&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;True&lt;span class="o"&gt;)&lt;/span&gt;
./charmhelpers/contrib/hardening/templating.py:33:&lt;span class="w"&gt;        &lt;/span&gt;apt_install&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;python3-jinja2&amp;#39;&lt;/span&gt;,&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nv"&gt;fatal&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;True&lt;span class="o"&gt;)&lt;/span&gt;
./charmhelpers/contrib/storage/linux/ceph.py:64:&lt;span class="w"&gt;    &lt;/span&gt;apt_install,
./charmhelpers/contrib/storage/linux/ceph.py:729:&lt;span class="w"&gt;    &lt;/span&gt;apt_install&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;ceph-common&amp;#39;&lt;/span&gt;,&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nv"&gt;fatal&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;True&lt;span class="o"&gt;)&lt;/span&gt;
./charmhelpers/contrib/openstack/context.py:27:&lt;span class="w"&gt;    &lt;/span&gt;apt_install,
./charmhelpers/contrib/openstack/context.py:106:&lt;span class="w"&gt;        &lt;/span&gt;apt_install&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;python-psutil&amp;#39;&lt;/span&gt;,&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nv"&gt;fatal&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;True&lt;span class="o"&gt;)&lt;/span&gt;
./charmhelpers/contrib/openstack/context.py:108:&lt;span class="w"&gt;        &lt;/span&gt;apt_install&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;python3-psutil&amp;#39;&lt;/span&gt;,&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nv"&gt;fatal&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;True&lt;span class="o"&gt;)&lt;/span&gt;
./charmhelpers/contrib/openstack/context.py:119:&lt;span class="w"&gt;        &lt;/span&gt;apt_install&lt;span class="o"&gt;(&lt;/span&gt;required,&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nv"&gt;fatal&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;True&lt;span class="o"&gt;)&lt;/span&gt;
./charmhelpers/contrib/openstack/keystone.py:18:from&lt;span class="w"&gt; &lt;/span&gt;charmhelpers.fetch&lt;span class="w"&gt; &lt;/span&gt;import&lt;span class="w"&gt; &lt;/span&gt;apt_install
./charmhelpers/contrib/openstack/keystone.py:121:&lt;span class="w"&gt;                &lt;/span&gt;apt_install&lt;span class="o"&gt;([&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;python-keystoneclient&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt;,&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nv"&gt;fatal&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;True&lt;span class="o"&gt;)&lt;/span&gt;
./charmhelpers/contrib/openstack/keystone.py:123:&lt;span class="w"&gt;                &lt;/span&gt;apt_install&lt;span class="o"&gt;([&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;python3-keystoneclient&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt;,&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nv"&gt;fatal&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;True&lt;span class="o"&gt;)&lt;/span&gt;
./charmhelpers/contrib/openstack/keystone.py:155:&lt;span class="w"&gt;                &lt;/span&gt;apt_install&lt;span class="o"&gt;([&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;python-keystoneclient&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt;,&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nv"&gt;fatal&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;True&lt;span class="o"&gt;)&lt;/span&gt;
./charmhelpers/contrib/openstack/keystone.py:157:&lt;span class="w"&gt;                &lt;/span&gt;apt_install&lt;span class="o"&gt;([&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;python3-keystoneclient&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt;,&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nv"&gt;fatal&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;True&lt;span class="o"&gt;)&lt;/span&gt;
./charmhelpers/contrib/openstack/templating.py:19:from&lt;span class="w"&gt; &lt;/span&gt;charmhelpers.fetch&lt;span class="w"&gt; &lt;/span&gt;import&lt;span class="w"&gt; &lt;/span&gt;apt_install,&lt;span class="w"&gt; &lt;/span&gt;apt_update
./charmhelpers/contrib/openstack/templating.py:32:&lt;span class="w"&gt;        &lt;/span&gt;apt_install&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;python-jinja2&amp;#39;&lt;/span&gt;,&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nv"&gt;fatal&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;True&lt;span class="o"&gt;)&lt;/span&gt;
./charmhelpers/contrib/openstack/templating.py:34:&lt;span class="w"&gt;        &lt;/span&gt;apt_install&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;python3-jinja2&amp;#39;&lt;/span&gt;,&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nv"&gt;fatal&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;True&lt;span class="o"&gt;)&lt;/span&gt;
./charmhelpers/contrib/openstack/templating.py:214:&lt;span class="w"&gt;                &lt;/span&gt;apt_install&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;python-jinja2&amp;#39;&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;
./charmhelpers/contrib/openstack/templating.py:216:&lt;span class="w"&gt;                &lt;/span&gt;apt_install&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;python3-jinja2&amp;#39;&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;
./charmhelpers/contrib/openstack/utils.py:85:&lt;span class="w"&gt;    &lt;/span&gt;apt_install,
./charmhelpers/contrib/openstack/utils.py:591:&lt;span class="w"&gt;        &lt;/span&gt;apt_install&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;ubuntu-cloud-keyring&amp;#39;&lt;/span&gt;,&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nv"&gt;fatal&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;True&lt;span class="o"&gt;)&lt;/span&gt;
./charmhelpers/contrib/database/mysql.py:43:&lt;span class="w"&gt;    &lt;/span&gt;apt_install,
./charmhelpers/contrib/database/mysql.py:54:&lt;span class="w"&gt;        &lt;/span&gt;apt_install&lt;span class="o"&gt;(&lt;/span&gt;filter_installed_packages&lt;span class="o"&gt;([&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;python-mysqldb&amp;#39;&lt;/span&gt;&lt;span class="o"&gt;])&lt;/span&gt;,&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nv"&gt;fatal&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;True&lt;span class="o"&gt;)&lt;/span&gt;
./charmhelpers/contrib/database/mysql.py:56:&lt;span class="w"&gt;        &lt;/span&gt;apt_install&lt;span class="o"&gt;(&lt;/span&gt;filter_installed_packages&lt;span class="o"&gt;([&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;python3-mysqldb&amp;#39;&lt;/span&gt;&lt;span class="o"&gt;])&lt;/span&gt;,&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nv"&gt;fatal&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;True&lt;span class="o"&gt;)&lt;/span&gt;
./charmhelpers/contrib/network/ovs/__init__.py:20:from&lt;span class="w"&gt; &lt;/span&gt;charmhelpers.fetch&lt;span class="w"&gt; &lt;/span&gt;import&lt;span class="w"&gt; &lt;/span&gt;apt_install
./charmhelpers/contrib/network/ovs/__init__.py:90:&lt;span class="w"&gt;            &lt;/span&gt;apt_install&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;python-netifaces&amp;#39;&lt;/span&gt;,&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nv"&gt;fatal&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;True&lt;span class="o"&gt;)&lt;/span&gt;
./charmhelpers/contrib/network/ovs/__init__.py:92:&lt;span class="w"&gt;            &lt;/span&gt;apt_install&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;python3-netifaces&amp;#39;&lt;/span&gt;,&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nv"&gt;fatal&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;True&lt;span class="o"&gt;)&lt;/span&gt;
./charmhelpers/contrib/network/ip.py:23:from&lt;span class="w"&gt; &lt;/span&gt;charmhelpers.fetch&lt;span class="w"&gt; &lt;/span&gt;import&lt;span class="w"&gt; &lt;/span&gt;apt_install,&lt;span class="w"&gt; &lt;/span&gt;apt_update
./charmhelpers/contrib/network/ip.py:42:&lt;span class="w"&gt;        &lt;/span&gt;apt_install&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;python-netifaces&amp;#39;&lt;/span&gt;,&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nv"&gt;fatal&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;True&lt;span class="o"&gt;)&lt;/span&gt;
./charmhelpers/contrib/network/ip.py:44:&lt;span class="w"&gt;        &lt;/span&gt;apt_install&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;python3-netifaces&amp;#39;&lt;/span&gt;,&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nv"&gt;fatal&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;True&lt;span class="o"&gt;)&lt;/span&gt;
./charmhelpers/contrib/network/ip.py:52:&lt;span class="w"&gt;        &lt;/span&gt;apt_install&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;python-netaddr&amp;#39;&lt;/span&gt;,&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nv"&gt;fatal&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;True&lt;span class="o"&gt;)&lt;/span&gt;
./charmhelpers/contrib/network/ip.py:54:&lt;span class="w"&gt;        &lt;/span&gt;apt_install&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;python3-netaddr&amp;#39;&lt;/span&gt;,&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nv"&gt;fatal&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;True&lt;span class="o"&gt;)&lt;/span&gt;
./charmhelpers/contrib/network/ip.py:447:&lt;span class="w"&gt;            &lt;/span&gt;apt_install&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;python-dnspython&amp;#39;&lt;/span&gt;,&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nv"&gt;fatal&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;True&lt;span class="o"&gt;)&lt;/span&gt;
./charmhelpers/contrib/network/ip.py:449:&lt;span class="w"&gt;            &lt;/span&gt;apt_install&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;python3-dnspython&amp;#39;&lt;/span&gt;,&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nv"&gt;fatal&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;True&lt;span class="o"&gt;)&lt;/span&gt;
./charmhelpers/contrib/network/ip.py:498:&lt;span class="w"&gt;                &lt;/span&gt;apt_install&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;python-dnspython&amp;quot;&lt;/span&gt;,&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nv"&gt;fatal&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;True&lt;span class="o"&gt;)&lt;/span&gt;
./charmhelpers/contrib/network/ip.py:500:&lt;span class="w"&gt;                &lt;/span&gt;apt_install&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;python3-dnspython&amp;quot;&lt;/span&gt;,&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nv"&gt;fatal&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;True&lt;span class="o"&gt;)&lt;/span&gt;
./charmhelpers/contrib/ansible/__init__.py:135:&lt;span class="w"&gt;    &lt;/span&gt;charmhelpers.fetch.apt_install&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;ansible&amp;#39;&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;
./charmhelpers/contrib/templating/jinja.py:19:from&lt;span class="w"&gt; &lt;/span&gt;charmhelpers.fetch&lt;span class="w"&gt; &lt;/span&gt;import&lt;span class="w"&gt; &lt;/span&gt;apt_install,&lt;span class="w"&gt; &lt;/span&gt;apt_update
./charmhelpers/contrib/templating/jinja.py:25:&lt;span class="w"&gt;        &lt;/span&gt;apt_install&lt;span class="o"&gt;([&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;python3-jinja2&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt;,&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nv"&gt;fatal&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;True&lt;span class="o"&gt;)&lt;/span&gt;
./charmhelpers/contrib/templating/jinja.py:27:&lt;span class="w"&gt;        &lt;/span&gt;apt_install&lt;span class="o"&gt;([&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;python-jinja2&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt;,&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nv"&gt;fatal&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;True&lt;span class="o"&gt;)&lt;/span&gt;
./charmhelpers/contrib/python/packages.py:23:from&lt;span class="w"&gt; &lt;/span&gt;charmhelpers.fetch&lt;span class="w"&gt; &lt;/span&gt;import&lt;span class="w"&gt; &lt;/span&gt;apt_install,&lt;span class="w"&gt; &lt;/span&gt;apt_update
./charmhelpers/contrib/python/packages.py:44:&lt;span class="w"&gt;                &lt;/span&gt;apt_install&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;python-pip&amp;#39;&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;
./charmhelpers/contrib/python/packages.py:46:&lt;span class="w"&gt;                &lt;/span&gt;apt_install&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;python3-pip&amp;#39;&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;
./charmhelpers/contrib/python/packages.py:144:&lt;span class="w"&gt;        &lt;/span&gt;apt_install&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;python-virtualenv&amp;#39;&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;
./charmhelpers/contrib/python/packages.py:146:&lt;span class="w"&gt;        &lt;/span&gt;apt_install&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;python3-virtualenv&amp;#39;&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;
./charmhelpers/contrib/mellanox/infiniband.py:23:&lt;span class="w"&gt;    &lt;/span&gt;apt_install,
./charmhelpers/contrib/mellanox/infiniband.py:36:&lt;span class="w"&gt;        &lt;/span&gt;apt_install&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;python-netifaces&amp;#39;&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;
./charmhelpers/contrib/mellanox/infiniband.py:38:&lt;span class="w"&gt;        &lt;/span&gt;apt_install&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;python3-netifaces&amp;#39;&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;
./charmhelpers/contrib/mellanox/infiniband.py:88:&lt;span class="w"&gt;    &lt;/span&gt;apt_install&lt;span class="o"&gt;(&lt;/span&gt;REQUIRED_PACKAGES,&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nv"&gt;fatal&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;True&lt;span class="o"&gt;)&lt;/span&gt;
./charmhelpers/contrib/saltstack/__init__.py:104:&lt;span class="w"&gt;    &lt;/span&gt;charmhelpers.fetch.apt_install&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;salt-common&amp;#39;&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;
./charmhelpers/fetch/__init__.py:88:&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="nv"&gt;apt_install&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;fetch.install
./charmhelpers/fetch/__init__.py:100:&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="nv"&gt;apt_install&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;fetch.install
./charmhelpers/core/templating.py:43:&lt;span class="w"&gt;    &lt;/span&gt;installed,&lt;span class="w"&gt; &lt;/span&gt;calling&lt;span class="w"&gt; &lt;/span&gt;this&lt;span class="w"&gt; &lt;/span&gt;will&lt;span class="w"&gt; &lt;/span&gt;attempt&lt;span class="w"&gt; &lt;/span&gt;to&lt;span class="w"&gt; &lt;/span&gt;use&lt;span class="w"&gt; &lt;/span&gt;charmhelpers.fetch.apt_install
./charmhelpers/core/templating.py:50:&lt;span class="w"&gt;            &lt;/span&gt;from&lt;span class="w"&gt; &lt;/span&gt;charmhelpers.fetch&lt;span class="w"&gt; &lt;/span&gt;import&lt;span class="w"&gt; &lt;/span&gt;apt_install
./charmhelpers/core/templating.py:57:&lt;span class="w"&gt;            &lt;/span&gt;apt_install&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;python-jinja2&amp;#39;&lt;/span&gt;,&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nv"&gt;fatal&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;True&lt;span class="o"&gt;)&lt;/span&gt;
./charmhelpers/core/templating.py:59:&lt;span class="w"&gt;            &lt;/span&gt;apt_install&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;python3-jinja2&amp;#39;&lt;/span&gt;,&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nv"&gt;fatal&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;True&lt;span class="o"&gt;)&lt;/span&gt;
./tests/contrib/storage/test_linux_ceph.py:612:&lt;span class="w"&gt;    &lt;/span&gt;@patch.object&lt;span class="o"&gt;(&lt;/span&gt;ceph_utils,&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;apt_install&amp;#39;&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;
./tests/contrib/openstack/test_os_contexts.py:2106:&lt;span class="w"&gt;    &lt;/span&gt;@patch.object&lt;span class="o"&gt;(&lt;/span&gt;context,&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;apt_install&amp;#39;&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;
./tests/contrib/openstack/test_os_templating.py:59:&lt;span class="w"&gt;        &lt;/span&gt;self.addCleanup&lt;span class="o"&gt;(&lt;/span&gt;patch.object&lt;span class="o"&gt;(&lt;/span&gt;templating,&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;apt_install&amp;#39;&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;.start&lt;span class="o"&gt;()&lt;/span&gt;.stop&lt;span class="o"&gt;())&lt;/span&gt;
./tests/contrib/openstack/test_os_templating.py:69:&lt;span class="w"&gt;    &lt;/span&gt;@patch.object&lt;span class="o"&gt;(&lt;/span&gt;templating,&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;apt_install&amp;#39;&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;
./tests/contrib/openstack/test_keystone_utils.py:10:&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;apt_install&amp;#39;&lt;/span&gt;,
./tests/contrib/openstack/test_openstack_utils.py:496:&lt;span class="w"&gt;    &lt;/span&gt;@patch&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;charmhelpers.contrib.openstack.utils.apt_install&amp;#39;&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;
./tests/contrib/network/test_ip.py:618:&lt;span class="w"&gt;    &lt;/span&gt;@patch&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;charmhelpers.contrib.network.ip.apt_install&amp;#39;&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;
./tests/contrib/network/test_ip.py:619:&lt;span class="w"&gt;    &lt;/span&gt;def&lt;span class="w"&gt; &lt;/span&gt;test_get_host_ip_with_hostname&lt;span class="o"&gt;(&lt;/span&gt;self,&lt;span class="w"&gt; &lt;/span&gt;apt_install&lt;span class="o"&gt;)&lt;/span&gt;:
./tests/contrib/network/test_ip.py:627:&lt;span class="w"&gt;    &lt;/span&gt;@patch&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;charmhelpers.contrib.network.ip.apt_install&amp;#39;&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;
./tests/contrib/network/test_ip.py:628:&lt;span class="w"&gt;    &lt;/span&gt;def&lt;span class="w"&gt; &lt;/span&gt;test_get_host_ip_with_hostname_no_dns&lt;span class="o"&gt;(&lt;/span&gt;self,&lt;span class="w"&gt; &lt;/span&gt;apt_install,&lt;span class="w"&gt; &lt;/span&gt;socket,
./tests/contrib/network/test_ip.py:640:&lt;span class="w"&gt;    &lt;/span&gt;@patch&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;charmhelpers.contrib.network.ip.apt_install&amp;#39;&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;
./tests/contrib/network/test_ip.py:641:&lt;span class="w"&gt;    &lt;/span&gt;def&lt;span class="w"&gt; &lt;/span&gt;test_get_host_ip_with_hostname_fallback&lt;span class="o"&gt;(&lt;/span&gt;self,&lt;span class="w"&gt; &lt;/span&gt;apt_install,&lt;span class="w"&gt; &lt;/span&gt;socket,
./tests/contrib/network/test_ip.py:654:&lt;span class="w"&gt;    &lt;/span&gt;@patch&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;charmhelpers.contrib.network.ip.apt_install&amp;#39;&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;
./tests/contrib/network/test_ip.py:655:&lt;span class="w"&gt;    &lt;/span&gt;def&lt;span class="w"&gt; &lt;/span&gt;test_get_host_ip_with_ip&lt;span class="o"&gt;(&lt;/span&gt;self,&lt;span class="w"&gt; &lt;/span&gt;apt_install&lt;span class="o"&gt;)&lt;/span&gt;:
./tests/contrib/network/test_ip.py:661:&lt;span class="w"&gt;    &lt;/span&gt;@patch&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;charmhelpers.contrib.network.ip.apt_install&amp;#39;&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;
./tests/contrib/network/test_ip.py:662:&lt;span class="w"&gt;    &lt;/span&gt;def&lt;span class="w"&gt; &lt;/span&gt;test_ns_query_trigger_apt_install&lt;span class="o"&gt;(&lt;/span&gt;self,&lt;span class="w"&gt; &lt;/span&gt;apt_install&lt;span class="o"&gt;)&lt;/span&gt;:
./tests/contrib/network/test_ip.py:667:&lt;span class="w"&gt;                &lt;/span&gt;apt_install.assert_called_with&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;python-dnspython&amp;#39;&lt;/span&gt;,&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nv"&gt;fatal&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;True&lt;span class="o"&gt;)&lt;/span&gt;
./tests/contrib/network/test_ip.py:669:&lt;span class="w"&gt;                &lt;/span&gt;apt_install.assert_called_with&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;python3-dnspython&amp;#39;&lt;/span&gt;,&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nv"&gt;fatal&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;True&lt;span class="o"&gt;)&lt;/span&gt;
./tests/contrib/network/test_ip.py:672:&lt;span class="w"&gt;    &lt;/span&gt;@patch&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;charmhelpers.contrib.network.ip.apt_install&amp;#39;&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;
./tests/contrib/network/test_ip.py:673:&lt;span class="w"&gt;    &lt;/span&gt;def&lt;span class="w"&gt; &lt;/span&gt;test_ns_query_ptr_record&lt;span class="o"&gt;(&lt;/span&gt;self,&lt;span class="w"&gt; &lt;/span&gt;apt_install&lt;span class="o"&gt;)&lt;/span&gt;:
./tests/contrib/network/test_ip.py:679:&lt;span class="w"&gt;    &lt;/span&gt;@patch&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;charmhelpers.contrib.network.ip.apt_install&amp;#39;&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;
./tests/contrib/network/test_ip.py:680:&lt;span class="w"&gt;    &lt;/span&gt;def&lt;span class="w"&gt; &lt;/span&gt;test_ns_query_a_record&lt;span class="o"&gt;(&lt;/span&gt;self,&lt;span class="w"&gt; &lt;/span&gt;apt_install&lt;span class="o"&gt;)&lt;/span&gt;:
./tests/contrib/network/test_ip.py:687:&lt;span class="w"&gt;    &lt;/span&gt;@patch&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;charmhelpers.contrib.network.ip.apt_install&amp;#39;&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;
./tests/contrib/network/test_ip.py:688:&lt;span class="w"&gt;    &lt;/span&gt;def&lt;span class="w"&gt; &lt;/span&gt;test_ns_query_blank_record&lt;span class="o"&gt;(&lt;/span&gt;self,&lt;span class="w"&gt; &lt;/span&gt;apt_install&lt;span class="o"&gt;)&lt;/span&gt;:
./tests/contrib/network/test_ip.py:694:&lt;span class="w"&gt;    &lt;/span&gt;@patch&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;charmhelpers.contrib.network.ip.apt_install&amp;#39;&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;
./tests/contrib/network/test_ip.py:695:&lt;span class="w"&gt;    &lt;/span&gt;def&lt;span class="w"&gt; &lt;/span&gt;test_ns_query_lookup_fail&lt;span class="o"&gt;(&lt;/span&gt;self,&lt;span class="w"&gt; &lt;/span&gt;apt_install&lt;span class="o"&gt;)&lt;/span&gt;:
./tests/contrib/network/test_ip.py:701:&lt;span class="w"&gt;    &lt;/span&gt;@patch&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;charmhelpers.contrib.network.ip.apt_install&amp;#39;&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;
./tests/contrib/network/test_ip.py:702:&lt;span class="w"&gt;    &lt;/span&gt;def&lt;span class="w"&gt; &lt;/span&gt;test_get_hostname_with_ip&lt;span class="o"&gt;(&lt;/span&gt;self,&lt;span class="w"&gt; &lt;/span&gt;apt_install&lt;span class="o"&gt;)&lt;/span&gt;:
./tests/contrib/network/test_ip.py:708:&lt;span class="w"&gt;    &lt;/span&gt;@patch&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;charmhelpers.contrib.network.ip.apt_install&amp;#39;&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;
./tests/contrib/network/test_ip.py:709:&lt;span class="w"&gt;    &lt;/span&gt;def&lt;span class="w"&gt; &lt;/span&gt;test_get_hostname_with_ip_not_fqdn&lt;span class="o"&gt;(&lt;/span&gt;self,&lt;span class="w"&gt; &lt;/span&gt;apt_install&lt;span class="o"&gt;)&lt;/span&gt;:
./tests/contrib/network/test_ip.py:715:&lt;span class="w"&gt;    &lt;/span&gt;@patch&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;charmhelpers.contrib.network.ip.apt_install&amp;#39;&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;
./tests/contrib/network/test_ip.py:716:&lt;span class="w"&gt;    &lt;/span&gt;def&lt;span class="w"&gt; &lt;/span&gt;test_get_hostname_with_hostname&lt;span class="o"&gt;(&lt;/span&gt;self,&lt;span class="w"&gt; &lt;/span&gt;apt_install&lt;span class="o"&gt;)&lt;/span&gt;:
./tests/contrib/network/test_ip.py:720:&lt;span class="w"&gt;    &lt;/span&gt;@patch&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;charmhelpers.contrib.network.ip.apt_install&amp;#39;&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;
./tests/contrib/network/test_ip.py:721:&lt;span class="w"&gt;    &lt;/span&gt;def&lt;span class="w"&gt; &lt;/span&gt;test_get_hostname_with_hostname_trailingdot&lt;span class="o"&gt;(&lt;/span&gt;self,&lt;span class="w"&gt; &lt;/span&gt;apt_install&lt;span class="o"&gt;)&lt;/span&gt;:
./tests/contrib/network/test_ip.py:725:&lt;span class="w"&gt;    &lt;/span&gt;@patch&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;charmhelpers.contrib.network.ip.apt_install&amp;#39;&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;
./tests/contrib/network/test_ip.py:726:&lt;span class="w"&gt;    &lt;/span&gt;def&lt;span class="w"&gt; &lt;/span&gt;test_get_hostname_with_hostname_not_fqdn&lt;span class="o"&gt;(&lt;/span&gt;self,&lt;span class="w"&gt; &lt;/span&gt;apt_install&lt;span class="o"&gt;)&lt;/span&gt;:
./tests/contrib/network/test_ip.py:730:&lt;span class="w"&gt;    &lt;/span&gt;@patch&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;charmhelpers.contrib.network.ip.apt_install&amp;#39;&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;
./tests/contrib/network/test_ip.py:731:&lt;span class="w"&gt;    &lt;/span&gt;def&lt;span class="w"&gt; &lt;/span&gt;test_get_hostname_trigger_apt_install&lt;span class="o"&gt;(&lt;/span&gt;self,&lt;span class="w"&gt; &lt;/span&gt;apt_install&lt;span class="o"&gt;)&lt;/span&gt;:
./tests/contrib/network/test_ip.py:737:&lt;span class="w"&gt;                &lt;/span&gt;apt_install.assert_called_with&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;python-dnspython&amp;#39;&lt;/span&gt;,&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nv"&gt;fatal&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;True&lt;span class="o"&gt;)&lt;/span&gt;
./tests/contrib/network/test_ip.py:739:&lt;span class="w"&gt;                &lt;/span&gt;apt_install.assert_called_with&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;python3-dnspython&amp;#39;&lt;/span&gt;,&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nv"&gt;fatal&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;True&lt;span class="o"&gt;)&lt;/span&gt;
./tests/contrib/network/test_ip.py:745:&lt;span class="w"&gt;    &lt;/span&gt;@patch&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;charmhelpers.contrib.network.ip.apt_install&amp;#39;&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;
./tests/contrib/network/test_ip.py:746:&lt;span class="w"&gt;    &lt;/span&gt;def&lt;span class="w"&gt; &lt;/span&gt;test_get_hostname_lookup_fail&lt;span class="o"&gt;(&lt;/span&gt;self,&lt;span class="w"&gt; &lt;/span&gt;apt_install,&lt;span class="w"&gt; &lt;/span&gt;ns_query,&lt;span class="w"&gt; &lt;/span&gt;socket&lt;span class="o"&gt;)&lt;/span&gt;:
./tests/contrib/network/test_ip.py:756:&lt;span class="w"&gt;    &lt;/span&gt;@patch&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;charmhelpers.contrib.network.ip.apt_install&amp;#39;&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;
./tests/contrib/network/test_ip.py:758:&lt;span class="w"&gt;            &lt;/span&gt;self,&lt;span class="w"&gt; &lt;/span&gt;apt_install,&lt;span class="w"&gt; &lt;/span&gt;ns_query,&lt;span class="w"&gt; &lt;/span&gt;socket&lt;span class="o"&gt;)&lt;/span&gt;:
./tests/contrib/network/test_ovs.py:110:&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;apt_install&amp;quot;&lt;/span&gt;,
./tests/contrib/ansible/test_ansible.py:46:&lt;span class="w"&gt;        &lt;/span&gt;self.mock_fetch.apt_install.assert_called_once_with&lt;span class="o"&gt;(&lt;/span&gt;
./tests/contrib/ansible/test_ansible.py:54:&lt;span class="w"&gt;        &lt;/span&gt;self.mock_fetch.apt_install.assert_called_once_with&lt;span class="o"&gt;(&lt;/span&gt;
./tests/contrib/python/test_packages.py:13:&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;apt_install&amp;quot;&lt;/span&gt;,
./tests/contrib/python/test_packages.py:27:&lt;span class="w"&gt;        &lt;/span&gt;self.apt_install.return_value&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;True
./tests/contrib/python/test_packages.py:174:&lt;span class="w"&gt;            &lt;/span&gt;self.apt_install.assert_called_with&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;python-virtualenv&amp;#39;&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;
./tests/contrib/python/test_packages.py:176:&lt;span class="w"&gt;            &lt;/span&gt;self.apt_install.assert_called_with&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;python3-virtualenv&amp;#39;&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;
./tests/contrib/saltstack/test_saltstates.py:34:&lt;span class="w"&gt;        &lt;/span&gt;self.mock_charmhelpers_fetch.apt_install.assert_called_once_with&lt;span class="o"&gt;(&lt;/span&gt;
./tests/contrib/saltstack/test_saltstates.py:42:&lt;span class="w"&gt;        &lt;/span&gt;self.mock_charmhelpers_fetch.apt_install.assert_called_once_with&lt;span class="o"&gt;(&lt;/span&gt;
./tests/fetch/test_fetch.py:804:&lt;span class="w"&gt;        &lt;/span&gt;fetch.apt_install&lt;span class="o"&gt;(&lt;/span&gt;packages,&lt;span class="w"&gt; &lt;/span&gt;options&lt;span class="o"&gt;)&lt;/span&gt;
./tests/fetch/test_fetch.py:821:&lt;span class="w"&gt;        &lt;/span&gt;fetch.apt_install&lt;span class="o"&gt;(&lt;/span&gt;packages&lt;span class="o"&gt;)&lt;/span&gt;
./tests/fetch/test_fetch.py:839:&lt;span class="w"&gt;        &lt;/span&gt;fetch.apt_install&lt;span class="o"&gt;(&lt;/span&gt;packages,&lt;span class="w"&gt; &lt;/span&gt;options&lt;span class="o"&gt;)&lt;/span&gt;
./tests/fetch/test_fetch.py:857:&lt;span class="w"&gt;        &lt;/span&gt;fetch.apt_install&lt;span class="o"&gt;(&lt;/span&gt;packages,&lt;span class="w"&gt; &lt;/span&gt;options,&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nv"&gt;fatal&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;True&lt;span class="o"&gt;)&lt;/span&gt;

Grep&lt;span class="w"&gt; &lt;/span&gt;finished&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;matches&lt;span class="w"&gt; &lt;/span&gt;found&lt;span class="o"&gt;)&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;at&lt;span class="w"&gt; &lt;/span&gt;Sat&lt;span class="w"&gt; &lt;/span&gt;May&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="m"&gt;27&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="m"&gt;22&lt;/span&gt;:32:10
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Enough proof that default charms will break. Let's see how to fix it.&lt;/p&gt;
&lt;h1&gt;Python2 fix&lt;/h1&gt;
&lt;blockquote&gt;
&lt;p&gt;Strategy: make a charm Python2 compatible.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;This can be broken down to the following steps:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Use  &lt;code&gt;python27&lt;/code&gt; (in hooks).&lt;/li&gt;
&lt;li&gt;Change python search path in hooks.&lt;/li&gt;
&lt;li&gt;Map &lt;code&gt;apt_&lt;/code&gt; function for CentOS in &lt;code&gt;charmhelpers&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;Update &lt;code&gt;RelationBase&lt;/code&gt; class definition &lt;code&gt;charms.reactive&lt;/code&gt; lib to use Python2 syntax.&lt;/li&gt;
&lt;li&gt;Update &lt;code&gt;layer-basic&lt;/code&gt;.&lt;/li&gt;
&lt;/ol&gt;
&lt;h2&gt;Python27 in  hooks&lt;/h2&gt;
&lt;p&gt;If you run &lt;code&gt;charm build&lt;/code&gt; and search &lt;code&gt;python3&lt;/code&gt; in dist folder, the
first offender are hooks:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="ch"&gt;#!/usr/bin/env python3&lt;/span&gt;

&lt;span class="n"&gt;change&lt;/span&gt; &lt;span class="n"&gt;to&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;

&lt;span class="c1"&gt;#!/usr/bin/env python&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;The root cause is actually the &lt;code&gt;hook.template&lt;/code&gt;, which is used in a
copy-paste fashion to create the list of default hooks if user didn't
define one. Remember, the hooks are hardcoded, and certain hooks will
always be created!&lt;/p&gt;
&lt;h2&gt;&lt;code&gt;sys.path&lt;/code&gt; in hooks&lt;/h2&gt;
&lt;p&gt;Update Python search path used in &lt;strong&gt;all&lt;/strong&gt; hooks:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="c1"&gt;# Load modules from $JUJU_CHARM_DIR/lib&lt;/span&gt;
&lt;span class="kn"&gt;import&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nn"&gt;sys&lt;/span&gt;
&lt;span class="n"&gt;sys&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;path&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;append&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;lib&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="n"&gt;change&lt;/span&gt; &lt;span class="n"&gt;to&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;

&lt;span class="c1"&gt;# Load modules from $JUJU_CHARM_DIR/lib&lt;/span&gt;
&lt;span class="kn"&gt;import&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nn"&gt;sys&lt;/span&gt;
&lt;span class="kn"&gt;import&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nn"&gt;os&lt;/span&gt;
&lt;span class="n"&gt;sys&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;path&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;append&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;os&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;path&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;join&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;os&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;getcwd&lt;/span&gt;&lt;span class="p"&gt;(),&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;lib&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Btw, don't be fooled by the comment line &lt;strong&gt;$JUJU_CHARM_DIR&lt;/strong&gt;,
there isn't one. Otherwise, there is no need to
make this change.&lt;/p&gt;
&lt;h2&gt;Function mapping in &lt;code&gt;charmhelpers&lt;/code&gt;&lt;/h2&gt;
&lt;p&gt;Update &lt;code&gt;charmhelpers/fetch/__init__.py&lt;/code&gt; to add CentOS function
mappings:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;__platform__&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;ubuntu&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="n"&gt;apt_cache&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;fetch&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;apt_cache&lt;/span&gt;
    &lt;span class="n"&gt;apt_install&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;fetch&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;install&lt;/span&gt;
    &lt;span class="n"&gt;apt_update&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;fetch&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;update&lt;/span&gt;
    &lt;span class="n"&gt;apt_upgrade&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;fetch&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;upgrade&lt;/span&gt;
    &lt;span class="n"&gt;apt_purge&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;fetch&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;purge&lt;/span&gt;
    &lt;span class="n"&gt;apt_mark&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;fetch&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;apt_mark&lt;/span&gt;
    &lt;span class="n"&gt;apt_hold&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;fetch&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;apt_hold&lt;/span&gt;
    &lt;span class="n"&gt;apt_unhold&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;fetch&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;apt_unhold&lt;/span&gt;
    &lt;span class="n"&gt;get_upstream_version&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;fetch&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;get_upstream_version&lt;/span&gt;
&lt;span class="k"&gt;elif&lt;/span&gt; &lt;span class="n"&gt;__platform__&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;centos&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="n"&gt;yum_search&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;fetch&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;yum_search&lt;/span&gt;

    &lt;span class="c1"&gt;# ADD: centos mapping&lt;/span&gt;
    &lt;span class="n"&gt;apt_install&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;fetch&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;install&lt;/span&gt;
    &lt;span class="n"&gt;apt_upgrade&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;fetch&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;upgrade&lt;/span&gt;
    &lt;span class="n"&gt;apt_update&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;fetch&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;update&lt;/span&gt;
    &lt;span class="n"&gt;apt_purge&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;fetch&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;purge&lt;/span&gt;
    &lt;span class="n"&gt;apt_cache&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;fetch&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;yum_search&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;h2&gt;&lt;code&gt;RelationBase&lt;/code&gt; in &lt;code&gt;charms.reactive&lt;/code&gt;&lt;/h2&gt;
&lt;p&gt;Update &lt;code&gt;class RelationBase&lt;/code&gt; in
&lt;code&gt;charms.reactive/charms/reactive/relations.py&lt;/code&gt;:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="k"&gt;class&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nc"&gt;RelationBase&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;object&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;metaclass&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;AutoAccessors&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="sd"&gt;&amp;quot;&amp;quot;&amp;quot;&lt;/span&gt;
&lt;span class="sd"&gt;    The base class for all relation implementations.&lt;/span&gt;
&lt;span class="sd"&gt;    &amp;quot;&amp;quot;&amp;quot;&lt;/span&gt;

&lt;span class="n"&gt;change&lt;/span&gt; &lt;span class="n"&gt;to&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;

&lt;span class="k"&gt;class&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nc"&gt;RelationBase&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;object&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="n"&gt;__metaclass__&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;AutoAccessors&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;h2&gt;&lt;code&gt;layer-basic&lt;/code&gt;&lt;/h2&gt;
&lt;p&gt;&lt;a href="https://github.com/juju-solutions/layer-basic"&gt;layer-basic&lt;/a&gt; is inherited in all charms. We will have a &lt;a href="https://fengxia41103.github.io/myblog/charm layer-basic.html"&gt;separate
analysis&lt;/a&gt; on this lib alone. For now, let's take it for granted and
work around the issues to make Python2 charms.&lt;/p&gt;
&lt;p&gt;Diff file list:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;Files&lt;span class="w"&gt; &lt;/span&gt;layer-basic/bin/layer_option
Only&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;in&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;/home/fengxia/workspace/wss/charms/layer-basic/lib/charms:&lt;span class="w"&gt; &lt;/span&gt;__init__.py
Files&lt;span class="w"&gt; &lt;/span&gt;layer-basic/lib/charms/layer/basic.py&lt;span class="w"&gt; &lt;/span&gt;
Files&lt;span class="w"&gt; &lt;/span&gt;layer-basic/lib/charms/layer/execd.py
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;h3&gt;&lt;code&gt;sys.path&lt;/code&gt; in &lt;code&gt;layer_option&lt;/code&gt;&lt;/h3&gt;
&lt;p&gt;Update &lt;code&gt;layer-basic/bin/layer-optioin&lt;/code&gt;. This is the same change made
in hooks.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="kn"&gt;import&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nn"&gt;sys&lt;/span&gt;
&lt;span class="n"&gt;sys&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;path&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;append&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;lib&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="n"&gt;change&lt;/span&gt; &lt;span class="n"&gt;to&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;

&lt;span class="kn"&gt;import&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nn"&gt;sys&lt;/span&gt;
&lt;span class="kn"&gt;import&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nn"&gt;os&lt;/span&gt;
&lt;span class="n"&gt;sys&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;path&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;append&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;os&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;path&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;join&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;os&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;getcwd&lt;/span&gt;&lt;span class="p"&gt;(),&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;lib&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;h3&gt;Python import path&lt;/h3&gt;
&lt;p&gt;Touch an empty file &lt;code&gt;layer-basic/lib/charms/__init__.py&lt;/code&gt; &amp;rarr; make Python2
search path work.&lt;/p&gt;
&lt;h3&gt;&lt;code&gt;basic.py&lt;/code&gt;&lt;/h3&gt;
&lt;p&gt;Changes to this file look intimidating (showing diff -r old
new). However, the theme is quite straightforward:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Install python2 modules, eg &lt;code&gt;python-setuptools&lt;/code&gt;, as prerequisite to
prepare the environment (&lt;a href="https://github.com/juju-solutions/layer-basic/issues/97"&gt;bug #97&lt;/a&gt;).&lt;/li&gt;
&lt;li&gt;The correct binary path for your &lt;code&gt;pip&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;Use &lt;code&gt;platform.linux_distribution()[0]&lt;/code&gt; to determine host platform.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;apt&lt;/code&gt; uses &lt;code&gt;--assume-yes&lt;/code&gt;, where &lt;code&gt;yum&lt;/code&gt; uses &lt;code&gt;--assumeyes&lt;/code&gt;.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;There are mixed &lt;code&gt;apt_install&lt;/code&gt; (&lt;a href="https://github.com/juju-solutions/layer-basic/issues/98"&gt;bug #98&lt;/a&gt;) using the mapped function and direct
&lt;code&gt;check_call&lt;/code&gt; shell calls. Moving forward, we should consolidate all
package functions to mapped version.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="gu"&gt;6a7&lt;/span&gt;
&lt;span class="gi"&gt;&amp;gt; import platform&lt;/span&gt;
51,56c52,77
&lt;span class="gd"&gt;&amp;lt;         apt_install([&lt;/span&gt;
&lt;span class="gd"&gt;&amp;lt;             &amp;#39;python3-pip&amp;#39;,&lt;/span&gt;
&lt;span class="gd"&gt;&amp;lt;             &amp;#39;python3-setuptools&amp;#39;,&lt;/span&gt;
&lt;span class="gd"&gt;&amp;lt;             &amp;#39;python3-yaml&amp;#39;,&lt;/span&gt;
&lt;span class="gd"&gt;&amp;lt;             &amp;#39;python3-dev&amp;#39;,&lt;/span&gt;
&lt;span class="gd"&gt;&amp;lt;         ])&lt;/span&gt;
&lt;span class="gs"&gt;---&lt;/span&gt;
&lt;span class="gi"&gt;&amp;gt;         me = platform.linux_distribution()[0]&lt;/span&gt;
&lt;span class="gi"&gt;&amp;gt;         if &amp;#39;ubuntu&amp;#39; in me.lower():&lt;/span&gt;
&lt;span class="gi"&gt;&amp;gt;             apt_install([&lt;/span&gt;
&lt;span class="gi"&gt;&amp;gt;                 &amp;#39;python3-pip&amp;#39;,&lt;/span&gt;
&lt;span class="gi"&gt;&amp;gt;                 &amp;#39;python3-setuptools&amp;#39;,&lt;/span&gt;
&lt;span class="gi"&gt;&amp;gt;                 &amp;#39;python3-yaml&amp;#39;,&lt;/span&gt;
&lt;span class="gi"&gt;&amp;gt;                 &amp;#39;python3-dev&amp;#39;,&lt;/span&gt;
&lt;span class="gi"&gt;&amp;gt;             ])&lt;/span&gt;
&lt;span class="gi"&gt;&amp;gt;         elif &amp;#39;cent&amp;#39; in me.lower():&lt;/span&gt;
&lt;span class="gi"&gt;&amp;gt;             # if using python3&lt;/span&gt;
&lt;span class="gi"&gt;&amp;gt;             #apt_install([&lt;/span&gt;
&lt;span class="gi"&gt;&amp;gt;             #    &amp;#39;redhat-lsb-core&amp;#39;,&lt;/span&gt;
&lt;span class="gi"&gt;&amp;gt;             #    &amp;#39;python34-setuptools&amp;#39;,&lt;/span&gt;
&lt;span class="gi"&gt;&amp;gt;             #    &amp;#39;python34-pip&amp;#39;,&lt;/span&gt;
&lt;span class="gi"&gt;&amp;gt;             #    &amp;#39;python34-yaml&amp;#39;,&lt;/span&gt;
&lt;span class="gi"&gt;&amp;gt;             #    &amp;#39;python34-devel&amp;#39;,&lt;/span&gt;
&lt;span class="gi"&gt;&amp;gt;             #])&lt;/span&gt;
&lt;span class="gi"&gt;&amp;gt;             apt_install([&lt;/span&gt;
&lt;span class="gi"&gt;&amp;gt;                 &amp;#39;epel-release&amp;#39;, # must&lt;/span&gt;
&lt;span class="gi"&gt;&amp;gt;                 &amp;#39;redhat-lsb-core&amp;#39;,&lt;/span&gt;
&lt;span class="gi"&gt;&amp;gt;                 &amp;#39;python-setuptools&amp;#39;,&lt;/span&gt;
&lt;span class="gi"&gt;&amp;gt;                 &amp;#39;python-pip&amp;#39;,&lt;/span&gt;
&lt;span class="gi"&gt;&amp;gt;                 &amp;#39;python-yaml&amp;#39;,&lt;/span&gt;
&lt;span class="gi"&gt;&amp;gt;                 &amp;#39;python-devel&amp;#39;,&lt;/span&gt;
&lt;span class="gi"&gt;&amp;gt;             ])&lt;/span&gt;
&lt;span class="gi"&gt;&amp;gt; &lt;/span&gt;
64c85,88
&lt;span class="gd"&gt;&amp;lt;                 series = lsb_release()[&amp;#39;DISTRIB_CODENAME&amp;#39;]&lt;/span&gt;
&lt;span class="gs"&gt;---&lt;/span&gt;
&lt;span class="gi"&gt;&amp;gt;                 try:&lt;/span&gt;
&lt;span class="gi"&gt;&amp;gt;                     series = lsb_release()[&amp;#39;DISTRIB_CODENAME&amp;#39;]&lt;/span&gt;
&lt;span class="gi"&gt;&amp;gt;                 except:&lt;/span&gt;
&lt;span class="gi"&gt;&amp;gt;                     series = &amp;#39;centos7&amp;#39;&lt;/span&gt;
66a91
&lt;span class="gi"&gt;&amp;gt;                     pip = vpip&lt;/span&gt;
68c93,96
&lt;span class="gd"&gt;&amp;lt;                     apt_install([&amp;#39;virtualenv&amp;#39;])&lt;/span&gt;
&lt;span class="gs"&gt;---&lt;/span&gt;
&lt;span class="gi"&gt;&amp;gt;                     # pip = &amp;#39;pip3&amp;#39; # if using python3&lt;/span&gt;
&lt;span class="gi"&gt;&amp;gt;                     pip = &amp;#39;pip&amp;#39;&lt;/span&gt;
&lt;span class="gi"&gt;&amp;gt;                     check_call([pip, &amp;#39;install&amp;#39;, &amp;#39;-U&amp;#39;, &amp;#39;--no-index&amp;#39;, &amp;#39;-f&amp;#39;, &amp;#39;wheelhouse&amp;#39;,&amp;#39;pip&amp;#39;])&lt;/span&gt;
&lt;span class="gi"&gt;&amp;gt;                     check_call([pip, &amp;#39;install&amp;#39;, &amp;#39;virtualenv&amp;#39;])&lt;/span&gt;
74d101
&lt;span class="gd"&gt;&amp;lt;             pip = vpip&lt;/span&gt;
76c103,104
&lt;span class="gd"&gt;&amp;lt;             pip = &amp;#39;pip3&amp;#39;&lt;/span&gt;
&lt;span class="gs"&gt;---&lt;/span&gt;
&lt;span class="gi"&gt;&amp;gt;             # pip = &amp;#39;pip3&amp;#39; # if using python3&lt;/span&gt;
&lt;span class="gi"&gt;&amp;gt;             pip = vpip&lt;/span&gt;
83,84c111,114
&lt;span class="gd"&gt;&amp;lt;         check_call([pip, &amp;#39;install&amp;#39;, &amp;#39;-U&amp;#39;, &amp;#39;--no-index&amp;#39;, &amp;#39;-f&amp;#39;, &amp;#39;wheelhouse&amp;#39;,&lt;/span&gt;
&lt;span class="gd"&gt;&amp;lt;                     &amp;#39;pip&amp;#39;])&lt;/span&gt;
&lt;span class="gs"&gt;---&lt;/span&gt;
&lt;span class="gi"&gt;&amp;gt;     &lt;/span&gt;
&lt;span class="gi"&gt;&amp;gt;         # TODO: feng&lt;/span&gt;
&lt;span class="gi"&gt;&amp;gt;         pip = &amp;#39;pip&amp;#39; # this is a hack to use Python2&lt;/span&gt;
&lt;span class="gi"&gt;&amp;gt;         check_call([pip, &amp;#39;install&amp;#39;, &amp;#39;-U&amp;#39;, &amp;#39;--no-index&amp;#39;, &amp;#39;-f&amp;#39;, &amp;#39;wheelhouse&amp;#39;,&amp;#39;pip&amp;#39;])&lt;/span&gt;
86,87c116
&lt;span class="gd"&gt;&amp;lt;         check_call([pip, &amp;#39;install&amp;#39;, &amp;#39;-U&amp;#39;, &amp;#39;--no-index&amp;#39;, &amp;#39;-f&amp;#39;, &amp;#39;wheelhouse&amp;#39;] +&lt;/span&gt;
&lt;span class="gd"&gt;&amp;lt;                    glob(&amp;#39;wheelhouse/*&amp;#39;))&lt;/span&gt;
&lt;span class="gs"&gt;---&lt;/span&gt;
&lt;span class="gi"&gt;&amp;gt;         check_call([pip, &amp;#39;install&amp;#39;, &amp;#39;-U&amp;#39;, &amp;#39;--no-index&amp;#39;, &amp;#39;-f&amp;#39;, &amp;#39;wheelhouse&amp;#39;] + glob(&amp;#39;wheelhouse/*&amp;#39;))&lt;/span&gt;
113c142,143
&lt;span class="gd"&gt;&amp;lt;         sys.path.append(&amp;#39;lib&amp;#39;)&lt;/span&gt;
&lt;span class="gs"&gt;---&lt;/span&gt;
&lt;span class="gi"&gt;&amp;gt;         import os&lt;/span&gt;
&lt;span class="gi"&gt;&amp;gt;         sys.path.append(os.path.join(os.getcwd(),&amp;#39;lib&amp;#39;))&lt;/span&gt;
157c187,190
&lt;span class="gd"&gt;&amp;lt;     cmd = [&amp;#39;apt-get&amp;#39;,&lt;/span&gt;
&lt;span class="gs"&gt;---&lt;/span&gt;
&lt;span class="gi"&gt;&amp;gt;     me = platform.linux_distribution()[0]&lt;/span&gt;
&lt;span class="gi"&gt;&amp;gt;     if &amp;#39;ubuntu&amp;#39; in me.lower():&lt;/span&gt;
&lt;span class="gi"&gt;&amp;gt;         my_cmd = &amp;#39;apt-get&amp;#39;&lt;/span&gt;
&lt;span class="gi"&gt;&amp;gt;         cmd = [my_cmd,&lt;/span&gt;
160a194,199
&lt;span class="gi"&gt;&amp;gt;     elif &amp;#39;cent&amp;#39; in me.lower():&lt;/span&gt;
&lt;span class="gi"&gt;&amp;gt;         my_cmd = &amp;#39;yum&amp;#39;&lt;/span&gt;
&lt;span class="gi"&gt;&amp;gt;         cmd = [my_cmd,&lt;/span&gt;
&lt;span class="gi"&gt;&amp;gt;            &amp;#39;--assumeyes&amp;#39;,&lt;/span&gt;
&lt;span class="gi"&gt;&amp;gt;            &amp;#39;install&amp;#39;]&lt;/span&gt;
&lt;span class="gi"&gt;&amp;gt;   &lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;h3&gt;&lt;code&gt;execd.py&lt;/code&gt;&lt;/h3&gt;
&lt;p&gt;A formatting error?&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;17a18
&amp;gt;&lt;span class="w"&gt; &lt;/span&gt;from&lt;span class="w"&gt; &lt;/span&gt;__future__&lt;span class="w"&gt; &lt;/span&gt;import&lt;span class="w"&gt; &lt;/span&gt;print_function
&lt;span class="m"&gt;114&lt;/span&gt;,115c115
&amp;lt;&lt;span class="w"&gt;             &lt;/span&gt;print&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;ERROR ({}) running {}&amp;quot;&lt;/span&gt;.format&lt;span class="o"&gt;(&lt;/span&gt;e.returncode,&lt;span class="w"&gt; &lt;/span&gt;e.cmd&lt;span class="o"&gt;)&lt;/span&gt;,
&amp;lt;&lt;span class="w"&gt;                   &lt;/span&gt;&lt;span class="nv"&gt;file&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;stderr&lt;span class="o"&gt;)&lt;/span&gt;
---
&amp;gt;&lt;span class="w"&gt;             &lt;/span&gt;print&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;ERROR ({}) running {}&amp;quot;&lt;/span&gt;.format&lt;span class="o"&gt;(&lt;/span&gt;e.returncode,&lt;span class="w"&gt; &lt;/span&gt;e.cmd&lt;span class="o"&gt;)&lt;/span&gt;,file&lt;span class="o"&gt;=&lt;/span&gt;stderr&lt;span class="o"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;h1&gt;How to build&lt;/h1&gt;
&lt;ol&gt;
&lt;li&gt;git clone &lt;code&gt;http://hpcgitlab.labs.lenovo.com/WSS/wss.git&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;Copy (or symlink) &lt;code&gt;wss/hack/layer-basic&lt;/code&gt; to &lt;code&gt;LAYER_PATH&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;charm build&lt;/code&gt; your charm as usual.&lt;/li&gt;
&lt;li&gt;Copy &lt;code&gt;wss/hack/charmhelpers....tar.gz&lt;/code&gt; and
   &lt;code&gt;charms.reactive....tar.gz&lt;/code&gt; to &lt;code&gt;dist/trusty(or
   centos)/yourcharm/wheelhouse&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;Copy &lt;code&gt;wss/hack/hooks&lt;/code&gt; to &lt;code&gt;dist/.../hooks&lt;/code&gt;. However, if you have
   customized hooks, you need to make modifications manually. &lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Have fun with CentOS.&lt;/p&gt;</content><category term="openstack"></category><category term="lenovo"></category></entry><entry><title>Charm Reactive</title><link href="https://fengxia41103.github.io/myblog/juju%20charm%20reactive.html" rel="alternate"></link><published>2017-04-24T14:00:00-04:00</published><updated>2019-03-15T00:00:00-04:00</updated><author><name>Feng Xia</name></author><id>tag:fengxia41103.github.io,2017-04-24:/myblog/juju charm reactive.html</id><summary type="html">&lt;p&gt;Charm's reactive framework is the core of charm design and&lt;/p&gt;</summary><content type="html">&lt;p&gt;execution. This article is to dive into its source code in order to
understand its execution logic and design philosophy.&lt;/p&gt;
&lt;p&gt;In this article we will study charm's &lt;a href="https://pythonhosted.org/charms.reactive/"&gt;reactive&lt;/a&gt; framework to get a
firm understanding of what they mean by writing an reactive charm.&lt;/p&gt;
&lt;h1&gt;Hooks&lt;/h1&gt;
&lt;blockquote&gt;
&lt;p&gt;Decorator: &lt;code&gt;@hook&lt;/code&gt;
Definition: &lt;code&gt;charm.reactive/charms/reactive/decorators.py&lt;/code&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Hooks give one a dedicated sequence that execution is guaranteed in
that order and developer can use &lt;code&gt;@hook&lt;/code&gt; to define a function block
to run. &lt;/p&gt;
&lt;figure class="s12 center"&gt;
  &lt;img src="images/charm%20hooks.png" /&gt;
  &lt;figcaption&gt;Sequence of charm hooks&lt;/figcaption&gt;
&lt;/figure&gt;

&lt;p&gt;Hooks have a few limitations which affect the usefulness of this
mechanism:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;Hooks are really meant to be used for internal workflow
   transitions. There are only 8 of them and they represent a specific
   stage in the life cycle of a charm. There is no mechanism to extend
   or inherit these built-ins.&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;install&lt;/li&gt;
&lt;li&gt;config-changed&lt;/li&gt;
&lt;li&gt;start&lt;/li&gt;
&lt;li&gt;upgrade-charm&lt;/li&gt;
&lt;li&gt;stop&lt;/li&gt;
&lt;li&gt;update-status&lt;/li&gt;
&lt;li&gt;leader-elected&lt;/li&gt;
&lt;li&gt;leader-settings-changed&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Hook sequence is &lt;strong&gt;hardcoded&lt;/strong&gt;. This is defined in 
  &lt;code&gt;juju/worker/uniter/operation/runhook.go&lt;/code&gt;. In other words, the
  transition from &lt;code&gt;install&lt;/code&gt; to &lt;code&gt;upgrade-charm&lt;/code&gt; is both guaranteed and
  mandatory. This limits how we can design our workflows.&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h1&gt;States&lt;/h1&gt;
&lt;blockquote&gt;
&lt;p&gt;Decorator: &lt;code&gt;@not_unless&lt;/code&gt;, &lt;code&gt;@only_once&lt;/code&gt;, &lt;code&gt;@when&lt;/code&gt;, &lt;code&gt;@when_all&lt;/code&gt;, &lt;code&gt;@when_any&lt;/code&gt;, &lt;code&gt;@when_file_changed&lt;/code&gt;, &lt;code&gt;@when_none&lt;/code&gt;, &lt;code&gt;@when_not&lt;/code&gt;, &lt;code&gt;@when_not_all&lt;/code&gt;
Definition: &lt;code&gt;charm.reactive/charms/reactive/decorators.py&lt;/code&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;States were probably designed to fix the limitation that Hooks
present. States can be defined using arbitrary string &lt;span
class="myhighlight"&gt;except&lt;/span&gt; two reserved words &lt;code&gt;juju&lt;/code&gt; and
&lt;code&gt;jujud&lt;/code&gt;. Further, workflow of states are not fixed. States are
evaluated iteratively and a &lt;code&gt;true&lt;/code&gt; condition will execute 
associated function block.&lt;/p&gt;
&lt;h2&gt;When a state is true?&lt;/h2&gt;
&lt;p&gt;What defines a &lt;code&gt;true&lt;/code&gt;? The code is defined in class &lt;code&gt;StateWatch&lt;/code&gt; in
file &lt;code&gt;charm.reactive/charms/reactive/bus.py&lt;/code&gt;. The value &lt;code&gt;changed&lt;/code&gt; is
&lt;code&gt;true&lt;/code&gt; when there are states to monitor (&lt;code&gt;set(states)&lt;/code&gt; is not empty) and
there are changes (&lt;code&gt;data['changes]&lt;/code&gt; is not empty).&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="k"&gt;class&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nc"&gt;StateWatch&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;object&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="o"&gt;...&lt;/span&gt;

    &lt;span class="nd"&gt;@classmethod&lt;/span&gt;
    &lt;span class="k"&gt;def&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nf"&gt;watch&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;cls&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;watcher&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;states&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="n"&gt;data&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="bp"&gt;cls&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;_get&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
        &lt;span class="n"&gt;iteration&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;data&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;iteration&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
        &lt;span class="n"&gt;changed&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;bool&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;set&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;states&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&lt;/span&gt; &lt;span class="nb"&gt;set&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;data&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;changes&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;]))&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;iteration&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt; &lt;span class="ow"&gt;or&lt;/span&gt; &lt;span class="n"&gt;changed&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;What defines the values in &lt;code&gt;data['changes']&lt;/code&gt;? There are only two
places to set this value: &lt;code&gt;set_state(...)&lt;/code&gt; and &lt;code&gt;remove_state(...)&lt;/code&gt;.
Looking at &lt;code&gt;set_state&lt;/code&gt; reveals that if the state is already in
&lt;code&gt;old_states&lt;/code&gt; list, it will not be set to &lt;code&gt;changed&lt;/code&gt;, therefore the
&lt;code&gt;watch&lt;/code&gt; will fail to identify this state and will not trigger an
execution. In other words, if a state becomes &lt;code&gt;true&lt;/code&gt;, it will not be
re-evaluated until it is reset to &lt;code&gt;false&lt;/code&gt; first.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Reactive charm triggers only on state transitions:
&lt;strong&gt;False-&amp;gt;True&lt;/strong&gt; (&lt;code&gt;@when&lt;/code&gt;) or
&lt;strong&gt;True-&amp;gt;False&lt;/strong&gt; (&lt;code&gt;@when_not&lt;/code&gt;).&lt;/p&gt;
&lt;/blockquote&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="k"&gt;def&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nf"&gt;set_state&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;state&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;value&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="kc"&gt;None&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="sd"&gt;&amp;quot;&amp;quot;&amp;quot;&lt;/span&gt;
&lt;span class="sd"&gt;    Set the given state as active, optionally associating with a relation.&lt;/span&gt;
&lt;span class="sd"&gt;    &amp;quot;&amp;quot;&amp;quot;&lt;/span&gt;
    &lt;span class="n"&gt;old_states&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;get_states&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
    &lt;span class="n"&gt;unitdata&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;kv&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;update&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt;&lt;span class="n"&gt;state&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;value&lt;/span&gt;&lt;span class="p"&gt;},&lt;/span&gt; &lt;span class="n"&gt;prefix&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;reactive.states.&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;state&lt;/span&gt; &lt;span class="ow"&gt;not&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;old_states&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="n"&gt;StateWatch&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;change&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;state&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;h2&gt;Namespace&lt;/h2&gt;
&lt;p&gt;There isn't really a namespace concept in charm. I'm borrowing the
term to illustrate state boundaries. The question is that if I can
define arbitrary states, in which scope are they visible? Can
&lt;code&gt;state.xyz&lt;/code&gt; in charm A trigger an action in charm B? or in another
layer? or in another unit? or even a bundle?&lt;/p&gt;
&lt;p&gt;To answer this, we need to examine how states are stored. The key
information can be found in &lt;code&gt;charmhelpers/core/unitdata.py&lt;/code&gt; &amp;mdash;
this is the storage class that is used by charm to store
states. Clearly the backend is a &lt;code&gt;sqlite3&lt;/code&gt; database.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="k"&gt;class&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nc"&gt;Storage&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;object&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="sd"&gt;&amp;quot;&amp;quot;&amp;quot;Simple key value database for local unit state within charms.&lt;/span&gt;

&lt;span class="sd"&gt;    Modifications are not persisted unless :meth:`flush` is called.&lt;/span&gt;

&lt;span class="sd"&gt;    To support dicts, lists, integer, floats, and booleans values&lt;/span&gt;
&lt;span class="sd"&gt;    are automatically json encoded/decoded.&lt;/span&gt;
&lt;span class="sd"&gt;    &amp;quot;&amp;quot;&amp;quot;&lt;/span&gt;
    &lt;span class="k"&gt;def&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="fm"&gt;__init__&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;path&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="kc"&gt;None&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;db_path&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;path&lt;/span&gt;
        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;path&lt;/span&gt; &lt;span class="ow"&gt;is&lt;/span&gt; &lt;span class="kc"&gt;None&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
            &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;UNIT_STATE_DB&amp;#39;&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;os&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;environ&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
                &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;db_path&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;os&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;environ&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;UNIT_STATE_DB&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
            &lt;span class="k"&gt;else&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
                &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;db_path&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;os&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;path&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;join&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
                    &lt;span class="n"&gt;os&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;environ&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;CHARM_DIR&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;.unit-state.db&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;conn&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;sqlite3&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;connect&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;&lt;/span&gt;&lt;span class="si"&gt;%s&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;&lt;/span&gt; &lt;span class="o"&gt;%&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;db_path&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;cursor&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;conn&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;cursor&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
    &lt;span class="o"&gt;....&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Function &lt;code&gt;_init(self)&lt;/code&gt; reveals the table schema in this database
&amp;mdash; three tables: &lt;code&gt;kv&lt;/code&gt;,
&lt;code&gt;kv_revisions&lt;/code&gt; and &lt;code&gt;hooks&lt;/code&gt;. &lt;code&gt;kv&lt;/code&gt; is the primary store as can be seen
in the &lt;code&gt;set_state&lt;/code&gt; function above (&lt;code&gt;unitdata.kv().update(....&lt;/code&gt;).&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="k"&gt;def&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nf"&gt;_init&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;cursor&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;execute&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;&amp;#39;&amp;#39;&lt;/span&gt;
&lt;span class="s1"&gt;        create table if not exists kv (&lt;/span&gt;
&lt;span class="s1"&gt;           key text,&lt;/span&gt;
&lt;span class="s1"&gt;           data text,&lt;/span&gt;
&lt;span class="s1"&gt;           primary key (key)&lt;/span&gt;
&lt;span class="s1"&gt;           )&amp;#39;&amp;#39;&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;cursor&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;execute&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;&amp;#39;&amp;#39;&lt;/span&gt;
&lt;span class="s1"&gt;        create table if not exists kv_revisions (&lt;/span&gt;
&lt;span class="s1"&gt;           key text,&lt;/span&gt;
&lt;span class="s1"&gt;           revision integer,&lt;/span&gt;
&lt;span class="s1"&gt;           data text,&lt;/span&gt;
&lt;span class="s1"&gt;           primary key (key, revision)&lt;/span&gt;
&lt;span class="s1"&gt;           )&amp;#39;&amp;#39;&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;cursor&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;execute&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;&amp;#39;&amp;#39;&lt;/span&gt;
&lt;span class="s1"&gt;        create table if not exists hooks (&lt;/span&gt;
&lt;span class="s1"&gt;           version integer primary key autoincrement,&lt;/span&gt;
&lt;span class="s1"&gt;           hook text,&lt;/span&gt;
&lt;span class="s1"&gt;           date text&lt;/span&gt;
&lt;span class="s1"&gt;           )&amp;#39;&amp;#39;&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;conn&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;commit&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;What is not obvious is that each unit has its own DB. Therefore, the
boundary of states are &lt;strong&gt;per charm unit&lt;/strong&gt;. In other words, states are
visible inside a unit. Using layers will package states inside a
single charm, but in run time it is the unit boundary that matters.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;States do not go across charms.
Using the same charm, states do not go across units either.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h1&gt;Dispatch&lt;/h1&gt;
&lt;p&gt;Reading function &lt;code&gt;dispatch&lt;/code&gt; in
&lt;code&gt;charms.reactive/charms/reactive/bus.py&lt;/code&gt; is interesting because there
is certainly something no document has mentioned. Dispatch is done in
two phases: &lt;strong&gt;hooks&lt;/strong&gt; and &lt;strong&gt;other&lt;/strong&gt;.&lt;/p&gt;
&lt;p&gt;Hooks are run in the &lt;code&gt;hooks&lt;/code&gt; phase. 
Registered hook will run its &lt;code&gt;test()&lt;/code&gt; so this scan will test all hooks.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="k"&gt;def&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nf"&gt;_test&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;to_test&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nb"&gt;list&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;filter&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;lambda&lt;/span&gt; &lt;span class="n"&gt;h&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;h&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;test&lt;/span&gt;&lt;span class="p"&gt;(),&lt;/span&gt; &lt;span class="n"&gt;to_test&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;

&lt;span class="o"&gt;....&lt;/span&gt;

&lt;span class="n"&gt;unitdata&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;kv&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;set&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;reactive.dispatch.phase&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;hooks&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;hook_handlers&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;_test&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;Handler&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;get_handlers&lt;/span&gt;&lt;span class="p"&gt;())&lt;/span&gt;
&lt;span class="n"&gt;_invoke&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;hook_handlers&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;States are run in the &lt;code&gt;other&lt;/code&gt; phase.
The magic number &lt;code&gt;100&lt;/code&gt; for-loop highlights an underline assumption
that states can converge within these iterations. Otherwise, state
watch is reset and will be count from 0 again during next iteration
&amp;rarr; state effect can then ripple through one single iteration.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="n"&gt;unitdata&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;kv&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;set&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;reactive.dispatch.phase&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;other&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="nb"&gt;range&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;100&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="n"&gt;StateWatch&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;iteration&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;other_handlers&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;_test&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;Handler&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;get_handlers&lt;/span&gt;&lt;span class="p"&gt;())&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="ow"&gt;not&lt;/span&gt; &lt;span class="n"&gt;other_handlers&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="k"&gt;break&lt;/span&gt;
    &lt;span class="n"&gt;_invoke&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;other_handlers&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;</content><category term="openstack"></category><category term="lenovo"></category></entry><entry><title>Charm chained states</title><link href="https://fengxia41103.github.io/myblog/juju%20charm%20chained%20states.html" rel="alternate"></link><published>2017-04-24T13:00:00-04:00</published><updated>2017-04-24T13:00:00-04:00</updated><author><name>Feng Xia</name></author><id>tag:fengxia41103.github.io,2017-04-24:/myblog/juju charm chained states.html</id><summary type="html">&lt;p&gt;This charm is created to demonstrate chained states using Juju
charm. Chained states is essentially mirroring a pattern of any sequential
execution in a workflow. Potentially each execution block can also
have conditions to set the next state, even though this type of knowledge
should be exposed outside function element, if possible, and to be
handled by something better than pure code (eg. BPMN).&lt;/p&gt;
&lt;p&gt;The model for this experiment is straightforward. We create a layer
with three states: &lt;code&gt;state.1&lt;/code&gt;, &lt;code&gt;state.2&lt;/code&gt;, and &lt;code&gt;state.3&lt;/code&gt;. Upon start
charm kicks off execution of &lt;code&gt;state.1&lt;/code&gt;, which then transit itself to
the &lt;code&gt;state.2&lt;/code&gt;, then to &lt;code&gt;state.3&lt;/code&gt;, and then loop back to &lt;code&gt;state.1&lt;/code&gt;.&lt;/p&gt;
&lt;figure class="s6 m6 s12 center"&gt;
  &lt;img src="images/charm%20chain%20states.png" /&gt;
  &lt;figcaption&gt;Charm design pattern: chain states&lt;/figcaption&gt;
&lt;/figure&gt;

&lt;p&gt;The key questions to answer in this experiment are:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;What is the entry point to start the first state?&lt;/li&gt;
&lt;li&gt;If setting two states true, are they executed serially or
   in parallel?&lt;/li&gt;
&lt;li&gt;Can a blocking command halt state transition even if there are
   states being true and can be acted upon? &lt;/li&gt;
&lt;/ol&gt;
&lt;h1&gt;Screencast&lt;/h1&gt;
&lt;p&gt;Top left window shows the &lt;code&gt;juju â€¦&lt;/code&gt;&lt;/p&gt;</summary><content type="html">&lt;p&gt;This charm is created to demonstrate chained states using Juju
charm. Chained states is essentially mirroring a pattern of any sequential
execution in a workflow. Potentially each execution block can also
have conditions to set the next state, even though this type of knowledge
should be exposed outside function element, if possible, and to be
handled by something better than pure code (eg. BPMN).&lt;/p&gt;
&lt;p&gt;The model for this experiment is straightforward. We create a layer
with three states: &lt;code&gt;state.1&lt;/code&gt;, &lt;code&gt;state.2&lt;/code&gt;, and &lt;code&gt;state.3&lt;/code&gt;. Upon start
charm kicks off execution of &lt;code&gt;state.1&lt;/code&gt;, which then transit itself to
the &lt;code&gt;state.2&lt;/code&gt;, then to &lt;code&gt;state.3&lt;/code&gt;, and then loop back to &lt;code&gt;state.1&lt;/code&gt;.&lt;/p&gt;
&lt;figure class="s6 m6 s12 center"&gt;
  &lt;img src="images/charm%20chain%20states.png" /&gt;
  &lt;figcaption&gt;Charm design pattern: chain states&lt;/figcaption&gt;
&lt;/figure&gt;

&lt;p&gt;The key questions to answer in this experiment are:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;What is the entry point to start the first state?&lt;/li&gt;
&lt;li&gt;If setting two states true, are they executed serially or
   in parallel?&lt;/li&gt;
&lt;li&gt;Can a blocking command halt state transition even if there are
   states being true and can be acted upon? &lt;/li&gt;
&lt;/ol&gt;
&lt;h1&gt;Screencast&lt;/h1&gt;
&lt;p&gt;Top left window shows the &lt;code&gt;juju debug-log&lt;/code&gt; which prints state
transition among three states. Top right window &lt;code&gt;juju status&lt;/code&gt; also
shows state transitions in &lt;strong&gt;Message&lt;/strong&gt; column which is set by
&lt;code&gt;set_status&lt;/code&gt; in each state's function block.&lt;/p&gt;
&lt;figure class="s12 center"&gt;
  &lt;img src="images/charm%20chained%20states%20screencast.gif" /&gt;
  &lt;figcaption&gt;Charm chain states screencast&lt;/figcaption&gt;
&lt;/figure&gt;

&lt;h1&gt;The 1st state&lt;/h1&gt;
&lt;blockquote&gt;
&lt;p&gt;How to start the first state?&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;In this test we experimented using hooks to introduce the first state since hooks
are executed in a predetermined sequence. However, &lt;code&gt;set_state&lt;/code&gt; has no
effect and actually should be avoided within hook execution according
to document (needs reference).&lt;/p&gt;
&lt;p&gt;To safely start the whole process, we settled on &lt;code&gt;@only_once&lt;/code&gt;:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="nd"&gt;@only_once&lt;/span&gt;
&lt;span class="k"&gt;def&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nf"&gt;state_0&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt;
    &lt;span class="n"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;something------------------&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;h2&gt;Chain state pattern&lt;/h2&gt;
&lt;p&gt;The three primary states follow the same pattern. Using &lt;code&gt;state.1&lt;/code&gt; for example:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="nd"&gt;@when&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;state.1&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="k"&gt;def&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nf"&gt;state_1&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="sd"&gt;&amp;quot;&amp;quot;&amp;quot;State.1&lt;/span&gt;
&lt;span class="sd"&gt;    &amp;quot;&amp;quot;&amp;quot;&lt;/span&gt;

    &lt;span class="c1"&gt;# set status&lt;/span&gt;
    &lt;span class="n"&gt;t&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;time&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;ctime&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;time&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;time&lt;/span&gt;&lt;span class="p"&gt;())&lt;/span&gt;
    &lt;span class="n"&gt;status_set&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;maintenance&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;state.1 &lt;/span&gt;&lt;span class="si"&gt;%s&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;&lt;/span&gt; &lt;span class="o"&gt;%&lt;/span&gt; &lt;span class="n"&gt;t&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

    &lt;span class="c1"&gt;# workload&lt;/span&gt;
    &lt;span class="n"&gt;time&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;sleep&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;TEST_TIMEOUT&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

    &lt;span class="c1"&gt;# state transition&lt;/span&gt;
    &lt;span class="n"&gt;remove_state&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;state.1&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;set_state&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;state.2&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;h1&gt;Multiple states being true&lt;/h1&gt;
&lt;blockquote&gt;
&lt;p&gt;If we set multiple states &lt;code&gt;true&lt;/code&gt;, will they be executed in parallel?&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;From &lt;a href="https://fengxia41103.github.io/myblog/juju charm reactive.html"&gt;previous article&lt;/a&gt; on state execution, we can already see that
states are first saved in a dictionary and then scanned by
iterator. Therefore, there is no parallel computing built in the charm
execution mechanism. Further, execution order of two states have no
guarantee except they will all be done sooner or later because Python
dictionary does not enforce any order.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Multiple &lt;code&gt;true&lt;/code&gt; states will be executed in serial.
Orders of execution is undetermined.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h1&gt;Long running process&lt;/h1&gt;
&lt;blockquote&gt;
&lt;p&gt;Will a shell blocking call halt state transition?&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;In this test we want to verify whether starting a long running process
will block charm's state transition. We used &lt;code&gt;subprocess.check_all&lt;/code&gt; to
start a blocking call while state 1-3 are kept to loop as designed.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="k"&gt;def&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nf"&gt;state_4&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="sd"&gt;&amp;quot;&amp;quot;&amp;quot;State4.&lt;/span&gt;
&lt;span class="sd"&gt;    &amp;quot;&amp;quot;&amp;quot;&lt;/span&gt;
    &lt;span class="n"&gt;subprocess&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;check_all&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;apt update &amp;amp;&amp;amp; apt dist-upgrade&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;The result is clear that state machine will come to a halt at this
blocking call, which would have to be the case since we already know
how states are being scanned and executed from &lt;a href="https://fengxia41103.github.io/myblog/juju charm reactive.html"&gt;previous
article&lt;/a&gt;. All states are cached in a dictionary and are scanned in
a tight loop per iteration. Thus a blocking call in any handler will
cause the loop to a halt. Nowhere in code will take a signal so this
behavior can not be interruptted either.&lt;/p&gt;</content><category term="openstack"></category><category term="lenovo"></category></entry><entry><title>MAAS vs. Ironic</title><link href="https://fengxia41103.github.io/myblog/maas%20and%20ironic.html" rel="alternate"></link><published>2017-03-30T10:20:00-04:00</published><updated>2017-03-30T10:20:00-04:00</updated><author><name>Feng Xia</name></author><id>tag:fengxia41103.github.io,2017-03-30:/myblog/maas and ironic.html</id><summary type="html">&lt;p&gt;This article is to analyze Openstack Ironic and Canonical MAAS, both
are tools to turn baremetal into a pool of managed resources that are
ready for consumption by upstream srervice.  On the highest level, a
baremetal is either managed or not-managed. Being &lt;strong&gt;managed&lt;/strong&gt; requires
that the manager is aware of the existence of the baremetal, and has
acquired necessary information of the server so that these two things
are now possible:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Power cycle the server&lt;/li&gt;
&lt;li&gt;Install a software such as operating system&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;The general process of managing a baremetal is straightforward.
Baremetal life cycle can be viewed in the following states. Names and
details of each state and state transitions differ, but the concept
remains valid. &lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;span class="myhighlight"&gt;unknown&lt;/span&gt;: Baremetal is not managed.&lt;/li&gt;
&lt;li&gt;&lt;span class="myhighlight"&gt;enlisted&lt;/span&gt;: Manager is now aware of
   the existence of the baremetal. It does not yet have sufficient
   information to cycle its power or loading anything to execute on it.&lt;/li&gt;
&lt;li&gt;&lt;span class="myhighlight"&gt;ready for provisioning&lt;/span&gt;: Sometimes
   also called &lt;em&gt;hardware inventory&lt;/em&gt; phase, in which the manager has
   acquired capability to control the server's power. Knowing other
   server characteristics â€¦&lt;/li&gt;&lt;/ol&gt;</summary><content type="html">&lt;p&gt;This article is to analyze Openstack Ironic and Canonical MAAS, both
are tools to turn baremetal into a pool of managed resources that are
ready for consumption by upstream srervice.  On the highest level, a
baremetal is either managed or not-managed. Being &lt;strong&gt;managed&lt;/strong&gt; requires
that the manager is aware of the existence of the baremetal, and has
acquired necessary information of the server so that these two things
are now possible:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Power cycle the server&lt;/li&gt;
&lt;li&gt;Install a software such as operating system&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;The general process of managing a baremetal is straightforward.
Baremetal life cycle can be viewed in the following states. Names and
details of each state and state transitions differ, but the concept
remains valid. &lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;span class="myhighlight"&gt;unknown&lt;/span&gt;: Baremetal is not managed.&lt;/li&gt;
&lt;li&gt;&lt;span class="myhighlight"&gt;enlisted&lt;/span&gt;: Manager is now aware of
   the existence of the baremetal. It does not yet have sufficient
   information to cycle its power or loading anything to execute on it.&lt;/li&gt;
&lt;li&gt;&lt;span class="myhighlight"&gt;ready for provisioning&lt;/span&gt;: Sometimes
   also called &lt;em&gt;hardware inventory&lt;/em&gt; phase, in which the manager has
   acquired capability to control the server's power. Knowing other
   server characteristics is not really &lt;em&gt;required if using PXE boot&lt;/em&gt; during
   provisioning because the first image loaded can potentially does
   more inventory when it runs.&lt;/li&gt;
&lt;li&gt;&lt;span class="myhighlight"&gt;provisioned&lt;/span&gt;: an operating system
   or a bootable file systems have been written to a disk that
   will be used by the server from this point on. &lt;/li&gt;
&lt;li&gt;&lt;span class="myhighlight"&gt;in use&lt;/span&gt;: The server is running user
   workload.&lt;/li&gt;
&lt;li&gt;&lt;span class="myhighlight"&gt;maintenance mode&lt;/span&gt;: a catch-all
   state that a baremetal is not available for use in normal states and needs
   operator intervene.&lt;/li&gt;
&lt;/ol&gt;
&lt;figure class="s12 center"&gt;
    &lt;img src="images/baremetal%20lifecycle.png" /&gt;
    &lt;figcaption&gt;General baremetal life cycle&lt;/figcaption&gt;
&lt;/figure&gt;

&lt;h1&gt;Comparison framework&lt;/h1&gt;
&lt;p&gt;Using their APIs as reference, we have grouped their functions into
the following subject domains for discussion purpose:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;minimal setup&lt;/li&gt;
&lt;li&gt;power&lt;/li&gt;
&lt;li&gt;select boot order&lt;/li&gt;
&lt;li&gt;new server discovery and enlisting&lt;/li&gt;
&lt;li&gt;server inventory&lt;/li&gt;
&lt;li&gt;image&lt;/li&gt;
&lt;li&gt;OS provisioning&lt;/li&gt;
&lt;li&gt;networking&lt;/li&gt;
&lt;li&gt;storage and partition&lt;/li&gt;
&lt;li&gt;deployment customization&lt;/li&gt;
&lt;li&gt;server grouping&lt;/li&gt;
&lt;li&gt;multi-tenant&lt;/li&gt;
&lt;/ul&gt;
&lt;h1&gt;Minimal setup&lt;/h1&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Minimal setup&lt;/th&gt;
&lt;th&gt;MAAS&lt;/th&gt;
&lt;th&gt;Ironic&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;DHCP service&lt;/td&gt;
&lt;td&gt;y&lt;/td&gt;
&lt;td&gt;y&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;TFTP service&lt;/td&gt;
&lt;td&gt;y "no" is using diskless image&lt;/td&gt;
&lt;td&gt;y "no" if using iSCSI drivers&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;External image repo&lt;/td&gt;
&lt;td&gt;n&lt;/td&gt;
&lt;td&gt;y&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;BMC network&lt;/td&gt;
&lt;td&gt;depends on driver&lt;/td&gt;
&lt;td&gt;depends on driver&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Tenant network&lt;/td&gt;
&lt;td&gt;y&lt;/td&gt;
&lt;td&gt;y&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Provision network&lt;/td&gt;
&lt;td&gt;y&lt;/td&gt;
&lt;td&gt;y&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;div class="my-multicol-2"&gt;
&lt;figure class="col s12"&gt;
    &lt;img class="img-responsive center"
    src="images/maas%20minimum%20setup.png" /&gt;
    &lt;figcaption&gt;MAAS minimal setup&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;figure class="col s12"&gt;
    &lt;img class="img-responsive center"
    src="images/ironic%20minimal%20setup.png" /&gt;
    &lt;figcaption&gt;Ironic minimal setup&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;/div&gt;

&lt;h1&gt;Power&lt;/h1&gt;
&lt;p&gt;The minimum capability in managing power includes two aspects:
querying current power state and set power state.  Both &lt;a href="https://wiki.openstack.org/wiki/Ironic/Drivers"&gt;Ironic&lt;/a&gt;
and &lt;a href="https://docs.ubuntu.com/maas/2.1/en/installconfig-power-types"&gt;MAAS&lt;/a&gt; support IPMI interface. MAAS's has more vendor centric
implementations where Ironic's are more general purposed.&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Power type&lt;/th&gt;
&lt;th&gt;MAAS&lt;/th&gt;
&lt;th&gt;Ironic&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;Intel AMT&lt;/td&gt;
&lt;td&gt;using &lt;code&gt;amttool&lt;/code&gt;,&lt;code&gt;amtterm&lt;/code&gt; or &lt;code&gt;wsman&lt;/code&gt;, &lt;code&gt;wsmancli&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;American Power Conversion (APC) -PDU&lt;/td&gt;
&lt;td&gt;using &lt;code&gt;snmpset&lt;/code&gt;, &lt;code&gt;snmp&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Digital Loggers, Inc. - PDU&lt;/td&gt;
&lt;td&gt;HTTP GET, state is parsed from a HTML&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Facebook's Wedge&lt;/td&gt;
&lt;td&gt;SSH, run command &lt;code&gt;/usr/local/bin/wedge_power.sh&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Fence CDU (Redhat cluster)&lt;/td&gt;
&lt;td&gt;using &lt;code&gt;fence-agents&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;IBM Hardware Management Console (HMC)&lt;/td&gt;
&lt;td&gt;SSH, run command &lt;code&gt;chsysstate&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;General IPMI&lt;/td&gt;
&lt;td&gt;&lt;code&gt;freeipmi-tools&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;a href="http://ipmitool.sourceforge.net/"&gt;&lt;code&gt;ipmitool&lt;/code&gt;&lt;/a&gt;, &lt;a href="https://github.com/openstack/pyghmi"&gt;pyghmi&lt;/a&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Microsoft OCS - Chassis Manager&lt;/td&gt;
&lt;td&gt;using HTTP GET, can set next boot device&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;HP Moonshot - iLO4&lt;/td&gt;
&lt;td&gt;&lt;code&gt;ipmitool&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;HP Moonshot - iLO Chassis Manager&lt;/td&gt;
&lt;td&gt;SSH, run command&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;SeaMicro 15000&lt;/td&gt;
&lt;td&gt;&lt;a href="http://ipmitool.sourceforge.net/"&gt;&lt;code&gt;ipmitool&lt;/code&gt;&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;x&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Cisco UCS Manager&lt;/td&gt;
&lt;td&gt;HTTP GET, parameters in url&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;OpenStack Nova&lt;/td&gt;
&lt;td&gt;NOVA API&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;VMware&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;KVM/Virsh&lt;/td&gt;
&lt;td&gt;&lt;code&gt;virsh&lt;/code&gt;, &lt;code&gt;virt-login-shell&lt;/code&gt;, &lt;code&gt;libvirt-bin&lt;/code&gt;.&lt;/td&gt;
&lt;td&gt;SSH&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Manual&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Dell Remote Access Controller (DRAC)&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;drac&lt;/code&gt; driver&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;HP ProLiant servers&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;ilo&lt;/code&gt; driver&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Cisco IMC&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;a href="https://github.com/CiscoUcs/imcsdk"&gt;imcsck&lt;/a&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;iRMC SerView Common Command Interface&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;a href="https://github.com/openstack/python-scciclient"&gt;scciclient&lt;/a&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;HPE OneView&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;a href="https://github.com/openstack/python-oneviewclient"&gt;oneviewclient&lt;/a&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;General SNMP&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;x&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;VirtualBox&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;SSH&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;iboot&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;x&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Wake-On-Lan&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;x&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h1&gt;Boot order&lt;/h1&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Select boot order&lt;/th&gt;
&lt;th&gt;MAAS&lt;/th&gt;
&lt;th&gt;Ironic&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;Using IPMI driver&lt;/td&gt;
&lt;td&gt;n&lt;/td&gt;
&lt;td&gt;y&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Using vendor specific driver&lt;/td&gt;
&lt;td&gt;Mirosoft OCS driver only&lt;/td&gt;
&lt;td&gt;vendor passthru&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;Except Microsoft OCS driver, MAAS has no support to select or change
boot order, even in its IPMI-based drivers.&lt;/p&gt;
&lt;p&gt;Ironic, however, supports selecting &lt;a href="https://docs.openstack.org/developer/ironic-inspector/workflow.html#state-machine-diagram"&gt;boot device&lt;/a&gt; using
&lt;code&gt;*_ipmitool&lt;/code&gt; drivers. It also has &lt;em&gt;vendor passthrough&lt;/em&gt; feature which
allows passing in vendor specific instructions in driver, thus giving
the possibility to manipulate the server beyond standard functions.&lt;/p&gt;
&lt;h1&gt;New server discovery and enlisting&lt;/h1&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Server discovery and enlisting&lt;/th&gt;
&lt;th&gt;MAAS&lt;/th&gt;
&lt;th&gt;Ironic&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;Discover new server&lt;/td&gt;
&lt;td&gt;y&lt;/td&gt;
&lt;td&gt;n&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Enlisting MAC address&lt;/td&gt;
&lt;td&gt;auto&lt;/td&gt;
&lt;td&gt;manual&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;MAAS can discover new server by monitoring  DHCP data packet given that MAAS is
the DHCP server serving the subnet that baremetals are
connected to. Discovered server will be registered as &lt;em&gt;NEW&lt;/em&gt;
and is ready for inventory. At this point MAAS has only the MAC
address that was broadcasted from DHCPREQUEST.&lt;/p&gt;
&lt;p&gt;Ironic has no method to auto-discover a new server. It can only
register them through command line or its API interface. So it
requires either a manual process (command line) or programming.
But because of this enlisting a node in Ironic term can include a
wealthy of information more than its MAC address.&lt;/p&gt;
&lt;h1&gt;Server inventory&lt;/h1&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Server inventory&lt;/th&gt;
&lt;th&gt;MAAS&lt;/th&gt;
&lt;th&gt;Ironic&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;CPU&lt;/td&gt;
&lt;td&gt;y&lt;/td&gt;
&lt;td&gt;y&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Memory size&lt;/td&gt;
&lt;td&gt;y&lt;/td&gt;
&lt;td&gt;y&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Partition size&lt;/td&gt;
&lt;td&gt;y&lt;/td&gt;
&lt;td&gt;y&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Network interface&lt;/td&gt;
&lt;td&gt;y&lt;/td&gt;
&lt;td&gt;y&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Mechanism&lt;/td&gt;
&lt;td&gt;cloud-init running scripts&lt;/td&gt;
&lt;td&gt;special ramdisk&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;Server inventory is to inspect the server for hardware features such
as the number of CPUs, memory size, disk size and partition. MAAS
handles this in a separate step, &lt;strong&gt;Commission&lt;/strong&gt;, after
discovery, where this is optional in Ironic.&lt;/p&gt;
&lt;p&gt;MAAS does so by loading a minimal Ubuntu image at next boot
and run commissioning scripts to harvest
system information:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;DHCP server is contacted&lt;/li&gt;
&lt;li&gt;kernel and initrd are received over TFTP&lt;/li&gt;
&lt;li&gt;machine boots&lt;/li&gt;
&lt;li&gt;initrd mounts a Squashfs image ephemerally over iSCSI&lt;/li&gt;
&lt;li&gt;cloud-init runs commissioning scripts&lt;/li&gt;
&lt;li&gt;machine shuts down&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Ironic, on the other hand, relies on a separate setup, &lt;a href="https://docs.openstack.org/developer/ironic-inspector/"&gt;Ironic
Inspector&lt;/a&gt; to orchestrate this process (see &lt;a href="https://docs.openstack.org/developer/ironic-inspector/workflow.html#state-machine-diagram"&gt;steps&lt;/a&gt; below). The
principle is the same that Inspector will acquire credentials to
manage the node power from Ironic, then using that to PXE rebooting
the node and load a ramdisk. The difference is, however, that ramdisk
is not limited to Ubuntu.&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Operator sends nodes on introspection using ironic-inspector API or CLI&lt;/li&gt;
&lt;li&gt;On receiving node UUID ironic-inspector:&lt;ul&gt;
&lt;li&gt;validates node power credentials, current power and provisioning states,&lt;/li&gt;
&lt;li&gt;allows firewall access to PXE boot service for the nodes,&lt;/li&gt;
&lt;li&gt;issues reboot command for the nodes, so that they boot the ramdisk.&lt;/li&gt;
&lt;li&gt;The ramdisk collects the required information and posts it back to ironic-inspector.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;On receiving data from the ramdisk, ironic-inspector:&lt;ul&gt;
&lt;li&gt;validates received data,&lt;/li&gt;
&lt;li&gt;finds the node in Ironic database using itâ€™s BMC address (MAC address in case of SSH driver),&lt;/li&gt;
&lt;li&gt;fills missing node properties with received data and creates
  missing ports.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h1&gt;Image&lt;/h1&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Image&lt;/th&gt;
&lt;th&gt;MAAS&lt;/th&gt;
&lt;th&gt;Ironic&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;Build-in image repo&lt;/td&gt;
&lt;td&gt;y&lt;/td&gt;
&lt;td&gt;n&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Ubuntu&lt;/td&gt;
&lt;td&gt;y&lt;/td&gt;
&lt;td&gt;y&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;CentOS&lt;/td&gt;
&lt;td&gt;y&lt;/td&gt;
&lt;td&gt;y&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;SUSE&lt;/td&gt;
&lt;td&gt;y&lt;/td&gt;
&lt;td&gt;y&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Windows server&lt;/td&gt;
&lt;td&gt;y&lt;/td&gt;
&lt;td&gt;y&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;RHEL&lt;/td&gt;
&lt;td&gt;n&lt;/td&gt;
&lt;td&gt;y&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;MAAS has built-in capability to work as an image repository. Ironic
relies on helper service, such as Glance, to handle images.&lt;/p&gt;
&lt;p&gt;In &lt;code&gt;src/provisioningservers/drivers/osystem/__init__.py&lt;/code&gt;, MAAS
categories images into five usages: commissioning, install (regular
ISO image), xinstall (.tgz of root &lt;code&gt;/&lt;/code&gt;), diskless(&lt;code&gt;tgt-admin&lt;/code&gt;) and
bootloader.&lt;/p&gt;
&lt;p&gt;MAAS has a fair restricted list of what it supports, where Ironic is
happy to use any bootable image since it delegates this management to
other service such as Glance. Details of MAAS image handling can be
found in &lt;code&gt;src/provisioningservers/drivers/osystem&lt;/code&gt;. Here is a list
defaults MAAS supports:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Ubuntu: all LTS releases&lt;/li&gt;
&lt;li&gt;CentOS: 6.5&lt;/li&gt;
&lt;li&gt;SUSE: openSUSE 13.1 &lt;/li&gt;
&lt;li&gt;Windows:&lt;ul&gt;
&lt;li&gt;Windows Server 2012&lt;/li&gt;
&lt;li&gt;Windows Server 2012 R2&lt;/li&gt;
&lt;li&gt;Windows Hyper-V Server 2012&lt;/li&gt;
&lt;li&gt;Windows Hyper-V Server 2012 R2&lt;/li&gt;
&lt;li&gt;Windows Server 2016&lt;/li&gt;
&lt;li&gt;Windows Nano Server 2016&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;One can also use MAAS CLI to add &lt;em&gt;custom&lt;/em&gt; images to repo, where &lt;code&gt;name&lt;/code&gt;
must in format &lt;code&gt;custom/xxx&lt;/code&gt;. For CentOS, the name must be in format
&lt;code&gt;centos72&lt;/code&gt; for example because of MAAS's regex parser.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;maas&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nb"&gt;local&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;boot-resources&lt;span class="w"&gt; &lt;/span&gt;create&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nv"&gt;name&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;custom/foo&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nv"&gt;title&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;Title is not important&amp;quot;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nv"&gt;architecture&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;amd64/generic&lt;span class="w"&gt; &lt;/span&gt;content@&lt;span class="o"&gt;=&lt;/span&gt;/path/to/your/image
maas&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nb"&gt;local&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;boot-resources&lt;span class="w"&gt; &lt;/span&gt;import
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;h1&gt;OS provisioning&lt;/h1&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;OS provisioning&lt;/th&gt;
&lt;th&gt;MAAS&lt;/th&gt;
&lt;th&gt;Ironic&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;PXE&lt;/td&gt;
&lt;td&gt;y&lt;/td&gt;
&lt;td&gt;y&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;iSCSI&lt;/td&gt;
&lt;td&gt;y&lt;/td&gt;
&lt;td&gt;y&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Select boot order&lt;/td&gt;
&lt;td&gt;n&lt;/td&gt;
&lt;td&gt;y&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Agent-based deployment&lt;/td&gt;
&lt;td&gt;n/a&lt;/td&gt;
&lt;td&gt;y&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Post-seed operation&lt;/td&gt;
&lt;td&gt;cloud-init&lt;/td&gt;
&lt;td&gt;cloud configdrive&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;First of all, both support PXE. This is standard and not much to talk
about. In term of iSCSI, both has implementation, but with different
objectives.  Ironic conductor(&lt;a href="https://docs.openstack.org/developer/ironic/_modules/ironic/drivers/modules/iscsi_deploy.html"&gt;code&lt;/a&gt;) will use the SCSI disk to
write image data; MAAS, on the other hand, uses &lt;code&gt;tgt-admin&lt;/code&gt; for the
job, and its objective is to &lt;strong&gt;&lt;a href="https://blueprints.launchpad.net/maas/+spec/t-cloud-maas-diskless"&gt;re-use&lt;/a&gt;&lt;/strong&gt; an existing root &lt;code&gt;/&lt;/code&gt;
file system.&lt;/p&gt;
&lt;p&gt;Second, MAAS lacks the capability to change boot order. Therefore, a
provisioned server will be seemed &lt;em&gt;out of management&lt;/em&gt; from that point
on because booting from HD is now preferred instead of PXE.  It solves
this chicken-egg problem by installing a default account and SSH
credential so they can continue management. Instead, Ironic can use
IPMI driver to set boot device so it does not create such artificial
user account in the system.&lt;/p&gt;
&lt;p&gt;Third, Ironic has an agent-based deployment method that a ramdisk with
&lt;a href="https://docs.openstack.org/developer/ironic-python-agent/"&gt;IPA&lt;/a&gt; installed will be loaded first. Once the agent is running,
it can take further commands including partitioning (&lt;code&gt;parted&lt;/code&gt;),
mounting remote disk (iSCSI), cleaning disk, and write OS image to
disk.&lt;/p&gt;
&lt;p&gt;Fourth, post-seed operation. MAAS API can accept a &lt;code&gt;Base64&lt;/code&gt; encoded
&lt;code&gt;user-data&lt;/code&gt; string used by cloud-init in next boot, where Ironic API
can accept cloud &lt;a href="https://developer.openstack.org/api-ref/baremetal/?expanded=change-node-provision-state-detail#change-node-provision-state"&gt;configdrive&lt;/a&gt; string.&lt;/p&gt;
&lt;h1&gt;Networking&lt;/h1&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Networking&lt;/th&gt;
&lt;th&gt;MAAS&lt;/th&gt;
&lt;th&gt;Ironic&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;Serve DHCP&lt;/td&gt;
&lt;td&gt;y&lt;/td&gt;
&lt;td&gt;n/a&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Use static IP&lt;/td&gt;
&lt;td&gt;y&lt;/td&gt;
&lt;td&gt;n/a&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Limite IP ranges&lt;/td&gt;
&lt;td&gt;y&lt;/td&gt;
&lt;td&gt;n/a&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Store node's IP&lt;/td&gt;
&lt;td&gt;y&lt;/td&gt;
&lt;td&gt;y&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Store subnet&lt;/td&gt;
&lt;td&gt;y&lt;/td&gt;
&lt;td&gt;n&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Store VLAN&lt;/td&gt;
&lt;td&gt;y&lt;/td&gt;
&lt;td&gt;n&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Concept of subnet grouping&lt;/td&gt;
&lt;td&gt;space&lt;/td&gt;
&lt;td&gt;n/a&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Concept of VLAN grouping&lt;/td&gt;
&lt;td&gt;fabric&lt;/td&gt;
&lt;td&gt;n/a&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;Ironic does not handle networking. In Openstack, Neutron will be
providing this service.&lt;/p&gt;
&lt;p&gt;MAAS understands &lt;code&gt;subnet&lt;/code&gt; and &lt;code&gt;vlan&lt;/code&gt;. Subnets can be further grouped
into &lt;code&gt;space&lt;/code&gt; and vlans into &lt;code&gt;fabric&lt;/code&gt;. It also
supports &lt;a href="https://wiki.ubuntu.com/FanNetworking?_ga=1.139973107.197000268.1480367852"&gt;container fan network&lt;/a&gt;, which Neutron has no support either.&lt;/p&gt;
&lt;p&gt;Further, MAAS can reserve IP ranges to assign to discovered nodes, CRUD interface on a
particular node, link an interface to a VLAN, and even create a bridge
interface on node. None of these Ironic can do or care.&lt;/p&gt;
&lt;h1&gt;Storage and partition&lt;/h1&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Storage and partition&lt;/th&gt;
&lt;th&gt;MAAS&lt;/th&gt;
&lt;th&gt;Ironic&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;Can configure disk partitions&lt;/td&gt;
&lt;td&gt;y&lt;/td&gt;
&lt;td&gt;n/a&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Can deploy partition image&lt;/td&gt;
&lt;td&gt;y&lt;/td&gt;
&lt;td&gt;n&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Can put partition on logical volume&lt;/td&gt;
&lt;td&gt;n&lt;/td&gt;
&lt;td&gt;n/a&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;MAAS API supports CRUD operations for partitions. According to its
&lt;a href="https://docs.ubuntu.com/maas/2.1/en/installconfig-partitions"&gt;document&lt;/a&gt;, it bears a few limitations:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;An EFI partition is required to be on the boot disk for UEFI.&lt;/li&gt;
&lt;li&gt;You cannot place partitions on logical volumes.&lt;/li&gt;
&lt;li&gt;You cannot use a logical volume as a Bcache backing device.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Ironic has &lt;strong&gt;no&lt;/strong&gt; API in this regards. By default it will only deploy
image to full disk. A &lt;a href="https://specs.openstack.org/openstack/ironic-specs/specs/kilo/partition-image-support-for-agent-driver.html"&gt;spec&lt;/a&gt; has been called for to handle
partition image implemented through &lt;a href="https://docs.openstack.org/developer/ironic-python-agent/"&gt;IPA&lt;/a&gt;.&lt;/p&gt;
&lt;h1&gt;Deployment customization&lt;/h1&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Deployment customization&lt;/th&gt;
&lt;th&gt;MAAS&lt;/th&gt;
&lt;th&gt;Ironic&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;use custom image&lt;/td&gt;
&lt;td&gt;y&lt;/td&gt;
&lt;td&gt;y&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;user scripts&lt;/td&gt;
&lt;td&gt;during inspection, commissioning scripts&lt;/td&gt;
&lt;td&gt;n&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;cloud-init&lt;/td&gt;
&lt;td&gt;y&lt;/td&gt;
&lt;td&gt;n&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;cloud configdrive&lt;/td&gt;
&lt;td&gt;n&lt;/td&gt;
&lt;td&gt;y&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;kernel options&lt;/td&gt;
&lt;td&gt;y&lt;/td&gt;
&lt;td&gt;n&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;Both can boot from a custom image (see "Image" for details).  MAAS
provides three more entry points to influence the result:
commissioning scripts, &lt;a href="https://docs.ubuntu.com/maas/2.1/en/installconfig-nodes-kernel-boot-options"&gt;kernel option&lt;/a&gt;, and cloud-init
&lt;code&gt;user-data&lt;/code&gt;. Commissioning scripts are run to collect server hardware
information. Kernel options can be either global or per-node based.
One can also pass on a cloud-init &lt;code&gt;user-data&lt;/code&gt; string that MAAS will
use in booting.&lt;/p&gt;
&lt;p&gt;Similarly, Ironic API accepts cloud configdrive string. Since it can
have an agent-based deployment, it is also possible to instruct the
agent to run some commands or scripts. However, there is no method to
pass in kernel options.&lt;/p&gt;
&lt;h1&gt;Server grouping&lt;/h1&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Server grouping&lt;/th&gt;
&lt;th&gt;MAAS&lt;/th&gt;
&lt;th&gt;Ironic&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;chassis&lt;/td&gt;
&lt;td&gt;n&lt;/td&gt;
&lt;td&gt;y&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;rack&lt;/td&gt;
&lt;td&gt;n&lt;/td&gt;
&lt;td&gt;n&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;region&lt;/td&gt;
&lt;td&gt;y&lt;/td&gt;
&lt;td&gt;n&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;zone&lt;/td&gt;
&lt;td&gt;y&lt;/td&gt;
&lt;td&gt;n&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;MAAS has created concept of &lt;code&gt;zone&lt;/code&gt; and zones can be further grouped
into &lt;code&gt;region&lt;/code&gt;. As a matter of fact, MAAS also has a concept of &lt;em&gt;region
controller&lt;/em&gt; which can then manage multiple &lt;em&gt;rack controller&lt;/em&gt;.&lt;/p&gt;
&lt;p&gt;From MAAS &lt;a href="https://docs.ubuntu.com/maas/2.1/en/intro-concepts#zones"&gt;document&lt;/a&gt;:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Zone:
A physical zone, or just zone, is an organizational unit that contains
nodes where each node is in one, and only one, zone. Later, while in
production, a node can be taken (allocated) from a specific zone (or
not from a specific zone). Since zones, by nature, are custom-designed
(with the exception of the 'default' zone), they provide more
flexibility than a similar feature offered by a public cloud service
(ex: availability zones).&lt;/p&gt;
&lt;p&gt;Some prime examples of how zones can be put to use include
fault-tolerance, service performance, and power management. &lt;/p&gt;
&lt;p&gt;A newly installed MAAS comes with a default zone, and unless a new
zone is created all nodes get placed within it. You can therefore
safely ignore the entire concept if you're not interested in
leveraging zones.&lt;/p&gt;
&lt;p&gt;The 'default' zone cannot be removed and its name cannot be edited.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Ironic provides no similar grouping concept. That level of management
is left for other service (eg. NOVA) to handle.&lt;/p&gt;
&lt;h1&gt;Multi-tenant&lt;/h1&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Multi-tenant&lt;/th&gt;
&lt;th&gt;MAAS&lt;/th&gt;
&lt;th&gt;Ironic&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;Support multi-tenant separation&lt;/td&gt;
&lt;td&gt;n&lt;/td&gt;
&lt;td&gt;y&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;MAAS has no capability to manipulate an existing network layout. Its
concept of fabric and space are artificial groupings only. Therefore,
it has no say in multi-tenant support. In many cases, baremetal
servers are put on the same network &amp;mdash; provisioning network
&amp;mdash; as the MAAS server because that's how MAAS can discover and
enlist new servers, thus exposing all tenants to each other (see
section "Minimal setup" for details.)&lt;/p&gt;
&lt;p&gt;Ironic has not concept of multi-tenant either. However, it can
dynamically &lt;em&gt;bind&lt;/em&gt; a port to use, where port is then managed by
service such as Neutron. This leaves Ironic not suffering from the
same risk that MAAS setup may have.&lt;/p&gt;</content><category term="openstack"></category><category term="lenovo"></category></entry><entry><title>Baremetal provisioning</title><link href="https://fengxia41103.github.io/myblog/baremetal%20provisioning.html" rel="alternate"></link><published>2017-03-22T15:45:00-04:00</published><updated>2017-03-22T15:45:00-04:00</updated><author><name>Feng Xia</name></author><id>tag:fengxia41103.github.io,2017-03-22:/myblog/baremetal provisioning.html</id><summary type="html">&lt;p&gt;Everyone of us has installed an operating system to a computer at some
point in life. It is easy to perceive inserting a disk or USB key to
make this happen because the OS files are &lt;em&gt;there&lt;/em&gt;. A fancier version
is to boot from network using PXE boot option, which seems like a
magic (when the environment has been setup) &amp;mdash; it somehow finds
the OS image and start installing, all over a &lt;em&gt;network&lt;/em&gt;!&lt;/p&gt;
&lt;p&gt;Now if we move to the world of servers, it works the same
way. Baremetal is another name referring to a server that has no
operating system (or hypervisor) installed yet. But the challenge is
to physically access to it to insert that OS disk &amp;mdash; in a data
center setting, I think the walking part is neither fun nor
desired. Remote provisioning is, therefore, the way to go.&lt;/p&gt;
&lt;p&gt;First, let's define &lt;strong&gt;provisioning&lt;/strong&gt;. Here we mean to have installed
an operating system or hypervisor on a baremetal so it is available
for further software installation.  In the simplest term, one needs to
answer â€¦&lt;/p&gt;</summary><content type="html">&lt;p&gt;Everyone of us has installed an operating system to a computer at some
point in life. It is easy to perceive inserting a disk or USB key to
make this happen because the OS files are &lt;em&gt;there&lt;/em&gt;. A fancier version
is to boot from network using PXE boot option, which seems like a
magic (when the environment has been setup) &amp;mdash; it somehow finds
the OS image and start installing, all over a &lt;em&gt;network&lt;/em&gt;!&lt;/p&gt;
&lt;p&gt;Now if we move to the world of servers, it works the same
way. Baremetal is another name referring to a server that has no
operating system (or hypervisor) installed yet. But the challenge is
to physically access to it to insert that OS disk &amp;mdash; in a data
center setting, I think the walking part is neither fun nor
desired. Remote provisioning is, therefore, the way to go.&lt;/p&gt;
&lt;p&gt;First, let's define &lt;strong&gt;provisioning&lt;/strong&gt;. Here we mean to have installed
an operating system or hypervisor on a baremetal so it is available
for further software installation.  In the simplest term, one needs to
answer these three questions:&lt;/p&gt;
&lt;figure class="s12 center"&gt;
    &lt;img src="images/baremetal%20provisioning%20intro.png" /&gt;
    &lt;figcaption&gt;Minimal setup for baremetal provisioning&lt;/figcaption&gt;
&lt;/figure&gt;

&lt;ol&gt;
&lt;li&gt;&lt;strong&gt;What is my address?&lt;/strong&gt;. If using BOOTP, the address will be
   static; if using DHCP, it can be either static or dynamic.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Which boot file to use?&lt;/strong&gt;. Also referred as &lt;strong&gt;Network Bootstrap
   Program (NBP)&lt;/strong&gt;. This is controlled by a boot service. BOOTP can
   provide this service, so is DHCP. This can be as simple as a static
   list mapping client's architecture to a file. But it can also be a
   very specific so a client can get a completly customized file.
   Also, the file must be in some pre-determined format based on
   client's architecture so the client knows how to execute it.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;How to download the file?&lt;/strong&gt;. This is handled by TFTP protocol.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Boot file is often pretty minimal.  Once the file is downloaded and
loaded in memory, baremetal's firmware will start its execution, which
can then take over the machine and possibly pull down another image,
such as the actual OS image, and then hand over the execution to OS's
bootloader.&lt;/p&gt;
&lt;h1&gt;BOOTP, DHCP &amp;mdash; address and boot file list&lt;/h1&gt;
&lt;p&gt;When a client is connected, it needs an address. Two services are
created for this task &amp;mdash; BOOTP and DHCP. In addition, both will
boot service by telling the client which boot file to use.&lt;/p&gt;
&lt;p&gt;BOOTP is an earlier IETF-defined booting protocol that is much less
flexible than DHCP. However, DHCP has been defined to be upwardly
compatible with BOOTP and both these protocols can coexist and
function simultaneously in the same network.  BOOTP is about &lt;font
color="blue"&gt;address determination and bootfile selection&lt;/font&gt;.
From its &lt;a href="https://tools.ietf.org/html/rfc951"&gt;spec&lt;/a&gt;, we can derive a sequence diagram shown below:&lt;/p&gt;
&lt;figure class="s12 center"&gt;
    &lt;img src="images/bootp%20sequence.png" /&gt;
    &lt;figcaption&gt;BOOTP sequence diagram&lt;/figcaption&gt;
&lt;/figure&gt;

&lt;p&gt;One major characteristic of BOOTP is that it is &lt;strong&gt;static&lt;/strong&gt;, meaning
when server looks up the client information, such as its IP address,
it is using a &lt;strong&gt;static&lt;/strong&gt; table (the &lt;em&gt;database&lt;/em&gt; referred in the diagram
above is actually a plain text file). Therefore, everytime client asks
for its information, it will get the same result. Below shows the
format of a BOOTP data packet. This same format in both directions.&lt;/p&gt;
&lt;figure class="s12 center"&gt;
    &lt;img src="images/bootp%20packet%20format.png" /&gt;
    &lt;figcaption&gt;BOOTP data packet&lt;/figcaption&gt;
&lt;/figure&gt;

&lt;p&gt;DHCP's data packet is nearly identical to BOOTP's for compatibility
reason. Same ports (67 on the server side &amp;amp; 68 on the client side) are
used. Below shows a simplified DHCP cycles (&lt;a href="http://facweb.cs.depaul.edu/cwhite/TDC%20365/BOOTP%20and%20DHCP.ppt"&gt;source&lt;/a&gt;):&lt;/p&gt;
&lt;figure class="s12 center"&gt;
    &lt;img src="images/dhcp%20sequence.png" /&gt;
    &lt;figcaption&gt;Simplified DHCP sequence diagram&lt;/figcaption&gt;
&lt;/figure&gt;

&lt;h1&gt;TFTP &amp;mdash; download boot file&lt;/h1&gt;
&lt;p&gt;At this point, client has acquired an address and knows which file to
download. Next, it needs to contact a &lt;em&gt;file server&lt;/em&gt; to get the
file. Here comes TFTP.&lt;/p&gt;
&lt;p&gt;&lt;a href="https://tools.ietf.org/html/rfc1350"&gt;TFTP&lt;/a&gt; is a very simple protocol used to transfer files.  It is
from this that its name comes, Trivial File Transfer Protocol or TFTP.
Each nonterminal packet is acknowledged separately. It has been
implemented on top of the Internet User Datagram protocol (UDP or
Datagram) so it may be used to move files between machines on
different networks implementing UDP.&lt;/p&gt;
&lt;p&gt;The only thing it can do is read and write files (or mail) from/to a
remote server &amp;rarr; no user authentication.  Two modes of transfer
are currently supported: ASCII (8-bit) and octet (raw 8-bit bytes).
&lt;font color="red"&gt;Note&lt;/font&gt; that &lt;a href="https://tools.ietf.org/html/rfc1350"&gt;spec&lt;/a&gt; defines 3rd mode
&lt;em&gt;message&lt;/em&gt; but it is obsoleted.&lt;/p&gt;
&lt;p&gt;Between client and server, everything is transported as a &lt;em&gt;data
packet&lt;/em&gt;, and each data packet includes a &lt;code&gt;op code&lt;/code&gt; which indicates the
meaning of this packet as well as the rest of data structure.  The
&lt;a href="https://tools.ietf.org/html/rfc1350"&gt;spec&lt;/a&gt; has nice illustration of the data formats so I'll copy &amp;amp;
paste them here for reference:&lt;/p&gt;
&lt;p&gt;TFTP data packet formats:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;Type&lt;span class="w"&gt;   &lt;/span&gt;Op&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="c1"&gt;#     Format without header&lt;/span&gt;
----&lt;span class="w"&gt;   &lt;/span&gt;----&lt;span class="w"&gt;     &lt;/span&gt;--------------------
&lt;span class="w"&gt;      &lt;/span&gt;&lt;span class="m"&gt;2&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;bytes&lt;span class="w"&gt;    &lt;/span&gt;string&lt;span class="w"&gt;   &lt;/span&gt;&lt;span class="m"&gt;1&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;byte&lt;span class="w"&gt;     &lt;/span&gt;string&lt;span class="w"&gt;   &lt;/span&gt;&lt;span class="m"&gt;1&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;byte
&lt;span class="w"&gt;      &lt;/span&gt;-----------------------------------------------
RRQ/&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="p"&gt;|&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="m"&gt;01&lt;/span&gt;/02&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;|&lt;/span&gt;&lt;span class="w"&gt;  &lt;/span&gt;Filename&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="p"&gt;|&lt;/span&gt;&lt;span class="w"&gt;   &lt;/span&gt;&lt;span class="m"&gt;0&lt;/span&gt;&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="p"&gt;|&lt;/span&gt;&lt;span class="w"&gt;    &lt;/span&gt;Mode&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="p"&gt;|&lt;/span&gt;&lt;span class="w"&gt;   &lt;/span&gt;&lt;span class="m"&gt;0&lt;/span&gt;&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="p"&gt;|&lt;/span&gt;
WRQ&lt;span class="w"&gt;    &lt;/span&gt;-----------------------------------------------
&lt;span class="w"&gt;      &lt;/span&gt;&lt;span class="m"&gt;2&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;bytes&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="m"&gt;2&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;bytes&lt;span class="w"&gt;       &lt;/span&gt;n&lt;span class="w"&gt; &lt;/span&gt;bytes
&lt;span class="w"&gt;      &lt;/span&gt;---------------------------------
DATA&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="p"&gt;|&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="m"&gt;03&lt;/span&gt;&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="p"&gt;|&lt;/span&gt;&lt;span class="w"&gt;   &lt;/span&gt;Block&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="c1"&gt;#  |    Data    |&lt;/span&gt;
&lt;span class="w"&gt;      &lt;/span&gt;---------------------------------
&lt;span class="w"&gt;      &lt;/span&gt;&lt;span class="m"&gt;2&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;bytes&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="m"&gt;2&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;bytes
&lt;span class="w"&gt;      &lt;/span&gt;-------------------
ACK&lt;span class="w"&gt;   &lt;/span&gt;&lt;span class="p"&gt;|&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="m"&gt;04&lt;/span&gt;&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="p"&gt;|&lt;/span&gt;&lt;span class="w"&gt;   &lt;/span&gt;Block&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="c1"&gt;#  |&lt;/span&gt;
&lt;span class="w"&gt;      &lt;/span&gt;--------------------
&lt;span class="w"&gt;      &lt;/span&gt;&lt;span class="m"&gt;2&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;bytes&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="m"&gt;2&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;bytes&lt;span class="w"&gt;        &lt;/span&gt;string&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="m"&gt;1&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;byte
&lt;span class="w"&gt;      &lt;/span&gt;----------------------------------------
ERROR&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;|&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="m"&gt;05&lt;/span&gt;&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="p"&gt;|&lt;/span&gt;&lt;span class="w"&gt;  &lt;/span&gt;ErrorCode&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;|&lt;/span&gt;&lt;span class="w"&gt;   &lt;/span&gt;ErrMsg&lt;span class="w"&gt;   &lt;/span&gt;&lt;span class="p"&gt;|&lt;/span&gt;&lt;span class="w"&gt;   &lt;/span&gt;&lt;span class="m"&gt;0&lt;/span&gt;&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="p"&gt;|&lt;/span&gt;
&lt;span class="w"&gt;      &lt;/span&gt;----------------------------------------
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;OP codes:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;opcode&lt;span class="w"&gt;  &lt;/span&gt;operation
-----&lt;span class="w"&gt;   &lt;/span&gt;---------
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="m"&gt;1&lt;/span&gt;&lt;span class="w"&gt;     &lt;/span&gt;Read&lt;span class="w"&gt; &lt;/span&gt;request&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;RRQ&lt;span class="o"&gt;)&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="m"&gt;2&lt;/span&gt;&lt;span class="w"&gt;     &lt;/span&gt;Write&lt;span class="w"&gt; &lt;/span&gt;request&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;WRQ&lt;span class="o"&gt;)&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="m"&gt;3&lt;/span&gt;&lt;span class="w"&gt;     &lt;/span&gt;Data&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;DATA&lt;span class="o"&gt;)&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="m"&gt;4&lt;/span&gt;&lt;span class="w"&gt;     &lt;/span&gt;Acknowledgment&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;ACK&lt;span class="o"&gt;)&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="m"&gt;5&lt;/span&gt;&lt;span class="w"&gt;     &lt;/span&gt;Error&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;ERROR&lt;span class="o"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Error codes:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;Value&lt;span class="w"&gt;     &lt;/span&gt;Meaning
-----&lt;span class="w"&gt;     &lt;/span&gt;-------
&lt;span class="m"&gt;0&lt;/span&gt;&lt;span class="w"&gt;         &lt;/span&gt;Not&lt;span class="w"&gt; &lt;/span&gt;defined,&lt;span class="w"&gt; &lt;/span&gt;see&lt;span class="w"&gt; &lt;/span&gt;error&lt;span class="w"&gt; &lt;/span&gt;message&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="k"&gt;if&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;any&lt;span class="o"&gt;)&lt;/span&gt;.
&lt;span class="m"&gt;1&lt;/span&gt;&lt;span class="w"&gt;         &lt;/span&gt;File&lt;span class="w"&gt; &lt;/span&gt;not&lt;span class="w"&gt; &lt;/span&gt;found.
&lt;span class="m"&gt;2&lt;/span&gt;&lt;span class="w"&gt;         &lt;/span&gt;Access&lt;span class="w"&gt; &lt;/span&gt;violation.
&lt;span class="m"&gt;3&lt;/span&gt;&lt;span class="w"&gt;         &lt;/span&gt;Disk&lt;span class="w"&gt; &lt;/span&gt;full&lt;span class="w"&gt; &lt;/span&gt;or&lt;span class="w"&gt; &lt;/span&gt;allocation&lt;span class="w"&gt; &lt;/span&gt;exceeded.
&lt;span class="m"&gt;4&lt;/span&gt;&lt;span class="w"&gt;         &lt;/span&gt;Illegal&lt;span class="w"&gt; &lt;/span&gt;TFTP&lt;span class="w"&gt; &lt;/span&gt;operation.
&lt;span class="m"&gt;5&lt;/span&gt;&lt;span class="w"&gt;         &lt;/span&gt;Unknown&lt;span class="w"&gt; &lt;/span&gt;transfer&lt;span class="w"&gt; &lt;/span&gt;ID.
&lt;span class="m"&gt;6&lt;/span&gt;&lt;span class="w"&gt;         &lt;/span&gt;File&lt;span class="w"&gt; &lt;/span&gt;already&lt;span class="w"&gt; &lt;/span&gt;exists.
&lt;span class="m"&gt;7&lt;/span&gt;&lt;span class="w"&gt;         &lt;/span&gt;No&lt;span class="w"&gt; &lt;/span&gt;such&lt;span class="w"&gt; &lt;/span&gt;user.
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Additionally, server always listens to a pre-known port (known as
&lt;strong&gt;transfer identifier&lt;/strong&gt;) to begin with. In its first returning data
packet, it can change this to a different port by setting the &lt;code&gt;Source
Port&lt;/code&gt;, and client will then only accept packets bearing this port
number.&lt;/p&gt;
&lt;p&gt;However, client has not such default. Since client is to initialize
the contact, it's free to tell the server which port it uses.
UDP header format:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="m"&gt;0&lt;/span&gt;&lt;span class="w"&gt;                   &lt;/span&gt;&lt;span class="m"&gt;1&lt;/span&gt;&lt;span class="w"&gt;                   &lt;/span&gt;&lt;span class="m"&gt;2&lt;/span&gt;&lt;span class="w"&gt;                   &lt;/span&gt;&lt;span class="m"&gt;3&lt;/span&gt;
&lt;span class="m"&gt;0&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="m"&gt;1&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="m"&gt;2&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="m"&gt;3&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="m"&gt;4&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="m"&gt;5&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="m"&gt;6&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="m"&gt;7&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="m"&gt;8&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="m"&gt;9&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="m"&gt;0&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="m"&gt;1&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="m"&gt;2&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="m"&gt;3&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="m"&gt;4&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="m"&gt;5&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="m"&gt;6&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="m"&gt;7&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="m"&gt;8&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="m"&gt;9&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="m"&gt;0&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="m"&gt;1&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="m"&gt;2&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="m"&gt;3&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="m"&gt;4&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="m"&gt;5&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="m"&gt;6&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="m"&gt;7&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="m"&gt;8&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="m"&gt;9&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="m"&gt;0&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="m"&gt;1&lt;/span&gt;
+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
&lt;span class="p"&gt;|&lt;/span&gt;&lt;span class="w"&gt;          &lt;/span&gt;Source&lt;span class="w"&gt; &lt;/span&gt;Port&lt;span class="w"&gt;          &lt;/span&gt;&lt;span class="p"&gt;|&lt;/span&gt;&lt;span class="w"&gt;       &lt;/span&gt;Destination&lt;span class="w"&gt; &lt;/span&gt;Port&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="p"&gt;|&lt;/span&gt;
+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
&lt;span class="p"&gt;|&lt;/span&gt;&lt;span class="w"&gt;            &lt;/span&gt;Length&lt;span class="w"&gt;             &lt;/span&gt;&lt;span class="p"&gt;|&lt;/span&gt;&lt;span class="w"&gt;           &lt;/span&gt;Checksum&lt;span class="w"&gt;            &lt;/span&gt;&lt;span class="p"&gt;|&lt;/span&gt;
+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;where the values of fields are:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;Source Port&lt;/code&gt;: Picked by originator of packet.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;Dest. Port&lt;/code&gt;: Picked by destination machine (69 for RRQ or WRQ).&lt;/li&gt;
&lt;li&gt;&lt;code&gt;Length&lt;/code&gt;: Number of bytes in UDP packet, including UDP header.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;Checksum&lt;/code&gt;: Reference 2 describes rules for computing checksum.  (The
  implementor of this should be sure that the correct algorithm is used
  here.)  Field contains zero if unused.&lt;/li&gt;
&lt;/ul&gt;
&lt;figure class="s12 center"&gt;
    &lt;img src="images/tftp%20sequence.png" /&gt;
    &lt;figcaption&gt;TFTP sequence diagram&lt;/figcaption&gt;
&lt;/figure&gt;

&lt;h1&gt;Preboote Execution Environment (PXE)&lt;/h1&gt;
&lt;p&gt;Once we put BOOTP/DHCP and TFTP together, we will have an environment
suitable for client to select PXE boot.  Being such a core technology
used widely in baremetal provisioning, the &lt;a href="http://download.intel.com/design/archives/wfm/downloads/pxespec.pdf"&gt;Preboot Execution
Environment (PXE) Specification Version 2.1&lt;/a&gt; should be the first
document to read. Honestly I'm amazed how well it was written, thought
through, clearly defined, and neatly illustrated, all dated back in
1999!&lt;/p&gt;
&lt;p&gt;As its name indicates, PXE provides a runtime environment prior to an
OS. A detailed step-by-step diagram is reproduced below (remade from
Figure 2-1 in the &lt;a href="http://download.intel.com/design/archives/wfm/downloads/pxespec.pdf"&gt;PXE Spec&lt;/a&gt;). In a nutshell, it takes three
services to make a PXE working:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;strong&gt;DHCP service&lt;/strong&gt;: This service handles the initial contact by a
   client. However, its primary function is &lt;strong&gt;not in offering an IP
   address&lt;/strong&gt;. Instead, after the first handshakes, it offers clients a
   list of Boot services to choose from so client can move on to
   obtain NBP.&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Boot service&lt;/strong&gt;: The service essentially maintains a map between
   client architecture (defined in PXE &lt;a href="https://tools.ietf.org/html/rfc4578"&gt;Client System Architecture
   Type Option Definition&lt;/a&gt;, values below) and NBP file names. So in
   modern term, it would have been called &lt;em&gt;NBP registry&lt;/em&gt; or something
   like that. There can be more than one Boot services co-existed. It
   is up to the client to choose. According to the &lt;a href="http://download.intel.com/design/archives/wfm/downloads/pxespec.pdf"&gt;spec&lt;/a&gt;, PXE 2.1
   supports the following client architectures:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;```shell
Type   Architecture Name
----   -----------------
0    Intel x86PC
1    NEC/PC98
2    EFI Itanium
3    DEC Alpha
4    Arc x86
5    Intel Lean Client
6    EFI IA32
7    EFI BC
8    EFI Xscale
9    EFI x86-64
```
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;TFTP service&lt;/strong&gt;: The actual server that will serve the NBP file
   for client to download.&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;figure class="s12 center"&gt;
    &lt;img src="images/pxe%20boot%20sequence.png" /&gt;
    &lt;figcaption&gt;PXE boot sequence diagram&lt;/figcaption&gt;
&lt;/figure&gt;

&lt;p&gt;Copying and pasting the detailed explanation from the &lt;a href="http://download.intel.com/design/archives/wfm/downloads/pxespec.pdf"&gt;PXE Spec&lt;/a&gt;
below with merely a few reformatting.&lt;/p&gt;
&lt;h2&gt;Step 1&lt;/h2&gt;
&lt;p&gt;The client broadcasts a &lt;code&gt;DHCPDISCOVER&lt;/code&gt; message to the standard DHCP
port (67). An option field in this packet contains the following:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;A tag for client identifier (UUID).&lt;/li&gt;
&lt;li&gt;A tag for the client UNDI version.&lt;/li&gt;
&lt;li&gt;A tag for the client system architecture.&lt;/li&gt;
&lt;li&gt;A DHCP option 60, Class ID, set to
   &lt;code&gt;PXEClient:Arch:xxxxx:UNDI:yyyzzz&lt;/code&gt;.&lt;/li&gt;
&lt;/ol&gt;
&lt;h2&gt;Step 2&lt;/h2&gt;
&lt;p&gt;The DHCP or Proxy DHCP Service responds by sending a &lt;code&gt;DHCPOFFER&lt;/code&gt;
message to the client on the standard DHCP reply port (68). If this is
a Proxy DHCP Service, then the client IP address field is null
(&lt;code&gt;0.0.0.0&lt;/code&gt;). If this is a DHCP Service, then the returned client IP
address field is valid.&lt;/p&gt;
&lt;p&gt;At this point, other DHCP Services and BOOTP Services also respond
with DHCP offers or BOOTP reply messages to port (68). Each message
contains standard DHCP parameters: an IP address for the client and
any other parameters that the administrator might have configured on
the DHCP or Proxy DHCP Service.&lt;/p&gt;
&lt;h2&gt;Step 3&lt;/h2&gt;
&lt;p&gt;From the &lt;code&gt;DHCPOFFER(s)&lt;/code&gt; that it receives, the client records the
following:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;The Client IP address (and other parameters) offered by a standard
   DHCP or BOOTP Service.&lt;/li&gt;
&lt;li&gt;The &lt;code&gt;Boot Server&lt;/code&gt; list from the Boot Server field in the PXE tags
   from the &lt;code&gt;DHCPOFFER&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;The &lt;code&gt;Discovery Control Options&lt;/code&gt; (if provided).&lt;/li&gt;
&lt;li&gt;The &lt;code&gt;Multicast Discovery IP&lt;/code&gt; address (if provided).&lt;/li&gt;
&lt;/ol&gt;
&lt;h2&gt;Step 4&lt;/h2&gt;
&lt;p&gt;If the client selects an IP address offered by a DHCP Service, then it
must complete the standard DHCP protocol by sending a request for the
address back to the Service and then waiting for an acknowledgment
from the Service. If the client selects an IP address from a BOOTP
reply, it can simply use the address.&lt;/p&gt;
&lt;h2&gt;Step 5&lt;/h2&gt;
&lt;p&gt;The client selects and discovers a Boot Server. This packet may be
sent broadcast (port 67), multicast (port 4011), or unicast (port
4011) depending on discovery control options included in the previous
DHCPOFFER containing the PXE service extension tags. This packet is
the same as the initial DHCPDISCOVER in Step 1, except that it is
coded as a DHCPREQUEST and now contains the following:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;The IP address assigned to the client from a DHCP Service.&lt;/li&gt;
&lt;li&gt;A tag for client identifier (UUID)&lt;/li&gt;
&lt;li&gt;A tag for the client UNDI version.&lt;/li&gt;
&lt;li&gt;A tag for the client system architecture.&lt;/li&gt;
&lt;li&gt;A DHCP option 60, Class ID, set to &lt;code&gt;PXEClient:Arch:xxxxx:UNDI:yyyzzz&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;The Boot Server type in a PXE option field&lt;/li&gt;
&lt;/ol&gt;
&lt;h2&gt;Step 6&lt;/h2&gt;
&lt;p&gt;The Boot Server unicasts a DHCPACK packet back to the client on the
client source port.  This reply packet contains:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Boot file name.&lt;/li&gt;
&lt;li&gt;MTFTP1 configuration parameters.&lt;/li&gt;
&lt;li&gt;Any other options the NBP requires before it can be successfully executed.&lt;/li&gt;
&lt;/ol&gt;
&lt;h2&gt;Step 7&lt;/h2&gt;
&lt;p&gt;The client downloads the executable file using either standard TFTP
(port69) or MTFTP (port assigned in Boot Server Ack packet). The file
downloaded and the placement of the downloaded code in memory is
dependent on the clientâ€™s CPU architecture.&lt;/p&gt;
&lt;h2&gt;Step 8&lt;/h2&gt;
&lt;p&gt;The PXE client determines whether an authenticity test on the
downloaded file is required. If the test is required, the client sends
another DHCPREQUEST message to the boot server requesting a
credentials file for the previously downloaded boot file, downloads
the credentials via TFTP or MTFTP, and performs the authenticity test.&lt;/p&gt;
&lt;h2&gt;Step 9&lt;/h2&gt;
&lt;p&gt;Finally, if the authenticity test succeeded or was not required, then
the PXE client initiates execution of the downloaded code&lt;/p&gt;
&lt;h2&gt;Initial Program Load (IPL)&lt;/h2&gt;
&lt;p&gt;At this step, we have a NBP and is ready to load the image, and this
all boils down to the good-old days that how to link a hardware
interrupt with software interrupt so the initial BIOS will be able to
load register with a specific memory location where the NBP
image resides. &lt;/p&gt;
&lt;h3&gt;Option ROM&lt;/h3&gt;
&lt;p&gt;&lt;strong&gt;Option ROM&lt;/strong&gt;: ROM associated with a plug and play device. May be
located on the device or in non-volatile storage on a system. An
Option ROM is used to extend the services or capabilities of the BIOS
prior to IPL. It is the only way, other than directly modifying the
BIOS, that new devices may be added to the IPL process.  During POST,
the BIOS scans the Upper Memory area for Option ROMs that have been
mapped into this space by adapter cards plugged into a system
expansion bus. A valid Option ROM begins on a 2KB boundary and
contains a data structure with a signature, the length of the Option
ROM and an entry point for initialization code.  If a valid Option ROM
is located by the BIOS, the ROMâ€™s initialization code is
invoked. Option ROMs replace or filter standard BIOS services by
replacing the BIOS initialized interrupt vectors.&lt;/p&gt;
&lt;p&gt;There have been various techniques developed to map ROM into memory,
including hardware mapping, copying to Upper Memory and to Shadow
Memory. The objective is always to maintain a method that a common
BIOS runtime can register and later on hand execution over to
ever-expanding list of hardware without updaing BIOS for each change.&lt;/p&gt;
&lt;h3&gt;BIOS &amp;amp; Option ROM&lt;/h3&gt;
&lt;p&gt;The BIOS maintains an &lt;code&gt;IPL Table&lt;/code&gt; listing all of the possible IPL
sources.  In the 1996 &lt;a href="http://www.scs.stanford.edu/05au-cs240c/lab/specsbbs101.pdf"&gt;BBS Specification&lt;/a&gt;, boot devices are
categorized into:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;strong&gt;BIOS Aware IPL Devices (BAID)&lt;/strong&gt;: have all the code necessary to perform
IPL resident in the system BIOS. BAID devices include floppy or fixed
drives.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Boot Connection Vector (BCV)&lt;/strong&gt; devices: use Option ROM on associated
   device or in non-volatile storage on the motherboard.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Bootstrap Entry Vector (BEV)&lt;/strong&gt; devices: use Option ROM on associated
   device or in non-volativel storage on the motherboard. 
   &lt;strong&gt;PXE is implemented as a BEV device&lt;/strong&gt;!.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;The BIOS adds IPL devices to the BBS &lt;code&gt;IPL Table&lt;/code&gt; already containing
the BAIDs. These devices are identified during the BIOS Option ROM
scan process. If the device hardware is detected and the rest of
Option ROM initialization is successful (in other words, the Option
ROM initialization code and loader code are placed in upper memory),
control is returned to the BIOS indicating the Option ROM manages an
IPL device. Within the ROM, a Plug and Play Expansion header will be
present for each bootable device supported by the Option ROM. Each PnP
Expansion header for a PXE IPL device will have a non-zero BEV.&lt;/p&gt;
&lt;p&gt;Once Option ROM scan is complete, the BIOS builds a list of bootable
devices using the information obtained during the scan. According to
the &lt;a href="http://www.scs.stanford.edu/05au-cs240c/lab/specsbbs101.pdf"&gt;BBS&lt;/a&gt;, the priority list for these devices is established by
the enduser through BIOS setup &amp;rarr; thus, the boot order option!&lt;/p&gt;
&lt;h3&gt;PXE Split ROM Architecture&lt;/h3&gt;
&lt;p&gt;So BIOS can find PXE option by finding its Option ROM. Great. Since
PXE is network dependent, how can it handles different networking
hardware? Two techniques come into play: &lt;strong&gt;Split ROM&lt;/strong&gt; architecture
and &lt;strong&gt;UNDI&lt;/strong&gt;. We will cover UNDI separately. Here, let's look at the
split architecture.&lt;/p&gt;
&lt;figure class="s12 center"&gt;
    &lt;img src="images/pxe%20option%20rom%20split%20architecture.png" /&gt;
    &lt;figcaption&gt;PXE Option ROM split architecture&lt;/figcaption&gt;
&lt;/figure&gt;

&lt;p&gt;Prior to the &lt;a href="http://download.intel.com/design/archives/wfm/downloads/pxespec.pdf"&gt;PXE Spec&lt;/a&gt;, all PXE Option ROMs were implemented as a
monolithic Option ROM with an option ROM header that encapsulates
three components:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;PCI init &amp;amp; loader code&lt;/li&gt;
&lt;li&gt;NIC specific code (UNDI driver)&lt;/li&gt;
&lt;li&gt;Base code (BC)&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;The PXE Split ROM Architecture specifies three different Option ROMs
that work cooperatively to create a working PXE that supports one or
more network interfaces. The three Option ROMs are:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;the Base-Code ROM (BC ROM): is common code to support one or more
   instances of the other ROMs.  The BC ROM provides the protocol stack
   in addition to various loader and initialization code. A Base-Code ROM
   is required.&lt;/li&gt;
&lt;li&gt;the UNDI ROM: provides the network interface specific code. An UNDI
   ROM is specific to particular network interface hardware. UNDI
   provides a set of APIs that allow the remotely booted program to use
   universal protocol drivers. A system must contain at least one (but
   may contain several) UNDI ROMs, where each ROM would support one
   network interface.&lt;/li&gt;
&lt;li&gt;the BUSD ROM: provides bus support for CardBus-based network
   interface cards. BUSD is only required if supporting CardBus. Unlike
   the Base-Code and UNDI ROMs, BUSDâ€™s call mechanism must be added to
   the BIOS.&lt;/li&gt;
&lt;/ol&gt;
&lt;h2&gt;Time to boot&lt;/h2&gt;
&lt;p&gt;Now with all the basics out of the way, let's power on the computer!
Page 77 in the &lt;a href="http://download.intel.com/design/archives/wfm/downloads/pxespec.pdf"&gt;PXE Spec&lt;/a&gt; has a nice diagram showing the details
behind the scene from BIOS to a PXE:&lt;/p&gt;
&lt;figure class="s12 center"&gt;
    &lt;img src="images/pxe%20IPL.svg" /&gt;
    &lt;figcaption&gt;PXE IPL (from power on to PXE)&lt;/figcaption&gt;
&lt;/figure&gt;</content><category term="openstack"></category><category term="lenovo"></category></entry><entry><title>Openstack Ironic</title><link href="https://fengxia41103.github.io/myblog/ironic%20intro.html" rel="alternate"></link><published>2017-03-15T22:45:00-04:00</published><updated>2017-03-15T22:45:00-04:00</updated><author><name>Feng Xia</name></author><id>tag:fengxia41103.github.io,2017-03-15:/myblog/ironic intro.html</id><summary type="html">&lt;p&gt;This article is an outcome of my writing a Juju-Ironic provider. The
plan was to first figure out Ironic APIs that will achieve what Juju
provider needs &amp;mdash; start an instance on demand, then build those
REST requests into Juju provider code. After playing with Ironic API
and Openstack's Devstack for two weeks, I start to realize that Ironic
by itself doesn't do much. Instead, it heavily relies on other
Openstack services to provision a baremetal &amp;mdash; Keystone to
generate a token which will be used in all HTTP calls, Neutron to
provide network/&lt;em&gt;port&lt;/em&gt;, Ironic itself to manage a &lt;em&gt;node&lt;/em&gt;, Glance to
get kernel image, ramdisk image, and actual OS image, and Nova to
&lt;em&gt;orchestrate&lt;/em&gt; these information for Ironic API to consume.&lt;/p&gt;
&lt;p&gt;Ironic &lt;a href="https://docs.openstack.org/developer/ironic/deploy/user-guide.html"&gt;user guide&lt;/a&gt; has some good information on basic technology
and Ironic design. A &lt;a href="https://www.openstack.org/videos/vancouver-2015/isn-and-039t-it-ironic-the-bare-metal-cloud"&gt;talk&lt;/a&gt; &amp;amp; &lt;a href="https://github.com/devananda/talks/blob/master/isnt-it-ironic.html"&gt;slides&lt;/a&gt; by &lt;a href="https://github.com/devananda"&gt;devananda&lt;/a&gt; on 2015
Vancouver Summit is also a good point to start.&lt;/p&gt;
&lt;p&gt;In the following sections I'd like to use the questions I have
encountered in research to create a newbie-oriented tutorial on
Ironic. In particular, I'd â€¦&lt;/p&gt;</summary><content type="html">&lt;p&gt;This article is an outcome of my writing a Juju-Ironic provider. The
plan was to first figure out Ironic APIs that will achieve what Juju
provider needs &amp;mdash; start an instance on demand, then build those
REST requests into Juju provider code. After playing with Ironic API
and Openstack's Devstack for two weeks, I start to realize that Ironic
by itself doesn't do much. Instead, it heavily relies on other
Openstack services to provision a baremetal &amp;mdash; Keystone to
generate a token which will be used in all HTTP calls, Neutron to
provide network/&lt;em&gt;port&lt;/em&gt;, Ironic itself to manage a &lt;em&gt;node&lt;/em&gt;, Glance to
get kernel image, ramdisk image, and actual OS image, and Nova to
&lt;em&gt;orchestrate&lt;/em&gt; these information for Ironic API to consume.&lt;/p&gt;
&lt;p&gt;Ironic &lt;a href="https://docs.openstack.org/developer/ironic/deploy/user-guide.html"&gt;user guide&lt;/a&gt; has some good information on basic technology
and Ironic design. A &lt;a href="https://www.openstack.org/videos/vancouver-2015/isn-and-039t-it-ironic-the-bare-metal-cloud"&gt;talk&lt;/a&gt; &amp;amp; &lt;a href="https://github.com/devananda/talks/blob/master/isnt-it-ironic.html"&gt;slides&lt;/a&gt; by &lt;a href="https://github.com/devananda"&gt;devananda&lt;/a&gt; on 2015
Vancouver Summit is also a good point to start.&lt;/p&gt;
&lt;p&gt;In the following sections I'd like to use the questions I have
encountered in research to create a newbie-oriented tutorial on
Ironic. In particular, I'd like to illustrate a few Ironic internals
to show what "managing baremetal" is actually doing.&lt;/p&gt;
&lt;h1&gt;Ironic introduction&lt;/h1&gt;
&lt;figure class="s12 center"&gt;
    &lt;img src="images/ironic_design.png" /&gt;
    &lt;figcaption&gt;Ironic design (&lt;a href="https://access.redhat.com/documentation/en-us/red_hat_openstack_platform/9/html-single/architecture_guide/#comp-ironic"&gt;source&lt;/a&gt;)&lt;/figcaption&gt;
&lt;/figure&gt;

&lt;p&gt;Ironic has three components:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Ironic &lt;a href="https://developer.openstack.org/api-ref/baremetal/"&gt;RESTful API&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Ironic conductor: its runtime core&lt;/li&gt;
&lt;li&gt;Ironic CLI (&lt;a href="https://github.com/openstack/python-ironicclient"&gt;python-ironicclient&lt;/a&gt;)&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;There are two other Ironic related projects that, though optional,
should be included in our discussion also because they play an
important role in Ironic's workflow: &lt;a href="https://docs.openstack.org/developer/ironic-python-agent/#how-it-works"&gt;Ironic Python Agent&lt;/a&gt; and
&lt;a href="https://docs.openstack.org/developer/ironic/deploy/inspection.html"&gt;Ironic Inspector&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Since it stores meta data in a DB, let's take a look at its DB schema:&lt;/p&gt;
&lt;figure class="s12 center"&gt;
    &lt;img src="images/ironic_db_er.png" /&gt;
    &lt;figcaption&gt;Ironic ER diagram&lt;/figcaption&gt;
&lt;/figure&gt;

&lt;h1&gt;Create a node = Enroll hardware&lt;/h1&gt;
&lt;blockquote&gt;
&lt;p&gt;API: &lt;a href="https://developer.openstack.org/api-ref/baremetal/?expanded=show-v1-api-detail,create-node-detail,delete-node-detail,change-node-power-state-detail,list-attached-vifs-of-a-node-detail,agent-heartbeat-detail#create-node"&gt;POST v1/nodes&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Everything starts with creating a node. Ironic node is an abstract
representation of a baremetal. Creating a node is simply adding
certain node's parameters to Ironic DB. The term "enrolling hardware"
(or enrolling a node) can be used interchangeably because it involves
no image or system running on the node. Whether using &lt;a href="https://github.com/openstack/python-ironicclient"&gt;Ironic Python
Client&lt;/a&gt; to import JSON, or using CLI &lt;code&gt;openstack baremetal node
create&lt;/code&gt;, it achieves the same thing &amp;mdash; eventually the command
chain will call Ironic's API endpoint &lt;a href="https://developer.openstack.org/api-ref/baremetal/?expanded=show-v1-api-detail,create-node-detail,delete-node-detail,change-node-power-state-detail,list-attached-vifs-of-a-node-detail,agent-heartbeat-detail#create-node"&gt;POST /v1/nodes&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;An example snippet to create node in Devstack is shown below. We will
go over details of the input arguments in the next section. &lt;font
color="red"&gt;Note&lt;/font&gt;: you must specify the
&lt;code&gt;X-OpenStack-Ironic-API-Version&lt;/code&gt; value in HTTP header.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="k"&gt;def&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nf"&gt;create_node&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;token&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;chassis&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;driver_info&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;instance_info&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;properties&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="c1"&gt;# Ironic API: create a node&lt;/span&gt;
    &lt;span class="n"&gt;url&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;http://&lt;/span&gt;&lt;span class="si"&gt;%s&lt;/span&gt;&lt;span class="s1"&gt;:6385/v1/nodes&amp;#39;&lt;/span&gt; &lt;span class="o"&gt;%&lt;/span&gt; &lt;span class="n"&gt;DEVSTACK_SERVER&lt;/span&gt;
    &lt;span class="n"&gt;headers&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="s1"&gt;&amp;#39;X-Auth-Token&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;&lt;/span&gt;&lt;span class="si"&gt;%s&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;&lt;/span&gt; &lt;span class="o"&gt;%&lt;/span&gt; &lt;span class="n"&gt;token&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="s1"&gt;&amp;#39;Content-Type&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;application/json&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="s1"&gt;&amp;#39;Accept&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;application/json&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="s1"&gt;&amp;#39;X-OpenStack-Ironic-API-Version&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mf"&gt;1.9&lt;/span&gt;  &lt;span class="c1"&gt;# must have!&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="n"&gt;payload&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="s1"&gt;&amp;#39;chassis_uuid&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;chassis&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="s2"&gt;&amp;quot;driver&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;agent_ipmitool&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="s2"&gt;&amp;quot;name&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;randomword&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;
        &lt;span class="s2"&gt;&amp;quot;driver_info&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;driver_info&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="s1"&gt;&amp;#39;instance_info&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;instance_info&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="s1"&gt;&amp;#39;properties&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;properties&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="n"&gt;r&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;requests&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;post&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
        &lt;span class="n"&gt;url&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="n"&gt;data&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;json&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;dumps&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;payload&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;
        &lt;span class="n"&gt;headers&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;headers&lt;/span&gt;
    &lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;resp&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;json&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;loads&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;r&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;content&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;h2&gt;Node details&lt;/h2&gt;
&lt;blockquote&gt;
&lt;p&gt;API: &lt;a href="https://developer.openstack.org/api-ref/baremetal/?expanded=show-v1-api-detail,delete-node-detail,change-node-power-state-detail,list-attached-vifs-of-a-node-detail,agent-heartbeat-detail#show-node-details"&gt;GET v1/nodes/{node_ident}&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Unfortunately, Ironic's &lt;a href="https://developer.openstack.org/api-ref/baremetal/"&gt;API document&lt;/a&gt; does not specify which
field is required. You can &lt;em&gt;create&lt;/em&gt; a node without giving it much
information. Again, the creation does nothing besides creating a
record in Ironic DB. Run &lt;code&gt;openstack baremetal node show [node_uuid]&lt;/code&gt;
displays details of a node.&lt;/p&gt;
&lt;figure class="s12 center"&gt;
    &lt;img src="images/ironic_node_show.png" /&gt;
    &lt;figcaption&gt;Details of a provisioned node&lt;/figcaption&gt;
&lt;/figure&gt;

&lt;ol&gt;
&lt;li&gt;&lt;code&gt;name&lt;/code&gt; (&lt;font color="red"&gt;required&lt;/font&gt;): well, a name.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;driver&lt;/code&gt; (&lt;font color="red"&gt;required&lt;/font&gt;): we will discuss more
   about Ironic drivers. This defines which Ironic driver to use.&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;driver_info&lt;/code&gt; (&lt;font color="red"&gt;required&lt;/font&gt;): All the metadata
   required by the driver to manage this Node. List of fields varies
   between drivers, and can be retrieved from the
   /v1/drivers/&lt;DRIVER_NAME&gt;/properties resource.
   For example, for &lt;code&gt;_ipmi&lt;/code&gt; drivers, one needs:   &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;ipmi_port&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;ipmi_username&lt;/code&gt;  in devstack, default to "admin"&lt;/li&gt;
&lt;li&gt;&lt;code&gt;ipmi_password&lt;/code&gt;: in devstack, default to "password"&lt;/li&gt;
&lt;li&gt;&lt;code&gt;ipmi_address&lt;/code&gt;: &lt;/li&gt;
&lt;li&gt;&lt;code&gt;deploy_kernel&lt;/code&gt;: in devstack, it is "ir-deploy-agent_ipmitool.kernel".&lt;/li&gt;
&lt;li&gt;&lt;code&gt;deploy_ramdisk&lt;/code&gt;: in devstack, it is "ir-deploy-agent_ipmitool.initramfs"&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Example payload:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="err"&gt;```&lt;/span&gt;&lt;span class="n"&gt;shell&lt;/span&gt;
&lt;span class="n"&gt;driver_info&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;ipmi_port&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;6230&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;ipmi_username&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;admin&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;deploy_kernel&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;ir&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;deploy&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;agent_ipmitool&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;kernel&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;UUID&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;deploy_ramdisk&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;ir&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;deploy&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;agent_ipmitool&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;initramfs&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;UUID&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;ipmi_address&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;10.0.2.15&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;ipmi_password&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;password&amp;quot;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="err"&gt;```&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;driver_internal_info&lt;/code&gt; (read-only): this field is not accessible
   via API. Used by driver to store internal information.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;code&gt;agent_url&lt;/code&gt;: this is the callback URL to the Ironic Python Agent
     (IPA) running on the node (when an agent ramdisk image is
     selected). We will cover more of IPA later. The value is filled
     in when the IPA calls Ironic's &lt;code&gt;/v1/heartbeat&lt;/code&gt; endpoint.&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;instance_info&lt;/code&gt;: is populated when the node is
   provisioned. However, user can also set this field through API.&lt;/p&gt;
&lt;p&gt;Example payload:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="err"&gt;```&lt;/span&gt;&lt;span class="nx"&gt;shell&lt;/span&gt;
&lt;span class="p"&gt;{&lt;/span&gt;
&lt;span class="w"&gt;   &lt;/span&gt;&lt;span class="s"&gt;&amp;quot;ramdisk&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;1a243f7b-3e96-4140-8408-b82064599cec&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
&lt;span class="w"&gt;   &lt;/span&gt;&lt;span class="s"&gt;&amp;quot;kernel&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;ef538456-704c-445c-a98b-c081be22ad71&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
&lt;span class="w"&gt;   &lt;/span&gt;&lt;span class="s"&gt;&amp;quot;image_source&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;9794e5b3-b3f1-403c-b37a-19c7e07cca4a&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
&lt;span class="w"&gt;   &lt;/span&gt;&lt;span class="s"&gt;&amp;quot;ephemeral_gb&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
&lt;span class="w"&gt;   &lt;/span&gt;&lt;span class="s"&gt;&amp;quot;image_properties&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:{&lt;/span&gt;
&lt;span class="w"&gt;      &lt;/span&gt;&lt;span class="s"&gt;&amp;quot;kernel_id&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;ef538456-704c-445c-a98b-c081be22ad71&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
&lt;span class="w"&gt;      &lt;/span&gt;&lt;span class="s"&gt;&amp;quot;ramdisk_id&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;1a243f7b-3e96-4140-8408-b82064599cec&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
&lt;span class="w"&gt;      &lt;/span&gt;&lt;span class="s"&gt;&amp;quot;virtual_size&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="nx"&gt;null&lt;/span&gt;
&lt;span class="w"&gt;   &lt;/span&gt;&lt;span class="p"&gt;},&lt;/span&gt;
&lt;span class="w"&gt;   &lt;/span&gt;&lt;span class="s"&gt;&amp;quot;preserve_ephemeral&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="kc"&gt;false&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
&lt;span class="w"&gt;   &lt;/span&gt;&lt;span class="s"&gt;&amp;quot;ephemeral_mb&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
&lt;span class="w"&gt;   &lt;/span&gt;&lt;span class="s"&gt;&amp;quot;local_gb&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;10&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
&lt;span class="w"&gt;   &lt;/span&gt;&lt;span class="s"&gt;&amp;quot;image_disk_format&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;ami&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
&lt;span class="w"&gt;   &lt;/span&gt;&lt;span class="s"&gt;&amp;quot;image_checksum&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;eb9139e4942121f22bbc2afc0400b2a4&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
&lt;span class="w"&gt;   &lt;/span&gt;&lt;span class="s"&gt;&amp;quot;nova_host_id&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;devstack&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
&lt;span class="w"&gt;   &lt;/span&gt;&lt;span class="s"&gt;&amp;quot;ephemeral_format&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="nx"&gt;null&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
&lt;span class="w"&gt;   &lt;/span&gt;&lt;span class="s"&gt;&amp;quot;root_gb&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;10&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
&lt;span class="w"&gt;   &lt;/span&gt;&lt;span class="s"&gt;&amp;quot;display_name&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;tt1&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
&lt;span class="w"&gt;   &lt;/span&gt;&lt;span class="s"&gt;&amp;quot;configdrive&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="nx"&gt;null&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
&lt;span class="w"&gt;   &lt;/span&gt;&lt;span class="s"&gt;&amp;quot;image_type&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;partition&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
&lt;span class="w"&gt;   &lt;/span&gt;&lt;span class="s"&gt;&amp;quot;image_tags&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:[&lt;/span&gt;
&lt;span class="w"&gt;   &lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt;
&lt;span class="w"&gt;   &lt;/span&gt;&lt;span class="s"&gt;&amp;quot;memory_mb&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;1280&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
&lt;span class="w"&gt;   &lt;/span&gt;&lt;span class="s"&gt;&amp;quot;vcpus&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;1&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;           &lt;/span&gt;&lt;span class="s"&gt;&amp;quot;image_url&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;http://10.0.2.15:8080/v1/AUTH_dbace9b9b039429ab5c2c3e43817ced2/glance/9794e5b3-b3f1-403c-b37a-19c7e07cca4a?temp_url_sig=da4154125d9011e2768bd5591b4d93c217f27d8b&amp;amp;temp_url_expires=1488585783&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
&lt;span class="w"&gt;   &lt;/span&gt;&lt;span class="s"&gt;&amp;quot;image_container_format&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;ami&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
&lt;span class="w"&gt;   &lt;/span&gt;&lt;span class="s"&gt;&amp;quot;root_mb&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="mi"&gt;10240&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
&lt;span class="w"&gt;   &lt;/span&gt;&lt;span class="s"&gt;&amp;quot;swap_mb&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="err"&gt;```&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;properties&lt;/code&gt; (&lt;font color="red"&gt;required&lt;/font&gt;): Physical
   characteristics of this Node. Populated by ironic-inspector during
   inspection. Can also be set via the REST API at any time. These
   values are used by NOVA to match flavor &amp;mdash; an important aspect
   of &lt;em&gt;baremetal management&lt;/em&gt; is to filter what a workload wants
   vs. what we have, and the values in &lt;code&gt;properties&lt;/code&gt; define what we
   have.&lt;/p&gt;
&lt;p&gt;Example payload:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;```shell
properties = {
    &amp;#39;cpus&amp;#39;: 1,
    &amp;#39;memory_mb&amp;#39;: 1280,
    &amp;#39;local_gb&amp;#39;: 10,
    &amp;#39;cpu_arch&amp;#39;: &amp;#39;x86_64&amp;#39;,
    &amp;#39;capabilities&amp;#39;: &amp;#39;memory_mb:1280,local_gb:10,cpu_arch:x86_64,cpus:1,boot_option:local&amp;#39;
}
```
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;The rest of the fields are self-explanatory so I'll skip them for now.&lt;/p&gt;
&lt;h1&gt;Hardware inventory&lt;/h1&gt;
&lt;p&gt;Hardware inventory is to collect characteristics such as the number of
CPUs, memory size, disk partition, MAC address and so on. There are
two ways to collect these: out-of-band and in-band. In-band inspection
involves booting an OS on the target node and fetching information
directly from it. This process is more fragile and time-consuming than
the out-of-band inspection, but it is not vendor-specific and works
across a wide range of hardware.; out-of-band, on the other hand, does
not involve an OS. Instead, information is collected by a built-in BMC
controllera on the baremetal box and are then queried through the
box's IPMI interface.&lt;/p&gt;
&lt;p&gt;So translate these into Ironic, it has two ways to inventory hardware:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;IPA's &lt;a href="https://docs.openstack.org/developer/ironic-python-agent/#hardware-managers"&gt;hardware manager&lt;/a&gt; &amp;mdash; in-band only. &lt;a href="https://docs.openstack.org/developer/ironic-python-agent/#how-it-works"&gt;IPA&lt;/a&gt; is a
   Python client packaged inside a ramdisk that will be run at the
   beginning of a provisioning process. Hardware manager is part of
   IPA's capability. They can run together with IPA to collect node
   information.&lt;/li&gt;
&lt;li&gt;&lt;a href="https://docs.openstack.org/developer/ironic/deploy/inspection.html"&gt;Ironic Inspector&lt;/a&gt; &amp;mdash; in-band and out-of-band. Inspector is
   a separate service running outside the target node. It exposes a
   set of &lt;a href="https://docs.openstack.org/developer/ironic-inspector/http-api.html#"&gt;API&lt;/a&gt;. When caller sends request to its endpoint &lt;code&gt;POST
   /v1/introspection/&amp;lt;node_indent&amp;gt;&lt;/code&gt;, inspector uses the UUID to
   extract node's &lt;code&gt;drive_info&lt;/code&gt; from Ironic DB. With the IPMI
   credentials it can now query node info from BMC as well controlling
   its power cycle if it chooses to run a ramdisk as &lt;a href="https://docs.openstack.org/developer/ironic/deploy/inspection.html#in-band-inspection"&gt;in-band
   method&lt;/a&gt;.&lt;/li&gt;
&lt;/ol&gt;
&lt;h1&gt;Image [TBD]&lt;/h1&gt;
&lt;p&gt;Two types of images: deploy image and user image. Plenty blogs showing
how to make them. But I'd like to have an explanation what they are
and how they are used.&lt;/p&gt;
&lt;p&gt;Devstack image list:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;+--------------------------------------+------------------------------------+--------+
&lt;span class="p"&gt;|&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;ID&lt;span class="w"&gt;                                   &lt;/span&gt;&lt;span class="p"&gt;|&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;Name&lt;span class="w"&gt;                               &lt;/span&gt;&lt;span class="p"&gt;|&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;Status&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;|&lt;/span&gt;
+--------------------------------------+------------------------------------+--------+
&lt;span class="p"&gt;|&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;94e2055e-fcb3-4c2e-a547-918450b060a1&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;|&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;Fedora-Cloud-Base-25-1.3.x86_64&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="p"&gt;|&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;active&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;|&lt;/span&gt;
&lt;span class="p"&gt;|&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;8a1a67b7-4875-457d-9242-16df4c537095&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;|&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;cirros-0.3.4-x86_64-disk&lt;span class="w"&gt;           &lt;/span&gt;&lt;span class="p"&gt;|&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;active&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;|&lt;/span&gt;
&lt;span class="p"&gt;|&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;9794e5b3-b3f1-403c-b37a-19c7e07cca4a&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;|&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;cirros-0.3.4-x86_64-uec&lt;span class="w"&gt;            &lt;/span&gt;&lt;span class="p"&gt;|&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;active&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;|&lt;/span&gt;
&lt;span class="p"&gt;|&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;ef538456-704c-445c-a98b-c081be22ad71&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;|&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;cirros-0.3.4-x86_64-uec-kernel&lt;span class="w"&gt;     &lt;/span&gt;&lt;span class="p"&gt;|&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;active&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;|&lt;/span&gt;
&lt;span class="p"&gt;|&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;1a243f7b-3e96-4140-8408-b82064599cec&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;|&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;cirros-0.3.4-x86_64-uec-ramdisk&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="p"&gt;|&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;active&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;|&lt;/span&gt;
&lt;span class="p"&gt;|&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;9eb37c5a-3021-4eea-93b7-66922eb89152&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;|&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;ir-deploy-agent_ipmitool.initramfs&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;|&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;active&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;|&lt;/span&gt;
&lt;span class="p"&gt;|&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;8d255ece-d66c-43a5-8043-5a6ce8bea4f2&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;|&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;ir-deploy-agent_ipmitool.kernel&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="p"&gt;|&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;active&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;|&lt;/span&gt;
+--------------------------------------+------------------------------------+--------+
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;h1&gt;Ironic deploy method: agent &amp;amp; PXE&lt;/h1&gt;
&lt;p&gt;Ironic offers two deploy methods: agent (&lt;a href="https://docs.openstack.org/developer/ironic-python-agent/#how-it-works"&gt;Ironic Python Agent
(IPA)&lt;/a&gt;) and PXE. The agent-based deploy method came from
&lt;a href="https://journal.paul.querna.org/articles/2014/07/02/putting-teeth-in-our-public-cloud/"&gt;Rackspace&lt;/a&gt; and was [blueprinted].&lt;/p&gt;
&lt;h2&gt;Ironic Agent (IPA)&lt;/h2&gt;
&lt;p&gt;Agent method means to boot a specially made ramdisk image on
baremetal. Agent will run as &lt;code&gt;systemd&lt;/code&gt; service.  The magic is that
agent knows where the Ironic API is. So it will &lt;strong&gt;lookup&lt;/strong&gt; itself by
sending Ironic API its MAC address. Ironic will send back the node
UUID. From that point on, IPA will ping home (hearbeat) periodically
(using UUID) until Ironic commands it to do something. Part of the
hearbeat payload is a callback URL, so apparently IPA also exposes a
HTTP service that Ironic conductor can use for commands.&lt;/p&gt;
&lt;figure class="s12 center"&gt;
    &lt;img src="images/ironic_ipa_sequence.png" /&gt;
    &lt;figcaption&gt;Ironic Python Agent (IPA) sequence diagram&lt;/figcaption&gt;
&lt;/figure&gt;

&lt;p&gt;Quoting from the &lt;a href="https://journal.paul.querna.org/articles/2014/07/02/putting-teeth-in-our-public-cloud/"&gt;Rackspace OnMetal blog&lt;/a&gt;:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;With IPA the DHCP, PXE and TFTP configurations become the static for
all baremetal nodes, reducing complexity. Once running, the Agent
sends a heartbeat to the Ironic Conductors with hardware
information. Then the Conductors can order the Agent to take
different actions. For example in the case of provisioning an
instance, the Conductor sends an HTTP POST to prepare_image with the
URL for an Image, and the Agent downloads and writes it to disk
itself, keeping the Ironic Conductor out of the data plane for an
image download. Once the image is written to disk, the Ironic
Conductor simply reboots the baremetal node, and it boots from disk,
removing a runtime dependency on a DHCP or TFTP server.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2&gt;Provision process &amp;mdash; Agent&lt;/h2&gt;
&lt;p&gt;Source by &lt;a href="https://github.com/devananda/talks/tree/master/images"&gt;devananda github&lt;/a&gt;.&lt;/p&gt;
&lt;figure class="s12 center"&gt;
    &lt;img     src="https://github.com/devananda/talks/blob/masterimages/deploy_with_agent.png?raw=true" /&gt;
    &lt;figcaption&gt;Ironic deploy &amp;mdash; Agent&lt;/figcaption&gt;
&lt;/figure&gt;

&lt;p&gt;The IPA server is implemented using &lt;a href="https://pecan.readthedocs.io/en/latest/"&gt;Python Pecan&lt;/a&gt;. The
long-running process is &lt;code&gt;IronicPythonAgent&lt;/code&gt; in
&lt;code&gt;ironic_python_agent/agent.py&lt;/code&gt;:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="n"&gt;wsgi&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;simple_server&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;make_server&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
   &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;listen_address&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;hostname&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
   &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;listen_address&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;port&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
   &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;api&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
   &lt;span class="n"&gt;server_class&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;simple_server&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;WSGIServer&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="ow"&gt;not&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;standalone&lt;/span&gt; &lt;span class="ow"&gt;and&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;api_url&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
   &lt;span class="c1"&gt;# Don&amp;#39;t start heartbeating until the server is listening&lt;/span&gt;
   &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;heartbeater&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;start&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="k"&gt;try&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
   &lt;span class="n"&gt;wsgi&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;serve_forever&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="k"&gt;except&lt;/span&gt; &lt;span class="ne"&gt;BaseException&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
   &lt;span class="n"&gt;LOG&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;exception&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;shutting down&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="ow"&gt;not&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;standalone&lt;/span&gt; &lt;span class="ow"&gt;and&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;api_url&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
   &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;heartbeater&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;stop&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;The &lt;code&gt;heartbeater.start()&lt;/code&gt; is a thread that expects to receive letter
&lt;code&gt;'a'&lt;/code&gt; from Ironic and will stop upon receiving &lt;code&gt;'b'&lt;/code&gt;. IPA also
implements a RPC using the below syntax:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="nd"&gt;@base&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;async_command&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;prepare_image&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;_validate_image_info&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="k"&gt;def&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nf"&gt;prepare_image&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
                  &lt;span class="n"&gt;image_info&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="kc"&gt;None&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
                  &lt;span class="n"&gt;configdrive&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="kc"&gt;None&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;The function &lt;code&gt;prepare_image&lt;/code&gt; is the key. Ironic's
&lt;code&gt;xx-Agent&lt;/code&gt; driver will call POST to IPA's endpoint
using the string &lt;code&gt;prepare_image&lt;/code&gt; as a RPC call that will 
envoke the corresponding function on the IPA side, in this case,
the function &lt;code&gt;prepare_image&lt;/code&gt;, which is to write image to disk. The IPA
implementation of this function is shown below. As one can see,
it is assuming that a block device is available and it will then run a 
&lt;code&gt;bash&lt;/code&gt; script to write this image to disk. After image is written to
disk, it can also write a bootloader (eg. grub2). Then IPA will signal
Ironic that deploy is all done, and Ironic will go ahead to reboot the
node &amp;mdash; this then completes the provisioning process.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="nd"&gt;@base&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;async_command&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;prepare_image&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;_validate_image_info&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="k"&gt;def&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nf"&gt;prepare_image&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
                  &lt;span class="n"&gt;image_info&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="kc"&gt;None&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
                  &lt;span class="n"&gt;configdrive&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="kc"&gt;None&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="sd"&gt;&amp;quot;&amp;quot;&amp;quot;Asynchronously prepares specified image on local OS install device.&lt;/span&gt;
&lt;span class="sd"&gt;    In this case, &amp;#39;prepare&amp;#39; means make local machine completly ready to&lt;/span&gt;
&lt;span class="sd"&gt;    reboot to the image specified by image_info.&lt;/span&gt;
&lt;span class="sd"&gt;    Downloads and writes an image to disk if necessary. Also writes a&lt;/span&gt;
&lt;span class="sd"&gt;    configdrive to disk if the configdrive parameter is specified.&lt;/span&gt;
&lt;span class="sd"&gt;    :param image_info: Image information dictionary.&lt;/span&gt;
&lt;span class="sd"&gt;    :param configdrive: A string containing the location of the config&lt;/span&gt;
&lt;span class="sd"&gt;                        drive as a URL OR the contents (as gzip/base64)&lt;/span&gt;
&lt;span class="sd"&gt;                        of the configdrive. Optional, defaults to None.&lt;/span&gt;
&lt;span class="sd"&gt;    :raises: ImageDownloadError if the image download encounters an error.&lt;/span&gt;
&lt;span class="sd"&gt;    :raises: ImageChecksumError if the checksum of the local image does not&lt;/span&gt;
&lt;span class="sd"&gt;         match the checksum as reported by glance in image_info.&lt;/span&gt;
&lt;span class="sd"&gt;    :raises: ImageWriteError if writing the image fails.&lt;/span&gt;
&lt;span class="sd"&gt;    :raises: InstanceDeployFailure if failed to create config drive.&lt;/span&gt;
&lt;span class="sd"&gt;         large to store on the given device.&lt;/span&gt;
&lt;span class="sd"&gt;    &amp;quot;&amp;quot;&amp;quot;&lt;/span&gt;
    &lt;span class="n"&gt;LOG&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;debug&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;Preparing image &lt;/span&gt;&lt;span class="si"&gt;%s&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;image_info&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;id&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt;
    &lt;span class="n"&gt;device&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;hardware&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;dispatch_to_managers&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;get_os_install_device&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;disk_format&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;image_info&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;disk_format&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;stream_raw_images&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;image_info&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;stream_raw_images&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kc"&gt;False&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="c1"&gt;# don&amp;#39;t write image again if already cached&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;cached_image_id&lt;/span&gt; &lt;span class="o"&gt;!=&lt;/span&gt; &lt;span class="n"&gt;image_info&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;id&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;]:&lt;/span&gt;
        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;cached_image_id&lt;/span&gt; &lt;span class="ow"&gt;is&lt;/span&gt; &lt;span class="ow"&gt;not&lt;/span&gt; &lt;span class="kc"&gt;None&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
            &lt;span class="n"&gt;LOG&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;debug&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;Already had &lt;/span&gt;&lt;span class="si"&gt;%s&lt;/span&gt;&lt;span class="s1"&gt; cached, overwriting&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
                      &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;cached_image_id&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;stream_raw_images&lt;/span&gt; &lt;span class="ow"&gt;and&lt;/span&gt; &lt;span class="n"&gt;disk_format&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;raw&amp;#39;&lt;/span&gt; &lt;span class="ow"&gt;and&lt;/span&gt;
            &lt;span class="n"&gt;image_info&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;image_type&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;!=&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;partition&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
            &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;_stream_raw_image_onto_device&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;image_info&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;device&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="k"&gt;else&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
            &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;_cache_and_write_image&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;image_info&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;device&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="c1"&gt;# the configdrive creation is taken care by ironic-lib&amp;#39;s&lt;/span&gt;
    &lt;span class="c1"&gt;# work_on_disk().&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;image_info&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;image_type&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;!=&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;partition&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;configdrive&lt;/span&gt; &lt;span class="ow"&gt;is&lt;/span&gt; &lt;span class="ow"&gt;not&lt;/span&gt; &lt;span class="kc"&gt;None&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
            &lt;span class="c1"&gt;# Will use dummy value of &amp;#39;local&amp;#39; for &amp;#39;node_uuid&amp;#39;,&lt;/span&gt;
            &lt;span class="c1"&gt;# if it is not available. This is to handle scenario&lt;/span&gt;
            &lt;span class="c1"&gt;# wherein new IPA is being used with older version&lt;/span&gt;
            &lt;span class="c1"&gt;# of Ironic that did not pass &amp;#39;node_uuid&amp;#39; in &amp;#39;image_info&amp;#39;&lt;/span&gt;
            &lt;span class="n"&gt;node_uuid&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;image_info&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;node_uuid&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;local&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
            &lt;span class="n"&gt;disk_utils&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;create_config_drive_partition&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;node_uuid&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
                                                     &lt;span class="n"&gt;device&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
                                                     &lt;span class="n"&gt;configdrive&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;msg&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;image (&lt;/span&gt;&lt;span class="si"&gt;{}&lt;/span&gt;&lt;span class="s1"&gt;) written to device &lt;/span&gt;&lt;span class="si"&gt;{}&lt;/span&gt;&lt;span class="s1"&gt; &amp;#39;&lt;/span&gt;
    &lt;span class="n"&gt;result_msg&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;_message_format&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;msg&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;image_info&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;device&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
                                 &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;partition_uuids&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;LOG&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;info&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;result_msg&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;result_msg&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;h2&gt;Provision process &amp;mdash; PXE&lt;/h2&gt;
&lt;p&gt;Source by &lt;a href="https://github.com/devananda/talks/tree/master/images"&gt;devananda github&lt;/a&gt;.&lt;/p&gt;
&lt;figure class="row center"&gt;
    &lt;img class="s6"
    src="https://github.com/devananda/talks/blob/masterimages/pxe-deploy-1.png?raw=true" /&gt;
    &lt;img class="s6"
    src="https://github.com/devananda/talks/blob/masterimages/pxe-deploy-2.png?raw=true" /&gt;
    &lt;figcaption&gt;Ironic deploy &amp;mdash; PXE&lt;/figcaption&gt;
&lt;/figure&gt;

&lt;h1&gt;Using NOVA API to create an instance&lt;/h1&gt;
&lt;p&gt;Using Devstack, the easiest way to start an instance is CLI command.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;openstack&lt;span class="w"&gt; &lt;/span&gt;server&lt;span class="w"&gt; &lt;/span&gt;create&lt;span class="w"&gt; &lt;/span&gt;--image&lt;span class="w"&gt; &lt;/span&gt;9794e5b3-b3f1-403c-b37a-19c7e07cca4a&lt;span class="w"&gt; &lt;/span&gt;--flavor&lt;span class="w"&gt; &lt;/span&gt;baremetal&lt;span class="w"&gt; &lt;/span&gt;--nic&lt;span class="w"&gt; &lt;/span&gt;port-id&lt;span class="o"&gt;=&lt;/span&gt;22d79b92-0848-4053-ad0d-f182d02d01a0&lt;span class="w"&gt; &lt;/span&gt;tt1&lt;span class="w"&gt; &lt;/span&gt;--debug
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Where:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;--image&lt;/code&gt;: using image UUID. Here we use the &lt;code&gt;cirros-0.3.4-x86_64-uec&lt;/code&gt;
  image.&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;--flavor&lt;/code&gt;: using &lt;em&gt;baremetal&lt;/em&gt; flavor&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;```shell
+----------------------------+--------------------------------------+
| Field                      | Value                                |
+----------------------------+--------------------------------------+
| OS-FLV-DISABLED:disabled   | False                                |
| OS-FLV-EXT-DATA:ephemeral  | 0                                    |
| access_project_ids         | None                                 |
| disk                       | 10                                   |
| id                         | a5178caf-6b3a-49ec-ab47-a6daaf05423e |
| name                       | baremetal                            |
| os-flavor-access:is_public | True                                 |
| properties                 | cpu_arch=&amp;#39;x86_64&amp;#39;                    |
| ram                        | 1280                                 |
| rxtx_factor                | 1.0                                  |
| swap                       |                                      |
| vcpus                      | 1                                    |
+----------------------------+--------------------------------------+
```
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;--port&lt;/code&gt;: we create a port on &lt;em&gt;private&lt;/em&gt; network using Neutron API
  &lt;code&gt;POST /v2.0/ports&lt;/code&gt;.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="err"&gt;```&lt;/span&gt;&lt;span class="n"&gt;python&lt;/span&gt;
&lt;span class="n"&gt;def&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;create_port&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;token&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;network&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;randomword&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="c1"&gt;# Neutron: create a port&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="n"&gt;url&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;http://&lt;/span&gt;&lt;span class="si"&gt;%s&lt;/span&gt;&lt;span class="s1"&gt;:9696/v2.0/ports&amp;#39;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;%&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;DEVSTACK_SERVER&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="n"&gt;headers&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
&lt;span class="w"&gt;      &lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;X-Auth-Token&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;&lt;/span&gt;&lt;span class="si"&gt;%s&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;%&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;token&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
&lt;span class="w"&gt;      &lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;Content-Type&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;application/json&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
&lt;span class="w"&gt;      &lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;Accept&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;application/json&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="n"&gt;payload&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
&lt;span class="w"&gt;      &lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;port&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
&lt;span class="w"&gt;          &lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;name&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
&lt;span class="w"&gt;          &lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;network_id&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;network&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
&lt;span class="w"&gt;          &lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;admin_state_up&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;True&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
&lt;span class="w"&gt;          &lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;extra_dhcp_opts&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;
&lt;span class="w"&gt;              &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
&lt;span class="w"&gt;                  &lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;ip_version&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;4&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
&lt;span class="w"&gt;                  &lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;opt_name&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;tftp-server&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
&lt;span class="w"&gt;                  &lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;opt_value&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;10.0.2.15&amp;#39;&lt;/span&gt;
&lt;span class="w"&gt;              &lt;/span&gt;&lt;span class="p"&gt;},&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
&lt;span class="w"&gt;                  &lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;ip_version&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;4&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
&lt;span class="w"&gt;                  &lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;opt_name&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;tag:!ipxe,bootfile-name&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
&lt;span class="w"&gt;                  &lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;opt_value&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;undionly.kpxe&amp;#39;&lt;/span&gt;
&lt;span class="w"&gt;              &lt;/span&gt;&lt;span class="p"&gt;},&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
&lt;span class="w"&gt;                  &lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;ip_version&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;4&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
&lt;span class="w"&gt;                  &lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;opt_name&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;tag:ipxe,bootfile-name&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
&lt;span class="w"&gt;                  &lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;opt_value&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;http://10.0.2.15:3928/boot.ipxe&amp;#39;&lt;/span&gt;
&lt;span class="w"&gt;              &lt;/span&gt;&lt;span class="p"&gt;},&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
&lt;span class="w"&gt;                  &lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;ip_version&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;4&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
&lt;span class="w"&gt;                  &lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;opt_name&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;server-ip-address&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
&lt;span class="w"&gt;                  &lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;opt_value&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;10.0.2.15&amp;#39;&lt;/span&gt;
&lt;span class="w"&gt;              &lt;/span&gt;&lt;span class="p"&gt;}],&lt;/span&gt;
&lt;span class="w"&gt;          &lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;binding:vnic_type&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;normal&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
&lt;span class="w"&gt;          &lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;device_owner&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;network:dhcp&amp;quot;&lt;/span&gt;
&lt;span class="w"&gt;      &lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="n"&gt;r&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;requests&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;post&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
&lt;span class="w"&gt;      &lt;/span&gt;&lt;span class="n"&gt;url&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
&lt;span class="w"&gt;      &lt;/span&gt;&lt;span class="n"&gt;data&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;json&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;dumps&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;payload&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;
&lt;span class="w"&gt;      &lt;/span&gt;&lt;span class="n"&gt;headers&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;headers&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="n"&gt;resp&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;json&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;loads&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;r&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;content&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="err"&gt;```&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Now let's see how this commands utilizes various API calls:&lt;/p&gt;
&lt;h2&gt;Read basic information from Keystone&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Service: Keystone&lt;/li&gt;
&lt;li&gt;Method: &lt;code&gt;GET&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Endpoint: &lt;code&gt;/identity/v3&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;HTTP header:&lt;ol&gt;
&lt;li&gt;Accept: &lt;code&gt;application/json&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;User-Agent: &lt;code&gt;osc-lib/1.3.0 keystoneauth1/2.18.0 python-requests/2.12.5 CPython/2.7.12&lt;/code&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;JSON payload: none&lt;/li&gt;
&lt;li&gt;Response:&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="err"&gt;```&lt;/span&gt;&lt;span class="nx"&gt;shell&lt;/span&gt;
&lt;span class="p"&gt;{&lt;/span&gt;
&lt;span class="s"&gt;&amp;quot;version&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:{&lt;/span&gt;
&lt;span class="w"&gt;      &lt;/span&gt;&lt;span class="s"&gt;&amp;quot;status&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;stable&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
&lt;span class="w"&gt;      &lt;/span&gt;&lt;span class="s"&gt;&amp;quot;updated&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;2017-02-22T00:00:00Z&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
&lt;span class="w"&gt;      &lt;/span&gt;&lt;span class="s"&gt;&amp;quot;media-types&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:[&lt;/span&gt;
&lt;span class="w"&gt;         &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
&lt;span class="w"&gt;            &lt;/span&gt;&lt;span class="s"&gt;&amp;quot;base&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;application/json&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
&lt;span class="w"&gt;            &lt;/span&gt;&lt;span class="s"&gt;&amp;quot;type&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;application/vnd.openstack.identity-v3+json&amp;quot;&lt;/span&gt;
&lt;span class="w"&gt;         &lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="w"&gt;      &lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt;
&lt;span class="w"&gt;      &lt;/span&gt;&lt;span class="s"&gt;&amp;quot;id&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;v3.8&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
&lt;span class="w"&gt;      &lt;/span&gt;&lt;span class="s"&gt;&amp;quot;links&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:[&lt;/span&gt;
&lt;span class="w"&gt;         &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
&lt;span class="w"&gt;            &lt;/span&gt;&lt;span class="s"&gt;&amp;quot;href&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;http://10.0.2.15/identity/v3/&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
&lt;span class="w"&gt;            &lt;/span&gt;&lt;span class="s"&gt;&amp;quot;rel&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;self&amp;quot;&lt;/span&gt;
&lt;span class="w"&gt;         &lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="w"&gt;      &lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;span class="w"&gt;   &lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="err"&gt;```&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;Get security token&lt;/h2&gt;
&lt;p&gt;The token is in response's header &lt;code&gt;X-Subject-Token&lt;/code&gt; field.
We are using "Password authentication with scoped authorization".&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Service: Keystone&lt;/li&gt;
&lt;li&gt;Method: &lt;code&gt;POST&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Endpoint: &lt;code&gt;/identity/v3/auth/tokens&lt;/code&gt; (&lt;a href="https://developer.openstack.org/api-ref/identity/v3/?expanded=password-authentication-with-scoped-authorization-detail#password-authentication-with-scoped-authorization"&gt;ref&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;HTTP header:&lt;ol&gt;
&lt;li&gt;Content-Type: &lt;code&gt;application/json&lt;/code&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;JSON payload:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;```shell
{
   &amp;quot;auth&amp;quot;:{
      &amp;quot;identity&amp;quot;:{
         &amp;quot;methods&amp;quot;:[
            &amp;quot;password&amp;quot;
         ],
         &amp;quot;password&amp;quot;:{
            &amp;quot;user&amp;quot;:{
               &amp;quot;domain&amp;quot;:{
                  &amp;quot;name&amp;quot;:&amp;quot;Default&amp;quot;
               },
               &amp;quot;name&amp;quot;:USERNAME,
               &amp;quot;password&amp;quot;:PASSWORD
            }
         }
      },
      &amp;quot;scope&amp;quot;:{
         &amp;quot;project&amp;quot;:{
            &amp;quot;domain&amp;quot;:{
               &amp;quot;name&amp;quot;:&amp;quot;Default&amp;quot;
            },
            &amp;quot;name&amp;quot;:PROJECT
         }
      }
   }
}
```
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Response: too long to paste. Not important.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;Get user image meta data&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Service: &lt;code&gt;Glance&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Method: &lt;code&gt;GET&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Endpoint: &lt;code&gt;/v2images/9794e5b3-b3f1-403c-b37a-19c7e07cca4a&lt;/code&gt; (&lt;a href="https://developer.openstack.org/api-ref/image/v2/index.html?expanded=show-image-details-detail#show-image-details"&gt;ref&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;HTTP header:&lt;ol&gt;
&lt;li&gt;Accept-Encoding: &lt;code&gt;gzip, deflate&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Accept: &lt;code&gt;*/*&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;User-Agent: &lt;code&gt;python-glanceclient&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Connection: &lt;code&gt;keep-alive&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;X-Auth-Token: &lt;code&gt;ccc5f650029b710c4a3c8f20320afaaed04326f1&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Content-Type: &lt;code&gt;application/octet-stream&lt;/code&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;JSON payload: none&lt;/li&gt;
&lt;li&gt;Response:&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="o"&gt;{&lt;/span&gt;
&lt;span class="w"&gt;   &lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;status&amp;quot;&lt;/span&gt;:&lt;span class="s2"&gt;&amp;quot;active&amp;quot;&lt;/span&gt;,
&lt;span class="w"&gt;   &lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;name&amp;quot;&lt;/span&gt;:&lt;span class="s2"&gt;&amp;quot;cirros-0.3.4-x86_64-uec&amp;quot;&lt;/span&gt;,
&lt;span class="w"&gt;   &lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;tags&amp;quot;&lt;/span&gt;:&lt;span class="o"&gt;[&lt;/span&gt;
&lt;span class="w"&gt;   &lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt;,
&lt;span class="w"&gt;   &lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;kernel_id&amp;quot;&lt;/span&gt;:&lt;span class="s2"&gt;&amp;quot;ef538456-704c-445c-a98b-c081be22ad71&amp;quot;&lt;/span&gt;,
&lt;span class="w"&gt;   &lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;container_format&amp;quot;&lt;/span&gt;:&lt;span class="s2"&gt;&amp;quot;ami&amp;quot;&lt;/span&gt;,
&lt;span class="w"&gt;   &lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;created_at&amp;quot;&lt;/span&gt;:&lt;span class="s2"&gt;&amp;quot;2017-03-03T22:38:57Z&amp;quot;&lt;/span&gt;,
&lt;span class="w"&gt;   &lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;ramdisk_id&amp;quot;&lt;/span&gt;:&lt;span class="s2"&gt;&amp;quot;1a243f7b-3e96-4140-8408-b82064599cec&amp;quot;&lt;/span&gt;,
&lt;span class="w"&gt;   &lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;disk_format&amp;quot;&lt;/span&gt;:&lt;span class="s2"&gt;&amp;quot;ami&amp;quot;&lt;/span&gt;,
&lt;span class="w"&gt;   &lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;updated_at&amp;quot;&lt;/span&gt;:&lt;span class="s2"&gt;&amp;quot;2017-03-03T22:38:58Z&amp;quot;&lt;/span&gt;,
&lt;span class="w"&gt;   &lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;visibility&amp;quot;&lt;/span&gt;:&lt;span class="s2"&gt;&amp;quot;public&amp;quot;&lt;/span&gt;,
&lt;span class="w"&gt;   &lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;self&amp;quot;&lt;/span&gt;:&lt;span class="s2"&gt;&amp;quot;/v2images/9794e5b3-b3f1-403c-b37a-19c7e07cca4a&amp;quot;&lt;/span&gt;,
&lt;span class="w"&gt;   &lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;min_disk&amp;quot;&lt;/span&gt;:0,
&lt;span class="w"&gt;   &lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;protected&amp;quot;&lt;/span&gt;:false,
&lt;span class="w"&gt;   &lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;id&amp;quot;&lt;/span&gt;:&lt;span class="s2"&gt;&amp;quot;9794e5b3-b3f1-403c-b37a-19c7e07cca4a&amp;quot;&lt;/span&gt;,
&lt;span class="w"&gt;   &lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;size&amp;quot;&lt;/span&gt;:25165824,
&lt;span class="w"&gt;   &lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;file&amp;quot;&lt;/span&gt;:&lt;span class="s2"&gt;&amp;quot;/v2images/9794e5b3-b3f1-403c-b37a-19c7e07cca4a/file&amp;quot;&lt;/span&gt;,
&lt;span class="w"&gt;   &lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;checksum&amp;quot;&lt;/span&gt;:&lt;span class="s2"&gt;&amp;quot;eb9139e4942121f22bbc2afc0400b2a4&amp;quot;&lt;/span&gt;,
&lt;span class="w"&gt;   &lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;owner&amp;quot;&lt;/span&gt;:&lt;span class="s2"&gt;&amp;quot;3b2594f2569542f694ff346a6db7fa1e&amp;quot;&lt;/span&gt;,
&lt;span class="w"&gt;   &lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;virtual_size&amp;quot;&lt;/span&gt;:null,
&lt;span class="w"&gt;   &lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;min_ram&amp;quot;&lt;/span&gt;:0,
&lt;span class="w"&gt;   &lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;schema&amp;quot;&lt;/span&gt;:&lt;span class="s2"&gt;&amp;quot;/v2/schemas/image&amp;quot;&lt;/span&gt;
&lt;span class="o"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;h2&gt;Get image schema&lt;/h2&gt;
&lt;p&gt;Gets a JSON-schema document that represents the various entities
talked about by the Images v2 API.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Service: Glance&lt;/li&gt;
&lt;li&gt;Method: &lt;code&gt;GET&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Endpoint: &lt;code&gt;/v2/schemas/images&lt;/code&gt; (&lt;a href="https://developer.openstack.org/api-ref/image/v2/index.html?expanded=show-images-schema-detail#show-images-schema"&gt;ref&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;HTTP header: none&lt;/li&gt;
&lt;li&gt;JSON payload: none&lt;/li&gt;
&lt;li&gt;Response: too long to paste.&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;Get flavor details&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Service: Nova&lt;/li&gt;
&lt;li&gt;Method: &lt;code&gt;GET&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Endpoint: &lt;code&gt;/v2.1/flavors/a5178caf-6b3a-49ec-ab47-a6daaf05423e&lt;/code&gt;
  (&lt;a href="https://developer.openstack.org/api-ref/compute/?expanded=show-flavor-details-detail#show-flavor-details"&gt;ref&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;HTTP header:&lt;ol&gt;
&lt;li&gt;User-Agent: &lt;code&gt;python-novaclient&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Accept: &lt;code&gt;application/json&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;X-Auth-Token: &lt;code&gt;ccc5f650029b710c4a3c8f20320afaaed04326f1&lt;/code&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;JSON payload: none&lt;/li&gt;
&lt;li&gt;Response:&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="o"&gt;{&lt;/span&gt;
&lt;span class="w"&gt;   &lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;flavor&amp;quot;&lt;/span&gt;:&lt;span class="o"&gt;{&lt;/span&gt;
&lt;span class="w"&gt;      &lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;links&amp;quot;&lt;/span&gt;:&lt;span class="o"&gt;[&lt;/span&gt;
&lt;span class="w"&gt;         &lt;/span&gt;&lt;span class="o"&gt;{&lt;/span&gt;
&lt;span class="w"&gt;            &lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;href&amp;quot;&lt;/span&gt;:&lt;span class="s2"&gt;&amp;quot;http://10.0.2.15:8774/v2.1/flavors/a5178caf-6b3a-49ec-ab47-a6daaf05423e&amp;quot;&lt;/span&gt;,
&lt;span class="w"&gt;            &lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;rel&amp;quot;&lt;/span&gt;:&lt;span class="s2"&gt;&amp;quot;self&amp;quot;&lt;/span&gt;
&lt;span class="w"&gt;         &lt;/span&gt;&lt;span class="o"&gt;}&lt;/span&gt;,
&lt;span class="w"&gt;         &lt;/span&gt;&lt;span class="o"&gt;{&lt;/span&gt;
&lt;span class="w"&gt;            &lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;href&amp;quot;&lt;/span&gt;:&lt;span class="s2"&gt;&amp;quot;http://10.0.2.15:8774/flavors/a5178caf-6b3a-49ec-ab47-a6daaf05423e&amp;quot;&lt;/span&gt;,
&lt;span class="w"&gt;            &lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;rel&amp;quot;&lt;/span&gt;:&lt;span class="s2"&gt;&amp;quot;bookmark&amp;quot;&lt;/span&gt;
&lt;span class="w"&gt;         &lt;/span&gt;&lt;span class="o"&gt;}&lt;/span&gt;
&lt;span class="w"&gt;      &lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt;,
&lt;span class="w"&gt;      &lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;ram&amp;quot;&lt;/span&gt;:1280,
&lt;span class="w"&gt;      &lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;OS-FLV-DISABLED:disabled&amp;quot;&lt;/span&gt;:false,
&lt;span class="w"&gt;      &lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;os-flavor-access:is_public&amp;quot;&lt;/span&gt;:true,
&lt;span class="w"&gt;      &lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;rxtx_factor&amp;quot;&lt;/span&gt;:1.0,
&lt;span class="w"&gt;      &lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;disk&amp;quot;&lt;/span&gt;:10,
&lt;span class="w"&gt;      &lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;id&amp;quot;&lt;/span&gt;:&lt;span class="s2"&gt;&amp;quot;a5178caf-6b3a-49ec-ab47-a6daaf05423e&amp;quot;&lt;/span&gt;,
&lt;span class="w"&gt;      &lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;name&amp;quot;&lt;/span&gt;:&lt;span class="s2"&gt;&amp;quot;baremetal&amp;quot;&lt;/span&gt;,
&lt;span class="w"&gt;      &lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;vcpus&amp;quot;&lt;/span&gt;:1,
&lt;span class="w"&gt;      &lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;swap&amp;quot;&lt;/span&gt;:&lt;span class="s2"&gt;&amp;quot;&amp;quot;&lt;/span&gt;,
&lt;span class="w"&gt;      &lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;OS-FLV-EXT-DATA:ephemeral&amp;quot;&lt;/span&gt;:0
&lt;span class="w"&gt;   &lt;/span&gt;&lt;span class="o"&gt;}&lt;/span&gt;
&lt;span class="o"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;h2&gt;Get port details&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Service: Neutron&lt;/li&gt;
&lt;li&gt;Method: &lt;code&gt;GET&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Endpoint: &lt;code&gt;/v2.0/ports/22d79b92-0848-4053-ad0d-f182d02d01a0&lt;/code&gt;
(&lt;a href="https://developer.openstack.org/api-ref/networking/v2/?expanded=show-port-details-detail#show-port-details"&gt;ref&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;HTTP header:&lt;ol&gt;
&lt;li&gt;User-Agent: &lt;code&gt;openstacksdk/0.9.13 keystoneauth1/2.18.0 python-requests/2.12.5 CPython/2.7.12&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;X-Auth-Token: &lt;code&gt;ccc5f650029b710c4a3c8f20320afaaed04326f1&lt;/code&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;JSON payload: none&lt;/li&gt;
&lt;li&gt;Response:&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="o"&gt;{&lt;/span&gt;
&lt;span class="w"&gt;   &lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;port&amp;quot;&lt;/span&gt;:&lt;span class="o"&gt;{&lt;/span&gt;
&lt;span class="w"&gt;      &lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;status&amp;quot;&lt;/span&gt;:&lt;span class="s2"&gt;&amp;quot;DOWN&amp;quot;&lt;/span&gt;,
&lt;span class="w"&gt;      &lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;binding:host_id&amp;quot;&lt;/span&gt;:&lt;span class="s2"&gt;&amp;quot;&amp;quot;&lt;/span&gt;,
&lt;span class="w"&gt;      &lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;description&amp;quot;&lt;/span&gt;:&lt;span class="s2"&gt;&amp;quot;&amp;quot;&lt;/span&gt;,
&lt;span class="w"&gt;      &lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;allowed_address_pairs&amp;quot;&lt;/span&gt;:&lt;span class="o"&gt;[&lt;/span&gt;
&lt;span class="w"&gt;      &lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt;,
&lt;span class="w"&gt;      &lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;tags&amp;quot;&lt;/span&gt;:&lt;span class="o"&gt;[&lt;/span&gt;
&lt;span class="w"&gt;      &lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt;,
&lt;span class="w"&gt;      &lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;extra_dhcp_opts&amp;quot;&lt;/span&gt;:&lt;span class="o"&gt;[&lt;/span&gt;
&lt;span class="w"&gt;         &lt;/span&gt;&lt;span class="o"&gt;{&lt;/span&gt;
&lt;span class="w"&gt;            &lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;opt_value&amp;quot;&lt;/span&gt;:&lt;span class="s2"&gt;&amp;quot;http://10.0.2.15:3928/boot.ipxe&amp;quot;&lt;/span&gt;,
&lt;span class="w"&gt;            &lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;ip_version&amp;quot;&lt;/span&gt;:4,
&lt;span class="w"&gt;            &lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;opt_name&amp;quot;&lt;/span&gt;:&lt;span class="s2"&gt;&amp;quot;tag:ipxe,bootfile-name&amp;quot;&lt;/span&gt;
&lt;span class="w"&gt;         &lt;/span&gt;&lt;span class="o"&gt;}&lt;/span&gt;,
&lt;span class="w"&gt;         &lt;/span&gt;&lt;span class="o"&gt;{&lt;/span&gt;
&lt;span class="w"&gt;            &lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;opt_value&amp;quot;&lt;/span&gt;:&lt;span class="s2"&gt;&amp;quot;10.0.2.15&amp;quot;&lt;/span&gt;,
&lt;span class="w"&gt;            &lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;ip_version&amp;quot;&lt;/span&gt;:4,
&lt;span class="w"&gt;            &lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;opt_name&amp;quot;&lt;/span&gt;:&lt;span class="s2"&gt;&amp;quot;server-ip-address&amp;quot;&lt;/span&gt;
&lt;span class="w"&gt;         &lt;/span&gt;&lt;span class="o"&gt;}&lt;/span&gt;,
&lt;span class="w"&gt;         &lt;/span&gt;&lt;span class="o"&gt;{&lt;/span&gt;
&lt;span class="w"&gt;            &lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;opt_value&amp;quot;&lt;/span&gt;:&lt;span class="s2"&gt;&amp;quot;10.0.2.15&amp;quot;&lt;/span&gt;,
&lt;span class="w"&gt;            &lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;ip_version&amp;quot;&lt;/span&gt;:4,
&lt;span class="w"&gt;            &lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;opt_name&amp;quot;&lt;/span&gt;:&lt;span class="s2"&gt;&amp;quot;tftp-server&amp;quot;&lt;/span&gt;
&lt;span class="w"&gt;         &lt;/span&gt;&lt;span class="o"&gt;}&lt;/span&gt;,
&lt;span class="w"&gt;         &lt;/span&gt;&lt;span class="o"&gt;{&lt;/span&gt;
&lt;span class="w"&gt;            &lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;opt_value&amp;quot;&lt;/span&gt;:&lt;span class="s2"&gt;&amp;quot;undionly.kpxe&amp;quot;&lt;/span&gt;,
&lt;span class="w"&gt;            &lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;ip_version&amp;quot;&lt;/span&gt;:4,
&lt;span class="w"&gt;            &lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;opt_name&amp;quot;&lt;/span&gt;:&lt;span class="s2"&gt;&amp;quot;tag:!ipxe,bootfile-name&amp;quot;&lt;/span&gt;
&lt;span class="w"&gt;         &lt;/span&gt;&lt;span class="o"&gt;}&lt;/span&gt;
&lt;span class="w"&gt;      &lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt;,
&lt;span class="w"&gt;      &lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;updated_at&amp;quot;&lt;/span&gt;:&lt;span class="s2"&gt;&amp;quot;2017-03-03T23:01:48Z&amp;quot;&lt;/span&gt;,
&lt;span class="w"&gt;      &lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;device_owner&amp;quot;&lt;/span&gt;:&lt;span class="s2"&gt;&amp;quot;network:dhcp&amp;quot;&lt;/span&gt;,
&lt;span class="w"&gt;      &lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;revision_number&amp;quot;&lt;/span&gt;:9,
&lt;span class="w"&gt;      &lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;port_security_enabled&amp;quot;&lt;/span&gt;:false,
&lt;span class="w"&gt;      &lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;binding:profile&amp;quot;&lt;/span&gt;:&lt;span class="o"&gt;{&lt;/span&gt;
&lt;span class="w"&gt;      &lt;/span&gt;&lt;span class="o"&gt;}&lt;/span&gt;,
&lt;span class="w"&gt;      &lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;fixed_ips&amp;quot;&lt;/span&gt;:&lt;span class="o"&gt;[&lt;/span&gt;
&lt;span class="w"&gt;         &lt;/span&gt;&lt;span class="o"&gt;{&lt;/span&gt;
&lt;span class="w"&gt;            &lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;subnet_id&amp;quot;&lt;/span&gt;:&lt;span class="s2"&gt;&amp;quot;d2c3a067-ccda-45c0-9c8e-b73e88b0402e&amp;quot;&lt;/span&gt;,
&lt;span class="w"&gt;            &lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;ip_address&amp;quot;&lt;/span&gt;:&lt;span class="s2"&gt;&amp;quot;10.0.0.3&amp;quot;&lt;/span&gt;
&lt;span class="w"&gt;         &lt;/span&gt;&lt;span class="o"&gt;}&lt;/span&gt;,
&lt;span class="w"&gt;         &lt;/span&gt;&lt;span class="o"&gt;{&lt;/span&gt;
&lt;span class="w"&gt;            &lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;subnet_id&amp;quot;&lt;/span&gt;:&lt;span class="s2"&gt;&amp;quot;70ce2eae-bcff-45a5-bf1f-b9720e526e7f&amp;quot;&lt;/span&gt;,
&lt;span class="w"&gt;            &lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;ip_address&amp;quot;&lt;/span&gt;:&lt;span class="s2"&gt;&amp;quot;fdb2:c07c:cdc9:0:f816:3eff:feb3:da44&amp;quot;&lt;/span&gt;
&lt;span class="w"&gt;         &lt;/span&gt;&lt;span class="o"&gt;}&lt;/span&gt;
&lt;span class="w"&gt;      &lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt;,
&lt;span class="w"&gt;      &lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;id&amp;quot;&lt;/span&gt;:&lt;span class="s2"&gt;&amp;quot;22d79b92-0848-4053-ad0d-f182d02d01a0&amp;quot;&lt;/span&gt;,
&lt;span class="w"&gt;      &lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;security_groups&amp;quot;&lt;/span&gt;:&lt;span class="o"&gt;[&lt;/span&gt;
&lt;span class="w"&gt;      &lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt;,
&lt;span class="w"&gt;      &lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;device_id&amp;quot;&lt;/span&gt;:&lt;span class="s2"&gt;&amp;quot;&amp;quot;&lt;/span&gt;,
&lt;span class="w"&gt;      &lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;name&amp;quot;&lt;/span&gt;:&lt;span class="s2"&gt;&amp;quot;LNG&amp;quot;&lt;/span&gt;,
&lt;span class="w"&gt;      &lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;admin_state_up&amp;quot;&lt;/span&gt;:true,
&lt;span class="w"&gt;      &lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;network_id&amp;quot;&lt;/span&gt;:&lt;span class="s2"&gt;&amp;quot;980f4a97-0f8e-4347-a324-d9d1247f7c3f&amp;quot;&lt;/span&gt;,
&lt;span class="w"&gt;      &lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;tenant_id&amp;quot;&lt;/span&gt;:&lt;span class="s2"&gt;&amp;quot;3b2594f2569542f694ff346a6db7fa1e&amp;quot;&lt;/span&gt;,
&lt;span class="w"&gt;      &lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;binding:vif_details&amp;quot;&lt;/span&gt;:&lt;span class="o"&gt;{&lt;/span&gt;
&lt;span class="w"&gt;      &lt;/span&gt;&lt;span class="o"&gt;}&lt;/span&gt;,
&lt;span class="w"&gt;      &lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;binding:vnic_type&amp;quot;&lt;/span&gt;:&lt;span class="s2"&gt;&amp;quot;normal&amp;quot;&lt;/span&gt;,
&lt;span class="w"&gt;      &lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;binding:vif_type&amp;quot;&lt;/span&gt;:&lt;span class="s2"&gt;&amp;quot;unbound&amp;quot;&lt;/span&gt;,
&lt;span class="w"&gt;      &lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;mac_address&amp;quot;&lt;/span&gt;:&lt;span class="s2"&gt;&amp;quot;fa:16:3e:b3:da:44&amp;quot;&lt;/span&gt;,
&lt;span class="w"&gt;      &lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;project_id&amp;quot;&lt;/span&gt;:&lt;span class="s2"&gt;&amp;quot;3b2594f2569542f694ff346a6db7fa1e&amp;quot;&lt;/span&gt;,
&lt;span class="w"&gt;      &lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;created_at&amp;quot;&lt;/span&gt;:&lt;span class="s2"&gt;&amp;quot;2017-03-03T23:01:47Z&amp;quot;&lt;/span&gt;
&lt;span class="w"&gt;   &lt;/span&gt;&lt;span class="o"&gt;}&lt;/span&gt;
&lt;span class="o"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;h2&gt;Create a NOVA instance based on image and flavor&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Service: Nova&lt;/li&gt;
&lt;li&gt;Method: &lt;code&gt;POST&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Endpoint: &lt;code&gt;/v2.1/servers&lt;/code&gt; (&lt;a href="https://developer.openstack.org/api-ref/compute/?expanded=show-flavor-details-detail,create-server-detail#create-server"&gt;ref&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;HTTP header:&lt;ol&gt;
&lt;li&gt;User-Agent: &lt;code&gt;python-novaclient&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Content-Type: &lt;code&gt;application/json&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Accept: &lt;code&gt;application/json&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;X-Auth-Token: &lt;code&gt;ccc5f650029b710c4a3c8f20320afaaed04326f1&lt;/code&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;JSON payload:&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="o"&gt;{&lt;/span&gt;
&lt;span class="w"&gt;   &lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;server&amp;quot;&lt;/span&gt;:&lt;span class="o"&gt;{&lt;/span&gt;
&lt;span class="w"&gt;      &lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;name&amp;quot;&lt;/span&gt;:&lt;span class="s2"&gt;&amp;quot;tt1&amp;quot;&lt;/span&gt;,
&lt;span class="w"&gt;      &lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;imageRef&amp;quot;&lt;/span&gt;:&lt;span class="s2"&gt;&amp;quot;9794e5b3-b3f1-403c-b37a-19c7e07cca4a&amp;quot;&lt;/span&gt;,
&lt;span class="w"&gt;      &lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;flavorRef&amp;quot;&lt;/span&gt;:&lt;span class="s2"&gt;&amp;quot;a5178caf-6b3a-49ec-ab47-a6daaf05423e&amp;quot;&lt;/span&gt;,
&lt;span class="w"&gt;      &lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;max_count&amp;quot;&lt;/span&gt;:1,
&lt;span class="w"&gt;      &lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;min_count&amp;quot;&lt;/span&gt;:1,
&lt;span class="w"&gt;      &lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;networks&amp;quot;&lt;/span&gt;:&lt;span class="o"&gt;[&lt;/span&gt;
&lt;span class="w"&gt;         &lt;/span&gt;&lt;span class="o"&gt;{&lt;/span&gt;
&lt;span class="w"&gt;            &lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;port&amp;quot;&lt;/span&gt;:&lt;span class="s2"&gt;&amp;quot;22d79b92-0848-4053-ad0d-f182d02d01a0&amp;quot;&lt;/span&gt;
&lt;span class="w"&gt;         &lt;/span&gt;&lt;span class="o"&gt;}&lt;/span&gt;
&lt;span class="w"&gt;      &lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt;
&lt;span class="w"&gt;   &lt;/span&gt;&lt;span class="o"&gt;}&lt;/span&gt;
&lt;span class="o"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;ul&gt;
&lt;li&gt;Response:&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="o"&gt;{&lt;/span&gt;
&lt;span class="w"&gt;   &lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;server&amp;quot;&lt;/span&gt;:&lt;span class="o"&gt;{&lt;/span&gt;
&lt;span class="w"&gt;      &lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;security_groups&amp;quot;&lt;/span&gt;:&lt;span class="o"&gt;[&lt;/span&gt;
&lt;span class="w"&gt;         &lt;/span&gt;&lt;span class="o"&gt;{&lt;/span&gt;
&lt;span class="w"&gt;            &lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;name&amp;quot;&lt;/span&gt;:&lt;span class="s2"&gt;&amp;quot;default&amp;quot;&lt;/span&gt;
&lt;span class="w"&gt;         &lt;/span&gt;&lt;span class="o"&gt;}&lt;/span&gt;
&lt;span class="w"&gt;      &lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt;,
&lt;span class="w"&gt;      &lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;OS-DCF:diskConfig&amp;quot;&lt;/span&gt;:&lt;span class="s2"&gt;&amp;quot;MANUAL&amp;quot;&lt;/span&gt;,
&lt;span class="w"&gt;      &lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;id&amp;quot;&lt;/span&gt;:&lt;span class="s2"&gt;&amp;quot;3d79d699-16c7-4f99-b034-57403d2d18e6&amp;quot;&lt;/span&gt;,
&lt;span class="w"&gt;      &lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;links&amp;quot;&lt;/span&gt;:&lt;span class="o"&gt;[&lt;/span&gt;
&lt;span class="w"&gt;         &lt;/span&gt;&lt;span class="o"&gt;{&lt;/span&gt;
&lt;span class="w"&gt;            &lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;href&amp;quot;&lt;/span&gt;:&lt;span class="s2"&gt;&amp;quot;http://10.0.2.15:8774/v2.1/servers/3d79d699-16c7-4f99-b034-57403d2d18e6&amp;quot;&lt;/span&gt;,
&lt;span class="w"&gt;            &lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;rel&amp;quot;&lt;/span&gt;:&lt;span class="s2"&gt;&amp;quot;self&amp;quot;&lt;/span&gt;
&lt;span class="w"&gt;         &lt;/span&gt;&lt;span class="o"&gt;}&lt;/span&gt;,
&lt;span class="w"&gt;         &lt;/span&gt;&lt;span class="o"&gt;{&lt;/span&gt;
&lt;span class="w"&gt;            &lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;href&amp;quot;&lt;/span&gt;:&lt;span class="s2"&gt;&amp;quot;http://10.0.2.15:8774/servers/3d79d699-16c7-4f99-b034-57403d2d18e6&amp;quot;&lt;/span&gt;,
&lt;span class="w"&gt;            &lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;rel&amp;quot;&lt;/span&gt;:&lt;span class="s2"&gt;&amp;quot;bookmark&amp;quot;&lt;/span&gt;
&lt;span class="w"&gt;         &lt;/span&gt;&lt;span class="o"&gt;}&lt;/span&gt;
&lt;span class="w"&gt;      &lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt;,
&lt;span class="w"&gt;      &lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;adminPass&amp;quot;&lt;/span&gt;:&lt;span class="s2"&gt;&amp;quot;xvcZ3HXf9Zr4&amp;quot;&lt;/span&gt;
&lt;span class="w"&gt;   &lt;/span&gt;&lt;span class="o"&gt;}&lt;/span&gt;
&lt;span class="o"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;h2&gt;Read NOVA instance details&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Service: Nova&lt;/li&gt;
&lt;li&gt;Method: &lt;code&gt;GET&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Endpoint: &lt;code&gt;/v2.1/servers/3d79d699-16c7-4f99-b034-57403d2d18e6&lt;/code&gt;
  (&lt;a href="https://developer.openstack.org/api-ref/compute/?expanded=show-flavor-details-detail,show-server-details-detail#show-server-details"&gt;ref&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;HTTP header:&lt;ol&gt;
&lt;li&gt;User-Agent: &lt;code&gt;python-novaclient&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Accept: &lt;code&gt;application/json&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;X-Auth-Token: &lt;code&gt;ccc5f650029b710c4a3c8f20320afaaed04326f1&lt;/code&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;JSON payload: none&lt;/li&gt;
&lt;li&gt;Response:&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="o"&gt;{&lt;/span&gt;
&lt;span class="w"&gt;   &lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;server&amp;quot;&lt;/span&gt;:&lt;span class="o"&gt;{&lt;/span&gt;
&lt;span class="w"&gt;      &lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;OS-EXT-STS:task_state&amp;quot;&lt;/span&gt;:&lt;span class="s2"&gt;&amp;quot;scheduling&amp;quot;&lt;/span&gt;,
&lt;span class="w"&gt;      &lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;addresses&amp;quot;&lt;/span&gt;:&lt;span class="o"&gt;{&lt;/span&gt;
&lt;span class="w"&gt;      &lt;/span&gt;&lt;span class="o"&gt;}&lt;/span&gt;,
&lt;span class="w"&gt;      &lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;links&amp;quot;&lt;/span&gt;:&lt;span class="o"&gt;[&lt;/span&gt;
&lt;span class="w"&gt;         &lt;/span&gt;&lt;span class="o"&gt;{&lt;/span&gt;
&lt;span class="w"&gt;            &lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;href&amp;quot;&lt;/span&gt;:&lt;span class="s2"&gt;&amp;quot;http://10.0.2.15:8774/v2.1/servers/3d79d699-16c7-4f99-b034-57403d2d18e6&amp;quot;&lt;/span&gt;,
&lt;span class="w"&gt;            &lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;rel&amp;quot;&lt;/span&gt;:&lt;span class="s2"&gt;&amp;quot;self&amp;quot;&lt;/span&gt;
&lt;span class="w"&gt;         &lt;/span&gt;&lt;span class="o"&gt;}&lt;/span&gt;,
&lt;span class="w"&gt;         &lt;/span&gt;&lt;span class="o"&gt;{&lt;/span&gt;
&lt;span class="w"&gt;            &lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;href&amp;quot;&lt;/span&gt;:&lt;span class="s2"&gt;&amp;quot;http://10.0.2.15:8774/servers/3d79d699-16c7-4f99-b034-57403d2d18e6&amp;quot;&lt;/span&gt;,
&lt;span class="w"&gt;            &lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;rel&amp;quot;&lt;/span&gt;:&lt;span class="s2"&gt;&amp;quot;bookmark&amp;quot;&lt;/span&gt;
&lt;span class="w"&gt;         &lt;/span&gt;&lt;span class="o"&gt;}&lt;/span&gt;
&lt;span class="w"&gt;      &lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt;,
&lt;span class="w"&gt;      &lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;image&amp;quot;&lt;/span&gt;:&lt;span class="o"&gt;{&lt;/span&gt;
&lt;span class="w"&gt;         &lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;id&amp;quot;&lt;/span&gt;:&lt;span class="s2"&gt;&amp;quot;9794e5b3-b3f1-403c-b37a-19c7e07cca4a&amp;quot;&lt;/span&gt;,
&lt;span class="w"&gt;         &lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;links&amp;quot;&lt;/span&gt;:&lt;span class="o"&gt;[&lt;/span&gt;
&lt;span class="w"&gt;            &lt;/span&gt;&lt;span class="o"&gt;{&lt;/span&gt;
&lt;span class="w"&gt;               &lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;href&amp;quot;&lt;/span&gt;:&lt;span class="s2"&gt;&amp;quot;http://10.0.2.15:8774images/9794e5b3-b3f1-403c-b37a-19c7e07cca4a&amp;quot;&lt;/span&gt;,
&lt;span class="w"&gt;               &lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;rel&amp;quot;&lt;/span&gt;:&lt;span class="s2"&gt;&amp;quot;bookmark&amp;quot;&lt;/span&gt;
&lt;span class="w"&gt;            &lt;/span&gt;&lt;span class="o"&gt;}&lt;/span&gt;
&lt;span class="w"&gt;         &lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt;
&lt;span class="w"&gt;      &lt;/span&gt;&lt;span class="o"&gt;}&lt;/span&gt;,
&lt;span class="w"&gt;      &lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;OS-EXT-STS:vm_state&amp;quot;&lt;/span&gt;:&lt;span class="s2"&gt;&amp;quot;building&amp;quot;&lt;/span&gt;,
&lt;span class="w"&gt;      &lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;OS-EXT-SRV-ATTR:instance_name&amp;quot;&lt;/span&gt;:&lt;span class="s2"&gt;&amp;quot;&amp;quot;&lt;/span&gt;,
&lt;span class="w"&gt;      &lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;OS-SRV-USG:launched_at&amp;quot;&lt;/span&gt;:null,
&lt;span class="w"&gt;      &lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;flavor&amp;quot;&lt;/span&gt;:&lt;span class="o"&gt;{&lt;/span&gt;
&lt;span class="w"&gt;         &lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;id&amp;quot;&lt;/span&gt;:&lt;span class="s2"&gt;&amp;quot;a5178caf-6b3a-49ec-ab47-a6daaf05423e&amp;quot;&lt;/span&gt;,
&lt;span class="w"&gt;         &lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;links&amp;quot;&lt;/span&gt;:&lt;span class="o"&gt;[&lt;/span&gt;
&lt;span class="w"&gt;            &lt;/span&gt;&lt;span class="o"&gt;{&lt;/span&gt;
&lt;span class="w"&gt;               &lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;href&amp;quot;&lt;/span&gt;:&lt;span class="s2"&gt;&amp;quot;http://10.0.2.15:8774/flavors/a5178caf-6b3a-49ec-ab47-a6daaf05423e&amp;quot;&lt;/span&gt;,
&lt;span class="w"&gt;               &lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;rel&amp;quot;&lt;/span&gt;:&lt;span class="s2"&gt;&amp;quot;bookmark&amp;quot;&lt;/span&gt;
&lt;span class="w"&gt;            &lt;/span&gt;&lt;span class="o"&gt;}&lt;/span&gt;
&lt;span class="w"&gt;         &lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt;
&lt;span class="w"&gt;      &lt;/span&gt;&lt;span class="o"&gt;}&lt;/span&gt;,
&lt;span class="w"&gt;      &lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;id&amp;quot;&lt;/span&gt;:&lt;span class="s2"&gt;&amp;quot;3d79d699-16c7-4f99-b034-57403d2d18e6&amp;quot;&lt;/span&gt;,
&lt;span class="w"&gt;      &lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;user_id&amp;quot;&lt;/span&gt;:&lt;span class="s2"&gt;&amp;quot;277d3bed50964145998606c8a66982fd&amp;quot;&lt;/span&gt;,
&lt;span class="w"&gt;      &lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;OS-DCF:diskConfig&amp;quot;&lt;/span&gt;:&lt;span class="s2"&gt;&amp;quot;MANUAL&amp;quot;&lt;/span&gt;,
&lt;span class="w"&gt;      &lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;accessIPv4&amp;quot;&lt;/span&gt;:&lt;span class="s2"&gt;&amp;quot;&amp;quot;&lt;/span&gt;,
&lt;span class="w"&gt;      &lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;accessIPv6&amp;quot;&lt;/span&gt;:&lt;span class="s2"&gt;&amp;quot;&amp;quot;&lt;/span&gt;,
&lt;span class="w"&gt;      &lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;progress&amp;quot;&lt;/span&gt;:0,
&lt;span class="w"&gt;      &lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;OS-EXT-STS:power_state&amp;quot;&lt;/span&gt;:0,
&lt;span class="w"&gt;      &lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;OS-EXT-AZ:availability_zone&amp;quot;&lt;/span&gt;:&lt;span class="s2"&gt;&amp;quot;&amp;quot;&lt;/span&gt;,
&lt;span class="w"&gt;      &lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;metadata&amp;quot;&lt;/span&gt;:&lt;span class="o"&gt;{&lt;/span&gt;
&lt;span class="w"&gt;      &lt;/span&gt;&lt;span class="o"&gt;}&lt;/span&gt;,
&lt;span class="w"&gt;      &lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;status&amp;quot;&lt;/span&gt;:&lt;span class="s2"&gt;&amp;quot;BUILD&amp;quot;&lt;/span&gt;,
&lt;span class="w"&gt;      &lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;updated&amp;quot;&lt;/span&gt;:&lt;span class="s2"&gt;&amp;quot;2017-03-03T23:02:45Z&amp;quot;&lt;/span&gt;,
&lt;span class="w"&gt;      &lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;hostId&amp;quot;&lt;/span&gt;:&lt;span class="s2"&gt;&amp;quot;&amp;quot;&lt;/span&gt;,
&lt;span class="w"&gt;      &lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;OS-EXT-SRV-ATTR:host&amp;quot;&lt;/span&gt;:null,
&lt;span class="w"&gt;      &lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;OS-SRV-USG:terminated_at&amp;quot;&lt;/span&gt;:null,
&lt;span class="w"&gt;      &lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;key_name&amp;quot;&lt;/span&gt;:null,
&lt;span class="w"&gt;      &lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;OS-EXT-SRV-ATTR:hypervisor_hostname&amp;quot;&lt;/span&gt;:null,
&lt;span class="w"&gt;      &lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;name&amp;quot;&lt;/span&gt;:&lt;span class="s2"&gt;&amp;quot;tt1&amp;quot;&lt;/span&gt;,
&lt;span class="w"&gt;      &lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;created&amp;quot;&lt;/span&gt;:&lt;span class="s2"&gt;&amp;quot;2017-03-03T23:02:45Z&amp;quot;&lt;/span&gt;,
&lt;span class="w"&gt;      &lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;tenant_id&amp;quot;&lt;/span&gt;:&lt;span class="s2"&gt;&amp;quot;3b2594f2569542f694ff346a6db7fa1e&amp;quot;&lt;/span&gt;,
&lt;span class="w"&gt;      &lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;os-extended-volumes:volumes_attached&amp;quot;&lt;/span&gt;:&lt;span class="o"&gt;[&lt;/span&gt;
&lt;span class="w"&gt;      &lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt;,
&lt;span class="w"&gt;      &lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;config_drive&amp;quot;&lt;/span&gt;:&lt;span class="s2"&gt;&amp;quot;&amp;quot;&lt;/span&gt;
&lt;span class="w"&gt;   &lt;/span&gt;&lt;span class="o"&gt;}&lt;/span&gt;
&lt;span class="o"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;h2&gt;Get user image detail&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Service: Glance&lt;/li&gt;
&lt;li&gt;Method: &lt;code&gt;GET&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Endpoint: &lt;code&gt;/v2images/9794e5b3-b3f1-403c-b37a-19c7e07cca4a&lt;/code&gt; (&lt;a href="https://developer.openstack.org/api-ref/image/v2/index.html?expanded=show-image-details-detail#show-image-details"&gt;ref&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;HTTP header:&lt;ol&gt;
&lt;li&gt;Accept-Encoding: &lt;code&gt;gzip, deflate&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Accept: &lt;code&gt;*/*&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;User-Agent: &lt;code&gt;python-glanceclient&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Connection: &lt;code&gt;keep-alive&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;X-Auth-Token: &lt;code&gt;ccc5f650029b710c4a3c8f20320afaaed04326f1&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Content-Type: &lt;code&gt;application/octet-stream&lt;/code&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;JSON payload: none&lt;/li&gt;
&lt;li&gt;Response:&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="o"&gt;{&lt;/span&gt;
&lt;span class="w"&gt;   &lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;status&amp;quot;&lt;/span&gt;:&lt;span class="s2"&gt;&amp;quot;active&amp;quot;&lt;/span&gt;,
&lt;span class="w"&gt;   &lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;name&amp;quot;&lt;/span&gt;:&lt;span class="s2"&gt;&amp;quot;cirros-0.3.4-x86_64-uec&amp;quot;&lt;/span&gt;,
&lt;span class="w"&gt;   &lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;tags&amp;quot;&lt;/span&gt;:&lt;span class="o"&gt;[&lt;/span&gt;
&lt;span class="w"&gt;   &lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt;,
&lt;span class="w"&gt;   &lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;kernel_id&amp;quot;&lt;/span&gt;:&lt;span class="s2"&gt;&amp;quot;ef538456-704c-445c-a98b-c081be22ad71&amp;quot;&lt;/span&gt;,
&lt;span class="w"&gt;   &lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;container_format&amp;quot;&lt;/span&gt;:&lt;span class="s2"&gt;&amp;quot;ami&amp;quot;&lt;/span&gt;,
&lt;span class="w"&gt;   &lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;created_at&amp;quot;&lt;/span&gt;:&lt;span class="s2"&gt;&amp;quot;2017-03-03T22:38:57Z&amp;quot;&lt;/span&gt;,
&lt;span class="w"&gt;   &lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;ramdisk_id&amp;quot;&lt;/span&gt;:&lt;span class="s2"&gt;&amp;quot;1a243f7b-3e96-4140-8408-b82064599cec&amp;quot;&lt;/span&gt;,
&lt;span class="w"&gt;   &lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;disk_format&amp;quot;&lt;/span&gt;:&lt;span class="s2"&gt;&amp;quot;ami&amp;quot;&lt;/span&gt;,
&lt;span class="w"&gt;   &lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;updated_at&amp;quot;&lt;/span&gt;:&lt;span class="s2"&gt;&amp;quot;2017-03-03T22:38:58Z&amp;quot;&lt;/span&gt;,
&lt;span class="w"&gt;   &lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;visibility&amp;quot;&lt;/span&gt;:&lt;span class="s2"&gt;&amp;quot;public&amp;quot;&lt;/span&gt;,
&lt;span class="w"&gt;   &lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;self&amp;quot;&lt;/span&gt;:&lt;span class="s2"&gt;&amp;quot;/v2images/9794e5b3-b3f1-403c-b37a-19c7e07cca4a&amp;quot;&lt;/span&gt;,
&lt;span class="w"&gt;   &lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;min_disk&amp;quot;&lt;/span&gt;:0,
&lt;span class="w"&gt;   &lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;protected&amp;quot;&lt;/span&gt;:false,
&lt;span class="w"&gt;   &lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;id&amp;quot;&lt;/span&gt;:&lt;span class="s2"&gt;&amp;quot;9794e5b3-b3f1-403c-b37a-19c7e07cca4a&amp;quot;&lt;/span&gt;,
&lt;span class="w"&gt;   &lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;size&amp;quot;&lt;/span&gt;:25165824,
&lt;span class="w"&gt;   &lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;file&amp;quot;&lt;/span&gt;:&lt;span class="s2"&gt;&amp;quot;/v2images/9794e5b3-b3f1-403c-b37a-19c7e07cca4a/file&amp;quot;&lt;/span&gt;,
&lt;span class="w"&gt;   &lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;checksum&amp;quot;&lt;/span&gt;:&lt;span class="s2"&gt;&amp;quot;eb9139e4942121f22bbc2afc0400b2a4&amp;quot;&lt;/span&gt;,
&lt;span class="w"&gt;   &lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;owner&amp;quot;&lt;/span&gt;:&lt;span class="s2"&gt;&amp;quot;3b2594f2569542f694ff346a6db7fa1e&amp;quot;&lt;/span&gt;,
&lt;span class="w"&gt;   &lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;virtual_size&amp;quot;&lt;/span&gt;:null,
&lt;span class="w"&gt;   &lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;min_ram&amp;quot;&lt;/span&gt;:0,
&lt;span class="w"&gt;   &lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;schema&amp;quot;&lt;/span&gt;:&lt;span class="s2"&gt;&amp;quot;/v2/schemas/image&amp;quot;&lt;/span&gt;
&lt;span class="o"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;h2&gt;Get flavor detail&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Service: Nova&lt;/li&gt;
&lt;li&gt;Method: &lt;code&gt;GET&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Endpoint: &lt;code&gt;/v2.1/flavors/a5178caf-6b3a-49ec-ab47-a6daaf05423e&lt;/code&gt; (&lt;a href="https://developer.openstack.org/api-ref/compute/?expanded=show-flavor-details-detail#show-flavor-details"&gt;ref&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;HTTP header:&lt;ol&gt;
&lt;li&gt;User-Agent: &lt;code&gt;python-novaclient&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Accept: &lt;code&gt;application/json&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;X-Auth-Token: &lt;code&gt;ccc5f650029b710c4a3c8f20320afaaed04326f1&lt;/code&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;JSON payload: none&lt;/li&gt;
&lt;li&gt;Response:&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="o"&gt;{&lt;/span&gt;
&lt;span class="w"&gt;   &lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;flavor&amp;quot;&lt;/span&gt;:&lt;span class="o"&gt;{&lt;/span&gt;
&lt;span class="w"&gt;      &lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;links&amp;quot;&lt;/span&gt;:&lt;span class="o"&gt;[&lt;/span&gt;
&lt;span class="w"&gt;         &lt;/span&gt;&lt;span class="o"&gt;{&lt;/span&gt;
&lt;span class="w"&gt;            &lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;href&amp;quot;&lt;/span&gt;:&lt;span class="s2"&gt;&amp;quot;http://10.0.2.15:8774/v2.1/flavors/a5178caf-6b3a-49ec-ab47-a6daaf05423e&amp;quot;&lt;/span&gt;,
&lt;span class="w"&gt;            &lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;rel&amp;quot;&lt;/span&gt;:&lt;span class="s2"&gt;&amp;quot;self&amp;quot;&lt;/span&gt;
&lt;span class="w"&gt;         &lt;/span&gt;&lt;span class="o"&gt;}&lt;/span&gt;,
&lt;span class="w"&gt;         &lt;/span&gt;&lt;span class="o"&gt;{&lt;/span&gt;
&lt;span class="w"&gt;            &lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;href&amp;quot;&lt;/span&gt;:&lt;span class="s2"&gt;&amp;quot;http://10.0.2.15:8774/flavors/a5178caf-6b3a-49ec-ab47-a6daaf05423e&amp;quot;&lt;/span&gt;,
&lt;span class="w"&gt;            &lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;rel&amp;quot;&lt;/span&gt;:&lt;span class="s2"&gt;&amp;quot;bookmark&amp;quot;&lt;/span&gt;
&lt;span class="w"&gt;         &lt;/span&gt;&lt;span class="o"&gt;}&lt;/span&gt;
&lt;span class="w"&gt;      &lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt;,
&lt;span class="w"&gt;      &lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;ram&amp;quot;&lt;/span&gt;:1280,
&lt;span class="w"&gt;      &lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;OS-FLV-DISABLED:disabled&amp;quot;&lt;/span&gt;:false,
&lt;span class="w"&gt;      &lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;os-flavor-access:is_public&amp;quot;&lt;/span&gt;:true,
&lt;span class="w"&gt;      &lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;rxtx_factor&amp;quot;&lt;/span&gt;:1.0,
&lt;span class="w"&gt;      &lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;disk&amp;quot;&lt;/span&gt;:10,
&lt;span class="w"&gt;      &lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;id&amp;quot;&lt;/span&gt;:&lt;span class="s2"&gt;&amp;quot;a5178caf-6b3a-49ec-ab47-a6daaf05423e&amp;quot;&lt;/span&gt;,
&lt;span class="w"&gt;      &lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;name&amp;quot;&lt;/span&gt;:&lt;span class="s2"&gt;&amp;quot;baremetal&amp;quot;&lt;/span&gt;,
&lt;span class="w"&gt;      &lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;vcpus&amp;quot;&lt;/span&gt;:1,
&lt;span class="w"&gt;      &lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;swap&amp;quot;&lt;/span&gt;:&lt;span class="s2"&gt;&amp;quot;&amp;quot;&lt;/span&gt;,
&lt;span class="w"&gt;      &lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;OS-FLV-EXT-DATA:ephemeral&amp;quot;&lt;/span&gt;:0
&lt;span class="w"&gt;   &lt;/span&gt;&lt;span class="o"&gt;}&lt;/span&gt;
&lt;span class="o"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;</content><category term="openstack"></category><category term="lenovo"></category></entry><entry><title>Introduction of Juju charms</title><link href="https://fengxia41103.github.io/myblog/juju%20charm%20layers.html" rel="alternate"></link><published>2017-02-28T17:00:00-05:00</published><updated>2017-02-28T17:00:00-05:00</updated><author><name>Feng Xia</name></author><id>tag:fengxia41103.github.io,2017-02-28:/myblog/juju charm layers.html</id><summary type="html">&lt;p&gt;Juju &lt;a href="https://jujucharms.com/"&gt;charms&lt;/a&gt; are, charming. It promises a selection of blueprints
that hold magic to make an application deployment easy. But devils are
in the details, as always the case. In this article we will walk in
the charm world to learn its design.&lt;/p&gt;
&lt;h1&gt;Bundle, charm, service, application&lt;/h1&gt;
&lt;p&gt;Juju &lt;a href="https://jujucharms.com/docs/stable/juju-concepts"&gt;terms&lt;/a&gt; can be confusing. Approximately they can be viewed in
a tree model, where a bundle can have multiple charms, a charm can
contain multiple &lt;a href="https://jujucharms.com/docs/2.0/authors-subordinate-services"&gt;services&lt;/a&gt;, a service is composed of one or more
applications and a group of &lt;a href="https://jujucharms.com/docs/1.24/charms-relations"&gt;relations&lt;/a&gt;, and a relation, if
defined, must be one of the two types:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;strong&gt;provide&lt;/strong&gt; (eg. I am MySQL and I provide a SQL database relation).&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;require&lt;/strong&gt; (eg. I'm Mediawiki and I require a SQL database).&lt;/li&gt;
&lt;/ol&gt;
&lt;figure class="s12 center"&gt;
  &lt;img src="images/juju%20control%20modeling.png" /&gt;
  &lt;figcaption&gt;Juju control modeling&lt;/figcaption&gt;
&lt;/figure&gt;

&lt;p&gt;In term of deployment, a service can be deployed to more than one
machine so as to achieve HA; a machine can also have more than one
services. Here we use the term machine broadly because it can also be
a single LXD container, so in this case there can â€¦&lt;/p&gt;</summary><content type="html">&lt;p&gt;Juju &lt;a href="https://jujucharms.com/"&gt;charms&lt;/a&gt; are, charming. It promises a selection of blueprints
that hold magic to make an application deployment easy. But devils are
in the details, as always the case. In this article we will walk in
the charm world to learn its design.&lt;/p&gt;
&lt;h1&gt;Bundle, charm, service, application&lt;/h1&gt;
&lt;p&gt;Juju &lt;a href="https://jujucharms.com/docs/stable/juju-concepts"&gt;terms&lt;/a&gt; can be confusing. Approximately they can be viewed in
a tree model, where a bundle can have multiple charms, a charm can
contain multiple &lt;a href="https://jujucharms.com/docs/2.0/authors-subordinate-services"&gt;services&lt;/a&gt;, a service is composed of one or more
applications and a group of &lt;a href="https://jujucharms.com/docs/1.24/charms-relations"&gt;relations&lt;/a&gt;, and a relation, if
defined, must be one of the two types:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;strong&gt;provide&lt;/strong&gt; (eg. I am MySQL and I provide a SQL database relation).&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;require&lt;/strong&gt; (eg. I'm Mediawiki and I require a SQL database).&lt;/li&gt;
&lt;/ol&gt;
&lt;figure class="s12 center"&gt;
  &lt;img src="images/juju%20control%20modeling.png" /&gt;
  &lt;figcaption&gt;Juju control modeling&lt;/figcaption&gt;
&lt;/figure&gt;

&lt;p&gt;In term of deployment, a service can be deployed to more than one
machine so as to achieve HA; a machine can also have more than one
services. Here we use the term machine broadly because it can also be
a single LXD container, so in this case there can be many containers
in a single VM, and many VMs on a single physical &lt;em&gt;machine&lt;/em&gt;.&lt;/p&gt;
&lt;h1&gt;Charm and layers&lt;/h1&gt;
&lt;p&gt;How does a charm describe an application and its relations then? The
anwser is: &lt;strong&gt;layers&lt;/strong&gt;. A charm is built from three layers:
&lt;a href="https://jujucharms.com/docs/stable/developer-layers#base,-or-runtime,-layers"&gt;basic/runtime layer&lt;/a&gt;, &lt;a href="https://jujucharms.com/docs/stable/developer-layers-interfaces"&gt;interface layer&lt;/a&gt;, and charm layer. Basic
layer is like a library &amp;mdash; common parts that many applications
can use without conflicts. Thing like DB services, HTTP server,
storage should belong to this category. Interface layer is an abstract
of what a charm exposes for consumption. Case in point will be any
database charm, who should always define an interface to exchange DB
login credentials and ports. Charm layer is application specific, and
its logic is following the &lt;a href="https://pythonhosted.org/charms.reactive/"&gt;reactive pattern&lt;/a&gt;.&lt;/p&gt;
&lt;figure class="s12 center"&gt;
    &lt;img src="images/juju%20charm%20layers.png" /&gt;
    &lt;figcaption&gt;Juju charm layers&lt;/figcaption&gt;
&lt;/figure&gt;

&lt;h2&gt;Hooks and Reactive pattern&lt;/h2&gt;
&lt;p&gt;Previously, charms are written as a list of &lt;a href="http://interfaces.juju.solutions/"&gt;hooks&lt;/a&gt; responding to
events. This is still true because hooks are the actual scripts. Any
charm supports the following hooks:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;install&lt;/li&gt;
&lt;li&gt;config-changed&lt;/li&gt;
&lt;li&gt;start&lt;/li&gt;
&lt;li&gt;upgrade-charm&lt;/li&gt;
&lt;li&gt;stop&lt;/li&gt;
&lt;li&gt;update-status&lt;/li&gt;
&lt;li&gt;leader-elected&lt;/li&gt;
&lt;li&gt;leader-settings-changed&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;For each &lt;code&gt;relation&lt;/code&gt; defined, there are four &lt;em&gt;relation hooks&lt;/em&gt;:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;[name]-relation-joined&lt;/li&gt;
&lt;li&gt;[name]-relation-changed&lt;/li&gt;
&lt;li&gt;[name]-relation-departed&lt;/li&gt;
&lt;li&gt;[name]-relation-broken&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Hooks run in a paritcular sequence, and that sequence is
&lt;strong&gt;hardcoded&lt;/strong&gt;.  This is terrible. So instead of individual hooks, we
have now a better way to capture this concept using &lt;strong&gt;&lt;a href="https://jujucharms.com/docs/stable/developer-layers#states"&gt;States&lt;/a&gt;&lt;/strong&gt;
&amp;mdash; &lt;a href="https://pythonhosted.org/charms.reactive/"&gt;reactive pattern&lt;/a&gt;.  A charm can define arbitrary state,
say &lt;strong&gt;foo&lt;/strong&gt;. Another layer in the same charm can then uses Python
decorator, eg. &lt;code&gt;@when&lt;/code&gt;, &lt;code&gt;@when_not&lt;/code&gt;, to specify the status of
&lt;strong&gt;foo&lt;/strong&gt;, which then determined whether the function will be
executed. I suppose the framework itself handles event polling,
broadcasting and the like.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;State has a namespace per charm per unit. Therefore, states do not
go across unit boundary, nor charm boundary.
For states between charms/units, use &lt;code&gt;interface&lt;/code&gt;.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2&gt;Basic/runtime layer&lt;/h2&gt;
&lt;p&gt;There are two ways to construct basic layer: use an existing one, such
as the &lt;a href="https://github.com/johnsca/apache-php"&gt;apache-php&lt;/a&gt;, or use the &lt;a href="http://github.com/juju-solutions/layer-basic"&gt;basic layer&lt;/a&gt; template to write
your own. Don't forget to check out these existing &lt;a href="https://github.com/juju-solutions"&gt;runtime layers&lt;/a&gt;
for reuse. &lt;em&gt;Note&lt;/em&gt;: which one can be reused, and which one can not? I
don't see any document to distinguish this.&lt;/p&gt;
&lt;h2&gt;Interface layer&lt;/h2&gt;
&lt;p&gt;&lt;a href="https://jujucharms.com/docs/stable/developer-layers-interfaces"&gt;Interface layer&lt;/a&gt; defines both the &lt;em&gt;provides&lt;/em&gt; and the &lt;em&gt;requires&lt;/em&gt;.
One thing to remember is that relation does not define the actual
connection at all! What it does is to pass along configurations
&amp;mdash; IP address, port, user name, password, and such. For example,
if there is a MySQL &lt;em&gt;provides&lt;/em&gt; and Wordpress &lt;em&gt;requires&lt;/em&gt;, Wordpress
will read from the providing side of configurations needed to make the
connection.&lt;/p&gt;
&lt;figure class="s12 center"&gt;
    &lt;img src="images/charm%20relation%20and%20interface.png" /&gt;
    &lt;figcaption&gt;Charm relation and interface&lt;/figcaption&gt;
&lt;/figure&gt;

&lt;h3&gt;Communication scope&lt;/h3&gt;
&lt;p&gt;Interfaces are categorized into three &lt;a href="https://jujucharms.com/docs/stable/developer-layers-interfaces#communication-scopes"&gt;communication scopes&lt;/a&gt;:
global level, service level, and unit level. Again, they are grouping
concept, where unit is the atom (and the default level). Multiple
units can belong to a service level, and everything else goes into
global level.&lt;/p&gt;
&lt;p&gt;The communication scope is closely related to the &lt;a href="https://jujucharms.com/docs/2.0/authors-relations-in-depth"&gt;relationship
lifecycle&lt;/a&gt;, where units in the same scope will have data
broadcasted to them so they will be aware of each other's
state. Therefore, unit level can be used for application that provides
no relation and has no peer-to-peer need; service level is certainly
&lt;strong&gt;providing&lt;/strong&gt; some type of relation so others can leverage; and global
is just a catch-all scope.&lt;/p&gt;
&lt;h3&gt;Relation and Interface&lt;/h3&gt;
&lt;p&gt;So how does relation and interface come into play? Declaring relation
is a strong statement. As we have already mentioned, there are two
types of relations: &lt;em&gt;provides&lt;/em&gt; and &lt;em&gt;requires&lt;/em&gt;. The provides and
requires keys defined in metadata.yaml are used to define pairings of
charms that are likely to be fruitful. Consider mongodb's metadata:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;name:&lt;span class="w"&gt; &lt;/span&gt;mongodb
...
provides:
&lt;span class="w"&gt;  &lt;/span&gt;database:
&lt;span class="w"&gt;    &lt;/span&gt;interface:&lt;span class="w"&gt; &lt;/span&gt;mongodb
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;where in another metadata who is on the receiving end of this relation:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;name:&lt;span class="w"&gt; &lt;/span&gt;my-node-app
...
requires:
&lt;span class="w"&gt;  &lt;/span&gt;database:
&lt;span class="w"&gt;    &lt;/span&gt;interface:&lt;span class="w"&gt; &lt;/span&gt;mongodb
provides:
&lt;span class="w"&gt;  &lt;/span&gt;website:
&lt;span class="w"&gt;    &lt;/span&gt;interface:&lt;span class="w"&gt; &lt;/span&gt;http
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;The word &lt;strong&gt;database&lt;/strong&gt; is the relation name. There is no restriction to
it except it can not be &lt;em&gt;juju&lt;/em&gt; or &lt;em&gt;jujud&lt;/em&gt;. Relation name serves as a
grouping because each relation can have more than one interface.&lt;/p&gt;
&lt;p&gt;The interface name, &lt;em&gt;mongodb&lt;/em&gt;, is important, since it is being used to
look up an existing &lt;a href="http://interfaces.juju.solutions/"&gt;relation registry&lt;/a&gt; for a match. I think this
is how charm build can pull in dependencies of other charms/layers.&lt;/p&gt;
&lt;h2&gt;Charm layer&lt;/h2&gt;
&lt;p&gt;This is where the application logics live.&lt;/p&gt;
&lt;h1&gt;Screencast&lt;/h1&gt;
&lt;p&gt;See the process in action:&lt;/p&gt;
&lt;figure class="s12 center"&gt;
    &lt;img src="images/vanilla%20charm%20deploy.gif" /&gt;
    &lt;figcaption&gt;Screencast showing deploying a Vanilla charm&lt;/figcaption&gt;
&lt;/figure&gt;</content><category term="openstack"></category><category term="lenovo"></category></entry><entry><title>Juju deploy and Provider</title><link href="https://fengxia41103.github.io/myblog/juju%20deploy%20provider.html" rel="alternate"></link><published>2017-02-08T14:00:00-05:00</published><updated>2017-02-08T14:00:00-05:00</updated><author><name>Feng Xia</name></author><id>tag:fengxia41103.github.io,2017-02-08:/myblog/juju deploy provider.html</id><summary type="html">&lt;p&gt;In &lt;a href="https://fengxia41103.github.io/myblog/juju deploy.html"&gt;this&lt;/a&gt; article, we have demonstrated how Juju deploys a charm,
including what makes a node eligible as a target and what files will
be put on by the deployer.If you recall, there were four steps in a
deploy process:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Add a new machine to the cloud environment. In the &lt;a href="https://fengxia41103.github.io/myblog/juju deploy.html"&gt;demo&lt;/a&gt;, we
   added this machine manually using &lt;code&gt;juju add-machine&lt;/code&gt; command.&lt;/li&gt;
&lt;li&gt;Machine-0 recognizes the new node.&lt;/li&gt;
&lt;li&gt;CLI issues a deploy command.&lt;/li&gt;
&lt;li&gt;Charm gets deployed.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;This usecase, however, is somewhat backwards -- we have provisioned a
machine prior to the deploy command. Wouldn't it be better if the
command will signal the cloud provider to create a new machine on the
fly? MAAS provider can almost do just that.&lt;/p&gt;
&lt;h1&gt;MAAS way of a deploy&lt;/h1&gt;
&lt;p&gt;We have briefly touched upon &lt;a href="https://fengxia41103.github.io/myblog/juju deploy.html"&gt;the MAAS way&lt;/a&gt;.  By default, Juju
deploy will request for a new machine unless using the &lt;code&gt;--to [machine
number]&lt;/code&gt; flag. While using MAAS it is seen that MAAS will turn a
&lt;code&gt;READY&lt;/code&gt; machine into &lt;code&gt;ALLOCATED&lt;/code&gt; then &lt;code&gt;DEPLOYING&lt;/code&gt;. Once a Juju agent
is installed (provisioned), the agent executes application â€¦&lt;/p&gt;</summary><content type="html">&lt;p&gt;In &lt;a href="https://fengxia41103.github.io/myblog/juju deploy.html"&gt;this&lt;/a&gt; article, we have demonstrated how Juju deploys a charm,
including what makes a node eligible as a target and what files will
be put on by the deployer.If you recall, there were four steps in a
deploy process:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Add a new machine to the cloud environment. In the &lt;a href="https://fengxia41103.github.io/myblog/juju deploy.html"&gt;demo&lt;/a&gt;, we
   added this machine manually using &lt;code&gt;juju add-machine&lt;/code&gt; command.&lt;/li&gt;
&lt;li&gt;Machine-0 recognizes the new node.&lt;/li&gt;
&lt;li&gt;CLI issues a deploy command.&lt;/li&gt;
&lt;li&gt;Charm gets deployed.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;This usecase, however, is somewhat backwards -- we have provisioned a
machine prior to the deploy command. Wouldn't it be better if the
command will signal the cloud provider to create a new machine on the
fly? MAAS provider can almost do just that.&lt;/p&gt;
&lt;h1&gt;MAAS way of a deploy&lt;/h1&gt;
&lt;p&gt;We have briefly touched upon &lt;a href="https://fengxia41103.github.io/myblog/juju deploy.html"&gt;the MAAS way&lt;/a&gt;.  By default, Juju
deploy will request for a new machine unless using the &lt;code&gt;--to [machine
number]&lt;/code&gt; flag. While using MAAS it is seen that MAAS will turn a
&lt;code&gt;READY&lt;/code&gt; machine into &lt;code&gt;ALLOCATED&lt;/code&gt; then &lt;code&gt;DEPLOYING&lt;/code&gt;. Once a Juju agent
is installed (provisioned), the agent executes application deployment.&lt;/p&gt;
&lt;figure class="s12 center"&gt;
    &lt;img src="images/juju%20deploy%20target%20node%20state%20diagram.png" /&gt;
    &lt;figcaption&gt;MAAS target node state diagram during Juju deploy process&lt;/figcaption&gt;
&lt;/figure&gt;

&lt;h1&gt;From CLI to provider&lt;/h1&gt;
&lt;p&gt;We know machine-0 will call MAAS's REST API to kick off the machine
provisioning process. But we do not know which API endpoint it is
using, and who is the caller inside machine-0 that makes this call.
&lt;a href="https://fengxia41103.github.io/myblog/juju deploy.html"&gt;Priviously&lt;/a&gt; we have analyzed this process from the outside &amp;mdash;
files generated, states changed, application installed. Here we will
look into the code to understand how these steps take place.&lt;/p&gt;
&lt;h2&gt;Overview of the agent&lt;/h2&gt;
&lt;p&gt;While looking at this process, one can't help noticing the key role
the juju agent plays. It seems to have intelligence that, once
installed, knows how to speak to the state controller (machine-0), how
to find and download a charm, and how to use it to deploy an
application. So just how are agents wired together?&lt;/p&gt;
&lt;figure class="s12 center"&gt;
    &lt;img src="images/juju%20agent%20overview.png" /&gt;
    &lt;figcaption&gt;High level view of Juju agents in an environment&lt;/figcaption&gt;
&lt;/figure&gt;

&lt;p&gt;The key of this diagram is that the agents are connected in a
&lt;strong&gt;client-server&lt;/strong&gt; configuration, where machine-0's agent is the &lt;em&gt;API
server&lt;/em&gt; and all other agents are its clients. The API server provides
a &lt;em&gt;facade&lt;/em&gt;, a design pattern, which exposes functions for client to
call. It is not clear yet how function is mapped to a string,
eg. &lt;code&gt;Deploy&lt;/code&gt; RPC will translate to facade's &lt;code&gt;Deploy()&lt;/code&gt; function
call.So Juju CLI is a client, same as a provisioned node.&lt;/p&gt;
&lt;h2&gt;Machine-0, state, and provisioner&lt;/h2&gt;
&lt;p&gt;Now when agent, say the CLI, issues a command, to the API server, what
happens next? Juju's design maintains an internal state that are
persisted in a mongo DB. A command will cause a state change, eg. if
machine XYZ's current state is one that has no MySQL (state A), a
deploy MySQL command will generate a state B (=state A + MySQL
installed).  This change is then saved to the DB. There is a
background loop called &lt;code&gt;provisioner&lt;/code&gt;, who monitors this state
change. The change(set) essentially has all the information the
provisioner needs to take an action so to bring machine from state A
&amp;rarr; state B.&lt;/p&gt;
&lt;figure class="s12 center"&gt;
    &lt;img src="images/juju%20machine%200%20state.png" /&gt;
    &lt;figcaption&gt;Machine-0 state &amp; provisioner&lt;/figcaption&gt;
&lt;/figure&gt;

&lt;h2&gt;Provisioner and provider&lt;/h2&gt;
&lt;p&gt;Ok, so the provisioner loop is the action taker. How is it aware of
the cloud provider? This is the final piece of the puzzle &amp;mdash;
within the &lt;code&gt;provisionTask&lt;/code&gt; struct, there is a
&lt;code&gt;environs.InstanceBroker&lt;/code&gt;. Now if you recall, the &lt;code&gt;environs&lt;/code&gt; is
another name for provider, where &lt;code&gt;InstanceBroker&lt;/code&gt; is a provider
interface! Bingo.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="nb"&gt;type&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;provisionerTask&lt;span class="w"&gt; &lt;/span&gt;struct&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;{&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;controllerUUID&lt;span class="w"&gt;             &lt;/span&gt;string
&lt;span class="w"&gt;    &lt;/span&gt;machineTag&lt;span class="w"&gt;                 &lt;/span&gt;names.MachineTag
&lt;span class="w"&gt;    &lt;/span&gt;machineGetter&lt;span class="w"&gt;              &lt;/span&gt;MachineGetter
&lt;span class="w"&gt;    &lt;/span&gt;toolsFinder&lt;span class="w"&gt;                &lt;/span&gt;ToolsFinder
&lt;span class="w"&gt;    &lt;/span&gt;machineChanges&lt;span class="w"&gt;             &lt;/span&gt;watcher.StringsChannel
&lt;span class="w"&gt;    &lt;/span&gt;retryChanges&lt;span class="w"&gt;               &lt;/span&gt;watcher.NotifyChannel
--&amp;gt;&lt;span class="w"&gt; &lt;/span&gt;broker&lt;span class="w"&gt;                     &lt;/span&gt;environs.InstanceBroker
&lt;span class="w"&gt;    &lt;/span&gt;catacomb&lt;span class="w"&gt;                   &lt;/span&gt;catacomb.Catacomb
&lt;span class="w"&gt;    &lt;/span&gt;auth&lt;span class="w"&gt;                       &lt;/span&gt;authentication.AuthenticationProvider
&lt;span class="w"&gt;    &lt;/span&gt;imageStream&lt;span class="w"&gt;                &lt;/span&gt;string
&lt;span class="w"&gt;    &lt;/span&gt;harvestMode&lt;span class="w"&gt;                &lt;/span&gt;config.HarvestMode
&lt;span class="w"&gt;    &lt;/span&gt;harvestModeChan&lt;span class="w"&gt;            &lt;/span&gt;chan&lt;span class="w"&gt; &lt;/span&gt;config.HarvestMode
&lt;span class="w"&gt;    &lt;/span&gt;retryStartInstanceStrategy&lt;span class="w"&gt; &lt;/span&gt;RetryStrategy
&lt;span class="w"&gt;    &lt;/span&gt;//&lt;span class="w"&gt; &lt;/span&gt;instance&lt;span class="w"&gt; &lt;/span&gt;id&lt;span class="w"&gt; &lt;/span&gt;-&amp;gt;&lt;span class="w"&gt; &lt;/span&gt;instance
&lt;span class="w"&gt;    &lt;/span&gt;instances&lt;span class="w"&gt; &lt;/span&gt;map&lt;span class="o"&gt;[&lt;/span&gt;instance.Id&lt;span class="o"&gt;]&lt;/span&gt;instance.Instance
&lt;span class="w"&gt;    &lt;/span&gt;//&lt;span class="w"&gt; &lt;/span&gt;machine&lt;span class="w"&gt; &lt;/span&gt;id&lt;span class="w"&gt; &lt;/span&gt;-&amp;gt;&lt;span class="w"&gt; &lt;/span&gt;machine
&lt;span class="w"&gt;    &lt;/span&gt;machines&lt;span class="w"&gt; &lt;/span&gt;map&lt;span class="o"&gt;[&lt;/span&gt;string&lt;span class="o"&gt;]&lt;/span&gt;*apiprovisioner.Machine
&lt;span class="o"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;h2&gt;Call chain, and call to provider&lt;/h2&gt;
&lt;p&gt;Back to our initial question then &amp;mdash; how a CLI deploy command can
kick off provider to create a new machine? The command chain is
roughly like this:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;CLI will send a RPC request to API server (machine-0).&lt;/li&gt;
&lt;li&gt;RPC figures out what the next state needs to be.&lt;/li&gt;
&lt;li&gt;machine-0's agent write the change to DB.&lt;/li&gt;
&lt;li&gt;Provisioner detects a state change.&lt;/li&gt;
&lt;li&gt;Provisioner task calls &lt;code&gt;environs.broker.StartInstance&lt;/code&gt; function to
   kick off a new machine.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Mapping everything here into what's in the code, here is a
illustration showing call chain from one module to the next. Some of
them are just think wrapper of next function. The mapping between a
command to a state is taking place in &lt;code&gt;state.AddApplication()&lt;/code&gt; which
I'm highlighting in &lt;font color="green"&gt;green&lt;/font&gt;.&lt;/p&gt;
&lt;figure class="s12 center"&gt;
    &lt;img src="images/juju%20deploy%20call%20chain.png" /&gt;
    &lt;figcaption&gt;Illustration of call chain by "juju deploy" command&lt;/figcaption&gt;
&lt;/figure&gt;</content><category term="openstack"></category><category term="lenovo"></category></entry><entry><title>Juju charm deployment</title><link href="https://fengxia41103.github.io/myblog/juju%20deploy.html" rel="alternate"></link><published>2017-01-19T15:45:00-05:00</published><updated>2017-01-19T15:45:00-05:00</updated><author><name>Feng Xia</name></author><id>tag:fengxia41103.github.io,2017-01-19:/myblog/juju deploy.html</id><summary type="html">&lt;p&gt;We have covered Juju's &lt;a href="https://fengxia41103.github.io/myblog/juju bootstrap.html"&gt;bootstrap&lt;/a&gt; phase. In this article, we will
continue our research into another important function &amp;mdash; juju
deploy.&lt;/p&gt;
&lt;p&gt;Deploy will command a node to pull down requested charm and install
whatever needed based the charm's instruction. As the bootstrap
research, I'm interested in the internal mechanism of this process,
the bare minimum to simulate a successful run, and the minimum steps
to repeat this for development and troubleshooting.&lt;/p&gt;
&lt;h1&gt;Screencast&lt;/h1&gt;
&lt;p&gt;See the process in action:&lt;/p&gt;
&lt;figure class="s12 center"&gt;
    &lt;img src="images/juju%20deploy%20jenkins.gif" /&gt;
    &lt;figcaption&gt;Screencast of juju deploying Jenkins&lt;/figcaption&gt;
&lt;/figure&gt;

&lt;h2&gt;Juju + MAAS&lt;/h2&gt;
&lt;p&gt;We have already covered state machine of &lt;a href="https://fengxia41103.github.io/myblog/maas target.html"&gt;MAAS target node&lt;/a&gt;. In the
context of deploying a charm driven by Juju, we can take a look MAAS
internals how those states are related.&lt;/p&gt;
&lt;figure class="s12 center"&gt;
    &lt;img src="images/juju%20deploy%20target%20node%20state%20diagram.png" /&gt;
    &lt;figcaption&gt;MAAS target node state diagram during Juju deploy process&lt;/figcaption&gt;
&lt;/figure&gt;

&lt;h1&gt;Deploy steps illustrated&lt;/h1&gt;
&lt;p&gt;This is a more detailed view of juju deploying a charm broken down
into three steps.&lt;/p&gt;
&lt;figure class="s12 center"&gt; 
    &lt;img src="images/juju%20deploy%20original.png" /&gt;
    &lt;figcaption&gt;
        Illustration of a Juju cloud environment before a deployment
    &lt;/figcaption&gt; 
&lt;/figure&gt;

&lt;p&gt;In this environment, we have a CLI controller where we will type in
juju commands, one state controller who manages the cloud, and â€¦&lt;/p&gt;</summary><content type="html">&lt;p&gt;We have covered Juju's &lt;a href="https://fengxia41103.github.io/myblog/juju bootstrap.html"&gt;bootstrap&lt;/a&gt; phase. In this article, we will
continue our research into another important function &amp;mdash; juju
deploy.&lt;/p&gt;
&lt;p&gt;Deploy will command a node to pull down requested charm and install
whatever needed based the charm's instruction. As the bootstrap
research, I'm interested in the internal mechanism of this process,
the bare minimum to simulate a successful run, and the minimum steps
to repeat this for development and troubleshooting.&lt;/p&gt;
&lt;h1&gt;Screencast&lt;/h1&gt;
&lt;p&gt;See the process in action:&lt;/p&gt;
&lt;figure class="s12 center"&gt;
    &lt;img src="images/juju%20deploy%20jenkins.gif" /&gt;
    &lt;figcaption&gt;Screencast of juju deploying Jenkins&lt;/figcaption&gt;
&lt;/figure&gt;

&lt;h2&gt;Juju + MAAS&lt;/h2&gt;
&lt;p&gt;We have already covered state machine of &lt;a href="https://fengxia41103.github.io/myblog/maas target.html"&gt;MAAS target node&lt;/a&gt;. In the
context of deploying a charm driven by Juju, we can take a look MAAS
internals how those states are related.&lt;/p&gt;
&lt;figure class="s12 center"&gt;
    &lt;img src="images/juju%20deploy%20target%20node%20state%20diagram.png" /&gt;
    &lt;figcaption&gt;MAAS target node state diagram during Juju deploy process&lt;/figcaption&gt;
&lt;/figure&gt;

&lt;h1&gt;Deploy steps illustrated&lt;/h1&gt;
&lt;p&gt;This is a more detailed view of juju deploying a charm broken down
into three steps.&lt;/p&gt;
&lt;figure class="s12 center"&gt; 
    &lt;img src="images/juju%20deploy%20original.png" /&gt;
    &lt;figcaption&gt;
        Illustration of a Juju cloud environment before a deployment
    &lt;/figcaption&gt; 
&lt;/figure&gt;

&lt;p&gt;In this environment, we have a CLI controller where we will type in
juju commands, one state controller who manages the cloud, and one
machine running Mysql. The objective is to deploy a &lt;a href="https://jujucharms.com/jenkins/"&gt;Jenkins&lt;/a&gt; charm
to a new machine (in &lt;font color="green"&gt;green&lt;/font&gt;) we have just
provisioned.&lt;/p&gt;
&lt;p&gt;Broadly speaking, events of a juju deploy take four steps to get the
job done:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;Add the new machine to juju's environment. A juju agent
   (aka. jujud) will be installed. More details are discussed 
   in the next section.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="err"&gt;```&lt;/span&gt;&lt;span class="n"&gt;shell&lt;/span&gt;
&lt;span class="n"&gt;$&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;juju&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;add&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;machine&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;ssh&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="c1"&gt;//[username]@192.168.8.235&lt;/span&gt;
&lt;span class="err"&gt;```&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Juju state controller (aka. machine-0) will recoganize the new
   machine and register its availability.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Issuing a deploy command&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;```shell
$ juju deploy jenkinsn
```
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Jujud will download &lt;a href="https://jujucharms.com/jenkins/"&gt;Jenkins charm&lt;/a&gt; and execute per its instruction.&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;figure class="s12 center"&gt;
    &lt;img src="images/juju%20deploy%20commands.png" /&gt;
    &lt;figcaption&gt;Issuing command to deploy Jenkins&lt;/figcaption&gt;
&lt;/figure&gt;

&lt;p&gt;The result, as expected, is that we have now two machines in the
cloud, each equipped with an application, and both have a jujud
installed.&lt;/p&gt;
&lt;figure class="s12 center"&gt;
    &lt;img src="images/juju%20deploy%20result.png" /&gt;
    &lt;figcaption&gt;Deployment result&lt;/figcaption&gt;
&lt;/figure&gt;

&lt;h1&gt;What takes to be a good machine&lt;/h1&gt;
&lt;p&gt;In our previous example, we used &lt;code&gt;add-machine&lt;/code&gt; command to bring new
machine into the juju environment. As it turned out, one can add any
provisioned machine into the cloud (as long as it knows how to install
juju agent which is another topic). Now let's take a look what
installing an agent will do to this machine.&lt;/p&gt;
&lt;p&gt;First We created a vanilla Xenial 16.04 server with certainly &lt;em&gt;no
knowledge&lt;/em&gt; of juju. The only user account is under
&lt;em&gt;whateverusername&lt;/em&gt;. We intentionally avoided using &lt;em&gt;ubuntu&lt;/em&gt; as user
because we know the bootstrap was relying on such an account. Will
juju complain of its missing? Let's find out.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;$&lt;span class="w"&gt; &lt;/span&gt;juju&lt;span class="w"&gt; &lt;/span&gt;add-machine&lt;span class="w"&gt; &lt;/span&gt;ssh://&lt;span class="o"&gt;[&lt;/span&gt;username&lt;span class="o"&gt;]&lt;/span&gt;@192.168.8.235
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;What is interesting is to watch the node and figure out what is
installed by this command.&lt;/p&gt;
&lt;h2&gt;&lt;code&gt;/var/lib/juju&lt;/code&gt;&lt;/h2&gt;
&lt;p&gt;This is the &lt;em&gt;home&lt;/em&gt; folder for juju &amp;mdash; &lt;code&gt;/var/lib/juju&lt;/code&gt;.  Remember,
this folder did not exist prior to the &lt;code&gt;add-machine&lt;/code&gt; command.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;/var/lib/juju
â”œâ”€â”€&lt;span class="w"&gt; &lt;/span&gt;agents
â”‚&lt;span class="w"&gt;Â Â  &lt;/span&gt;â””â”€â”€&lt;span class="w"&gt; &lt;/span&gt;machine-15
â”‚&lt;span class="w"&gt;Â Â      &lt;/span&gt;â””â”€â”€&lt;span class="w"&gt; &lt;/span&gt;agent.conf
â”œâ”€â”€&lt;span class="w"&gt; &lt;/span&gt;init
â”‚&lt;span class="w"&gt;Â Â  &lt;/span&gt;â””â”€â”€&lt;span class="w"&gt; &lt;/span&gt;jujud-machine-15
â”‚&lt;span class="w"&gt;Â Â      &lt;/span&gt;â”œâ”€â”€&lt;span class="w"&gt; &lt;/span&gt;exec-start.sh
â”‚&lt;span class="w"&gt;Â Â      &lt;/span&gt;â””â”€â”€&lt;span class="w"&gt; &lt;/span&gt;jujud-machine-15.service
â”œâ”€â”€&lt;span class="w"&gt; &lt;/span&gt;locks
â””â”€â”€&lt;span class="w"&gt; &lt;/span&gt;tools
&lt;span class="w"&gt;    &lt;/span&gt;â”œâ”€â”€&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="m"&gt;2&lt;/span&gt;.0.1.98-xenial-amd64
&lt;span class="w"&gt;    &lt;/span&gt;â”‚&lt;span class="w"&gt;Â Â  &lt;/span&gt;â”œâ”€â”€&lt;span class="w"&gt; &lt;/span&gt;downloaded-tools.txt
&lt;span class="w"&gt;    &lt;/span&gt;â”‚&lt;span class="w"&gt;Â Â  &lt;/span&gt;â”œâ”€â”€&lt;span class="w"&gt; &lt;/span&gt;FORCE-VERSION
&lt;span class="w"&gt;    &lt;/span&gt;â”‚&lt;span class="w"&gt;Â Â  &lt;/span&gt;â””â”€â”€&lt;span class="w"&gt; &lt;/span&gt;jujud
&lt;span class="w"&gt;    &lt;/span&gt;â””â”€â”€&lt;span class="w"&gt; &lt;/span&gt;machine-15&lt;span class="w"&gt; &lt;/span&gt;-&amp;gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="m"&gt;2&lt;/span&gt;.0.1.98-xenial-amd64

&lt;span class="m"&gt;8&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;directories,&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="m"&gt;6&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;files
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Pretty minimum. It designated a machine serial number &amp;mdash; 15. This
magic number is apparently assigned by machine-0 because only it knows
the next index (this index is ever incremental). However, this index
is troublesome also because folders and files are created using this
index, and we have already seen system files are symbolic links to
them. So the challenge is to simulate this configuration process as if
it were done by juju. It is doable (copy files, create folders and so
forth), but will be tedious. &lt;/p&gt;
&lt;h2&gt;&lt;code&gt;/etc&lt;/code&gt;&lt;/h2&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;/etc/apt/apt.conf.d/42-juju-proxy-settings
/etc/profile.d/juju-introspection.sh
/etc/sudoers.d/90-juju-ubuntu
/etc/systemd/system/jujud-machine-15.service
/etc/systemd/system/multi-user.target.wants/jujud-machine-15.service

root@192-168-8-235:~#&lt;span class="w"&gt; &lt;/span&gt;ls&lt;span class="w"&gt; &lt;/span&gt;-lh&lt;span class="w"&gt; &lt;/span&gt;/etc/systemd/system&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;|&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;grep&lt;span class="w"&gt; &lt;/span&gt;juju
lrwxrwxrwx&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="m"&gt;1&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;root&lt;span class="w"&gt; &lt;/span&gt;root&lt;span class="w"&gt;   &lt;/span&gt;&lt;span class="m"&gt;60&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;Jan&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="m"&gt;19&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="m"&gt;16&lt;/span&gt;:47&lt;span class="w"&gt; &lt;/span&gt;jujud-machine-15.service&lt;span class="w"&gt; &lt;/span&gt;-&amp;gt;&lt;span class="w"&gt; &lt;/span&gt;/var/lib/juju/init/jujud-machine-15/jujud-machine-15.service
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;You can use the common &lt;code&gt;service juju-machine-15
start|stop|restart|status&lt;/code&gt; to manage this service like any
others. &lt;/p&gt;
&lt;h2&gt;&lt;code&gt;/usr/bin&lt;/code&gt;&lt;/h2&gt;
&lt;p&gt;Two binaries appeared, both linked (again) to some files under the
&lt;code&gt;/var/lib/juju/&lt;/code&gt; folder.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;/usr/bin/juju-dumplogs
/usr/bin/juju-run

root@192-168-8-235:~#&lt;span class="w"&gt; &lt;/span&gt;ls&lt;span class="w"&gt; &lt;/span&gt;-lh&lt;span class="w"&gt; &lt;/span&gt;/usr/bin&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;|&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;grep&lt;span class="w"&gt; &lt;/span&gt;juju
lrwxrwxrwx&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="m"&gt;1&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;root&lt;span class="w"&gt;   &lt;/span&gt;root&lt;span class="w"&gt;      &lt;/span&gt;&lt;span class="m"&gt;36&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;Jan&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="m"&gt;19&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="m"&gt;16&lt;/span&gt;:47&lt;span class="w"&gt; &lt;/span&gt;juju-dumplogs&lt;span class="w"&gt; &lt;/span&gt;-&amp;gt;&lt;span class="w"&gt; &lt;/span&gt;/var/lib/juju/tools/machine-15/jujud
lrwxrwxrwx&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="m"&gt;1&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;root&lt;span class="w"&gt;   &lt;/span&gt;root&lt;span class="w"&gt;      &lt;/span&gt;&lt;span class="m"&gt;36&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;Jan&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="m"&gt;19&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="m"&gt;16&lt;/span&gt;:47&lt;span class="w"&gt; &lt;/span&gt;juju-run&lt;span class="w"&gt; &lt;/span&gt;-&amp;gt;&lt;span class="w"&gt; &lt;/span&gt;/var/lib/juju/tools/machine-15/jujud
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;h2&gt;&lt;code&gt;/usr/share&lt;/code&gt;&lt;/h2&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;/usr/share/sosreport/sos/plugins/juju.py
/usr/share/sosreport/sos/plugins/&lt;span class="se"&gt;\_\_&lt;/span&gt;pycache&lt;span class="se"&gt;\_\_&lt;/span&gt;/juju.cpython-35.pyc
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;h2&gt;/home/ubuntu&lt;/h2&gt;
&lt;p&gt;So juju's agent install process actually created a user &lt;em&gt;ubuntu&lt;/em&gt; which
did not exist before. In &lt;code&gt;/home/ubuntu/.ssh&lt;/code&gt; folder, a file of
&lt;code&gt;authorized_keys&lt;/code&gt;. Um.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;/home/ubuntu/.juju-proxy
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;h1&gt;Deploy an application&lt;/h1&gt;
&lt;p&gt;Once the node has been recognized by machine-0, it's ready to be used
by a juju deploy. Let's pick something &lt;em&gt;light&lt;/em&gt; (for example, an
application which will request only one node) to try.&lt;/p&gt;
&lt;p&gt;Below is an &lt;em&gt;impressive&lt;/em&gt; capture of the &lt;code&gt;/var/lib/juju&lt;/code&gt; contents when
deploying an application, in this case, jenkins.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Juju charm is a zip file. You can use command &lt;code&gt;unzip&lt;/code&gt; to extract
these contents under the &lt;code&gt;/var/lib/juju/unit-jenkins-1/&lt;/code&gt; folder.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;/var/lib/juju
â”œâ”€â”€&lt;span class="w"&gt; &lt;/span&gt;agents
â”‚&lt;span class="w"&gt;Â Â  &lt;/span&gt;â”œâ”€â”€&lt;span class="w"&gt; &lt;/span&gt;machine-15
â”‚&lt;span class="w"&gt;Â Â  &lt;/span&gt;â”‚&lt;span class="w"&gt;Â Â  &lt;/span&gt;â””â”€â”€&lt;span class="w"&gt; &lt;/span&gt;agent.conf
â”‚&lt;span class="w"&gt;Â Â  &lt;/span&gt;â””â”€â”€&lt;span class="w"&gt; &lt;/span&gt;unit-jenkins-1
â”‚&lt;span class="w"&gt;Â Â      &lt;/span&gt;â”œâ”€â”€&lt;span class="w"&gt; &lt;/span&gt;agent.conf
â”‚&lt;span class="w"&gt;Â Â      &lt;/span&gt;â”œâ”€â”€&lt;span class="w"&gt; &lt;/span&gt;charm
â”‚&lt;span class="w"&gt;Â Â      &lt;/span&gt;â”‚&lt;span class="w"&gt;Â Â  &lt;/span&gt;â”œâ”€â”€&lt;span class="w"&gt; &lt;/span&gt;bin
â”‚&lt;span class="w"&gt;Â Â      &lt;/span&gt;â”‚&lt;span class="w"&gt;Â Â  &lt;/span&gt;â”‚&lt;span class="w"&gt;Â Â  &lt;/span&gt;â””â”€â”€&lt;span class="w"&gt; &lt;/span&gt;layer_option
â”‚&lt;span class="w"&gt;Â Â      &lt;/span&gt;â”‚&lt;span class="w"&gt;Â Â  &lt;/span&gt;â”œâ”€â”€&lt;span class="w"&gt; &lt;/span&gt;config.yaml
â”‚&lt;span class="w"&gt;Â Â      &lt;/span&gt;â”‚&lt;span class="w"&gt;Â Â  &lt;/span&gt;â”œâ”€â”€&lt;span class="w"&gt; &lt;/span&gt;copyright
â”‚&lt;span class="w"&gt;Â Â      &lt;/span&gt;â”‚&lt;span class="w"&gt;Â Â  &lt;/span&gt;â”œâ”€â”€&lt;span class="w"&gt; &lt;/span&gt;hooks
â”‚&lt;span class="w"&gt;Â Â      &lt;/span&gt;â”‚&lt;span class="w"&gt;Â Â  &lt;/span&gt;â”‚&lt;span class="w"&gt;Â Â  &lt;/span&gt;â”œâ”€â”€&lt;span class="w"&gt; &lt;/span&gt;config-changed
â”‚&lt;span class="w"&gt;Â Â      &lt;/span&gt;â”‚&lt;span class="w"&gt;Â Â  &lt;/span&gt;â”‚&lt;span class="w"&gt;Â Â  &lt;/span&gt;â”œâ”€â”€&lt;span class="w"&gt; &lt;/span&gt;extension-relation-broken
â”‚&lt;span class="w"&gt;Â Â      &lt;/span&gt;â”‚&lt;span class="w"&gt;Â Â  &lt;/span&gt;â”‚&lt;span class="w"&gt;Â Â  &lt;/span&gt;â”œâ”€â”€&lt;span class="w"&gt; &lt;/span&gt;extension-relation-changed
â”‚&lt;span class="w"&gt;Â Â      &lt;/span&gt;â”‚&lt;span class="w"&gt;Â Â  &lt;/span&gt;â”‚&lt;span class="w"&gt;Â Â  &lt;/span&gt;â”œâ”€â”€&lt;span class="w"&gt; &lt;/span&gt;extension-relation-departed
â”‚&lt;span class="w"&gt;Â Â      &lt;/span&gt;â”‚&lt;span class="w"&gt;Â Â  &lt;/span&gt;â”‚&lt;span class="w"&gt;Â Â  &lt;/span&gt;â”œâ”€â”€&lt;span class="w"&gt; &lt;/span&gt;extension-relation-joined
â”‚&lt;span class="w"&gt;Â Â      &lt;/span&gt;â”‚&lt;span class="w"&gt;Â Â  &lt;/span&gt;â”‚&lt;span class="w"&gt;Â Â  &lt;/span&gt;â”œâ”€â”€&lt;span class="w"&gt; &lt;/span&gt;hook.template
â”‚&lt;span class="w"&gt;Â Â      &lt;/span&gt;â”‚&lt;span class="w"&gt;Â Â  &lt;/span&gt;â”‚&lt;span class="w"&gt;Â Â  &lt;/span&gt;â”œâ”€â”€&lt;span class="w"&gt; &lt;/span&gt;install
â”‚&lt;span class="w"&gt;Â Â      &lt;/span&gt;â”‚&lt;span class="w"&gt;Â Â  &lt;/span&gt;â”‚&lt;span class="w"&gt;Â Â  &lt;/span&gt;â”œâ”€â”€&lt;span class="w"&gt; &lt;/span&gt;leader-elected
â”‚&lt;span class="w"&gt;Â Â      &lt;/span&gt;â”‚&lt;span class="w"&gt;Â Â  &lt;/span&gt;â”‚&lt;span class="w"&gt;Â Â  &lt;/span&gt;â”œâ”€â”€&lt;span class="w"&gt; &lt;/span&gt;leader-settings-changed
â”‚&lt;span class="w"&gt;Â Â      &lt;/span&gt;â”‚&lt;span class="w"&gt;Â Â  &lt;/span&gt;â”‚&lt;span class="w"&gt;Â Â  &lt;/span&gt;â”œâ”€â”€&lt;span class="w"&gt; &lt;/span&gt;master-relation-broken
â”‚&lt;span class="w"&gt;Â Â      &lt;/span&gt;â”‚&lt;span class="w"&gt;Â Â  &lt;/span&gt;â”‚&lt;span class="w"&gt;Â Â  &lt;/span&gt;â”œâ”€â”€&lt;span class="w"&gt; &lt;/span&gt;master-relation-changed
â”‚&lt;span class="w"&gt;Â Â      &lt;/span&gt;â”‚&lt;span class="w"&gt;Â Â  &lt;/span&gt;â”‚&lt;span class="w"&gt;Â Â  &lt;/span&gt;â”œâ”€â”€&lt;span class="w"&gt; &lt;/span&gt;master-relation-departed
â”‚&lt;span class="w"&gt;Â Â      &lt;/span&gt;â”‚&lt;span class="w"&gt;Â Â  &lt;/span&gt;â”‚&lt;span class="w"&gt;Â Â  &lt;/span&gt;â”œâ”€â”€&lt;span class="w"&gt; &lt;/span&gt;master-relation-joined
â”‚&lt;span class="w"&gt;Â Â      &lt;/span&gt;â”‚&lt;span class="w"&gt;Â Â  &lt;/span&gt;â”‚&lt;span class="w"&gt;Â Â  &lt;/span&gt;â”œâ”€â”€&lt;span class="w"&gt; &lt;/span&gt;relations
â”‚&lt;span class="w"&gt;Â Â      &lt;/span&gt;â”‚&lt;span class="w"&gt;Â Â  &lt;/span&gt;â”‚&lt;span class="w"&gt;Â Â  &lt;/span&gt;â”‚&lt;span class="w"&gt;Â Â  &lt;/span&gt;â”œâ”€â”€&lt;span class="w"&gt; &lt;/span&gt;http
â”‚&lt;span class="w"&gt;Â Â      &lt;/span&gt;â”‚&lt;span class="w"&gt;Â Â  &lt;/span&gt;â”‚&lt;span class="w"&gt;Â Â  &lt;/span&gt;â”‚&lt;span class="w"&gt;Â Â  &lt;/span&gt;â”‚&lt;span class="w"&gt;Â Â  &lt;/span&gt;â”œâ”€â”€&lt;span class="w"&gt; &lt;/span&gt;__init__.py
â”‚&lt;span class="w"&gt;Â Â      &lt;/span&gt;â”‚&lt;span class="w"&gt;Â Â  &lt;/span&gt;â”‚&lt;span class="w"&gt;Â Â  &lt;/span&gt;â”‚&lt;span class="w"&gt;Â Â  &lt;/span&gt;â”‚&lt;span class="w"&gt;Â Â  &lt;/span&gt;â”œâ”€â”€&lt;span class="w"&gt; &lt;/span&gt;interface.yaml
â”‚&lt;span class="w"&gt;Â Â      &lt;/span&gt;â”‚&lt;span class="w"&gt;Â Â  &lt;/span&gt;â”‚&lt;span class="w"&gt;Â Â  &lt;/span&gt;â”‚&lt;span class="w"&gt;Â Â  &lt;/span&gt;â”‚&lt;span class="w"&gt;Â Â  &lt;/span&gt;â”œâ”€â”€&lt;span class="w"&gt; &lt;/span&gt;provides.py
â”‚&lt;span class="w"&gt;Â Â      &lt;/span&gt;â”‚&lt;span class="w"&gt;Â Â  &lt;/span&gt;â”‚&lt;span class="w"&gt;Â Â  &lt;/span&gt;â”‚&lt;span class="w"&gt;Â Â  &lt;/span&gt;â”‚&lt;span class="w"&gt;Â Â  &lt;/span&gt;â”œâ”€â”€&lt;span class="w"&gt; &lt;/span&gt;__pycache__
â”‚&lt;span class="w"&gt;Â Â      &lt;/span&gt;â”‚&lt;span class="w"&gt;Â Â  &lt;/span&gt;â”‚&lt;span class="w"&gt;Â Â  &lt;/span&gt;â”‚&lt;span class="w"&gt;Â Â  &lt;/span&gt;â”‚&lt;span class="w"&gt;Â Â  &lt;/span&gt;â”‚&lt;span class="w"&gt;Â Â  &lt;/span&gt;â”œâ”€â”€&lt;span class="w"&gt; &lt;/span&gt;__init__.cpython-35.pyc
â”‚&lt;span class="w"&gt;Â Â      &lt;/span&gt;â”‚&lt;span class="w"&gt;Â Â  &lt;/span&gt;â”‚&lt;span class="w"&gt;Â Â  &lt;/span&gt;â”‚&lt;span class="w"&gt;Â Â  &lt;/span&gt;â”‚&lt;span class="w"&gt;Â Â  &lt;/span&gt;â”‚&lt;span class="w"&gt;Â Â  &lt;/span&gt;â”œâ”€â”€&lt;span class="w"&gt; &lt;/span&gt;provides.cpython-35.pyc
â”‚&lt;span class="w"&gt;Â Â      &lt;/span&gt;â”‚&lt;span class="w"&gt;Â Â  &lt;/span&gt;â”‚&lt;span class="w"&gt;Â Â  &lt;/span&gt;â”‚&lt;span class="w"&gt;Â Â  &lt;/span&gt;â”‚&lt;span class="w"&gt;Â Â  &lt;/span&gt;â”‚&lt;span class="w"&gt;Â Â  &lt;/span&gt;â””â”€â”€&lt;span class="w"&gt; &lt;/span&gt;requires.cpython-35.pyc
â”‚&lt;span class="w"&gt;Â Â      &lt;/span&gt;â”‚&lt;span class="w"&gt;Â Â  &lt;/span&gt;â”‚&lt;span class="w"&gt;Â Â  &lt;/span&gt;â”‚&lt;span class="w"&gt;Â Â  &lt;/span&gt;â”‚&lt;span class="w"&gt;Â Â  &lt;/span&gt;â”œâ”€â”€&lt;span class="w"&gt; &lt;/span&gt;README.md
â”‚&lt;span class="w"&gt;Â Â      &lt;/span&gt;â”‚&lt;span class="w"&gt;Â Â  &lt;/span&gt;â”‚&lt;span class="w"&gt;Â Â  &lt;/span&gt;â”‚&lt;span class="w"&gt;Â Â  &lt;/span&gt;â”‚&lt;span class="w"&gt;Â Â  &lt;/span&gt;â””â”€â”€&lt;span class="w"&gt; &lt;/span&gt;requires.py
â”‚&lt;span class="w"&gt;Â Â      &lt;/span&gt;â”‚&lt;span class="w"&gt;Â Â  &lt;/span&gt;â”‚&lt;span class="w"&gt;Â Â  &lt;/span&gt;â”‚&lt;span class="w"&gt;Â Â  &lt;/span&gt;â”œâ”€â”€&lt;span class="w"&gt; &lt;/span&gt;jenkins-extension
â”‚&lt;span class="w"&gt;Â Â      &lt;/span&gt;â”‚&lt;span class="w"&gt;Â Â  &lt;/span&gt;â”‚&lt;span class="w"&gt;Â Â  &lt;/span&gt;â”‚&lt;span class="w"&gt;Â Â  &lt;/span&gt;â”‚&lt;span class="w"&gt;Â Â  &lt;/span&gt;â”œâ”€â”€&lt;span class="w"&gt; &lt;/span&gt;__init__.py
â”‚&lt;span class="w"&gt;Â Â      &lt;/span&gt;â”‚&lt;span class="w"&gt;Â Â  &lt;/span&gt;â”‚&lt;span class="w"&gt;Â Â  &lt;/span&gt;â”‚&lt;span class="w"&gt;Â Â  &lt;/span&gt;â”‚&lt;span class="w"&gt;Â Â  &lt;/span&gt;â”œâ”€â”€&lt;span class="w"&gt; &lt;/span&gt;interface.yaml
â”‚&lt;span class="w"&gt;Â Â      &lt;/span&gt;â”‚&lt;span class="w"&gt;Â Â  &lt;/span&gt;â”‚&lt;span class="w"&gt;Â Â  &lt;/span&gt;â”‚&lt;span class="w"&gt;Â Â  &lt;/span&gt;â”‚&lt;span class="w"&gt;Â Â  &lt;/span&gt;â”œâ”€â”€&lt;span class="w"&gt; &lt;/span&gt;provides.py
â”‚&lt;span class="w"&gt;Â Â      &lt;/span&gt;â”‚&lt;span class="w"&gt;Â Â  &lt;/span&gt;â”‚&lt;span class="w"&gt;Â Â  &lt;/span&gt;â”‚&lt;span class="w"&gt;Â Â  &lt;/span&gt;â”‚&lt;span class="w"&gt;Â Â  &lt;/span&gt;â”œâ”€â”€&lt;span class="w"&gt; &lt;/span&gt;__pycache__
â”‚&lt;span class="w"&gt;Â Â      &lt;/span&gt;â”‚&lt;span class="w"&gt;Â Â  &lt;/span&gt;â”‚&lt;span class="w"&gt;Â Â  &lt;/span&gt;â”‚&lt;span class="w"&gt;Â Â  &lt;/span&gt;â”‚&lt;span class="w"&gt;Â Â  &lt;/span&gt;â”‚&lt;span class="w"&gt;Â Â  &lt;/span&gt;â”œâ”€â”€&lt;span class="w"&gt; &lt;/span&gt;__init__.cpython-35.pyc
â”‚&lt;span class="w"&gt;Â Â      &lt;/span&gt;â”‚&lt;span class="w"&gt;Â Â  &lt;/span&gt;â”‚&lt;span class="w"&gt;Â Â  &lt;/span&gt;â”‚&lt;span class="w"&gt;Â Â  &lt;/span&gt;â”‚&lt;span class="w"&gt;Â Â  &lt;/span&gt;â”‚&lt;span class="w"&gt;Â Â  &lt;/span&gt;â”œâ”€â”€&lt;span class="w"&gt; &lt;/span&gt;provides.cpython-35.pyc
â”‚&lt;span class="w"&gt;Â Â      &lt;/span&gt;â”‚&lt;span class="w"&gt;Â Â  &lt;/span&gt;â”‚&lt;span class="w"&gt;Â Â  &lt;/span&gt;â”‚&lt;span class="w"&gt;Â Â  &lt;/span&gt;â”‚&lt;span class="w"&gt;Â Â  &lt;/span&gt;â”‚&lt;span class="w"&gt;Â Â  &lt;/span&gt;â””â”€â”€&lt;span class="w"&gt; &lt;/span&gt;requires.cpython-35.pyc
â”‚&lt;span class="w"&gt;Â Â      &lt;/span&gt;â”‚&lt;span class="w"&gt;Â Â  &lt;/span&gt;â”‚&lt;span class="w"&gt;Â Â  &lt;/span&gt;â”‚&lt;span class="w"&gt;Â Â  &lt;/span&gt;â”‚&lt;span class="w"&gt;Â Â  &lt;/span&gt;â”œâ”€â”€&lt;span class="w"&gt; &lt;/span&gt;README.md
â”‚&lt;span class="w"&gt;Â Â      &lt;/span&gt;â”‚&lt;span class="w"&gt;Â Â  &lt;/span&gt;â”‚&lt;span class="w"&gt;Â Â  &lt;/span&gt;â”‚&lt;span class="w"&gt;Â Â  &lt;/span&gt;â”‚&lt;span class="w"&gt;Â Â  &lt;/span&gt;â”œâ”€â”€&lt;span class="w"&gt; &lt;/span&gt;requirements.txt
â”‚&lt;span class="w"&gt;Â Â      &lt;/span&gt;â”‚&lt;span class="w"&gt;Â Â  &lt;/span&gt;â”‚&lt;span class="w"&gt;Â Â  &lt;/span&gt;â”‚&lt;span class="w"&gt;Â Â  &lt;/span&gt;â”‚&lt;span class="w"&gt;Â Â  &lt;/span&gt;â”œâ”€â”€&lt;span class="w"&gt; &lt;/span&gt;requires.py
â”‚&lt;span class="w"&gt;Â Â      &lt;/span&gt;â”‚&lt;span class="w"&gt;Â Â  &lt;/span&gt;â”‚&lt;span class="w"&gt;Â Â  &lt;/span&gt;â”‚&lt;span class="w"&gt;Â Â  &lt;/span&gt;â”‚&lt;span class="w"&gt;Â Â  &lt;/span&gt;â””â”€â”€&lt;span class="w"&gt; &lt;/span&gt;tox.ini
â”‚&lt;span class="w"&gt;Â Â      &lt;/span&gt;â”‚&lt;span class="w"&gt;Â Â  &lt;/span&gt;â”‚&lt;span class="w"&gt;Â Â  &lt;/span&gt;â”‚&lt;span class="w"&gt;Â Â  &lt;/span&gt;â”œâ”€â”€&lt;span class="w"&gt; &lt;/span&gt;jenkins-slave
â”‚&lt;span class="w"&gt;Â Â      &lt;/span&gt;â”‚&lt;span class="w"&gt;Â Â  &lt;/span&gt;â”‚&lt;span class="w"&gt;Â Â  &lt;/span&gt;â”‚&lt;span class="w"&gt;Â Â  &lt;/span&gt;â”‚&lt;span class="w"&gt;Â Â  &lt;/span&gt;â”œâ”€â”€&lt;span class="w"&gt; &lt;/span&gt;__init__.py
â”‚&lt;span class="w"&gt;Â Â      &lt;/span&gt;â”‚&lt;span class="w"&gt;Â Â  &lt;/span&gt;â”‚&lt;span class="w"&gt;Â Â  &lt;/span&gt;â”‚&lt;span class="w"&gt;Â Â  &lt;/span&gt;â”‚&lt;span class="w"&gt;Â Â  &lt;/span&gt;â”œâ”€â”€&lt;span class="w"&gt; &lt;/span&gt;interface.yaml
â”‚&lt;span class="w"&gt;Â Â      &lt;/span&gt;â”‚&lt;span class="w"&gt;Â Â  &lt;/span&gt;â”‚&lt;span class="w"&gt;Â Â  &lt;/span&gt;â”‚&lt;span class="w"&gt;Â Â  &lt;/span&gt;â”‚&lt;span class="w"&gt;Â Â  &lt;/span&gt;â”œâ”€â”€&lt;span class="w"&gt; &lt;/span&gt;provides.py
â”‚&lt;span class="w"&gt;Â Â      &lt;/span&gt;â”‚&lt;span class="w"&gt;Â Â  &lt;/span&gt;â”‚&lt;span class="w"&gt;Â Â  &lt;/span&gt;â”‚&lt;span class="w"&gt;Â Â  &lt;/span&gt;â”‚&lt;span class="w"&gt;Â Â  &lt;/span&gt;â”œâ”€â”€&lt;span class="w"&gt; &lt;/span&gt;__pycache__
â”‚&lt;span class="w"&gt;Â Â      &lt;/span&gt;â”‚&lt;span class="w"&gt;Â Â  &lt;/span&gt;â”‚&lt;span class="w"&gt;Â Â  &lt;/span&gt;â”‚&lt;span class="w"&gt;Â Â  &lt;/span&gt;â”‚&lt;span class="w"&gt;Â Â  &lt;/span&gt;â”‚&lt;span class="w"&gt;Â Â  &lt;/span&gt;â”œâ”€â”€&lt;span class="w"&gt; &lt;/span&gt;__init__.cpython-35.pyc
â”‚&lt;span class="w"&gt;Â Â      &lt;/span&gt;â”‚&lt;span class="w"&gt;Â Â  &lt;/span&gt;â”‚&lt;span class="w"&gt;Â Â  &lt;/span&gt;â”‚&lt;span class="w"&gt;Â Â  &lt;/span&gt;â”‚&lt;span class="w"&gt;Â Â  &lt;/span&gt;â”‚&lt;span class="w"&gt;Â Â  &lt;/span&gt;â”œâ”€â”€&lt;span class="w"&gt; &lt;/span&gt;provides.cpython-35.pyc
â”‚&lt;span class="w"&gt;Â Â      &lt;/span&gt;â”‚&lt;span class="w"&gt;Â Â  &lt;/span&gt;â”‚&lt;span class="w"&gt;Â Â  &lt;/span&gt;â”‚&lt;span class="w"&gt;Â Â  &lt;/span&gt;â”‚&lt;span class="w"&gt;Â Â  &lt;/span&gt;â”‚&lt;span class="w"&gt;Â Â  &lt;/span&gt;â””â”€â”€&lt;span class="w"&gt; &lt;/span&gt;requires.cpython-35.pyc
â”‚&lt;span class="w"&gt;Â Â      &lt;/span&gt;â”‚&lt;span class="w"&gt;Â Â  &lt;/span&gt;â”‚&lt;span class="w"&gt;Â Â  &lt;/span&gt;â”‚&lt;span class="w"&gt;Â Â  &lt;/span&gt;â”‚&lt;span class="w"&gt;Â Â  &lt;/span&gt;â”œâ”€â”€&lt;span class="w"&gt; &lt;/span&gt;README.md
â”‚&lt;span class="w"&gt;Â Â      &lt;/span&gt;â”‚&lt;span class="w"&gt;Â Â  &lt;/span&gt;â”‚&lt;span class="w"&gt;Â Â  &lt;/span&gt;â”‚&lt;span class="w"&gt;Â Â  &lt;/span&gt;â”‚&lt;span class="w"&gt;Â Â  &lt;/span&gt;â”œâ”€â”€&lt;span class="w"&gt; &lt;/span&gt;requirements.txt
â”‚&lt;span class="w"&gt;Â Â      &lt;/span&gt;â”‚&lt;span class="w"&gt;Â Â  &lt;/span&gt;â”‚&lt;span class="w"&gt;Â Â  &lt;/span&gt;â”‚&lt;span class="w"&gt;Â Â  &lt;/span&gt;â”‚&lt;span class="w"&gt;Â Â  &lt;/span&gt;â”œâ”€â”€&lt;span class="w"&gt; &lt;/span&gt;requires.py
â”‚&lt;span class="w"&gt;Â Â      &lt;/span&gt;â”‚&lt;span class="w"&gt;Â Â  &lt;/span&gt;â”‚&lt;span class="w"&gt;Â Â  &lt;/span&gt;â”‚&lt;span class="w"&gt;Â Â  &lt;/span&gt;â”‚&lt;span class="w"&gt;Â Â  &lt;/span&gt;â””â”€â”€&lt;span class="w"&gt; &lt;/span&gt;tox.ini
â”‚&lt;span class="w"&gt;Â Â      &lt;/span&gt;â”‚&lt;span class="w"&gt;Â Â  &lt;/span&gt;â”‚&lt;span class="w"&gt;Â Â  &lt;/span&gt;â”‚&lt;span class="w"&gt;Â Â  &lt;/span&gt;â””â”€â”€&lt;span class="w"&gt; &lt;/span&gt;zuul
â”‚&lt;span class="w"&gt;Â Â      &lt;/span&gt;â”‚&lt;span class="w"&gt;Â Â  &lt;/span&gt;â”‚&lt;span class="w"&gt;Â Â  &lt;/span&gt;â”‚&lt;span class="w"&gt;Â Â      &lt;/span&gt;â”œâ”€â”€&lt;span class="w"&gt; &lt;/span&gt;__init__.py
â”‚&lt;span class="w"&gt;Â Â      &lt;/span&gt;â”‚&lt;span class="w"&gt;Â Â  &lt;/span&gt;â”‚&lt;span class="w"&gt;Â Â  &lt;/span&gt;â”‚&lt;span class="w"&gt;Â Â      &lt;/span&gt;â”œâ”€â”€&lt;span class="w"&gt; &lt;/span&gt;interface.yaml
â”‚&lt;span class="w"&gt;Â Â      &lt;/span&gt;â”‚&lt;span class="w"&gt;Â Â  &lt;/span&gt;â”‚&lt;span class="w"&gt;Â Â  &lt;/span&gt;â”‚&lt;span class="w"&gt;Â Â      &lt;/span&gt;â”œâ”€â”€&lt;span class="w"&gt; &lt;/span&gt;provides.py
â”‚&lt;span class="w"&gt;Â Â      &lt;/span&gt;â”‚&lt;span class="w"&gt;Â Â  &lt;/span&gt;â”‚&lt;span class="w"&gt;Â Â  &lt;/span&gt;â”‚&lt;span class="w"&gt;Â Â      &lt;/span&gt;â”œâ”€â”€&lt;span class="w"&gt; &lt;/span&gt;__pycache__
â”‚&lt;span class="w"&gt;Â Â      &lt;/span&gt;â”‚&lt;span class="w"&gt;Â Â  &lt;/span&gt;â”‚&lt;span class="w"&gt;Â Â  &lt;/span&gt;â”‚&lt;span class="w"&gt;Â Â      &lt;/span&gt;â”‚&lt;span class="w"&gt;Â Â  &lt;/span&gt;â”œâ”€â”€&lt;span class="w"&gt; &lt;/span&gt;__init__.cpython-35.pyc
â”‚&lt;span class="w"&gt;Â Â      &lt;/span&gt;â”‚&lt;span class="w"&gt;Â Â  &lt;/span&gt;â”‚&lt;span class="w"&gt;Â Â  &lt;/span&gt;â”‚&lt;span class="w"&gt;Â Â      &lt;/span&gt;â”‚&lt;span class="w"&gt;Â Â  &lt;/span&gt;â”œâ”€â”€&lt;span class="w"&gt; &lt;/span&gt;provides.cpython-35.pyc
â”‚&lt;span class="w"&gt;Â Â      &lt;/span&gt;â”‚&lt;span class="w"&gt;Â Â  &lt;/span&gt;â”‚&lt;span class="w"&gt;Â Â  &lt;/span&gt;â”‚&lt;span class="w"&gt;Â Â      &lt;/span&gt;â”‚&lt;span class="w"&gt;Â Â  &lt;/span&gt;â””â”€â”€&lt;span class="w"&gt; &lt;/span&gt;requires.cpython-35.pyc
â”‚&lt;span class="w"&gt;Â Â      &lt;/span&gt;â”‚&lt;span class="w"&gt;Â Â  &lt;/span&gt;â”‚&lt;span class="w"&gt;Â Â  &lt;/span&gt;â”‚&lt;span class="w"&gt;Â Â      &lt;/span&gt;â”œâ”€â”€&lt;span class="w"&gt; &lt;/span&gt;README.md
â”‚&lt;span class="w"&gt;Â Â      &lt;/span&gt;â”‚&lt;span class="w"&gt;Â Â  &lt;/span&gt;â”‚&lt;span class="w"&gt;Â Â  &lt;/span&gt;â”‚&lt;span class="w"&gt;Â Â      &lt;/span&gt;â”œâ”€â”€&lt;span class="w"&gt; &lt;/span&gt;requirements.txt
â”‚&lt;span class="w"&gt;Â Â      &lt;/span&gt;â”‚&lt;span class="w"&gt;Â Â  &lt;/span&gt;â”‚&lt;span class="w"&gt;Â Â  &lt;/span&gt;â”‚&lt;span class="w"&gt;Â Â      &lt;/span&gt;â”œâ”€â”€&lt;span class="w"&gt; &lt;/span&gt;requires.py
â”‚&lt;span class="w"&gt;Â Â      &lt;/span&gt;â”‚&lt;span class="w"&gt;Â Â  &lt;/span&gt;â”‚&lt;span class="w"&gt;Â Â  &lt;/span&gt;â”‚&lt;span class="w"&gt;Â Â      &lt;/span&gt;â””â”€â”€&lt;span class="w"&gt; &lt;/span&gt;tox.ini
â”‚&lt;span class="w"&gt;Â Â      &lt;/span&gt;â”‚&lt;span class="w"&gt;Â Â  &lt;/span&gt;â”‚&lt;span class="w"&gt;Â Â  &lt;/span&gt;â”œâ”€â”€&lt;span class="w"&gt; &lt;/span&gt;start
â”‚&lt;span class="w"&gt;Â Â      &lt;/span&gt;â”‚&lt;span class="w"&gt;Â Â  &lt;/span&gt;â”‚&lt;span class="w"&gt;Â Â  &lt;/span&gt;â”œâ”€â”€&lt;span class="w"&gt; &lt;/span&gt;stop
â”‚&lt;span class="w"&gt;Â Â      &lt;/span&gt;â”‚&lt;span class="w"&gt;Â Â  &lt;/span&gt;â”‚&lt;span class="w"&gt;Â Â  &lt;/span&gt;â”œâ”€â”€&lt;span class="w"&gt; &lt;/span&gt;update-status
â”‚&lt;span class="w"&gt;Â Â      &lt;/span&gt;â”‚&lt;span class="w"&gt;Â Â  &lt;/span&gt;â”‚&lt;span class="w"&gt;Â Â  &lt;/span&gt;â”œâ”€â”€&lt;span class="w"&gt; &lt;/span&gt;upgrade-charm
â”‚&lt;span class="w"&gt;Â Â      &lt;/span&gt;â”‚&lt;span class="w"&gt;Â Â  &lt;/span&gt;â”‚&lt;span class="w"&gt;Â Â  &lt;/span&gt;â”œâ”€â”€&lt;span class="w"&gt; &lt;/span&gt;website-relation-broken
â”‚&lt;span class="w"&gt;Â Â      &lt;/span&gt;â”‚&lt;span class="w"&gt;Â Â  &lt;/span&gt;â”‚&lt;span class="w"&gt;Â Â  &lt;/span&gt;â”œâ”€â”€&lt;span class="w"&gt; &lt;/span&gt;website-relation-changed
â”‚&lt;span class="w"&gt;Â Â      &lt;/span&gt;â”‚&lt;span class="w"&gt;Â Â  &lt;/span&gt;â”‚&lt;span class="w"&gt;Â Â  &lt;/span&gt;â”œâ”€â”€&lt;span class="w"&gt; &lt;/span&gt;website-relation-departed
â”‚&lt;span class="w"&gt;Â Â      &lt;/span&gt;â”‚&lt;span class="w"&gt;Â Â  &lt;/span&gt;â”‚&lt;span class="w"&gt;Â Â  &lt;/span&gt;â”œâ”€â”€&lt;span class="w"&gt; &lt;/span&gt;website-relation-joined
â”‚&lt;span class="w"&gt;Â Â      &lt;/span&gt;â”‚&lt;span class="w"&gt;Â Â  &lt;/span&gt;â”‚&lt;span class="w"&gt;Â Â  &lt;/span&gt;â”œâ”€â”€&lt;span class="w"&gt; &lt;/span&gt;zuul-relation-broken
â”‚&lt;span class="w"&gt;Â Â      &lt;/span&gt;â”‚&lt;span class="w"&gt;Â Â  &lt;/span&gt;â”‚&lt;span class="w"&gt;Â Â  &lt;/span&gt;â”œâ”€â”€&lt;span class="w"&gt; &lt;/span&gt;zuul-relation-changed
â”‚&lt;span class="w"&gt;Â Â      &lt;/span&gt;â”‚&lt;span class="w"&gt;Â Â  &lt;/span&gt;â”‚&lt;span class="w"&gt;Â Â  &lt;/span&gt;â”œâ”€â”€&lt;span class="w"&gt; &lt;/span&gt;zuul-relation-departed
â”‚&lt;span class="w"&gt;Â Â      &lt;/span&gt;â”‚&lt;span class="w"&gt;Â Â  &lt;/span&gt;â”‚&lt;span class="w"&gt;Â Â  &lt;/span&gt;â””â”€â”€&lt;span class="w"&gt; &lt;/span&gt;zuul-relation-joined
â”‚&lt;span class="w"&gt;Â Â      &lt;/span&gt;â”‚&lt;span class="w"&gt;Â Â  &lt;/span&gt;â”œâ”€â”€&lt;span class="w"&gt; &lt;/span&gt;icon.svg
â”‚&lt;span class="w"&gt;Â Â      &lt;/span&gt;â”‚&lt;span class="w"&gt;Â Â  &lt;/span&gt;â”œâ”€â”€&lt;span class="w"&gt; &lt;/span&gt;layer.yaml
â”‚&lt;span class="w"&gt;Â Â      &lt;/span&gt;â”‚&lt;span class="w"&gt;Â Â  &lt;/span&gt;â”œâ”€â”€&lt;span class="w"&gt; &lt;/span&gt;lib
â”‚&lt;span class="w"&gt;Â Â      &lt;/span&gt;â”‚&lt;span class="w"&gt;Â Â  &lt;/span&gt;â”‚&lt;span class="w"&gt;Â Â  &lt;/span&gt;â””â”€â”€&lt;span class="w"&gt; &lt;/span&gt;charms
â”‚&lt;span class="w"&gt;Â Â      &lt;/span&gt;â”‚&lt;span class="w"&gt;Â Â  &lt;/span&gt;â”‚&lt;span class="w"&gt;Â Â      &lt;/span&gt;â”œâ”€â”€&lt;span class="w"&gt; &lt;/span&gt;apt.py
â”‚&lt;span class="w"&gt;Â Â      &lt;/span&gt;â”‚&lt;span class="w"&gt;Â Â  &lt;/span&gt;â”‚&lt;span class="w"&gt;Â Â      &lt;/span&gt;â”œâ”€â”€&lt;span class="w"&gt; &lt;/span&gt;__init__.py
â”‚&lt;span class="w"&gt;Â Â      &lt;/span&gt;â”‚&lt;span class="w"&gt;Â Â  &lt;/span&gt;â”‚&lt;span class="w"&gt;Â Â      &lt;/span&gt;â”œâ”€â”€&lt;span class="w"&gt; &lt;/span&gt;layer
â”‚&lt;span class="w"&gt;Â Â      &lt;/span&gt;â”‚&lt;span class="w"&gt;Â Â  &lt;/span&gt;â”‚&lt;span class="w"&gt;Â Â      &lt;/span&gt;â”‚&lt;span class="w"&gt;Â Â  &lt;/span&gt;â”œâ”€â”€&lt;span class="w"&gt; &lt;/span&gt;basic.py
â”‚&lt;span class="w"&gt;Â Â      &lt;/span&gt;â”‚&lt;span class="w"&gt;Â Â  &lt;/span&gt;â”‚&lt;span class="w"&gt;Â Â      &lt;/span&gt;â”‚&lt;span class="w"&gt;Â Â  &lt;/span&gt;â”œâ”€â”€&lt;span class="w"&gt; &lt;/span&gt;execd.py
â”‚&lt;span class="w"&gt;Â Â      &lt;/span&gt;â”‚&lt;span class="w"&gt;Â Â  &lt;/span&gt;â”‚&lt;span class="w"&gt;Â Â      &lt;/span&gt;â”‚&lt;span class="w"&gt;Â Â  &lt;/span&gt;â”œâ”€â”€&lt;span class="w"&gt; &lt;/span&gt;__init__.py
â”‚&lt;span class="w"&gt;Â Â      &lt;/span&gt;â”‚&lt;span class="w"&gt;Â Â  &lt;/span&gt;â”‚&lt;span class="w"&gt;Â Â      &lt;/span&gt;â”‚&lt;span class="w"&gt;Â Â  &lt;/span&gt;â”œâ”€â”€&lt;span class="w"&gt; &lt;/span&gt;jenkins
â”‚&lt;span class="w"&gt;Â Â      &lt;/span&gt;â”‚&lt;span class="w"&gt;Â Â  &lt;/span&gt;â”‚&lt;span class="w"&gt;Â Â      &lt;/span&gt;â”‚&lt;span class="w"&gt;Â Â  &lt;/span&gt;â”‚&lt;span class="w"&gt;Â Â  &lt;/span&gt;â”œâ”€â”€&lt;span class="w"&gt; &lt;/span&gt;api.py
â”‚&lt;span class="w"&gt;Â Â      &lt;/span&gt;â”‚&lt;span class="w"&gt;Â Â  &lt;/span&gt;â”‚&lt;span class="w"&gt;Â Â      &lt;/span&gt;â”‚&lt;span class="w"&gt;Â Â  &lt;/span&gt;â”‚&lt;span class="w"&gt;Â Â  &lt;/span&gt;â”œâ”€â”€&lt;span class="w"&gt; &lt;/span&gt;configuration.py
â”‚&lt;span class="w"&gt;Â Â      &lt;/span&gt;â”‚&lt;span class="w"&gt;Â Â  &lt;/span&gt;â”‚&lt;span class="w"&gt;Â Â      &lt;/span&gt;â”‚&lt;span class="w"&gt;Â Â  &lt;/span&gt;â”‚&lt;span class="w"&gt;Â Â  &lt;/span&gt;â”œâ”€â”€&lt;span class="w"&gt; &lt;/span&gt;credentials.py
â”‚&lt;span class="w"&gt;Â Â      &lt;/span&gt;â”‚&lt;span class="w"&gt;Â Â  &lt;/span&gt;â”‚&lt;span class="w"&gt;Â Â      &lt;/span&gt;â”‚&lt;span class="w"&gt;Â Â  &lt;/span&gt;â”‚&lt;span class="w"&gt;Â Â  &lt;/span&gt;â”œâ”€â”€&lt;span class="w"&gt; &lt;/span&gt;__init__.py
â”‚&lt;span class="w"&gt;Â Â      &lt;/span&gt;â”‚&lt;span class="w"&gt;Â Â  &lt;/span&gt;â”‚&lt;span class="w"&gt;Â Â      &lt;/span&gt;â”‚&lt;span class="w"&gt;Â Â  &lt;/span&gt;â”‚&lt;span class="w"&gt;Â Â  &lt;/span&gt;â”œâ”€â”€&lt;span class="w"&gt; &lt;/span&gt;packages.py
â”‚&lt;span class="w"&gt;Â Â      &lt;/span&gt;â”‚&lt;span class="w"&gt;Â Â  &lt;/span&gt;â”‚&lt;span class="w"&gt;Â Â      &lt;/span&gt;â”‚&lt;span class="w"&gt;Â Â  &lt;/span&gt;â”‚&lt;span class="w"&gt;Â Â  &lt;/span&gt;â”œâ”€â”€&lt;span class="w"&gt; &lt;/span&gt;paths.py
â”‚&lt;span class="w"&gt;Â Â      &lt;/span&gt;â”‚&lt;span class="w"&gt;Â Â  &lt;/span&gt;â”‚&lt;span class="w"&gt;Â Â      &lt;/span&gt;â”‚&lt;span class="w"&gt;Â Â  &lt;/span&gt;â”‚&lt;span class="w"&gt;Â Â  &lt;/span&gt;â”œâ”€â”€&lt;span class="w"&gt; &lt;/span&gt;plugins.py
â”‚&lt;span class="w"&gt;Â Â      &lt;/span&gt;â”‚&lt;span class="w"&gt;Â Â  &lt;/span&gt;â”‚&lt;span class="w"&gt;Â Â      &lt;/span&gt;â”‚&lt;span class="w"&gt;Â Â  &lt;/span&gt;â”‚&lt;span class="w"&gt;Â Â  &lt;/span&gt;â”œâ”€â”€&lt;span class="w"&gt; &lt;/span&gt;__pycache__
â”‚&lt;span class="w"&gt;Â Â      &lt;/span&gt;â”‚&lt;span class="w"&gt;Â Â  &lt;/span&gt;â”‚&lt;span class="w"&gt;Â Â      &lt;/span&gt;â”‚&lt;span class="w"&gt;Â Â  &lt;/span&gt;â”‚&lt;span class="w"&gt;Â Â  &lt;/span&gt;â”‚&lt;span class="w"&gt;Â Â  &lt;/span&gt;â”œâ”€â”€&lt;span class="w"&gt; &lt;/span&gt;api.cpython-35.pyc
â”‚&lt;span class="w"&gt;Â Â      &lt;/span&gt;â”‚&lt;span class="w"&gt;Â Â  &lt;/span&gt;â”‚&lt;span class="w"&gt;Â Â      &lt;/span&gt;â”‚&lt;span class="w"&gt;Â Â  &lt;/span&gt;â”‚&lt;span class="w"&gt;Â Â  &lt;/span&gt;â”‚&lt;span class="w"&gt;Â Â  &lt;/span&gt;â”œâ”€â”€&lt;span class="w"&gt; &lt;/span&gt;configuration.cpython-35.pyc
â”‚&lt;span class="w"&gt;Â Â      &lt;/span&gt;â”‚&lt;span class="w"&gt;Â Â  &lt;/span&gt;â”‚&lt;span class="w"&gt;Â Â      &lt;/span&gt;â”‚&lt;span class="w"&gt;Â Â  &lt;/span&gt;â”‚&lt;span class="w"&gt;Â Â  &lt;/span&gt;â”‚&lt;span class="w"&gt;Â Â  &lt;/span&gt;â”œâ”€â”€&lt;span class="w"&gt; &lt;/span&gt;credentials.cpython-35.pyc
â”‚&lt;span class="w"&gt;Â Â      &lt;/span&gt;â”‚&lt;span class="w"&gt;Â Â  &lt;/span&gt;â”‚&lt;span class="w"&gt;Â Â      &lt;/span&gt;â”‚&lt;span class="w"&gt;Â Â  &lt;/span&gt;â”‚&lt;span class="w"&gt;Â Â  &lt;/span&gt;â”‚&lt;span class="w"&gt;Â Â  &lt;/span&gt;â”œâ”€â”€&lt;span class="w"&gt; &lt;/span&gt;__init__.cpython-35.pyc
â”‚&lt;span class="w"&gt;Â Â      &lt;/span&gt;â”‚&lt;span class="w"&gt;Â Â  &lt;/span&gt;â”‚&lt;span class="w"&gt;Â Â      &lt;/span&gt;â”‚&lt;span class="w"&gt;Â Â  &lt;/span&gt;â”‚&lt;span class="w"&gt;Â Â  &lt;/span&gt;â”‚&lt;span class="w"&gt;Â Â  &lt;/span&gt;â”œâ”€â”€&lt;span class="w"&gt; &lt;/span&gt;packages.cpython-35.pyc
â”‚&lt;span class="w"&gt;Â Â      &lt;/span&gt;â”‚&lt;span class="w"&gt;Â Â  &lt;/span&gt;â”‚&lt;span class="w"&gt;Â Â      &lt;/span&gt;â”‚&lt;span class="w"&gt;Â Â  &lt;/span&gt;â”‚&lt;span class="w"&gt;Â Â  &lt;/span&gt;â”‚&lt;span class="w"&gt;Â Â  &lt;/span&gt;â”œâ”€â”€&lt;span class="w"&gt; &lt;/span&gt;paths.cpython-35.pyc
â”‚&lt;span class="w"&gt;Â Â      &lt;/span&gt;â”‚&lt;span class="w"&gt;Â Â  &lt;/span&gt;â”‚&lt;span class="w"&gt;Â Â      &lt;/span&gt;â”‚&lt;span class="w"&gt;Â Â  &lt;/span&gt;â”‚&lt;span class="w"&gt;Â Â  &lt;/span&gt;â”‚&lt;span class="w"&gt;Â Â  &lt;/span&gt;â”œâ”€â”€&lt;span class="w"&gt; &lt;/span&gt;plugins.cpython-35.pyc
â”‚&lt;span class="w"&gt;Â Â      &lt;/span&gt;â”‚&lt;span class="w"&gt;Â Â  &lt;/span&gt;â”‚&lt;span class="w"&gt;Â Â      &lt;/span&gt;â”‚&lt;span class="w"&gt;Â Â  &lt;/span&gt;â”‚&lt;span class="w"&gt;Â Â  &lt;/span&gt;â”‚&lt;span class="w"&gt;Â Â  &lt;/span&gt;â”œâ”€â”€&lt;span class="w"&gt; &lt;/span&gt;service.cpython-35.pyc
â”‚&lt;span class="w"&gt;Â Â      &lt;/span&gt;â”‚&lt;span class="w"&gt;Â Â  &lt;/span&gt;â”‚&lt;span class="w"&gt;Â Â      &lt;/span&gt;â”‚&lt;span class="w"&gt;Â Â  &lt;/span&gt;â”‚&lt;span class="w"&gt;Â Â  &lt;/span&gt;â”‚&lt;span class="w"&gt;Â Â  &lt;/span&gt;â””â”€â”€&lt;span class="w"&gt; &lt;/span&gt;users.cpython-35.pyc
â”‚&lt;span class="w"&gt;Â Â      &lt;/span&gt;â”‚&lt;span class="w"&gt;Â Â  &lt;/span&gt;â”‚&lt;span class="w"&gt;Â Â      &lt;/span&gt;â”‚&lt;span class="w"&gt;Â Â  &lt;/span&gt;â”‚&lt;span class="w"&gt;Â Â  &lt;/span&gt;â”œâ”€â”€&lt;span class="w"&gt; &lt;/span&gt;service.py
â”‚&lt;span class="w"&gt;Â Â      &lt;/span&gt;â”‚&lt;span class="w"&gt;Â Â  &lt;/span&gt;â”‚&lt;span class="w"&gt;Â Â      &lt;/span&gt;â”‚&lt;span class="w"&gt;Â Â  &lt;/span&gt;â”‚&lt;span class="w"&gt;Â Â  &lt;/span&gt;â””â”€â”€&lt;span class="w"&gt; &lt;/span&gt;users.py
â”‚&lt;span class="w"&gt;Â Â      &lt;/span&gt;â”‚&lt;span class="w"&gt;Â Â  &lt;/span&gt;â”‚&lt;span class="w"&gt;Â Â      &lt;/span&gt;â”‚&lt;span class="w"&gt;Â Â  &lt;/span&gt;â””â”€â”€&lt;span class="w"&gt; &lt;/span&gt;__pycache__
â”‚&lt;span class="w"&gt;Â Â      &lt;/span&gt;â”‚&lt;span class="w"&gt;Â Â  &lt;/span&gt;â”‚&lt;span class="w"&gt;Â Â      &lt;/span&gt;â”‚&lt;span class="w"&gt;Â Â      &lt;/span&gt;â”œâ”€â”€&lt;span class="w"&gt; &lt;/span&gt;basic.cpython-35.pyc
â”‚&lt;span class="w"&gt;Â Â      &lt;/span&gt;â”‚&lt;span class="w"&gt;Â Â  &lt;/span&gt;â”‚&lt;span class="w"&gt;Â Â      &lt;/span&gt;â”‚&lt;span class="w"&gt;Â Â      &lt;/span&gt;â”œâ”€â”€&lt;span class="w"&gt; &lt;/span&gt;execd.cpython-35.pyc
â”‚&lt;span class="w"&gt;Â Â      &lt;/span&gt;â”‚&lt;span class="w"&gt;Â Â  &lt;/span&gt;â”‚&lt;span class="w"&gt;Â Â      &lt;/span&gt;â”‚&lt;span class="w"&gt;Â Â      &lt;/span&gt;â””â”€â”€&lt;span class="w"&gt; &lt;/span&gt;__init__.cpython-35.pyc
â”‚&lt;span class="w"&gt;Â Â      &lt;/span&gt;â”‚&lt;span class="w"&gt;Â Â  &lt;/span&gt;â”‚&lt;span class="w"&gt;Â Â      &lt;/span&gt;â””â”€â”€&lt;span class="w"&gt; &lt;/span&gt;__pycache__
â”‚&lt;span class="w"&gt;Â Â      &lt;/span&gt;â”‚&lt;span class="w"&gt;Â Â  &lt;/span&gt;â”‚&lt;span class="w"&gt;Â Â          &lt;/span&gt;â””â”€â”€&lt;span class="w"&gt; &lt;/span&gt;apt.cpython-35.pyc
â”‚&lt;span class="w"&gt;Â Â      &lt;/span&gt;â”‚&lt;span class="w"&gt;Â Â  &lt;/span&gt;â”œâ”€â”€&lt;span class="w"&gt; &lt;/span&gt;Makefile
â”‚&lt;span class="w"&gt;Â Â      &lt;/span&gt;â”‚&lt;span class="w"&gt;Â Â  &lt;/span&gt;â”œâ”€â”€&lt;span class="w"&gt; &lt;/span&gt;metadata.yaml
â”‚&lt;span class="w"&gt;Â Â      &lt;/span&gt;â”‚&lt;span class="w"&gt;Â Â  &lt;/span&gt;â”œâ”€â”€&lt;span class="w"&gt; &lt;/span&gt;reactive
â”‚&lt;span class="w"&gt;Â Â      &lt;/span&gt;â”‚&lt;span class="w"&gt;Â Â  &lt;/span&gt;â”‚&lt;span class="w"&gt;Â Â  &lt;/span&gt;â”œâ”€â”€&lt;span class="w"&gt; &lt;/span&gt;apt.py
â”‚&lt;span class="w"&gt;Â Â      &lt;/span&gt;â”‚&lt;span class="w"&gt;Â Â  &lt;/span&gt;â”‚&lt;span class="w"&gt;Â Â  &lt;/span&gt;â”œâ”€â”€&lt;span class="w"&gt; &lt;/span&gt;__init__.py
â”‚&lt;span class="w"&gt;Â Â      &lt;/span&gt;â”‚&lt;span class="w"&gt;Â Â  &lt;/span&gt;â”‚&lt;span class="w"&gt;Â Â  &lt;/span&gt;â”œâ”€â”€&lt;span class="w"&gt; &lt;/span&gt;jenkins.py
â”‚&lt;span class="w"&gt;Â Â      &lt;/span&gt;â”‚&lt;span class="w"&gt;Â Â  &lt;/span&gt;â”‚&lt;span class="w"&gt;Â Â  &lt;/span&gt;â””â”€â”€&lt;span class="w"&gt; &lt;/span&gt;__pycache__
â”‚&lt;span class="w"&gt;Â Â      &lt;/span&gt;â”‚&lt;span class="w"&gt;Â Â  &lt;/span&gt;â”‚&lt;span class="w"&gt;Â Â      &lt;/span&gt;â”œâ”€â”€&lt;span class="w"&gt; &lt;/span&gt;apt.cpython-35.pyc
â”‚&lt;span class="w"&gt;Â Â      &lt;/span&gt;â”‚&lt;span class="w"&gt;Â Â  &lt;/span&gt;â”‚&lt;span class="w"&gt;Â Â      &lt;/span&gt;â”œâ”€â”€&lt;span class="w"&gt; &lt;/span&gt;__init__.cpython-35.pyc
â”‚&lt;span class="w"&gt;Â Â      &lt;/span&gt;â”‚&lt;span class="w"&gt;Â Â  &lt;/span&gt;â”‚&lt;span class="w"&gt;Â Â      &lt;/span&gt;â””â”€â”€&lt;span class="w"&gt; &lt;/span&gt;jenkins.cpython-35.pyc
â”‚&lt;span class="w"&gt;Â Â      &lt;/span&gt;â”‚&lt;span class="w"&gt;Â Â  &lt;/span&gt;â”œâ”€â”€&lt;span class="w"&gt; &lt;/span&gt;README.md
â”‚&lt;span class="w"&gt;Â Â      &lt;/span&gt;â”‚&lt;span class="w"&gt;Â Â  &lt;/span&gt;â”œâ”€â”€&lt;span class="w"&gt; &lt;/span&gt;requirements.txt
â”‚&lt;span class="w"&gt;Â Â      &lt;/span&gt;â”‚&lt;span class="w"&gt;Â Â  &lt;/span&gt;â”œâ”€â”€&lt;span class="w"&gt; &lt;/span&gt;revision
â”‚&lt;span class="w"&gt;Â Â      &lt;/span&gt;â”‚&lt;span class="w"&gt;Â Â  &lt;/span&gt;â”œâ”€â”€&lt;span class="w"&gt; &lt;/span&gt;templates
â”‚&lt;span class="w"&gt;Â Â      &lt;/span&gt;â”‚&lt;span class="w"&gt;Â Â  &lt;/span&gt;â”‚&lt;span class="w"&gt;Â Â  &lt;/span&gt;â””â”€â”€&lt;span class="w"&gt; &lt;/span&gt;jenkins-config.xml
â”‚&lt;span class="w"&gt;Â Â      &lt;/span&gt;â”‚&lt;span class="w"&gt;Â Â  &lt;/span&gt;â”œâ”€â”€&lt;span class="w"&gt; &lt;/span&gt;tests
â”‚&lt;span class="w"&gt;Â Â      &lt;/span&gt;â”‚&lt;span class="w"&gt;Â Â  &lt;/span&gt;â”‚&lt;span class="w"&gt;Â Â  &lt;/span&gt;â”œâ”€â”€&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="m"&gt;01&lt;/span&gt;-trusty-basic
â”‚&lt;span class="w"&gt;Â Â      &lt;/span&gt;â”‚&lt;span class="w"&gt;Â Â  &lt;/span&gt;â”‚&lt;span class="w"&gt;Â Â  &lt;/span&gt;â”œâ”€â”€&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="m"&gt;01&lt;/span&gt;-xenial-basic
â”‚&lt;span class="w"&gt;Â Â      &lt;/span&gt;â”‚&lt;span class="w"&gt;Â Â  &lt;/span&gt;â”‚&lt;span class="w"&gt;Â Â  &lt;/span&gt;â”œâ”€â”€&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="m"&gt;02&lt;/span&gt;-trusty-website
â”‚&lt;span class="w"&gt;Â Â      &lt;/span&gt;â”‚&lt;span class="w"&gt;Â Â  &lt;/span&gt;â”‚&lt;span class="w"&gt;Â Â  &lt;/span&gt;â”œâ”€â”€&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="m"&gt;02&lt;/span&gt;-xenial-website
â”‚&lt;span class="w"&gt;Â Â      &lt;/span&gt;â”‚&lt;span class="w"&gt;Â Â  &lt;/span&gt;â”‚&lt;span class="w"&gt;Â Â  &lt;/span&gt;â”œâ”€â”€&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="m"&gt;03&lt;/span&gt;-trusty-slave
â”‚&lt;span class="w"&gt;Â Â      &lt;/span&gt;â”‚&lt;span class="w"&gt;Â Â  &lt;/span&gt;â”‚&lt;span class="w"&gt;Â Â  &lt;/span&gt;â”œâ”€â”€&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="m"&gt;03&lt;/span&gt;-xenial-slave
â”‚&lt;span class="w"&gt;Â Â      &lt;/span&gt;â”‚&lt;span class="w"&gt;Â Â  &lt;/span&gt;â”‚&lt;span class="w"&gt;Â Â  &lt;/span&gt;â”œâ”€â”€&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="m"&gt;04&lt;/span&gt;-trusty-external
â”‚&lt;span class="w"&gt;Â Â      &lt;/span&gt;â”‚&lt;span class="w"&gt;Â Â  &lt;/span&gt;â”‚&lt;span class="w"&gt;Â Â  &lt;/span&gt;â”œâ”€â”€&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="m"&gt;04&lt;/span&gt;-xenial-external
â”‚&lt;span class="w"&gt;Â Â      &lt;/span&gt;â”‚&lt;span class="w"&gt;Â Â  &lt;/span&gt;â”‚&lt;span class="w"&gt;Â Â  &lt;/span&gt;â”œâ”€â”€&lt;span class="w"&gt; &lt;/span&gt;basic.py
â”‚&lt;span class="w"&gt;Â Â      &lt;/span&gt;â”‚&lt;span class="w"&gt;Â Â  &lt;/span&gt;â”‚&lt;span class="w"&gt;Â Â  &lt;/span&gt;â”œâ”€â”€&lt;span class="w"&gt; &lt;/span&gt;deployment.py
â”‚&lt;span class="w"&gt;Â Â      &lt;/span&gt;â”‚&lt;span class="w"&gt;Â Â  &lt;/span&gt;â”‚&lt;span class="w"&gt;Â Â  &lt;/span&gt;â”œâ”€â”€&lt;span class="w"&gt; &lt;/span&gt;external.py
â”‚&lt;span class="w"&gt;Â Â      &lt;/span&gt;â”‚&lt;span class="w"&gt;Â Â  &lt;/span&gt;â”‚&lt;span class="w"&gt;Â Â  &lt;/span&gt;â”œâ”€â”€&lt;span class="w"&gt; &lt;/span&gt;README
â”‚&lt;span class="w"&gt;Â Â      &lt;/span&gt;â”‚&lt;span class="w"&gt;Â Â  &lt;/span&gt;â”‚&lt;span class="w"&gt;Â Â  &lt;/span&gt;â”œâ”€â”€&lt;span class="w"&gt; &lt;/span&gt;slave.py
â”‚&lt;span class="w"&gt;Â Â      &lt;/span&gt;â”‚&lt;span class="w"&gt;Â Â  &lt;/span&gt;â”‚&lt;span class="w"&gt;Â Â  &lt;/span&gt;â”œâ”€â”€&lt;span class="w"&gt; &lt;/span&gt;tests.yaml
â”‚&lt;span class="w"&gt;Â Â      &lt;/span&gt;â”‚&lt;span class="w"&gt;Â Â  &lt;/span&gt;â”‚&lt;span class="w"&gt;Â Â  &lt;/span&gt;â””â”€â”€&lt;span class="w"&gt; &lt;/span&gt;website.py
â”‚&lt;span class="w"&gt;Â Â      &lt;/span&gt;â”‚&lt;span class="w"&gt;Â Â  &lt;/span&gt;â”œâ”€â”€&lt;span class="w"&gt; &lt;/span&gt;TODO.md
â”‚&lt;span class="w"&gt;Â Â      &lt;/span&gt;â”‚&lt;span class="w"&gt;Â Â  &lt;/span&gt;â”œâ”€â”€&lt;span class="w"&gt; &lt;/span&gt;tox.ini
â”‚&lt;span class="w"&gt;Â Â      &lt;/span&gt;â”‚&lt;span class="w"&gt;Â Â  &lt;/span&gt;â”œâ”€â”€&lt;span class="w"&gt; &lt;/span&gt;unit_tests
â”‚&lt;span class="w"&gt;Â Â      &lt;/span&gt;â”‚&lt;span class="w"&gt;Â Â  &lt;/span&gt;â”‚&lt;span class="w"&gt;Â Â  &lt;/span&gt;â”œâ”€â”€&lt;span class="w"&gt; &lt;/span&gt;fakes.py
â”‚&lt;span class="w"&gt;Â Â      &lt;/span&gt;â”‚&lt;span class="w"&gt;Â Â  &lt;/span&gt;â”‚&lt;span class="w"&gt;Â Â  &lt;/span&gt;â”œâ”€â”€&lt;span class="w"&gt; &lt;/span&gt;states.py
â”‚&lt;span class="w"&gt;Â Â      &lt;/span&gt;â”‚&lt;span class="w"&gt;Â Â  &lt;/span&gt;â”‚&lt;span class="w"&gt;Â Â  &lt;/span&gt;â”œâ”€â”€&lt;span class="w"&gt; &lt;/span&gt;stubs
â”‚&lt;span class="w"&gt;Â Â      &lt;/span&gt;â”‚&lt;span class="w"&gt;Â Â  &lt;/span&gt;â”‚&lt;span class="w"&gt;Â Â  &lt;/span&gt;â”‚&lt;span class="w"&gt;Â Â  &lt;/span&gt;â”œâ”€â”€&lt;span class="w"&gt; &lt;/span&gt;apt.py
â”‚&lt;span class="w"&gt;Â Â      &lt;/span&gt;â”‚&lt;span class="w"&gt;Â Â  &lt;/span&gt;â”‚&lt;span class="w"&gt;Â Â  &lt;/span&gt;â”‚&lt;span class="w"&gt;Â Â  &lt;/span&gt;â”œâ”€â”€&lt;span class="w"&gt; &lt;/span&gt;execd.py
â”‚&lt;span class="w"&gt;Â Â      &lt;/span&gt;â”‚&lt;span class="w"&gt;Â Â  &lt;/span&gt;â”‚&lt;span class="w"&gt;Â Â  &lt;/span&gt;â”‚&lt;span class="w"&gt;Â Â  &lt;/span&gt;â””â”€â”€&lt;span class="w"&gt; &lt;/span&gt;__init__.py
â”‚&lt;span class="w"&gt;Â Â      &lt;/span&gt;â”‚&lt;span class="w"&gt;Â Â  &lt;/span&gt;â”‚&lt;span class="w"&gt;Â Â  &lt;/span&gt;â”œâ”€â”€&lt;span class="w"&gt; &lt;/span&gt;test_api.py
â”‚&lt;span class="w"&gt;Â Â      &lt;/span&gt;â”‚&lt;span class="w"&gt;Â Â  &lt;/span&gt;â”‚&lt;span class="w"&gt;Â Â  &lt;/span&gt;â”œâ”€â”€&lt;span class="w"&gt; &lt;/span&gt;test_configuration.py
â”‚&lt;span class="w"&gt;Â Â      &lt;/span&gt;â”‚&lt;span class="w"&gt;Â Â  &lt;/span&gt;â”‚&lt;span class="w"&gt;Â Â  &lt;/span&gt;â”œâ”€â”€&lt;span class="w"&gt; &lt;/span&gt;test_credentials.py
â”‚&lt;span class="w"&gt;Â Â      &lt;/span&gt;â”‚&lt;span class="w"&gt;Â Â  &lt;/span&gt;â”‚&lt;span class="w"&gt;Â Â  &lt;/span&gt;â”œâ”€â”€&lt;span class="w"&gt; &lt;/span&gt;testing.py
â”‚&lt;span class="w"&gt;Â Â      &lt;/span&gt;â”‚&lt;span class="w"&gt;Â Â  &lt;/span&gt;â”‚&lt;span class="w"&gt;Â Â  &lt;/span&gt;â”œâ”€â”€&lt;span class="w"&gt; &lt;/span&gt;test_packages.py
â”‚&lt;span class="w"&gt;Â Â      &lt;/span&gt;â”‚&lt;span class="w"&gt;Â Â  &lt;/span&gt;â”‚&lt;span class="w"&gt;Â Â  &lt;/span&gt;â”œâ”€â”€&lt;span class="w"&gt; &lt;/span&gt;test_plugins.py
â”‚&lt;span class="w"&gt;Â Â      &lt;/span&gt;â”‚&lt;span class="w"&gt;Â Â  &lt;/span&gt;â”‚&lt;span class="w"&gt;Â Â  &lt;/span&gt;â”œâ”€â”€&lt;span class="w"&gt; &lt;/span&gt;test_service.py
â”‚&lt;span class="w"&gt;Â Â      &lt;/span&gt;â”‚&lt;span class="w"&gt;Â Â  &lt;/span&gt;â”‚&lt;span class="w"&gt;Â Â  &lt;/span&gt;â””â”€â”€&lt;span class="w"&gt; &lt;/span&gt;test_users.py
â”‚&lt;span class="w"&gt;Â Â      &lt;/span&gt;â”‚&lt;span class="w"&gt;Â Â  &lt;/span&gt;â””â”€â”€&lt;span class="w"&gt; &lt;/span&gt;wheelhouse
â”‚&lt;span class="w"&gt;Â Â      &lt;/span&gt;â”‚&lt;span class="w"&gt;Â Â      &lt;/span&gt;â”œâ”€â”€&lt;span class="w"&gt; &lt;/span&gt;charmhelpers-0.10.0.tar.gz
â”‚&lt;span class="w"&gt;Â Â      &lt;/span&gt;â”‚&lt;span class="w"&gt;Â Â      &lt;/span&gt;â”œâ”€â”€&lt;span class="w"&gt; &lt;/span&gt;charms.reactive-0.4.5.tar.gz
â”‚&lt;span class="w"&gt;Â Â      &lt;/span&gt;â”‚&lt;span class="w"&gt;Â Â      &lt;/span&gt;â”œâ”€â”€&lt;span class="w"&gt; &lt;/span&gt;Jinja2-2.8.tar.gz
â”‚&lt;span class="w"&gt;Â Â      &lt;/span&gt;â”‚&lt;span class="w"&gt;Â Â      &lt;/span&gt;â”œâ”€â”€&lt;span class="w"&gt; &lt;/span&gt;MarkupSafe-0.23.tar.gz
â”‚&lt;span class="w"&gt;Â Â      &lt;/span&gt;â”‚&lt;span class="w"&gt;Â Â      &lt;/span&gt;â”œâ”€â”€&lt;span class="w"&gt; &lt;/span&gt;multi_key_dict-2.0.3.tar.gz
â”‚&lt;span class="w"&gt;Â Â      &lt;/span&gt;â”‚&lt;span class="w"&gt;Â Â      &lt;/span&gt;â”œâ”€â”€&lt;span class="w"&gt; &lt;/span&gt;netaddr-0.7.18.tar.gz
â”‚&lt;span class="w"&gt;Â Â      &lt;/span&gt;â”‚&lt;span class="w"&gt;Â Â      &lt;/span&gt;â”œâ”€â”€&lt;span class="w"&gt; &lt;/span&gt;pbr-1.10.0.tar.gz
â”‚&lt;span class="w"&gt;Â Â      &lt;/span&gt;â”‚&lt;span class="w"&gt;Â Â      &lt;/span&gt;â”œâ”€â”€&lt;span class="w"&gt; &lt;/span&gt;pip-8.1.2.tar.gz
â”‚&lt;span class="w"&gt;Â Â      &lt;/span&gt;â”‚&lt;span class="w"&gt;Â Â      &lt;/span&gt;â”œâ”€â”€&lt;span class="w"&gt; &lt;/span&gt;pyaml-16.11.4.tar.gz
â”‚&lt;span class="w"&gt;Â Â      &lt;/span&gt;â”‚&lt;span class="w"&gt;Â Â      &lt;/span&gt;â”œâ”€â”€&lt;span class="w"&gt; &lt;/span&gt;python-jenkins-0.4.13.tar.gz
â”‚&lt;span class="w"&gt;Â Â      &lt;/span&gt;â”‚&lt;span class="w"&gt;Â Â      &lt;/span&gt;â”œâ”€â”€&lt;span class="w"&gt; &lt;/span&gt;PyYAML-3.12.tar.gz
â”‚&lt;span class="w"&gt;Â Â      &lt;/span&gt;â”‚&lt;span class="w"&gt;Â Â      &lt;/span&gt;â”œâ”€â”€&lt;span class="w"&gt; &lt;/span&gt;six-1.10.0.tar.gz
â”‚&lt;span class="w"&gt;Â Â      &lt;/span&gt;â”‚&lt;span class="w"&gt;Â Â      &lt;/span&gt;â””â”€â”€&lt;span class="w"&gt; &lt;/span&gt;Tempita-0.5.2.tar.gz
â”‚&lt;span class="w"&gt;Â Â      &lt;/span&gt;â”œâ”€â”€&lt;span class="w"&gt; &lt;/span&gt;metrics-send.socket
â”‚&lt;span class="w"&gt;Â Â      &lt;/span&gt;â”œâ”€â”€&lt;span class="w"&gt; &lt;/span&gt;run.socket
â”‚&lt;span class="w"&gt;Â Â      &lt;/span&gt;â””â”€â”€&lt;span class="w"&gt; &lt;/span&gt;state
â”‚&lt;span class="w"&gt;Â Â          &lt;/span&gt;â”œâ”€â”€&lt;span class="w"&gt; &lt;/span&gt;bundles
â”‚&lt;span class="w"&gt;Â Â          &lt;/span&gt;â”‚&lt;span class="w"&gt;Â Â  &lt;/span&gt;â”œâ”€â”€&lt;span class="w"&gt; &lt;/span&gt;cs_3a_xenial_2f_jenkins-1
â”‚&lt;span class="w"&gt;Â Â          &lt;/span&gt;â”‚&lt;span class="w"&gt;Â Â  &lt;/span&gt;â””â”€â”€&lt;span class="w"&gt; &lt;/span&gt;downloads
â”‚&lt;span class="w"&gt;Â Â          &lt;/span&gt;â”œâ”€â”€&lt;span class="w"&gt; &lt;/span&gt;deployer
â”‚&lt;span class="w"&gt;Â Â          &lt;/span&gt;â”‚&lt;span class="w"&gt;Â Â  &lt;/span&gt;â””â”€â”€&lt;span class="w"&gt; &lt;/span&gt;manifests
â”‚&lt;span class="w"&gt;Â Â          &lt;/span&gt;â”‚&lt;span class="w"&gt;Â Â      &lt;/span&gt;â””â”€â”€&lt;span class="w"&gt; &lt;/span&gt;cs_3a_xenial_2f_jenkins-1
â”‚&lt;span class="w"&gt;Â Â          &lt;/span&gt;â”œâ”€â”€&lt;span class="w"&gt; &lt;/span&gt;relations
â”‚&lt;span class="w"&gt;Â Â          &lt;/span&gt;â”œâ”€â”€&lt;span class="w"&gt; &lt;/span&gt;storage
â”‚&lt;span class="w"&gt;Â Â          &lt;/span&gt;â””â”€â”€&lt;span class="w"&gt; &lt;/span&gt;uniter
â”œâ”€â”€&lt;span class="w"&gt; &lt;/span&gt;init
â”‚&lt;span class="w"&gt;Â Â  &lt;/span&gt;â”œâ”€â”€&lt;span class="w"&gt; &lt;/span&gt;jujud-machine-15
â”‚&lt;span class="w"&gt;Â Â  &lt;/span&gt;â”‚&lt;span class="w"&gt;Â Â  &lt;/span&gt;â”œâ”€â”€&lt;span class="w"&gt; &lt;/span&gt;exec-start.sh
â”‚&lt;span class="w"&gt;Â Â  &lt;/span&gt;â”‚&lt;span class="w"&gt;Â Â  &lt;/span&gt;â””â”€â”€&lt;span class="w"&gt; &lt;/span&gt;jujud-machine-15.service
â”‚&lt;span class="w"&gt;Â Â  &lt;/span&gt;â””â”€â”€&lt;span class="w"&gt; &lt;/span&gt;jujud-unit-jenkins-1
â”‚&lt;span class="w"&gt;Â Â      &lt;/span&gt;â”œâ”€â”€&lt;span class="w"&gt; &lt;/span&gt;exec-start.sh
â”‚&lt;span class="w"&gt;Â Â      &lt;/span&gt;â””â”€â”€&lt;span class="w"&gt; &lt;/span&gt;jujud-unit-jenkins-1.service
â”œâ”€â”€&lt;span class="w"&gt; &lt;/span&gt;locks
â”œâ”€â”€&lt;span class="w"&gt; &lt;/span&gt;meter-status.yaml
â”œâ”€â”€&lt;span class="w"&gt; &lt;/span&gt;metricspool
â””â”€â”€&lt;span class="w"&gt; &lt;/span&gt;tools
&lt;span class="w"&gt;    &lt;/span&gt;â”œâ”€â”€&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="m"&gt;2&lt;/span&gt;.0.1.98-xenial-amd64
&lt;span class="w"&gt;    &lt;/span&gt;â”‚&lt;span class="w"&gt;Â Â  &lt;/span&gt;â”œâ”€â”€&lt;span class="w"&gt; &lt;/span&gt;action-fail&lt;span class="w"&gt; &lt;/span&gt;-&amp;gt;&lt;span class="w"&gt; &lt;/span&gt;/var/lib/juju/tools/2.0.1.98-xenial-amd64/jujud
&lt;span class="w"&gt;    &lt;/span&gt;â”‚&lt;span class="w"&gt;Â Â  &lt;/span&gt;â”œâ”€â”€&lt;span class="w"&gt; &lt;/span&gt;action-get&lt;span class="w"&gt; &lt;/span&gt;-&amp;gt;&lt;span class="w"&gt; &lt;/span&gt;/var/lib/juju/tools/2.0.1.98-xenial-amd64/jujud
&lt;span class="w"&gt;    &lt;/span&gt;â”‚&lt;span class="w"&gt;Â Â  &lt;/span&gt;â”œâ”€â”€&lt;span class="w"&gt; &lt;/span&gt;action-set&lt;span class="w"&gt; &lt;/span&gt;-&amp;gt;&lt;span class="w"&gt; &lt;/span&gt;/var/lib/juju/tools/2.0.1.98-xenial-amd64/jujud
&lt;span class="w"&gt;    &lt;/span&gt;â”‚&lt;span class="w"&gt;Â Â  &lt;/span&gt;â”œâ”€â”€&lt;span class="w"&gt; &lt;/span&gt;add-metric&lt;span class="w"&gt; &lt;/span&gt;-&amp;gt;&lt;span class="w"&gt; &lt;/span&gt;/var/lib/juju/tools/2.0.1.98-xenial-amd64/jujud
&lt;span class="w"&gt;    &lt;/span&gt;â”‚&lt;span class="w"&gt;Â Â  &lt;/span&gt;â”œâ”€â”€&lt;span class="w"&gt; &lt;/span&gt;application-version-set&lt;span class="w"&gt; &lt;/span&gt;-&amp;gt;&lt;span class="w"&gt; &lt;/span&gt;/var/lib/juju/tools/2.0.1.98-xenial-amd64/jujud
&lt;span class="w"&gt;    &lt;/span&gt;â”‚&lt;span class="w"&gt;Â Â  &lt;/span&gt;â”œâ”€â”€&lt;span class="w"&gt; &lt;/span&gt;close-port&lt;span class="w"&gt; &lt;/span&gt;-&amp;gt;&lt;span class="w"&gt; &lt;/span&gt;/var/lib/juju/tools/2.0.1.98-xenial-amd64/jujud
&lt;span class="w"&gt;    &lt;/span&gt;â”‚&lt;span class="w"&gt;Â Â  &lt;/span&gt;â”œâ”€â”€&lt;span class="w"&gt; &lt;/span&gt;config-get&lt;span class="w"&gt; &lt;/span&gt;-&amp;gt;&lt;span class="w"&gt; &lt;/span&gt;/var/lib/juju/tools/2.0.1.98-xenial-amd64/jujud
&lt;span class="w"&gt;    &lt;/span&gt;â”‚&lt;span class="w"&gt;Â Â  &lt;/span&gt;â”œâ”€â”€&lt;span class="w"&gt; &lt;/span&gt;downloaded-tools.txt
&lt;span class="w"&gt;    &lt;/span&gt;â”‚&lt;span class="w"&gt;Â Â  &lt;/span&gt;â”œâ”€â”€&lt;span class="w"&gt; &lt;/span&gt;FORCE-VERSION
&lt;span class="w"&gt;    &lt;/span&gt;â”‚&lt;span class="w"&gt;Â Â  &lt;/span&gt;â”œâ”€â”€&lt;span class="w"&gt; &lt;/span&gt;is-leader&lt;span class="w"&gt; &lt;/span&gt;-&amp;gt;&lt;span class="w"&gt; &lt;/span&gt;/var/lib/juju/tools/2.0.1.98-xenial-amd64/jujud
&lt;span class="w"&gt;    &lt;/span&gt;â”‚&lt;span class="w"&gt;Â Â  &lt;/span&gt;â”œâ”€â”€&lt;span class="w"&gt; &lt;/span&gt;jujud
&lt;span class="w"&gt;    &lt;/span&gt;â”‚&lt;span class="w"&gt;Â Â  &lt;/span&gt;â”œâ”€â”€&lt;span class="w"&gt; &lt;/span&gt;juju-log&lt;span class="w"&gt; &lt;/span&gt;-&amp;gt;&lt;span class="w"&gt; &lt;/span&gt;/var/lib/juju/tools/2.0.1.98-xenial-amd64/jujud
&lt;span class="w"&gt;    &lt;/span&gt;â”‚&lt;span class="w"&gt;Â Â  &lt;/span&gt;â”œâ”€â”€&lt;span class="w"&gt; &lt;/span&gt;juju-reboot&lt;span class="w"&gt; &lt;/span&gt;-&amp;gt;&lt;span class="w"&gt; &lt;/span&gt;/var/lib/juju/tools/2.0.1.98-xenial-amd64/jujud
&lt;span class="w"&gt;    &lt;/span&gt;â”‚&lt;span class="w"&gt;Â Â  &lt;/span&gt;â”œâ”€â”€&lt;span class="w"&gt; &lt;/span&gt;leader-get&lt;span class="w"&gt; &lt;/span&gt;-&amp;gt;&lt;span class="w"&gt; &lt;/span&gt;/var/lib/juju/tools/2.0.1.98-xenial-amd64/jujud
&lt;span class="w"&gt;    &lt;/span&gt;â”‚&lt;span class="w"&gt;Â Â  &lt;/span&gt;â”œâ”€â”€&lt;span class="w"&gt; &lt;/span&gt;leader-set&lt;span class="w"&gt; &lt;/span&gt;-&amp;gt;&lt;span class="w"&gt; &lt;/span&gt;/var/lib/juju/tools/2.0.1.98-xenial-amd64/jujud
&lt;span class="w"&gt;    &lt;/span&gt;â”‚&lt;span class="w"&gt;Â Â  &lt;/span&gt;â”œâ”€â”€&lt;span class="w"&gt; &lt;/span&gt;network-get&lt;span class="w"&gt; &lt;/span&gt;-&amp;gt;&lt;span class="w"&gt; &lt;/span&gt;/var/lib/juju/tools/2.0.1.98-xenial-amd64/jujud
&lt;span class="w"&gt;    &lt;/span&gt;â”‚&lt;span class="w"&gt;Â Â  &lt;/span&gt;â”œâ”€â”€&lt;span class="w"&gt; &lt;/span&gt;opened-ports&lt;span class="w"&gt; &lt;/span&gt;-&amp;gt;&lt;span class="w"&gt; &lt;/span&gt;/var/lib/juju/tools/2.0.1.98-xenial-amd64/jujud
&lt;span class="w"&gt;    &lt;/span&gt;â”‚&lt;span class="w"&gt;Â Â  &lt;/span&gt;â”œâ”€â”€&lt;span class="w"&gt; &lt;/span&gt;open-port&lt;span class="w"&gt; &lt;/span&gt;-&amp;gt;&lt;span class="w"&gt; &lt;/span&gt;/var/lib/juju/tools/2.0.1.98-xenial-amd64/jujud
&lt;span class="w"&gt;    &lt;/span&gt;â”‚&lt;span class="w"&gt;Â Â  &lt;/span&gt;â”œâ”€â”€&lt;span class="w"&gt; &lt;/span&gt;payload-register&lt;span class="w"&gt; &lt;/span&gt;-&amp;gt;&lt;span class="w"&gt; &lt;/span&gt;/var/lib/juju/tools/2.0.1.98-xenial-amd64/jujud
&lt;span class="w"&gt;    &lt;/span&gt;â”‚&lt;span class="w"&gt;Â Â  &lt;/span&gt;â”œâ”€â”€&lt;span class="w"&gt; &lt;/span&gt;payload-status-set&lt;span class="w"&gt; &lt;/span&gt;-&amp;gt;&lt;span class="w"&gt; &lt;/span&gt;/var/lib/juju/tools/2.0.1.98-xenial-amd64/jujud
&lt;span class="w"&gt;    &lt;/span&gt;â”‚&lt;span class="w"&gt;Â Â  &lt;/span&gt;â”œâ”€â”€&lt;span class="w"&gt; &lt;/span&gt;payload-unregister&lt;span class="w"&gt; &lt;/span&gt;-&amp;gt;&lt;span class="w"&gt; &lt;/span&gt;/var/lib/juju/tools/2.0.1.98-xenial-amd64/jujud
&lt;span class="w"&gt;    &lt;/span&gt;â”‚&lt;span class="w"&gt;Â Â  &lt;/span&gt;â”œâ”€â”€&lt;span class="w"&gt; &lt;/span&gt;relation-get&lt;span class="w"&gt; &lt;/span&gt;-&amp;gt;&lt;span class="w"&gt; &lt;/span&gt;/var/lib/juju/tools/2.0.1.98-xenial-amd64/jujud
&lt;span class="w"&gt;    &lt;/span&gt;â”‚&lt;span class="w"&gt;Â Â  &lt;/span&gt;â”œâ”€â”€&lt;span class="w"&gt; &lt;/span&gt;relation-ids&lt;span class="w"&gt; &lt;/span&gt;-&amp;gt;&lt;span class="w"&gt; &lt;/span&gt;/var/lib/juju/tools/2.0.1.98-xenial-amd64/jujud
&lt;span class="w"&gt;    &lt;/span&gt;â”‚&lt;span class="w"&gt;Â Â  &lt;/span&gt;â”œâ”€â”€&lt;span class="w"&gt; &lt;/span&gt;relation-list&lt;span class="w"&gt; &lt;/span&gt;-&amp;gt;&lt;span class="w"&gt; &lt;/span&gt;/var/lib/juju/tools/2.0.1.98-xenial-amd64/jujud
&lt;span class="w"&gt;    &lt;/span&gt;â”‚&lt;span class="w"&gt;Â Â  &lt;/span&gt;â”œâ”€â”€&lt;span class="w"&gt; &lt;/span&gt;relation-set&lt;span class="w"&gt; &lt;/span&gt;-&amp;gt;&lt;span class="w"&gt; &lt;/span&gt;/var/lib/juju/tools/2.0.1.98-xenial-amd64/jujud
&lt;span class="w"&gt;    &lt;/span&gt;â”‚&lt;span class="w"&gt;Â Â  &lt;/span&gt;â”œâ”€â”€&lt;span class="w"&gt; &lt;/span&gt;resource-get&lt;span class="w"&gt; &lt;/span&gt;-&amp;gt;&lt;span class="w"&gt; &lt;/span&gt;/var/lib/juju/tools/2.0.1.98-xenial-amd64/jujud
&lt;span class="w"&gt;    &lt;/span&gt;â”‚&lt;span class="w"&gt;Â Â  &lt;/span&gt;â”œâ”€â”€&lt;span class="w"&gt; &lt;/span&gt;status-get&lt;span class="w"&gt; &lt;/span&gt;-&amp;gt;&lt;span class="w"&gt; &lt;/span&gt;/var/lib/juju/tools/2.0.1.98-xenial-amd64/jujud
&lt;span class="w"&gt;    &lt;/span&gt;â”‚&lt;span class="w"&gt;Â Â  &lt;/span&gt;â”œâ”€â”€&lt;span class="w"&gt; &lt;/span&gt;status-set&lt;span class="w"&gt; &lt;/span&gt;-&amp;gt;&lt;span class="w"&gt; &lt;/span&gt;/var/lib/juju/tools/2.0.1.98-xenial-amd64/jujud
&lt;span class="w"&gt;    &lt;/span&gt;â”‚&lt;span class="w"&gt;Â Â  &lt;/span&gt;â”œâ”€â”€&lt;span class="w"&gt; &lt;/span&gt;storage-add&lt;span class="w"&gt; &lt;/span&gt;-&amp;gt;&lt;span class="w"&gt; &lt;/span&gt;/var/lib/juju/tools/2.0.1.98-xenial-amd64/jujud
&lt;span class="w"&gt;    &lt;/span&gt;â”‚&lt;span class="w"&gt;Â Â  &lt;/span&gt;â”œâ”€â”€&lt;span class="w"&gt; &lt;/span&gt;storage-get&lt;span class="w"&gt; &lt;/span&gt;-&amp;gt;&lt;span class="w"&gt; &lt;/span&gt;/var/lib/juju/tools/2.0.1.98-xenial-amd64/jujud
&lt;span class="w"&gt;    &lt;/span&gt;â”‚&lt;span class="w"&gt;Â Â  &lt;/span&gt;â”œâ”€â”€&lt;span class="w"&gt; &lt;/span&gt;storage-list&lt;span class="w"&gt; &lt;/span&gt;-&amp;gt;&lt;span class="w"&gt; &lt;/span&gt;/var/lib/juju/tools/2.0.1.98-xenial-amd64/jujud
&lt;span class="w"&gt;    &lt;/span&gt;â”‚&lt;span class="w"&gt;Â Â  &lt;/span&gt;â””â”€â”€&lt;span class="w"&gt; &lt;/span&gt;unit-get&lt;span class="w"&gt; &lt;/span&gt;-&amp;gt;&lt;span class="w"&gt; &lt;/span&gt;/var/lib/juju/tools/2.0.1.98-xenial-amd64/jujud
&lt;span class="w"&gt;    &lt;/span&gt;â”œâ”€â”€&lt;span class="w"&gt; &lt;/span&gt;machine-15&lt;span class="w"&gt; &lt;/span&gt;-&amp;gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="m"&gt;2&lt;/span&gt;.0.1.98-xenial-amd64
&lt;span class="w"&gt;    &lt;/span&gt;â””â”€â”€&lt;span class="w"&gt; &lt;/span&gt;unit-jenkins-1&lt;span class="w"&gt; &lt;/span&gt;-&amp;gt;&lt;span class="w"&gt; &lt;/span&gt;/var/lib/juju/tools/2.0.1.98-xenial-amd64

&lt;span class="m"&gt;45&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;directories,&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="m"&gt;194&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;files
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;</content><category term="openstack"></category><category term="lenovo"></category></entry><entry><title>Juju bootstrap process</title><link href="https://fengxia41103.github.io/myblog/juju%20bootstrap.html" rel="alternate"></link><published>2017-01-11T17:00:00-05:00</published><updated>2017-01-11T17:00:00-05:00</updated><author><name>Feng Xia</name></author><id>tag:fengxia41103.github.io,2017-01-11:/myblog/juju bootstrap.html</id><summary type="html">&lt;p&gt;The very first command user will encounter is the &lt;code&gt;juju bootstrap&lt;/code&gt;. It
createa a special machine &amp;mdash; state controller, &lt;code&gt;machine-0&lt;/code&gt;,
control node, etc. &amp;mdash; naming convention aside, it is the brain
that tracks others nodes in the cloud, applications installed and
their status.&lt;/p&gt;
&lt;h1&gt;Screencast&lt;/h1&gt;
&lt;p&gt;Through research I want to learn about its process, internal
mechanism, how this command triggers off other juju components, what
is the minimum take to simulate a successful bootstrap, and if things
go south, what is the minimum to simulate a clean state so we can run
&lt;code&gt;juju bootstrap&lt;/code&gt; again as if from scratch. This last point is
particuarly useful for development and troubleshooting.&lt;/p&gt;
&lt;figure class="s12 center"&gt;
    &lt;img src="images/juju%20bootstrap.gif" /&gt;
    &lt;figcaption&gt;Screencast of juju bootstraping a cloud environment&lt;/figcaption&gt;
&lt;/figure&gt;

&lt;p&gt;First thing first, if we have create a cloud or are using a stock
cloud type:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;$&lt;span class="w"&gt; &lt;/span&gt;juju&lt;span class="w"&gt; &lt;/span&gt;bootstrap&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;cloudname&lt;span class="o"&gt;]&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;machine-0&lt;span class="w"&gt; &lt;/span&gt;name&lt;span class="o"&gt;]&lt;/span&gt;

&lt;span class="k"&gt;for&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;example:
$&lt;span class="w"&gt; &lt;/span&gt;juju&lt;span class="w"&gt; &lt;/span&gt;bootstrap&lt;span class="w"&gt; &lt;/span&gt;devx&lt;span class="w"&gt; &lt;/span&gt;test-1
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;This will create a state controller (machine-0) that will be the
management node within juju's cloud environment.&lt;/p&gt;
&lt;h1&gt;Develop a new provider&lt;/h1&gt;
&lt;p&gt;Case in point is to develop a new provider. Juju's &lt;a href="https://github.com/juju/juju/wiki/Implementing-environment-providers"&gt;document&lt;/a&gt; is
helpful to â€¦&lt;/p&gt;</summary><content type="html">&lt;p&gt;The very first command user will encounter is the &lt;code&gt;juju bootstrap&lt;/code&gt;. It
createa a special machine &amp;mdash; state controller, &lt;code&gt;machine-0&lt;/code&gt;,
control node, etc. &amp;mdash; naming convention aside, it is the brain
that tracks others nodes in the cloud, applications installed and
their status.&lt;/p&gt;
&lt;h1&gt;Screencast&lt;/h1&gt;
&lt;p&gt;Through research I want to learn about its process, internal
mechanism, how this command triggers off other juju components, what
is the minimum take to simulate a successful bootstrap, and if things
go south, what is the minimum to simulate a clean state so we can run
&lt;code&gt;juju bootstrap&lt;/code&gt; again as if from scratch. This last point is
particuarly useful for development and troubleshooting.&lt;/p&gt;
&lt;figure class="s12 center"&gt;
    &lt;img src="images/juju%20bootstrap.gif" /&gt;
    &lt;figcaption&gt;Screencast of juju bootstraping a cloud environment&lt;/figcaption&gt;
&lt;/figure&gt;

&lt;p&gt;First thing first, if we have create a cloud or are using a stock
cloud type:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;$&lt;span class="w"&gt; &lt;/span&gt;juju&lt;span class="w"&gt; &lt;/span&gt;bootstrap&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;cloudname&lt;span class="o"&gt;]&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;machine-0&lt;span class="w"&gt; &lt;/span&gt;name&lt;span class="o"&gt;]&lt;/span&gt;

&lt;span class="k"&gt;for&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;example:
$&lt;span class="w"&gt; &lt;/span&gt;juju&lt;span class="w"&gt; &lt;/span&gt;bootstrap&lt;span class="w"&gt; &lt;/span&gt;devx&lt;span class="w"&gt; &lt;/span&gt;test-1
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;This will create a state controller (machine-0) that will be the
management node within juju's cloud environment.&lt;/p&gt;
&lt;h1&gt;Develop a new provider&lt;/h1&gt;
&lt;p&gt;Case in point is to develop a new provider. Juju's &lt;a href="https://github.com/juju/juju/wiki/Implementing-environment-providers"&gt;document&lt;/a&gt; is
helpful to guide development provides that one is familiar with code
base and the rest of the Juju environment. The article fill in gap
between a design document and code itself so not only one defines
these interfaces, methods and so on, but one understands when these
methods will be called, how they are called, and what they are to
achieve.&lt;/p&gt;
&lt;h1&gt;Juju cloud &amp;amp; provider&lt;/h1&gt;
&lt;p&gt;Canonical Juju is a powerful orchestration tool. Its power lies in
deploying some applications by sending a form of &lt;em&gt;request&lt;/em&gt; to
underline cloud and have the cloud figuring out what type of machine
should be provisioned, putting an OS on it, installing necessary tools
and application, and finally putting the desired applications on
top. It's magic.&lt;/p&gt;
&lt;p&gt;Being able to handle multiple types of cloud, Juju abstracs a &lt;em&gt;cloud&lt;/em&gt;
with &lt;em&gt;an envrionment&lt;/em&gt; (we will use "cloud" and "environment"
interchangeably in this article).  Within an environment, there is a
special machine, the &lt;code&gt;machine-0&lt;/code&gt;, that functions as a management node
to all other machines.  In essence it is a state controller where
configurations of all slave nodes, status of deployed applications and
so on are kept.  The &lt;em&gt;cloud provider&lt;/em&gt; is the driver layer where Juju's
CLI speaks to a cloud. Each cloud has a different API. Juju provides a
common bootstrap framework to tie these providers into a common
process.&lt;/p&gt;
&lt;figure class="s12 center"&gt;
  &lt;img src="images/juju%20cloud%20and%20provider.png" /&gt;
    &lt;figcaption&gt;Juju cloud abstraction&lt;/figcaption&gt;
&lt;/figure&gt;

&lt;h1&gt;Bootstrap usage&lt;/h1&gt;
&lt;p&gt;Before Juju bootstraps an environment, it needs to know to have basic
knowledge of &lt;a href="https://jujucharms.com/docs/2.0/clouds"&gt;clouds&lt;/a&gt;. Off the shelf Juju supports the followings:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Azure&lt;/li&gt;
&lt;li&gt;Cloudsigma&lt;/li&gt;
&lt;li&gt;Amazon EC2&lt;/li&gt;
&lt;li&gt;GCE&lt;/li&gt;
&lt;li&gt;Joyent&lt;/li&gt;
&lt;li&gt;Openstack&lt;/li&gt;
&lt;li&gt;Rackspace&lt;/li&gt;
&lt;li&gt;Vsphere&lt;/li&gt;
&lt;li&gt;Canonical MAAS&lt;/li&gt;
&lt;li&gt;LXD containers&lt;/li&gt;
&lt;li&gt;Manual&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;For the above, nearly everything is built-in(!) The bare minimum to
bootstrap a machine is user credential (and some cloud, eg. LXD,
doesn't use credentials). Juju handles everything else. Depending on
the selected cloud type, Juju commands also offer different
configurations that can be customized, for example, direct request to
a particular EC2 region.&lt;/p&gt;
&lt;p&gt;LXD is a special type of cloud because it does not involve another
machine throughout &amp;mdash; everything is taking place on the same
machine where CLI are being issued. For all others, it always involves
some kind of remote API interface for commanding purpose.&lt;/p&gt;
&lt;p&gt;To list all supported cloud types:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;$&lt;span class="w"&gt; &lt;/span&gt;juju&lt;span class="w"&gt; &lt;/span&gt;list-clouds

fengxia@ubuntu:~$&lt;span class="w"&gt; &lt;/span&gt;./juju&lt;span class="w"&gt; &lt;/span&gt;list-clouds
Cloud&lt;span class="w"&gt;        &lt;/span&gt;Regions&lt;span class="w"&gt;  &lt;/span&gt;Default&lt;span class="w"&gt;        &lt;/span&gt;Type&lt;span class="w"&gt;        &lt;/span&gt;Description
aws&lt;span class="w"&gt;               &lt;/span&gt;&lt;span class="m"&gt;12&lt;/span&gt;&lt;span class="w"&gt;  &lt;/span&gt;us-east-1&lt;span class="w"&gt;      &lt;/span&gt;ec2&lt;span class="w"&gt;         &lt;/span&gt;Amazon&lt;span class="w"&gt; &lt;/span&gt;Web&lt;span class="w"&gt; &lt;/span&gt;Services
aws-china&lt;span class="w"&gt;          &lt;/span&gt;&lt;span class="m"&gt;1&lt;/span&gt;&lt;span class="w"&gt;  &lt;/span&gt;cn-north-1&lt;span class="w"&gt;     &lt;/span&gt;ec2&lt;span class="w"&gt;         &lt;/span&gt;Amazon&lt;span class="w"&gt; &lt;/span&gt;China
aws-gov&lt;span class="w"&gt;            &lt;/span&gt;&lt;span class="m"&gt;1&lt;/span&gt;&lt;span class="w"&gt;  &lt;/span&gt;us-gov-west-1&lt;span class="w"&gt;  &lt;/span&gt;ec2&lt;span class="w"&gt;         &lt;/span&gt;Amazon&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;USA&lt;span class="w"&gt; &lt;/span&gt;Government&lt;span class="o"&gt;)&lt;/span&gt;
azure&lt;span class="w"&gt;             &lt;/span&gt;&lt;span class="m"&gt;18&lt;/span&gt;&lt;span class="w"&gt;  &lt;/span&gt;centralus&lt;span class="w"&gt;      &lt;/span&gt;azure&lt;span class="w"&gt;       &lt;/span&gt;Microsoft&lt;span class="w"&gt; &lt;/span&gt;Azure
azure-china&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="m"&gt;2&lt;/span&gt;&lt;span class="w"&gt;  &lt;/span&gt;chinaeast&lt;span class="w"&gt;      &lt;/span&gt;azure&lt;span class="w"&gt;       &lt;/span&gt;Microsoft&lt;span class="w"&gt; &lt;/span&gt;Azure&lt;span class="w"&gt; &lt;/span&gt;China
cloudsigma&lt;span class="w"&gt;         &lt;/span&gt;&lt;span class="m"&gt;5&lt;/span&gt;&lt;span class="w"&gt;  &lt;/span&gt;hnl&lt;span class="w"&gt;            &lt;/span&gt;cloudsigma&lt;span class="w"&gt;  &lt;/span&gt;CloudSigma&lt;span class="w"&gt; &lt;/span&gt;Cloud
google&lt;span class="w"&gt;             &lt;/span&gt;&lt;span class="m"&gt;4&lt;/span&gt;&lt;span class="w"&gt;  &lt;/span&gt;us-east1&lt;span class="w"&gt;       &lt;/span&gt;gce&lt;span class="w"&gt;         &lt;/span&gt;Google&lt;span class="w"&gt; &lt;/span&gt;Cloud&lt;span class="w"&gt; &lt;/span&gt;Platform
joyent&lt;span class="w"&gt;             &lt;/span&gt;&lt;span class="m"&gt;6&lt;/span&gt;&lt;span class="w"&gt;  &lt;/span&gt;eu-ams-1&lt;span class="w"&gt;       &lt;/span&gt;joyent&lt;span class="w"&gt;      &lt;/span&gt;Joyent&lt;span class="w"&gt; &lt;/span&gt;Cloud
rackspace&lt;span class="w"&gt;          &lt;/span&gt;&lt;span class="m"&gt;6&lt;/span&gt;&lt;span class="w"&gt;  &lt;/span&gt;dfw&lt;span class="w"&gt;            &lt;/span&gt;rackspace&lt;span class="w"&gt;   &lt;/span&gt;Rackspace&lt;span class="w"&gt; &lt;/span&gt;Cloud
localhost&lt;span class="w"&gt;          &lt;/span&gt;&lt;span class="m"&gt;1&lt;/span&gt;&lt;span class="w"&gt;  &lt;/span&gt;localhost&lt;span class="w"&gt;      &lt;/span&gt;lxd&lt;span class="w"&gt;         &lt;/span&gt;LXD&lt;span class="w"&gt; &lt;/span&gt;Container&lt;span class="w"&gt; &lt;/span&gt;Hypervisor
devmaas&lt;span class="w"&gt;            &lt;/span&gt;&lt;span class="m"&gt;0&lt;/span&gt;&lt;span class="w"&gt;                 &lt;/span&gt;maas&lt;span class="w"&gt;        &lt;/span&gt;Metal&lt;span class="w"&gt; &lt;/span&gt;As&lt;span class="w"&gt; &lt;/span&gt;A&lt;span class="w"&gt; &lt;/span&gt;Service
devx&lt;span class="w"&gt;               &lt;/span&gt;&lt;span class="m"&gt;0&lt;/span&gt;&lt;span class="w"&gt;                 &lt;/span&gt;xclarity&lt;span class="w"&gt;    &lt;/span&gt;Lenovo&lt;span class="w"&gt; &lt;/span&gt;XClarity
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;To bootstrap an environment is simple if everything has been setup
correctly. It is really up to the underline cloud to provide a
machine, and this is where we are going to analye in further details.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;$&lt;span class="w"&gt; &lt;/span&gt;juju&lt;span class="w"&gt; &lt;/span&gt;bootstrap&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;cloud&lt;span class="w"&gt; &lt;/span&gt;type&lt;span class="o"&gt;][&lt;/span&gt;any&lt;span class="w"&gt; &lt;/span&gt;name&lt;span class="o"&gt;]&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;h1&gt;Bootstrap overview&lt;/h1&gt;
&lt;p&gt;Juju offers a generalized framework into which code that drives a
cloud type is tied. Being the first machine to create in a given
environment, machine-0 involves tremendous amount of machinary to go
live.  In a nutshell, all activities can be categorized into the
followings:&lt;/p&gt;
&lt;figure class="s12 center"&gt;
  &lt;img src="images/juju%20bootstrap%20overview.png" /&gt;
    &lt;figcaption&gt;Juju bootstrap framework&lt;/figcaption&gt;
&lt;/figure&gt;

&lt;ul&gt;
&lt;li&gt;Setup constraints: An umbrella term containing anything from memory
  size to region to the version of OS itself.&lt;/li&gt;
&lt;li&gt;Pick OS image: For Ubuntu, it does mapping from a name, eg. Precise,
  to an actual OS version.&lt;/li&gt;
&lt;li&gt;Pick agent/tools: Juju requires to install an agent, &lt;em&gt;jujud&lt;/em&gt;, on all
  slave nodes. Bootstrap will abort if no adequate agent can be located.&lt;/li&gt;
&lt;/ul&gt;
&lt;blockquote&gt;
&lt;p&gt;Chaning version number to a non-official one, eg. 2.0.1.99, will force Juju binary to use a local jujud (compiled).&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;Provision OS: Machine is setup for SSH access via public-key
  (including root). A default user, &lt;em&gt;ubuntu&lt;/em&gt;, is created on the
  machine.&lt;/li&gt;
&lt;li&gt;Set up instance configuration: An instance configuration controls
  all things beyond a bare OS, such as triggering an OS update &amp;amp; upgrade
  (eg. apt upgrade), ports Juju agent should listen to, networking
  configurations, etc..&lt;/li&gt;
&lt;li&gt;Configure node: From the main controller, Juju will SSH into the
  node, install Juju agent and tools, set up a mongoDB for data
  persistence and running other chores using cloud-init.&lt;/li&gt;
&lt;/ul&gt;
&lt;blockquote&gt;
&lt;p&gt;Default Juju agent path: /var/lib/juju&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h1&gt;Bootstrap framework&lt;/h1&gt;
&lt;p&gt;With the overview in mind, let's take a look Juju's actual bootstrap
process located in &lt;code&gt;juju.juju.environs.Bootstrap&lt;/code&gt; function.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;font color="gray"&gt;Gray&lt;/font&gt; boxes: depicts data inputs to each
  functional block, and details of data structures.&lt;/li&gt;
&lt;li&gt;&lt;font color="green"&gt;Green&lt;/font&gt; boxes: are integration points with
  different cloud providers &amp;mdash; how to start an instance from
  scratch (provisioning), and how to configure an OS-ed machine. The
  latter can be argued cloud agnostic. However, it is heavily geared
  towards Ubuntu environment by default.&lt;/li&gt;
&lt;li&gt;&lt;font color="blue"&gt;Blue&lt;/font&gt;: are clearly Canonical dependent due
  to hard-coded values (eg. simplestream URL).&lt;/li&gt;
&lt;/ul&gt;
&lt;figure class="s12 center"&gt;
  &lt;img src="images/juju%20bootstrap%20process.png" /&gt;
    &lt;figcaption&gt;Juju bootstrap framework&lt;/figcaption&gt;
&lt;/figure&gt;

&lt;p&gt;The purpose of this framework is to pre-evaluate constraints and
requested resources for provider's consumption. For example, it will
cponstruct a list of Juju agents and tools but delay its final picking
until providre's code is called. Same for OS images (imageMetadata).&lt;/p&gt;
&lt;p&gt;The Juju tools &amp;amp; agent play such a key role in bootstraping that the
entire process will abort if no matching tool is located.  The
assumption is that privisioning OS is the job the cloud and Juju is
responsible for actions from OS onward. So if there is no tools to
take the machine to the next stage, why bother installing an OS?&lt;/p&gt;
&lt;p&gt;Now let's drive into a provider's arena and take a look what a provider offers.&lt;/p&gt;
&lt;h1&gt;Illustration of a "common" provider&lt;/h1&gt;
&lt;p&gt;Juju's &lt;em&gt;common&lt;/em&gt; provider serves as an example for study. It can looked
as a &lt;em&gt;standard&lt;/em&gt; way to provision and configure a node. As a matter of
fact, some providers uses its &lt;code&gt;Bootstrap&lt;/code&gt; function completly.&lt;/p&gt;
&lt;h2&gt;"common" provisioning &amp;amp; cloud integration&lt;/h2&gt;
&lt;p&gt;If framework has done preliminary sanity checks and collected possible
resources, provider's task is to make a final pick.  Thing like
selecting the OS image and juju agent and tools are all taking place
here. Once ducks are in line, call a provider's &lt;code&gt;BootstrapInstance&lt;/code&gt;
function &amp;larr; and this is the point where underline cloud meets
Juju.&lt;/p&gt;
&lt;figure class="s12 center"&gt;
  &lt;img src="images/juju%20common%20BootstrapInstance.png" /&gt;
    &lt;figcaption&gt;"common" provider's BootstrapInstance function&lt;/figcaption&gt;
&lt;/figure&gt;

&lt;p&gt;What is expected from the cloud? Four things that are all hardware centric:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;hardware characteristics: architecture, memory size, root disk size, CPU cores.&lt;/li&gt;
&lt;li&gt;network information&lt;/li&gt;
&lt;li&gt;storage volume&lt;/li&gt;
&lt;li&gt;storage volume attachment&lt;/li&gt;
&lt;/ol&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;//&lt;span class="w"&gt; &lt;/span&gt;StartInstanceResult&lt;span class="w"&gt; &lt;/span&gt;holds&lt;span class="w"&gt; &lt;/span&gt;the&lt;span class="w"&gt; &lt;/span&gt;result&lt;span class="w"&gt; &lt;/span&gt;of&lt;span class="w"&gt; &lt;/span&gt;an
//&lt;span class="w"&gt; &lt;/span&gt;InstanceBroker.StartInstance&lt;span class="w"&gt; &lt;/span&gt;method&lt;span class="w"&gt; &lt;/span&gt;call.
&lt;span class="nb"&gt;type&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;StartInstanceResult&lt;span class="w"&gt; &lt;/span&gt;struct&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;{&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;//&lt;span class="w"&gt; &lt;/span&gt;Instance&lt;span class="w"&gt; &lt;/span&gt;is&lt;span class="w"&gt; &lt;/span&gt;an&lt;span class="w"&gt; &lt;/span&gt;interface&lt;span class="w"&gt; &lt;/span&gt;representing&lt;span class="w"&gt; &lt;/span&gt;a&lt;span class="w"&gt; &lt;/span&gt;cloud&lt;span class="w"&gt; &lt;/span&gt;instance.
&lt;span class="w"&gt;    &lt;/span&gt;Instance&lt;span class="w"&gt; &lt;/span&gt;instance.Instance

&lt;span class="w"&gt;    &lt;/span&gt;//&lt;span class="w"&gt; &lt;/span&gt;Config&lt;span class="w"&gt; &lt;/span&gt;holds&lt;span class="w"&gt; &lt;/span&gt;the&lt;span class="w"&gt; &lt;/span&gt;environment&lt;span class="w"&gt; &lt;/span&gt;config&lt;span class="w"&gt; &lt;/span&gt;to&lt;span class="w"&gt; &lt;/span&gt;be&lt;span class="w"&gt; &lt;/span&gt;used&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;for&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;any&lt;span class="w"&gt; &lt;/span&gt;further
&lt;span class="w"&gt;    &lt;/span&gt;//&lt;span class="w"&gt; &lt;/span&gt;operations,&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;if&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;the&lt;span class="w"&gt; &lt;/span&gt;instance&lt;span class="w"&gt; &lt;/span&gt;is&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;for&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;a&lt;span class="w"&gt; &lt;/span&gt;controller.
&lt;span class="w"&gt;    &lt;/span&gt;Config&lt;span class="w"&gt; &lt;/span&gt;*config.Config

&lt;span class="w"&gt;    &lt;/span&gt;//&lt;span class="w"&gt; &lt;/span&gt;HardwareCharacteristics&lt;span class="w"&gt; &lt;/span&gt;represents&lt;span class="w"&gt; &lt;/span&gt;the&lt;span class="w"&gt; &lt;/span&gt;hardware&lt;span class="w"&gt; &lt;/span&gt;characteristics
&lt;span class="w"&gt;    &lt;/span&gt;//&lt;span class="w"&gt; &lt;/span&gt;of&lt;span class="w"&gt; &lt;/span&gt;the&lt;span class="w"&gt; &lt;/span&gt;newly&lt;span class="w"&gt; &lt;/span&gt;created&lt;span class="w"&gt; &lt;/span&gt;instance.
&lt;span class="w"&gt;    &lt;/span&gt;Hardware&lt;span class="w"&gt; &lt;/span&gt;*instance.HardwareCharacteristics

&lt;span class="w"&gt;    &lt;/span&gt;//&lt;span class="w"&gt; &lt;/span&gt;NetworkInfo&lt;span class="w"&gt; &lt;/span&gt;contains&lt;span class="w"&gt; &lt;/span&gt;information&lt;span class="w"&gt; &lt;/span&gt;about&lt;span class="w"&gt; &lt;/span&gt;how&lt;span class="w"&gt; &lt;/span&gt;to&lt;span class="w"&gt; &lt;/span&gt;configure&lt;span class="w"&gt; &lt;/span&gt;network
&lt;span class="w"&gt;    &lt;/span&gt;//&lt;span class="w"&gt; &lt;/span&gt;interfaces&lt;span class="w"&gt; &lt;/span&gt;on&lt;span class="w"&gt; &lt;/span&gt;the&lt;span class="w"&gt; &lt;/span&gt;instance.&lt;span class="w"&gt; &lt;/span&gt;Depending&lt;span class="w"&gt; &lt;/span&gt;on&lt;span class="w"&gt; &lt;/span&gt;the&lt;span class="w"&gt; &lt;/span&gt;provider,&lt;span class="w"&gt; &lt;/span&gt;this
&lt;span class="w"&gt;    &lt;/span&gt;//&lt;span class="w"&gt; &lt;/span&gt;might&lt;span class="w"&gt; &lt;/span&gt;be&lt;span class="w"&gt; &lt;/span&gt;the&lt;span class="w"&gt; &lt;/span&gt;same&lt;span class="w"&gt; &lt;/span&gt;StartInstanceParams.NetworkInfo&lt;span class="w"&gt; &lt;/span&gt;or&lt;span class="w"&gt; &lt;/span&gt;may&lt;span class="w"&gt; &lt;/span&gt;be
&lt;span class="w"&gt;    &lt;/span&gt;//&lt;span class="w"&gt; &lt;/span&gt;modified&lt;span class="w"&gt; &lt;/span&gt;as&lt;span class="w"&gt; &lt;/span&gt;needed.
&lt;span class="w"&gt;    &lt;/span&gt;NetworkInfo&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;[]&lt;/span&gt;network.InterfaceInfo

&lt;span class="w"&gt;    &lt;/span&gt;//&lt;span class="w"&gt; &lt;/span&gt;Volumes&lt;span class="w"&gt; &lt;/span&gt;contains&lt;span class="w"&gt; &lt;/span&gt;a&lt;span class="w"&gt; &lt;/span&gt;list&lt;span class="w"&gt; &lt;/span&gt;of&lt;span class="w"&gt; &lt;/span&gt;volumes&lt;span class="w"&gt; &lt;/span&gt;created,&lt;span class="w"&gt; &lt;/span&gt;each&lt;span class="w"&gt; &lt;/span&gt;one&lt;span class="w"&gt; &lt;/span&gt;having&lt;span class="w"&gt; &lt;/span&gt;the
&lt;span class="w"&gt;    &lt;/span&gt;//&lt;span class="w"&gt; &lt;/span&gt;same&lt;span class="w"&gt; &lt;/span&gt;Name&lt;span class="w"&gt; &lt;/span&gt;as&lt;span class="w"&gt; &lt;/span&gt;one&lt;span class="w"&gt; &lt;/span&gt;of&lt;span class="w"&gt; &lt;/span&gt;the&lt;span class="w"&gt; &lt;/span&gt;VolumeParams&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;in&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;StartInstanceParams.Volumes.
&lt;span class="w"&gt;    &lt;/span&gt;//&lt;span class="w"&gt; &lt;/span&gt;VolumeAttachment&lt;span class="w"&gt; &lt;/span&gt;information&lt;span class="w"&gt; &lt;/span&gt;is&lt;span class="w"&gt; &lt;/span&gt;reported&lt;span class="w"&gt; &lt;/span&gt;separately.
&lt;span class="w"&gt;    &lt;/span&gt;Volumes&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;[]&lt;/span&gt;storage.Volume

&lt;span class="w"&gt;    &lt;/span&gt;//&lt;span class="w"&gt; &lt;/span&gt;VolumeAttachments&lt;span class="w"&gt; &lt;/span&gt;contains&lt;span class="w"&gt; &lt;/span&gt;a&lt;span class="w"&gt; &lt;/span&gt;attachment-specific&lt;span class="w"&gt; &lt;/span&gt;information&lt;span class="w"&gt; &lt;/span&gt;about
&lt;span class="w"&gt;    &lt;/span&gt;//&lt;span class="w"&gt; &lt;/span&gt;volumes&lt;span class="w"&gt; &lt;/span&gt;that&lt;span class="w"&gt; &lt;/span&gt;were&lt;span class="w"&gt; &lt;/span&gt;attached&lt;span class="w"&gt; &lt;/span&gt;to&lt;span class="w"&gt; &lt;/span&gt;the&lt;span class="w"&gt; &lt;/span&gt;started&lt;span class="w"&gt; &lt;/span&gt;instance.
&lt;span class="w"&gt;    &lt;/span&gt;VolumeAttachments&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;[]&lt;/span&gt;storage.VolumeAttachment
&lt;span class="o"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;h3&gt;Hardware characteristics&lt;/h3&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;//&lt;span class="w"&gt; &lt;/span&gt;HardwareCharacteristics&lt;span class="w"&gt; &lt;/span&gt;represents&lt;span class="w"&gt; &lt;/span&gt;the&lt;span class="w"&gt; &lt;/span&gt;characteristics&lt;span class="w"&gt; &lt;/span&gt;of&lt;span class="w"&gt; &lt;/span&gt;the&lt;span class="w"&gt; &lt;/span&gt;instance&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="k"&gt;if&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;known&lt;span class="o"&gt;)&lt;/span&gt;.
//&lt;span class="w"&gt; &lt;/span&gt;Attributes&lt;span class="w"&gt; &lt;/span&gt;that&lt;span class="w"&gt; &lt;/span&gt;are&lt;span class="w"&gt; &lt;/span&gt;nil&lt;span class="w"&gt; &lt;/span&gt;are&lt;span class="w"&gt; &lt;/span&gt;unknown&lt;span class="w"&gt; &lt;/span&gt;or&lt;span class="w"&gt; &lt;/span&gt;not&lt;span class="w"&gt; &lt;/span&gt;supported.
&lt;span class="nb"&gt;type&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;HardwareCharacteristics&lt;span class="w"&gt; &lt;/span&gt;struct&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;{&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;//&lt;span class="w"&gt; &lt;/span&gt;Arch&lt;span class="w"&gt; &lt;/span&gt;is&lt;span class="w"&gt; &lt;/span&gt;the&lt;span class="w"&gt; &lt;/span&gt;architecture&lt;span class="w"&gt; &lt;/span&gt;of&lt;span class="w"&gt; &lt;/span&gt;the&lt;span class="w"&gt; &lt;/span&gt;processor.
&lt;span class="w"&gt;    &lt;/span&gt;Arch&lt;span class="w"&gt; &lt;/span&gt;*string&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="sb"&gt;`&lt;/span&gt;json:&lt;span class="s2"&gt;&amp;quot;arch,omitempty&amp;quot;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;yaml:&lt;span class="s2"&gt;&amp;quot;arch,omitempty&amp;quot;&lt;/span&gt;&lt;span class="sb"&gt;`&lt;/span&gt;

&lt;span class="w"&gt;    &lt;/span&gt;//&lt;span class="w"&gt; &lt;/span&gt;Mem&lt;span class="w"&gt; &lt;/span&gt;is&lt;span class="w"&gt; &lt;/span&gt;the&lt;span class="w"&gt; &lt;/span&gt;size&lt;span class="w"&gt; &lt;/span&gt;of&lt;span class="w"&gt; &lt;/span&gt;RAM&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;in&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;megabytes.
&lt;span class="w"&gt;    &lt;/span&gt;Mem&lt;span class="w"&gt; &lt;/span&gt;*uint64&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="sb"&gt;`&lt;/span&gt;json:&lt;span class="s2"&gt;&amp;quot;mem,omitempty&amp;quot;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;yaml:&lt;span class="s2"&gt;&amp;quot;mem,omitempty&amp;quot;&lt;/span&gt;&lt;span class="sb"&gt;`&lt;/span&gt;

&lt;span class="w"&gt;    &lt;/span&gt;//&lt;span class="w"&gt; &lt;/span&gt;RootDisk&lt;span class="w"&gt; &lt;/span&gt;is&lt;span class="w"&gt; &lt;/span&gt;the&lt;span class="w"&gt; &lt;/span&gt;size&lt;span class="w"&gt; &lt;/span&gt;of&lt;span class="w"&gt; &lt;/span&gt;the&lt;span class="w"&gt; &lt;/span&gt;disk&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;in&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;megabytes.
&lt;span class="w"&gt;    &lt;/span&gt;RootDisk&lt;span class="w"&gt; &lt;/span&gt;*uint64&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="sb"&gt;`&lt;/span&gt;json:&lt;span class="s2"&gt;&amp;quot;root-disk,omitempty&amp;quot;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;yaml:&lt;span class="s2"&gt;&amp;quot;rootdisk,omitempty&amp;quot;&lt;/span&gt;&lt;span class="sb"&gt;`&lt;/span&gt;

&lt;span class="w"&gt;    &lt;/span&gt;//&lt;span class="w"&gt; &lt;/span&gt;CpuCores&lt;span class="w"&gt; &lt;/span&gt;is&lt;span class="w"&gt; &lt;/span&gt;the&lt;span class="w"&gt; &lt;/span&gt;number&lt;span class="w"&gt; &lt;/span&gt;of&lt;span class="w"&gt; &lt;/span&gt;logical&lt;span class="w"&gt; &lt;/span&gt;cores&lt;span class="w"&gt; &lt;/span&gt;the&lt;span class="w"&gt; &lt;/span&gt;processor&lt;span class="w"&gt; &lt;/span&gt;has.
&lt;span class="w"&gt;    &lt;/span&gt;CpuCores&lt;span class="w"&gt; &lt;/span&gt;*uint64&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="sb"&gt;`&lt;/span&gt;json:&lt;span class="s2"&gt;&amp;quot;cpu-cores,omitempty&amp;quot;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;yaml:&lt;span class="s2"&gt;&amp;quot;cpucores,omitempty&amp;quot;&lt;/span&gt;&lt;span class="sb"&gt;`&lt;/span&gt;

&lt;span class="w"&gt;    &lt;/span&gt;//&lt;span class="w"&gt; &lt;/span&gt;CpuPower&lt;span class="w"&gt; &lt;/span&gt;is&lt;span class="w"&gt; &lt;/span&gt;a&lt;span class="w"&gt; &lt;/span&gt;relative&lt;span class="w"&gt; &lt;/span&gt;representation&lt;span class="w"&gt; &lt;/span&gt;of&lt;span class="w"&gt; &lt;/span&gt;the&lt;span class="w"&gt; &lt;/span&gt;speed&lt;span class="w"&gt; &lt;/span&gt;of&lt;span class="w"&gt; &lt;/span&gt;the&lt;span class="w"&gt; &lt;/span&gt;processor.
&lt;span class="w"&gt;    &lt;/span&gt;CpuPower&lt;span class="w"&gt; &lt;/span&gt;*uint64&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="sb"&gt;`&lt;/span&gt;json:&lt;span class="s2"&gt;&amp;quot;cpu-power,omitempty&amp;quot;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;yaml:&lt;span class="s2"&gt;&amp;quot;cpupower,omitempty&amp;quot;&lt;/span&gt;&lt;span class="sb"&gt;`&lt;/span&gt;

&lt;span class="w"&gt;    &lt;/span&gt;//&lt;span class="w"&gt; &lt;/span&gt;Tags&lt;span class="w"&gt; &lt;/span&gt;is&lt;span class="w"&gt; &lt;/span&gt;a&lt;span class="w"&gt; &lt;/span&gt;list&lt;span class="w"&gt; &lt;/span&gt;of&lt;span class="w"&gt; &lt;/span&gt;strings&lt;span class="w"&gt; &lt;/span&gt;that&lt;span class="w"&gt; &lt;/span&gt;identify&lt;span class="w"&gt; &lt;/span&gt;the&lt;span class="w"&gt; &lt;/span&gt;machine.
&lt;span class="w"&gt;    &lt;/span&gt;Tags&lt;span class="w"&gt; &lt;/span&gt;*&lt;span class="o"&gt;[]&lt;/span&gt;string&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="sb"&gt;`&lt;/span&gt;json:&lt;span class="s2"&gt;&amp;quot;tags,omitempty&amp;quot;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;yaml:&lt;span class="s2"&gt;&amp;quot;tags,omitempty&amp;quot;&lt;/span&gt;&lt;span class="sb"&gt;`&lt;/span&gt;

&lt;span class="w"&gt;    &lt;/span&gt;//&lt;span class="w"&gt; &lt;/span&gt;AvailabilityZone&lt;span class="w"&gt; &lt;/span&gt;defines&lt;span class="w"&gt; &lt;/span&gt;the&lt;span class="w"&gt; &lt;/span&gt;zone&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;in&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;which&lt;span class="w"&gt; &lt;/span&gt;the&lt;span class="w"&gt; &lt;/span&gt;machine&lt;span class="w"&gt; &lt;/span&gt;resides.
&lt;span class="w"&gt;    &lt;/span&gt;AvailabilityZone&lt;span class="w"&gt; &lt;/span&gt;*string&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="sb"&gt;`&lt;/span&gt;json:&lt;span class="s2"&gt;&amp;quot;availability-zone,omitempty&amp;quot;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;yaml:&lt;span class="s2"&gt;&amp;quot;availabilityzone,omitempty&amp;quot;&lt;/span&gt;&lt;span class="sb"&gt;`&lt;/span&gt;
&lt;span class="o"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;h3&gt;Network info&lt;/h3&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;//&lt;span class="w"&gt; &lt;/span&gt;InterfaceInfo&lt;span class="w"&gt; &lt;/span&gt;describes&lt;span class="w"&gt; &lt;/span&gt;a&lt;span class="w"&gt; &lt;/span&gt;single&lt;span class="w"&gt; &lt;/span&gt;network&lt;span class="w"&gt; &lt;/span&gt;interface&lt;span class="w"&gt; &lt;/span&gt;available&lt;span class="w"&gt; &lt;/span&gt;on&lt;span class="w"&gt; &lt;/span&gt;an
//&lt;span class="w"&gt; &lt;/span&gt;instance.&lt;span class="w"&gt; &lt;/span&gt;For&lt;span class="w"&gt; &lt;/span&gt;providers&lt;span class="w"&gt; &lt;/span&gt;that&lt;span class="w"&gt; &lt;/span&gt;support&lt;span class="w"&gt; &lt;/span&gt;networks,&lt;span class="w"&gt; &lt;/span&gt;this&lt;span class="w"&gt; &lt;/span&gt;will&lt;span class="w"&gt; &lt;/span&gt;be
//&lt;span class="w"&gt; &lt;/span&gt;available&lt;span class="w"&gt; &lt;/span&gt;at&lt;span class="w"&gt; &lt;/span&gt;StartInstance&lt;span class="o"&gt;()&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;time.
//&lt;span class="w"&gt; &lt;/span&gt;TODO&lt;span class="o"&gt;(&lt;/span&gt;mue&lt;span class="o"&gt;)&lt;/span&gt;:&lt;span class="w"&gt; &lt;/span&gt;Rename&lt;span class="w"&gt; &lt;/span&gt;to&lt;span class="w"&gt; &lt;/span&gt;InterfaceConfig&lt;span class="w"&gt; &lt;/span&gt;due&lt;span class="w"&gt; &lt;/span&gt;to&lt;span class="w"&gt; &lt;/span&gt;consistency&lt;span class="w"&gt; &lt;/span&gt;later.
&lt;span class="nb"&gt;type&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;InterfaceInfo&lt;span class="w"&gt; &lt;/span&gt;struct&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;{&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;//&lt;span class="w"&gt; &lt;/span&gt;DeviceIndex&lt;span class="w"&gt; &lt;/span&gt;specifies&lt;span class="w"&gt; &lt;/span&gt;the&lt;span class="w"&gt; &lt;/span&gt;order&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;in&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;which&lt;span class="w"&gt; &lt;/span&gt;the&lt;span class="w"&gt; &lt;/span&gt;network&lt;span class="w"&gt; &lt;/span&gt;interface
&lt;span class="w"&gt;    &lt;/span&gt;//&lt;span class="w"&gt; &lt;/span&gt;appears&lt;span class="w"&gt; &lt;/span&gt;on&lt;span class="w"&gt; &lt;/span&gt;the&lt;span class="w"&gt; &lt;/span&gt;host.&lt;span class="w"&gt; &lt;/span&gt;The&lt;span class="w"&gt; &lt;/span&gt;primary&lt;span class="w"&gt; &lt;/span&gt;interface&lt;span class="w"&gt; &lt;/span&gt;has&lt;span class="w"&gt; &lt;/span&gt;an&lt;span class="w"&gt; &lt;/span&gt;index&lt;span class="w"&gt; &lt;/span&gt;of&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="m"&gt;0&lt;/span&gt;.
&lt;span class="w"&gt;    &lt;/span&gt;DeviceIndex&lt;span class="w"&gt; &lt;/span&gt;int

&lt;span class="w"&gt;    &lt;/span&gt;//&lt;span class="w"&gt; &lt;/span&gt;MACAddress&lt;span class="w"&gt; &lt;/span&gt;is&lt;span class="w"&gt; &lt;/span&gt;the&lt;span class="w"&gt; &lt;/span&gt;network&lt;span class="w"&gt; &lt;/span&gt;interface&lt;span class="s1"&gt;&amp;#39;s hardware MAC address&lt;/span&gt;
&lt;span class="s1"&gt;    // (e.g. &amp;quot;aa:bb:cc:dd:ee:ff&amp;quot;).&lt;/span&gt;
&lt;span class="s1"&gt;    MACAddress string&lt;/span&gt;

&lt;span class="s1"&gt;    // CIDR of the network, in 123.45.67.89/24 format.&lt;/span&gt;
&lt;span class="s1"&gt;    CIDR string&lt;/span&gt;

&lt;span class="s1"&gt;    // ProviderId is a provider-specific NIC id.&lt;/span&gt;
&lt;span class="s1"&gt;    ProviderId Id&lt;/span&gt;

&lt;span class="s1"&gt;    // ProviderSubnetId is the provider-specific id for the associated&lt;/span&gt;
&lt;span class="s1"&gt;    // subnet.&lt;/span&gt;
&lt;span class="s1"&gt;    ProviderSubnetId Id&lt;/span&gt;

&lt;span class="s1"&gt;    // ProviderSpaceId is the provider-specific id for the associated space, if&lt;/span&gt;
&lt;span class="s1"&gt;    // known and supported.&lt;/span&gt;
&lt;span class="s1"&gt;    ProviderSpaceId Id&lt;/span&gt;

&lt;span class="s1"&gt;    // ProviderVLANId is the provider-specific id of the VLAN for this&lt;/span&gt;
&lt;span class="s1"&gt;    // interface.&lt;/span&gt;
&lt;span class="s1"&gt;    ProviderVLANId Id&lt;/span&gt;

&lt;span class="s1"&gt;    // ProviderAddressId is the provider-specific id of the assigned address.&lt;/span&gt;
&lt;span class="s1"&gt;    ProviderAddressId Id&lt;/span&gt;

&lt;span class="s1"&gt;    // AvailabilityZones describes the availability zones the associated&lt;/span&gt;
&lt;span class="s1"&gt;    // subnet is in.&lt;/span&gt;
&lt;span class="s1"&gt;    AvailabilityZones []string&lt;/span&gt;

&lt;span class="s1"&gt;    // VLANTag needs to be between 1 and 4094 for VLANs and 0 for&lt;/span&gt;
&lt;span class="s1"&gt;    // normal networks. It&amp;#39;&lt;/span&gt;s&lt;span class="w"&gt; &lt;/span&gt;defined&lt;span class="w"&gt; &lt;/span&gt;by&lt;span class="w"&gt; &lt;/span&gt;IEEE&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="m"&gt;802&lt;/span&gt;.1Q&lt;span class="w"&gt; &lt;/span&gt;standard.
&lt;span class="w"&gt;    &lt;/span&gt;VLANTag&lt;span class="w"&gt; &lt;/span&gt;int

&lt;span class="w"&gt;    &lt;/span&gt;//&lt;span class="w"&gt; &lt;/span&gt;InterfaceName&lt;span class="w"&gt; &lt;/span&gt;is&lt;span class="w"&gt; &lt;/span&gt;the&lt;span class="w"&gt; &lt;/span&gt;raw&lt;span class="w"&gt; &lt;/span&gt;OS-specific&lt;span class="w"&gt; &lt;/span&gt;network&lt;span class="w"&gt; &lt;/span&gt;device&lt;span class="w"&gt; &lt;/span&gt;name&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;e.g.
&lt;span class="w"&gt;    &lt;/span&gt;//&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;eth1&amp;quot;&lt;/span&gt;,&lt;span class="w"&gt; &lt;/span&gt;even&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;for&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;a&lt;span class="w"&gt; &lt;/span&gt;VLAN&lt;span class="w"&gt; &lt;/span&gt;eth1.42&lt;span class="w"&gt; &lt;/span&gt;virtual&lt;span class="w"&gt; &lt;/span&gt;interface&lt;span class="o"&gt;)&lt;/span&gt;.
&lt;span class="w"&gt;    &lt;/span&gt;InterfaceName&lt;span class="w"&gt; &lt;/span&gt;string

&lt;span class="w"&gt;    &lt;/span&gt;//&lt;span class="w"&gt; &lt;/span&gt;ParentInterfaceName&lt;span class="w"&gt; &lt;/span&gt;is&lt;span class="w"&gt; &lt;/span&gt;the&lt;span class="w"&gt; &lt;/span&gt;name&lt;span class="w"&gt; &lt;/span&gt;of&lt;span class="w"&gt; &lt;/span&gt;the&lt;span class="w"&gt; &lt;/span&gt;parent&lt;span class="w"&gt; &lt;/span&gt;interface&lt;span class="w"&gt; &lt;/span&gt;to&lt;span class="w"&gt; &lt;/span&gt;use,&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;if&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;known.
&lt;span class="w"&gt;    &lt;/span&gt;ParentInterfaceName&lt;span class="w"&gt; &lt;/span&gt;string

&lt;span class="w"&gt;    &lt;/span&gt;//&lt;span class="w"&gt; &lt;/span&gt;InterfaceType&lt;span class="w"&gt; &lt;/span&gt;is&lt;span class="w"&gt; &lt;/span&gt;the&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nb"&gt;type&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;of&lt;span class="w"&gt; &lt;/span&gt;the&lt;span class="w"&gt; &lt;/span&gt;interface.
&lt;span class="w"&gt;    &lt;/span&gt;InterfaceType&lt;span class="w"&gt; &lt;/span&gt;InterfaceType

&lt;span class="w"&gt;    &lt;/span&gt;//&lt;span class="w"&gt; &lt;/span&gt;Disabled&lt;span class="w"&gt; &lt;/span&gt;is&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nb"&gt;true&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;when&lt;span class="w"&gt; &lt;/span&gt;the&lt;span class="w"&gt; &lt;/span&gt;interface&lt;span class="w"&gt; &lt;/span&gt;needs&lt;span class="w"&gt; &lt;/span&gt;to&lt;span class="w"&gt; &lt;/span&gt;be&lt;span class="w"&gt; &lt;/span&gt;disabled&lt;span class="w"&gt; &lt;/span&gt;on&lt;span class="w"&gt; &lt;/span&gt;the
&lt;span class="w"&gt;    &lt;/span&gt;//&lt;span class="w"&gt; &lt;/span&gt;machine,&lt;span class="w"&gt; &lt;/span&gt;e.g.&lt;span class="w"&gt; &lt;/span&gt;not&lt;span class="w"&gt; &lt;/span&gt;to&lt;span class="w"&gt; &lt;/span&gt;configure&lt;span class="w"&gt; &lt;/span&gt;it.
&lt;span class="w"&gt;    &lt;/span&gt;Disabled&lt;span class="w"&gt; &lt;/span&gt;bool

&lt;span class="w"&gt;    &lt;/span&gt;//&lt;span class="w"&gt; &lt;/span&gt;NoAutoStart&lt;span class="w"&gt; &lt;/span&gt;is&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nb"&gt;true&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;when&lt;span class="w"&gt; &lt;/span&gt;the&lt;span class="w"&gt; &lt;/span&gt;interface&lt;span class="w"&gt; &lt;/span&gt;should&lt;span class="w"&gt; &lt;/span&gt;not&lt;span class="w"&gt; &lt;/span&gt;be&lt;span class="w"&gt; &lt;/span&gt;configured
&lt;span class="w"&gt;    &lt;/span&gt;//&lt;span class="w"&gt; &lt;/span&gt;to&lt;span class="w"&gt; &lt;/span&gt;start&lt;span class="w"&gt; &lt;/span&gt;automatically&lt;span class="w"&gt; &lt;/span&gt;on&lt;span class="w"&gt; &lt;/span&gt;boot.&lt;span class="w"&gt; &lt;/span&gt;By&lt;span class="w"&gt; &lt;/span&gt;default&lt;span class="w"&gt; &lt;/span&gt;and&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;for&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;//&lt;span class="w"&gt; &lt;/span&gt;backwards-compatibility,&lt;span class="w"&gt; &lt;/span&gt;interfaces&lt;span class="w"&gt; &lt;/span&gt;are&lt;span class="w"&gt; &lt;/span&gt;configured&lt;span class="w"&gt; &lt;/span&gt;to
&lt;span class="w"&gt;    &lt;/span&gt;//&lt;span class="w"&gt; &lt;/span&gt;auto-start.
&lt;span class="w"&gt;    &lt;/span&gt;NoAutoStart&lt;span class="w"&gt; &lt;/span&gt;bool

&lt;span class="w"&gt;    &lt;/span&gt;//&lt;span class="w"&gt; &lt;/span&gt;ConfigType&lt;span class="w"&gt; &lt;/span&gt;determines&lt;span class="w"&gt; &lt;/span&gt;whether&lt;span class="w"&gt; &lt;/span&gt;the&lt;span class="w"&gt; &lt;/span&gt;interface&lt;span class="w"&gt; &lt;/span&gt;should&lt;span class="w"&gt; &lt;/span&gt;be
&lt;span class="w"&gt;    &lt;/span&gt;//&lt;span class="w"&gt; &lt;/span&gt;configured&lt;span class="w"&gt; &lt;/span&gt;via&lt;span class="w"&gt; &lt;/span&gt;DHCP,&lt;span class="w"&gt; &lt;/span&gt;statically,&lt;span class="w"&gt; &lt;/span&gt;manually,&lt;span class="w"&gt; &lt;/span&gt;etc.&lt;span class="w"&gt; &lt;/span&gt;See
&lt;span class="w"&gt;    &lt;/span&gt;//&lt;span class="w"&gt; &lt;/span&gt;interfaces&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="m"&gt;5&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;for&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;more&lt;span class="w"&gt; &lt;/span&gt;information.
&lt;span class="w"&gt;    &lt;/span&gt;ConfigType&lt;span class="w"&gt; &lt;/span&gt;InterfaceConfigType

&lt;span class="w"&gt;    &lt;/span&gt;//&lt;span class="w"&gt; &lt;/span&gt;Address&lt;span class="w"&gt; &lt;/span&gt;contains&lt;span class="w"&gt; &lt;/span&gt;an&lt;span class="w"&gt; &lt;/span&gt;optional&lt;span class="w"&gt; &lt;/span&gt;static&lt;span class="w"&gt; &lt;/span&gt;IP&lt;span class="w"&gt; &lt;/span&gt;address&lt;span class="w"&gt; &lt;/span&gt;to&lt;span class="w"&gt; &lt;/span&gt;configure&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;for&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;//&lt;span class="w"&gt; &lt;/span&gt;this&lt;span class="w"&gt; &lt;/span&gt;network&lt;span class="w"&gt; &lt;/span&gt;interface.&lt;span class="w"&gt; &lt;/span&gt;The&lt;span class="w"&gt; &lt;/span&gt;subnet&lt;span class="w"&gt; &lt;/span&gt;mask&lt;span class="w"&gt; &lt;/span&gt;to&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nb"&gt;set&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;will&lt;span class="w"&gt; &lt;/span&gt;be&lt;span class="w"&gt; &lt;/span&gt;inferred
&lt;span class="w"&gt;    &lt;/span&gt;//&lt;span class="w"&gt; &lt;/span&gt;from&lt;span class="w"&gt; &lt;/span&gt;the&lt;span class="w"&gt; &lt;/span&gt;CIDR&lt;span class="w"&gt; &lt;/span&gt;value.
&lt;span class="w"&gt;    &lt;/span&gt;Address&lt;span class="w"&gt; &lt;/span&gt;Address

&lt;span class="w"&gt;    &lt;/span&gt;//&lt;span class="w"&gt; &lt;/span&gt;DNSServers&lt;span class="w"&gt; &lt;/span&gt;contains&lt;span class="w"&gt; &lt;/span&gt;an&lt;span class="w"&gt; &lt;/span&gt;optional&lt;span class="w"&gt; &lt;/span&gt;list&lt;span class="w"&gt; &lt;/span&gt;of&lt;span class="w"&gt; &lt;/span&gt;IP&lt;span class="w"&gt; &lt;/span&gt;addresses&lt;span class="w"&gt; &lt;/span&gt;and/or
&lt;span class="w"&gt;    &lt;/span&gt;//&lt;span class="w"&gt; &lt;/span&gt;hostnames&lt;span class="w"&gt; &lt;/span&gt;to&lt;span class="w"&gt; &lt;/span&gt;configure&lt;span class="w"&gt; &lt;/span&gt;as&lt;span class="w"&gt; &lt;/span&gt;DNS&lt;span class="w"&gt; &lt;/span&gt;servers&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;for&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;this&lt;span class="w"&gt; &lt;/span&gt;network
&lt;span class="w"&gt;    &lt;/span&gt;//&lt;span class="w"&gt; &lt;/span&gt;interface.
&lt;span class="w"&gt;    &lt;/span&gt;DNSServers&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;[]&lt;/span&gt;Address

&lt;span class="w"&gt;    &lt;/span&gt;//&lt;span class="w"&gt; &lt;/span&gt;MTU&lt;span class="w"&gt; &lt;/span&gt;is&lt;span class="w"&gt; &lt;/span&gt;the&lt;span class="w"&gt; &lt;/span&gt;Maximum&lt;span class="w"&gt; &lt;/span&gt;Transmission&lt;span class="w"&gt; &lt;/span&gt;Unit&lt;span class="w"&gt; &lt;/span&gt;controlling&lt;span class="w"&gt; &lt;/span&gt;the&lt;span class="w"&gt; &lt;/span&gt;maximum&lt;span class="w"&gt; &lt;/span&gt;size&lt;span class="w"&gt; &lt;/span&gt;of&lt;span class="w"&gt; &lt;/span&gt;the
&lt;span class="w"&gt;    &lt;/span&gt;//&lt;span class="w"&gt; &lt;/span&gt;protocol&lt;span class="w"&gt; &lt;/span&gt;packats&lt;span class="w"&gt; &lt;/span&gt;that&lt;span class="w"&gt; &lt;/span&gt;the&lt;span class="w"&gt; &lt;/span&gt;interface&lt;span class="w"&gt; &lt;/span&gt;can&lt;span class="w"&gt; &lt;/span&gt;pass&lt;span class="w"&gt; &lt;/span&gt;through.&lt;span class="w"&gt; &lt;/span&gt;It&lt;span class="w"&gt; &lt;/span&gt;is&lt;span class="w"&gt; &lt;/span&gt;only&lt;span class="w"&gt; &lt;/span&gt;used
&lt;span class="w"&gt;    &lt;/span&gt;//&lt;span class="w"&gt; &lt;/span&gt;when&lt;span class="w"&gt; &lt;/span&gt;&amp;gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="m"&gt;0&lt;/span&gt;.
&lt;span class="w"&gt;    &lt;/span&gt;MTU&lt;span class="w"&gt; &lt;/span&gt;int

&lt;span class="w"&gt;    &lt;/span&gt;//&lt;span class="w"&gt; &lt;/span&gt;DNSSearchDomains&lt;span class="w"&gt; &lt;/span&gt;contains&lt;span class="w"&gt; &lt;/span&gt;the&lt;span class="w"&gt; &lt;/span&gt;default&lt;span class="w"&gt; &lt;/span&gt;DNS&lt;span class="w"&gt; &lt;/span&gt;domain&lt;span class="w"&gt; &lt;/span&gt;to&lt;span class="w"&gt; &lt;/span&gt;use&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;for&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;non-FQDN
&lt;span class="w"&gt;    &lt;/span&gt;//&lt;span class="w"&gt; &lt;/span&gt;lookups.
&lt;span class="w"&gt;    &lt;/span&gt;DNSSearchDomains&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;[]&lt;/span&gt;string

&lt;span class="w"&gt;    &lt;/span&gt;//&lt;span class="w"&gt; &lt;/span&gt;Gateway&lt;span class="w"&gt; &lt;/span&gt;address,&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;if&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;set,&lt;span class="w"&gt; &lt;/span&gt;defines&lt;span class="w"&gt; &lt;/span&gt;the&lt;span class="w"&gt; &lt;/span&gt;default&lt;span class="w"&gt; &lt;/span&gt;gateway&lt;span class="w"&gt; &lt;/span&gt;to
&lt;span class="w"&gt;    &lt;/span&gt;//&lt;span class="w"&gt; &lt;/span&gt;configure&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;for&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;this&lt;span class="w"&gt; &lt;/span&gt;network&lt;span class="w"&gt; &lt;/span&gt;interface.&lt;span class="w"&gt; &lt;/span&gt;For&lt;span class="w"&gt; &lt;/span&gt;containers&lt;span class="w"&gt; &lt;/span&gt;this
&lt;span class="w"&gt;    &lt;/span&gt;//&lt;span class="w"&gt; &lt;/span&gt;usually&lt;span class="w"&gt; &lt;/span&gt;is&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;one&lt;span class="w"&gt; &lt;/span&gt;of&lt;span class="o"&gt;)&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;the&lt;span class="w"&gt; &lt;/span&gt;host&lt;span class="w"&gt; &lt;/span&gt;address&lt;span class="o"&gt;(&lt;/span&gt;es&lt;span class="o"&gt;)&lt;/span&gt;.
&lt;span class="w"&gt;    &lt;/span&gt;GatewayAddress&lt;span class="w"&gt; &lt;/span&gt;Address
&lt;span class="o"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;h3&gt;Storage volume&lt;/h3&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;//&lt;span class="w"&gt; &lt;/span&gt;Volume&lt;span class="w"&gt; &lt;/span&gt;identifies&lt;span class="w"&gt; &lt;/span&gt;and&lt;span class="w"&gt; &lt;/span&gt;describes&lt;span class="w"&gt; &lt;/span&gt;a&lt;span class="w"&gt; &lt;/span&gt;volume&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;disk,&lt;span class="w"&gt; &lt;/span&gt;logical&lt;span class="w"&gt; &lt;/span&gt;volume,&lt;span class="w"&gt; &lt;/span&gt;etc.&lt;span class="o"&gt;)&lt;/span&gt;
&lt;span class="nb"&gt;type&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;Volume&lt;span class="w"&gt; &lt;/span&gt;struct&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;{&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;//&lt;span class="w"&gt; &lt;/span&gt;Name&lt;span class="w"&gt; &lt;/span&gt;is&lt;span class="w"&gt; &lt;/span&gt;a&lt;span class="w"&gt; &lt;/span&gt;unique&lt;span class="w"&gt; &lt;/span&gt;name&lt;span class="w"&gt; &lt;/span&gt;assigned&lt;span class="w"&gt; &lt;/span&gt;by&lt;span class="w"&gt; &lt;/span&gt;Juju&lt;span class="w"&gt; &lt;/span&gt;to&lt;span class="w"&gt; &lt;/span&gt;the&lt;span class="w"&gt; &lt;/span&gt;volume.
&lt;span class="w"&gt;    &lt;/span&gt;Tag&lt;span class="w"&gt; &lt;/span&gt;names.VolumeTag

&lt;span class="w"&gt;    &lt;/span&gt;VolumeInfo
&lt;span class="o"&gt;}&lt;/span&gt;

//&lt;span class="w"&gt; &lt;/span&gt;VolumeInfo&lt;span class="w"&gt; &lt;/span&gt;describes&lt;span class="w"&gt; &lt;/span&gt;a&lt;span class="w"&gt; &lt;/span&gt;volume&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;disk,&lt;span class="w"&gt; &lt;/span&gt;logical&lt;span class="w"&gt; &lt;/span&gt;volume&lt;span class="w"&gt; &lt;/span&gt;etc.&lt;span class="o"&gt;)&lt;/span&gt;
&lt;span class="nb"&gt;type&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;VolumeInfo&lt;span class="w"&gt; &lt;/span&gt;struct&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;{&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;//&lt;span class="w"&gt; &lt;/span&gt;VolumeId&lt;span class="w"&gt; &lt;/span&gt;is&lt;span class="w"&gt; &lt;/span&gt;a&lt;span class="w"&gt; &lt;/span&gt;unique&lt;span class="w"&gt; &lt;/span&gt;provider-supplied&lt;span class="w"&gt; &lt;/span&gt;ID&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;for&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;the&lt;span class="w"&gt; &lt;/span&gt;volume.
&lt;span class="w"&gt;    &lt;/span&gt;//&lt;span class="w"&gt; &lt;/span&gt;VolumeId&lt;span class="w"&gt; &lt;/span&gt;is&lt;span class="w"&gt; &lt;/span&gt;required&lt;span class="w"&gt; &lt;/span&gt;to&lt;span class="w"&gt; &lt;/span&gt;be&lt;span class="w"&gt; &lt;/span&gt;unique&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;for&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;the&lt;span class="w"&gt; &lt;/span&gt;lifetime&lt;span class="w"&gt; &lt;/span&gt;of&lt;span class="w"&gt; &lt;/span&gt;the
&lt;span class="w"&gt;    &lt;/span&gt;//&lt;span class="w"&gt; &lt;/span&gt;volume,&lt;span class="w"&gt; &lt;/span&gt;but&lt;span class="w"&gt; &lt;/span&gt;may&lt;span class="w"&gt; &lt;/span&gt;be&lt;span class="w"&gt; &lt;/span&gt;reused.
&lt;span class="w"&gt;    &lt;/span&gt;VolumeId&lt;span class="w"&gt; &lt;/span&gt;string

&lt;span class="w"&gt;    &lt;/span&gt;//&lt;span class="w"&gt; &lt;/span&gt;HardwareId&lt;span class="w"&gt; &lt;/span&gt;is&lt;span class="w"&gt; &lt;/span&gt;the&lt;span class="w"&gt; &lt;/span&gt;volume&lt;span class="err"&gt;&amp;#39;&lt;/span&gt;s&lt;span class="w"&gt; &lt;/span&gt;hardware&lt;span class="w"&gt; &lt;/span&gt;ID.&lt;span class="w"&gt; &lt;/span&gt;Not&lt;span class="w"&gt; &lt;/span&gt;all&lt;span class="w"&gt; &lt;/span&gt;volumes&lt;span class="w"&gt; &lt;/span&gt;have
&lt;span class="w"&gt;    &lt;/span&gt;//&lt;span class="w"&gt; &lt;/span&gt;a&lt;span class="w"&gt; &lt;/span&gt;hardware&lt;span class="w"&gt; &lt;/span&gt;ID,&lt;span class="w"&gt; &lt;/span&gt;so&lt;span class="w"&gt; &lt;/span&gt;this&lt;span class="w"&gt; &lt;/span&gt;may&lt;span class="w"&gt; &lt;/span&gt;be&lt;span class="w"&gt; &lt;/span&gt;left&lt;span class="w"&gt; &lt;/span&gt;blank.
&lt;span class="w"&gt;    &lt;/span&gt;HardwareId&lt;span class="w"&gt; &lt;/span&gt;string

&lt;span class="w"&gt;    &lt;/span&gt;//&lt;span class="w"&gt; &lt;/span&gt;Size&lt;span class="w"&gt; &lt;/span&gt;is&lt;span class="w"&gt; &lt;/span&gt;the&lt;span class="w"&gt; &lt;/span&gt;size&lt;span class="w"&gt; &lt;/span&gt;of&lt;span class="w"&gt; &lt;/span&gt;the&lt;span class="w"&gt; &lt;/span&gt;volume,&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;in&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;MiB.
&lt;span class="w"&gt;    &lt;/span&gt;Size&lt;span class="w"&gt; &lt;/span&gt;uint64

&lt;span class="w"&gt;    &lt;/span&gt;//&lt;span class="w"&gt; &lt;/span&gt;Persistent&lt;span class="w"&gt; &lt;/span&gt;reflects&lt;span class="w"&gt; &lt;/span&gt;whether&lt;span class="w"&gt; &lt;/span&gt;the&lt;span class="w"&gt; &lt;/span&gt;volume&lt;span class="w"&gt; &lt;/span&gt;is&lt;span class="w"&gt; &lt;/span&gt;destroyed&lt;span class="w"&gt; &lt;/span&gt;with&lt;span class="w"&gt; &lt;/span&gt;the
&lt;span class="w"&gt;    &lt;/span&gt;//&lt;span class="w"&gt; &lt;/span&gt;machine&lt;span class="w"&gt; &lt;/span&gt;to&lt;span class="w"&gt; &lt;/span&gt;which&lt;span class="w"&gt; &lt;/span&gt;it&lt;span class="w"&gt; &lt;/span&gt;is&lt;span class="w"&gt; &lt;/span&gt;attached.
&lt;span class="w"&gt;    &lt;/span&gt;Persistent&lt;span class="w"&gt; &lt;/span&gt;bool
&lt;span class="o"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;h3&gt;Storage volume attachment&lt;/h3&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;//&lt;span class="w"&gt; &lt;/span&gt;VolumeAttachment&lt;span class="w"&gt; &lt;/span&gt;identifies&lt;span class="w"&gt; &lt;/span&gt;and&lt;span class="w"&gt; &lt;/span&gt;describes&lt;span class="w"&gt; &lt;/span&gt;machine-specific&lt;span class="w"&gt; &lt;/span&gt;volume
//&lt;span class="w"&gt; &lt;/span&gt;attachment&lt;span class="w"&gt; &lt;/span&gt;information,&lt;span class="w"&gt; &lt;/span&gt;including&lt;span class="w"&gt; &lt;/span&gt;how&lt;span class="w"&gt; &lt;/span&gt;the&lt;span class="w"&gt; &lt;/span&gt;volume&lt;span class="w"&gt; &lt;/span&gt;is&lt;span class="w"&gt; &lt;/span&gt;exposed&lt;span class="w"&gt; &lt;/span&gt;on&lt;span class="w"&gt; &lt;/span&gt;the
//&lt;span class="w"&gt; &lt;/span&gt;machine.
&lt;span class="nb"&gt;type&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;VolumeAttachment&lt;span class="w"&gt; &lt;/span&gt;struct&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;{&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;//&lt;span class="w"&gt; &lt;/span&gt;Volume&lt;span class="w"&gt; &lt;/span&gt;is&lt;span class="w"&gt; &lt;/span&gt;the&lt;span class="w"&gt; &lt;/span&gt;unique&lt;span class="w"&gt; &lt;/span&gt;tag&lt;span class="w"&gt; &lt;/span&gt;assigned&lt;span class="w"&gt; &lt;/span&gt;by&lt;span class="w"&gt; &lt;/span&gt;Juju&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;for&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;the&lt;span class="w"&gt; &lt;/span&gt;volume
&lt;span class="w"&gt;    &lt;/span&gt;//&lt;span class="w"&gt; &lt;/span&gt;that&lt;span class="w"&gt; &lt;/span&gt;this&lt;span class="w"&gt; &lt;/span&gt;attachment&lt;span class="w"&gt; &lt;/span&gt;corresponds&lt;span class="w"&gt; &lt;/span&gt;to.
&lt;span class="w"&gt;    &lt;/span&gt;Volume&lt;span class="w"&gt; &lt;/span&gt;names.VolumeTag

&lt;span class="w"&gt;    &lt;/span&gt;//&lt;span class="w"&gt; &lt;/span&gt;Machine&lt;span class="w"&gt; &lt;/span&gt;is&lt;span class="w"&gt; &lt;/span&gt;the&lt;span class="w"&gt; &lt;/span&gt;unique&lt;span class="w"&gt; &lt;/span&gt;tag&lt;span class="w"&gt; &lt;/span&gt;assigned&lt;span class="w"&gt; &lt;/span&gt;by&lt;span class="w"&gt; &lt;/span&gt;Juju&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;for&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;the&lt;span class="w"&gt; &lt;/span&gt;machine&lt;span class="w"&gt; &lt;/span&gt;that
&lt;span class="w"&gt;    &lt;/span&gt;//&lt;span class="w"&gt; &lt;/span&gt;this&lt;span class="w"&gt; &lt;/span&gt;attachment&lt;span class="w"&gt; &lt;/span&gt;corresponds&lt;span class="w"&gt; &lt;/span&gt;to.
&lt;span class="w"&gt;    &lt;/span&gt;Machine&lt;span class="w"&gt; &lt;/span&gt;names.MachineTag

&lt;span class="w"&gt;    &lt;/span&gt;VolumeAttachmentInfo
&lt;span class="o"&gt;}&lt;/span&gt;

//&lt;span class="w"&gt; &lt;/span&gt;VolumeAttachmentInfo&lt;span class="w"&gt; &lt;/span&gt;describes&lt;span class="w"&gt; &lt;/span&gt;machine-specific&lt;span class="w"&gt; &lt;/span&gt;volume&lt;span class="w"&gt; &lt;/span&gt;attachment
//&lt;span class="w"&gt; &lt;/span&gt;information,&lt;span class="w"&gt; &lt;/span&gt;including&lt;span class="w"&gt; &lt;/span&gt;how&lt;span class="w"&gt; &lt;/span&gt;the&lt;span class="w"&gt; &lt;/span&gt;volume&lt;span class="w"&gt; &lt;/span&gt;is&lt;span class="w"&gt; &lt;/span&gt;exposed&lt;span class="w"&gt; &lt;/span&gt;on&lt;span class="w"&gt; &lt;/span&gt;the&lt;span class="w"&gt; &lt;/span&gt;machine.
&lt;span class="nb"&gt;type&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;VolumeAttachmentInfo&lt;span class="w"&gt; &lt;/span&gt;struct&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;{&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;//&lt;span class="w"&gt; &lt;/span&gt;DeviceName&lt;span class="w"&gt; &lt;/span&gt;is&lt;span class="w"&gt; &lt;/span&gt;the&lt;span class="w"&gt; &lt;/span&gt;volume&lt;span class="s1"&gt;&amp;#39;s OS-specific device name (e.g. &amp;quot;sdb&amp;quot;).&lt;/span&gt;
&lt;span class="s1"&gt;    //&lt;/span&gt;
&lt;span class="s1"&gt;    // If the device name may change (e.g. on machine restart), then this&lt;/span&gt;
&lt;span class="s1"&gt;    // field must be left blank.&lt;/span&gt;
&lt;span class="s1"&gt;    DeviceName string&lt;/span&gt;

&lt;span class="s1"&gt;    // DeviceLink is an OS-specific device link that must exactly match&lt;/span&gt;
&lt;span class="s1"&gt;    // one of the block device&amp;#39;&lt;/span&gt;s&lt;span class="w"&gt; &lt;/span&gt;links&lt;span class="w"&gt; &lt;/span&gt;when&lt;span class="w"&gt; &lt;/span&gt;attached.
&lt;span class="w"&gt;    &lt;/span&gt;//
&lt;span class="w"&gt;    &lt;/span&gt;//&lt;span class="w"&gt; &lt;/span&gt;If&lt;span class="w"&gt; &lt;/span&gt;no&lt;span class="w"&gt; &lt;/span&gt;device&lt;span class="w"&gt; &lt;/span&gt;link&lt;span class="w"&gt; &lt;/span&gt;is&lt;span class="w"&gt; &lt;/span&gt;known,&lt;span class="w"&gt; &lt;/span&gt;or&lt;span class="w"&gt; &lt;/span&gt;it&lt;span class="w"&gt; &lt;/span&gt;may&lt;span class="w"&gt; &lt;/span&gt;change&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;e.g.&lt;span class="w"&gt; &lt;/span&gt;on&lt;span class="w"&gt; &lt;/span&gt;machine
&lt;span class="w"&gt;    &lt;/span&gt;//&lt;span class="w"&gt; &lt;/span&gt;restart&lt;span class="o"&gt;)&lt;/span&gt;,&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;then&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;this&lt;span class="w"&gt; &lt;/span&gt;field&lt;span class="w"&gt; &lt;/span&gt;must&lt;span class="w"&gt; &lt;/span&gt;be&lt;span class="w"&gt; &lt;/span&gt;left&lt;span class="w"&gt; &lt;/span&gt;blank.
&lt;span class="w"&gt;    &lt;/span&gt;DeviceLink&lt;span class="w"&gt; &lt;/span&gt;string

&lt;span class="w"&gt;    &lt;/span&gt;//&lt;span class="w"&gt; &lt;/span&gt;BusAddress&lt;span class="w"&gt; &lt;/span&gt;is&lt;span class="w"&gt; &lt;/span&gt;the&lt;span class="w"&gt; &lt;/span&gt;bus&lt;span class="w"&gt; &lt;/span&gt;address,&lt;span class="w"&gt; &lt;/span&gt;where&lt;span class="w"&gt; &lt;/span&gt;the&lt;span class="w"&gt; &lt;/span&gt;volume&lt;span class="w"&gt; &lt;/span&gt;is&lt;span class="w"&gt; &lt;/span&gt;attached&lt;span class="w"&gt; &lt;/span&gt;to
&lt;span class="w"&gt;    &lt;/span&gt;//&lt;span class="w"&gt; &lt;/span&gt;the&lt;span class="w"&gt; &lt;/span&gt;machine.
&lt;span class="w"&gt;    &lt;/span&gt;//
&lt;span class="w"&gt;    &lt;/span&gt;//&lt;span class="w"&gt; &lt;/span&gt;The&lt;span class="w"&gt; &lt;/span&gt;format&lt;span class="w"&gt; &lt;/span&gt;of&lt;span class="w"&gt; &lt;/span&gt;this&lt;span class="w"&gt; &lt;/span&gt;field&lt;span class="w"&gt; &lt;/span&gt;must&lt;span class="w"&gt; &lt;/span&gt;match&lt;span class="w"&gt; &lt;/span&gt;the&lt;span class="w"&gt; &lt;/span&gt;field&lt;span class="w"&gt; &lt;/span&gt;of&lt;span class="w"&gt; &lt;/span&gt;the&lt;span class="w"&gt; &lt;/span&gt;same&lt;span class="w"&gt; &lt;/span&gt;name
&lt;span class="w"&gt;    &lt;/span&gt;//&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;in&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;BlockDevice.
&lt;span class="w"&gt;    &lt;/span&gt;BusAddress&lt;span class="w"&gt; &lt;/span&gt;string

&lt;span class="w"&gt;    &lt;/span&gt;//&lt;span class="w"&gt; &lt;/span&gt;ReadOnly&lt;span class="w"&gt; &lt;/span&gt;signifies&lt;span class="w"&gt; &lt;/span&gt;whether&lt;span class="w"&gt; &lt;/span&gt;the&lt;span class="w"&gt; &lt;/span&gt;volume&lt;span class="w"&gt; &lt;/span&gt;is&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nb"&gt;read&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;only&lt;span class="w"&gt; &lt;/span&gt;or&lt;span class="w"&gt; &lt;/span&gt;writable.
&lt;span class="w"&gt;    &lt;/span&gt;ReadOnly&lt;span class="w"&gt; &lt;/span&gt;bool
&lt;span class="o"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;h2&gt;"common" node configuring&lt;/h2&gt;
&lt;p&gt;In code this step is presented as an "interface" function within the
&lt;code&gt;BootstrapInstance&lt;/code&gt;. So it is really part of the provisioning calls.
However, we are separating it here for discussion purpose.&lt;/p&gt;
&lt;figure class="s12 center"&gt;
  &lt;img src="images/juju%20common%20BootstrapInstance%20finalizer%20func.png" /&gt;
    &lt;figcaption&gt;"common" provider's BootstrapInstance finalizer function&lt;/figcaption&gt;
&lt;/figure&gt;

&lt;p&gt;The most critical thing in this step is to install Juju agent. We will
write more about this agent in other articles. For bootstrap, the
followings are observed:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;default path: &lt;code&gt;/var/lib/juju&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;hardcoded log file name: &lt;code&gt;cloud-init-output.log&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;nonce content (see below)&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;nonce&lt;/h3&gt;
&lt;p&gt;Juju identifies machine-0 by SSH-ing into the machine and matching
&lt;code&gt;/var/lib/juju/nonce.txt&lt;/code&gt; content to a special string:
&lt;code&gt;user-admin:bootstrap&lt;/code&gt;.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Machine-0 must have file (&lt;code&gt;/var/lib/juju/nonce.txt&lt;/code&gt;) with content: &lt;span class="myhighlight"&gt;user-admin:bootstrap&lt;/span&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h1&gt;Wrapup&lt;/h1&gt;
&lt;p&gt;This concludes our humble attempt to decipher Juju's bootstrap
mechanisms. We have covered quite some grounds. The key take away is
to understand where provider is expected. However, this is an over
simplified view because it also depends on how much involvement a
cloud want to have in this process. Argubly one can say that cloud
provider is really called for in each of the six steps in this process
&amp;mdash; it needs to validate constraints, it should pick the OS image,
it certainly should control the tool and cloud-init process, and
certainly it is doing the provisioning.&lt;/p&gt;
&lt;p&gt;I think this argument is nearly true if one looks into stock providers
and pull all their implementation together. For writing a new
provider, XClarity, it comes down to a design decision then how much
the underline cloud wants control. The bare minimum (as we have done
in the simulation, see below) is to rely on default values, &lt;code&gt;common&lt;/code&gt;
provider's &lt;code&gt;Bootstrap&lt;/code&gt; functions, and return a &lt;code&gt;StartInstanceResult&lt;/code&gt;.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;//&lt;span class="w"&gt; &lt;/span&gt;For&lt;span class="w"&gt; &lt;/span&gt;now,&lt;span class="w"&gt; &lt;/span&gt;we&lt;span class="w"&gt; &lt;/span&gt;are&lt;span class="w"&gt; &lt;/span&gt;imitating&lt;span class="w"&gt; &lt;/span&gt;a&lt;span class="w"&gt; &lt;/span&gt;successful&lt;span class="w"&gt; &lt;/span&gt;instance&lt;span class="w"&gt; &lt;/span&gt;by&lt;span class="w"&gt; &lt;/span&gt;directly&lt;span class="w"&gt; &lt;/span&gt;returning&lt;span class="w"&gt; &lt;/span&gt;a&lt;span class="w"&gt; &lt;/span&gt;result&lt;span class="w"&gt; &lt;/span&gt;struct
var&lt;span class="w"&gt; &lt;/span&gt;tmpArch&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nv"&gt;string&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;arch.AMD64
var&lt;span class="w"&gt; &lt;/span&gt;tmpMem&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nv"&gt;uint64&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="m"&gt;2000000&lt;/span&gt;
var&lt;span class="w"&gt; &lt;/span&gt;tmpCpuCore&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nv"&gt;uint64&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="m"&gt;1&lt;/span&gt;
var&lt;span class="w"&gt; &lt;/span&gt;tmpCpuPower&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nv"&gt;uint64&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="m"&gt;100&lt;/span&gt;
hardware&lt;span class="w"&gt; &lt;/span&gt;:&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;instance.HardwareCharacteristics&lt;span class="o"&gt;{&lt;/span&gt;
&lt;span class="w"&gt;        &lt;/span&gt;Arch:&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;&amp;amp;&lt;/span&gt;tmpArch,
&lt;span class="w"&gt;        &lt;/span&gt;Mem:&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;&amp;amp;&lt;/span&gt;tmpMem,
&lt;span class="w"&gt;        &lt;/span&gt;CpuCores:&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;&amp;amp;&lt;/span&gt;tmpCpuCore,
&lt;span class="w"&gt;        &lt;/span&gt;CpuPower:&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;&amp;amp;&lt;/span&gt;tmpCpuPower,
&lt;span class="o"&gt;}&lt;/span&gt;
volumes&lt;span class="w"&gt; &lt;/span&gt;:&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;make&lt;span class="o"&gt;([]&lt;/span&gt;storage.Volume,&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="m"&gt;0&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;
networkInfo&lt;span class="w"&gt; &lt;/span&gt;:&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;make&lt;span class="o"&gt;([]&lt;/span&gt;network.InterfaceInfo,&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="m"&gt;0&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;
volumeAttachments&lt;span class="w"&gt; &lt;/span&gt;:&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;make&lt;span class="o"&gt;([]&lt;/span&gt;storage.VolumeAttachment,&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="m"&gt;0&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;

&lt;span class="k"&gt;return&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;&amp;amp;&lt;/span&gt;environs.StartInstanceResult&lt;span class="o"&gt;{&lt;/span&gt;
&lt;span class="w"&gt;        &lt;/span&gt;Instance:&lt;span class="w"&gt;          &lt;/span&gt;xclarityBootstrapInstance&lt;span class="o"&gt;{}&lt;/span&gt;,
&lt;span class="w"&gt;        &lt;/span&gt;Config:&lt;span class="w"&gt;            &lt;/span&gt;env.ecfg.Config,
&lt;span class="w"&gt;        &lt;/span&gt;Hardware:&lt;span class="w"&gt;          &lt;/span&gt;&lt;span class="p"&gt;&amp;amp;&lt;/span&gt;hardware,&lt;span class="w"&gt; &lt;/span&gt;//&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nb"&gt;type&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;instance.HardwareCharacteristics&lt;span class="w"&gt; &lt;/span&gt;struct
&lt;span class="w"&gt;        &lt;/span&gt;NetworkInfo:&lt;span class="w"&gt;       &lt;/span&gt;networkInfo,&lt;span class="w"&gt; &lt;/span&gt;//&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nb"&gt;type&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;network.InterfaceInfo&lt;span class="w"&gt; &lt;/span&gt;struct
&lt;span class="w"&gt;        &lt;/span&gt;Volumes:&lt;span class="w"&gt;           &lt;/span&gt;volumes,&lt;span class="w"&gt; &lt;/span&gt;//&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nb"&gt;type&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;storage.Volume&lt;span class="w"&gt; &lt;/span&gt;struct
&lt;span class="w"&gt;        &lt;/span&gt;VolumeAttachments:&lt;span class="w"&gt; &lt;/span&gt;volumeAttachments,&lt;span class="w"&gt; &lt;/span&gt;//&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nb"&gt;type&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;storageVolumeAttachment&lt;span class="w"&gt; &lt;/span&gt;struct
&lt;span class="o"&gt;}&lt;/span&gt;,&lt;span class="w"&gt; &lt;/span&gt;nil
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;There are a few topics that are not covered in this article, but need
to be studied further:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Juju agent &amp;amp; tools: What does an agent do? What is the DB look
like? How is information registered with jujud (aka. agent)? How does
agent communicates with CLI controller? Why is it an issue to match
agent with juju binary? How to build a custom agent?&lt;/li&gt;
&lt;li&gt;cloud-init: My understanding at the moment is that the entire node
configuration is done via &lt;a href="https://launchpad.net/cloud-init"&gt;cloud-init&lt;/a&gt;. Itself is not
interesting. But what Juju does to make cloud-init carry out its task
is interesting. I think there are scripts involved. So who is
generating these scripts? what type of scripts? Can they be
customized? This helps us to know how much we can control the final
state of an instance.&lt;/li&gt;
&lt;li&gt;SimpleStream: I think it is a form of communication protocol. It is
how one communicates with jujud. What capability does it have? Who is
providing that in Juju's environment? How it may be affected by other
network design/configuration?&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Well, stay tuned.&lt;/p&gt;</content><category term="openstack"></category><category term="lenovo"></category></entry><entry><title>Juju charm model</title><link href="https://fengxia41103.github.io/myblog/juju%20charm%20model.html" rel="alternate"></link><published>2017-01-03T10:45:00-05:00</published><updated>2017-01-03T10:45:00-05:00</updated><author><name>Feng Xia</name></author><id>tag:fengxia41103.github.io,2017-01-03:/myblog/juju charm model.html</id><summary type="html">&lt;p&gt;This article is a high level view of Juju's internal modelings. For me
it was fairly confusing when looking at its document which has an army
of these concepts: charm, bundle, model, unit.... of course, each of
them makes sense after a while. Its &lt;a href="https://jujucharms.com/docs/2.0/glossary"&gt;terminology&lt;/a&gt; page helps on
understanding individual term. But like other Canonical documents, it
needs a design level diagram to help user grasp the structure of this
wealth of knowledge.&lt;/p&gt;
&lt;p&gt;So here it is my attemp to show the relationship between these
terms. Instead of drawing a tree to reflect 1-N relationship, I used
an outer enclosure which can have multiple of its inner enclosures,
eg. a bundle can have N charms.&lt;/p&gt;
&lt;figure class="s12 center"&gt;
  &lt;img src="images/juju%20control%20modeling.png"/&gt;
  &lt;figcaption&gt;Juju control models&lt;/figcaption&gt;
&lt;/figure&gt;

&lt;p&gt;A few interesting points besides the 1-N relationships. &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;A single application can be deployed on multiple machines,
  eg. Application #2 has two units. This is how one application can be
  scaled out horizontally.&lt;/li&gt;
&lt;li&gt;One machine, in turn, can host multiple applications, eg. one unit
  of application #2 and #3 both live on the same machine.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;By default â€¦&lt;/p&gt;</summary><content type="html">&lt;p&gt;This article is a high level view of Juju's internal modelings. For me
it was fairly confusing when looking at its document which has an army
of these concepts: charm, bundle, model, unit.... of course, each of
them makes sense after a while. Its &lt;a href="https://jujucharms.com/docs/2.0/glossary"&gt;terminology&lt;/a&gt; page helps on
understanding individual term. But like other Canonical documents, it
needs a design level diagram to help user grasp the structure of this
wealth of knowledge.&lt;/p&gt;
&lt;p&gt;So here it is my attemp to show the relationship between these
terms. Instead of drawing a tree to reflect 1-N relationship, I used
an outer enclosure which can have multiple of its inner enclosures,
eg. a bundle can have N charms.&lt;/p&gt;
&lt;figure class="s12 center"&gt;
  &lt;img src="images/juju%20control%20modeling.png"/&gt;
  &lt;figcaption&gt;Juju control models&lt;/figcaption&gt;
&lt;/figure&gt;

&lt;p&gt;A few interesting points besides the 1-N relationships. &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;A single application can be deployed on multiple machines,
  eg. Application #2 has two units. This is how one application can be
  scaled out horizontally.&lt;/li&gt;
&lt;li&gt;One machine, in turn, can host multiple applications, eg. one unit
  of application #2 and #3 both live on the same machine.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;By default, &lt;code&gt;juju deploy&lt;/code&gt; will call for a new machine for each
application within the bundle/charm. Of course, there is command flag
to switch that so you can specify which machine is to be used.&lt;/p&gt;</content><category term="openstack"></category><category term="lenovo"></category></entry><entry><title>Targets in MAAS lab</title><link href="https://fengxia41103.github.io/myblog/maas%20target.html" rel="alternate"></link><published>2016-12-09T22:00:00-05:00</published><updated>2016-12-09T22:00:00-05:00</updated><author><name>Feng Xia</name></author><id>tag:fengxia41103.github.io,2016-12-09:/myblog/maas target.html</id><summary type="html">&lt;p&gt;After setting up the MAAS server and its subnet, bringing up a target
node is simple.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;All nodes must be on the same &lt;strong&gt;192.168.8.0/24&lt;/strong&gt; subnet, and
they must support PXE boot.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h1&gt;PXE boot&lt;/h1&gt;
&lt;p&gt;The MAAS machine functions as both the DHCP server and the TFTP
server, both are required to facilitate PXE booting. First, we creat a
blank VM. The important things are:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;Under &lt;em&gt;System &amp;rarr; Mother board &amp;rarr; Boot order&lt;/em&gt;, check the
    &lt;em&gt;Network&lt;/em&gt;. However, it is not necessary to move the &lt;em&gt;Network&lt;/em&gt; boot
    above &lt;em&gt;Hard Disk&lt;/em&gt;. When there is no OS deployed yet on the hard
    disk, boot process will fall through to PXE anyway. Once an OS has
    been installed, the machine will boot normally from HD.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;If you put PXE as the first order, this target will not boot
into HD image at all.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Set &lt;em&gt;Network &amp;rarr; Adapter 1 &amp;rarr; Internal Network&lt;/em&gt;, named
    &lt;em&gt;intnet&lt;/em&gt;. This corresponds to the MAAS managed subnet of
    192.168.8.0/24.&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;After this, start the target VM and it should PXE boot and will shut
itself â€¦&lt;/p&gt;</summary><content type="html">&lt;p&gt;After setting up the MAAS server and its subnet, bringing up a target
node is simple.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;All nodes must be on the same &lt;strong&gt;192.168.8.0/24&lt;/strong&gt; subnet, and
they must support PXE boot.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h1&gt;PXE boot&lt;/h1&gt;
&lt;p&gt;The MAAS machine functions as both the DHCP server and the TFTP
server, both are required to facilitate PXE booting. First, we creat a
blank VM. The important things are:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;Under &lt;em&gt;System &amp;rarr; Mother board &amp;rarr; Boot order&lt;/em&gt;, check the
    &lt;em&gt;Network&lt;/em&gt;. However, it is not necessary to move the &lt;em&gt;Network&lt;/em&gt; boot
    above &lt;em&gt;Hard Disk&lt;/em&gt;. When there is no OS deployed yet on the hard
    disk, boot process will fall through to PXE anyway. Once an OS has
    been installed, the machine will boot normally from HD.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;If you put PXE as the first order, this target will not boot
into HD image at all.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Set &lt;em&gt;Network &amp;rarr; Adapter 1 &amp;rarr; Internal Network&lt;/em&gt;, named
    &lt;em&gt;intnet&lt;/em&gt;. This corresponds to the MAAS managed subnet of
    192.168.8.0/24.&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;After this, start the target VM and it should PXE boot and will shut
itself down at the end of the boot.&lt;/p&gt;
&lt;h1&gt;MAAS machine life cycle&lt;/h1&gt;
&lt;p&gt;MAAS target goes through a life cycel as shown below:&lt;/p&gt;
&lt;figure class="s12 center"&gt;
  &lt;img src="images/maas_target_life_cycle.png"/&gt;
  &lt;figcaption&gt;MAAS target node life cycle&lt;/figcaption&gt;
&lt;/figure&gt;

&lt;h2&gt;New&lt;/h2&gt;
&lt;p&gt;Once PXE booted, the MAAS server will automatically &lt;em&gt;enlist&lt;/em&gt; this
machine with a &lt;em&gt;New&lt;/em&gt; status. This indicates that machine has been
discovered by MAAS.  The given node name is completly arbitrary, and
it has nothing to do with VM's name.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;If there are multiple targets, the only way to match MAAS node name with a VM
is through assigned IP addresses.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2&gt;Commission&lt;/h2&gt;
&lt;p&gt;This is the phase in which MAAS server tries to determine the CPU,
memory, and disk information of the target. Two important
configurations to notice:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Power type: for our virtual lab, select &lt;em&gt;Manual&lt;/em&gt;. Otherwise, the
   admin GUI will block you from commissioning completly.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;Retain&lt;/code&gt;: do &lt;strong&gt;NOT&lt;/strong&gt; check such checkboxes. The word &lt;em&gt;retain&lt;/em&gt; means
   to keep what you have. Therefore, it will skip registering the
   target's disk information. This is super confusing because
   commission output details will show clearly the disk info. So the
   commission scripts run just fine and pulled everything
   correctly. It's the MAAS logic to ignore these returned values if
   user has checked &lt;em&gt;retain&lt;/em&gt;.&lt;/li&gt;
&lt;/ol&gt;
&lt;h2&gt;READY&lt;/h2&gt;
&lt;p&gt;If commissioning went through, MAAS server will now has all the
information needed to deploy something to this target. Think of
machines in this state as a pool from which deployment can pick.&lt;/p&gt;
&lt;h2&gt;Deploy&lt;/h2&gt;
&lt;p&gt;By far, target machine has nothing on it &amp;mdash; it has a blank
disk. First thing first, we need to put an OS on it, and that's
&lt;em&gt;deploy&lt;/em&gt; is about.&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Take action &amp;rarr; Deploy, and reboot target which should come up in PXE again.&lt;/li&gt;
&lt;li&gt;MAAS admin will automatically change node's status to &lt;em&gt;Deploying&lt;/em&gt;.&lt;/li&gt;
&lt;li&gt;OS will be written to disk.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Once state switched to &lt;em&gt;Deployed&lt;/em&gt;, verify by:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Goto &lt;em&gt;Subnet&lt;/em&gt; menu on MAAS web admin UI, look up the target's assigned IP address.&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Boot up target machine &amp;larr; it will now load from HD instead of PXE!&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="err"&gt;```&lt;/span&gt;&lt;span class="n"&gt;shell&lt;/span&gt;
&lt;span class="n"&gt;ssh&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;ubuntu&lt;/span&gt;&lt;span class="mf"&gt;@192.168.8&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;xxx&lt;/span&gt;
&lt;span class="err"&gt;```&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Since deployed image has copied the SSH public key that we have
created in steps of creating the MAAS server itself and have
copied to the MAAS admin UI, you can now SSH to any deployed
target without having a password.&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h2&gt;Release&lt;/h2&gt;
&lt;p&gt;Releasing a deployed target gives an option to erase disk. Again,
taget has to be PXE-booted in order to be managed by the MAAS server.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;MAAS sever can not manage a deployed target unless it PXE boots.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;If released and disk erased, the node becomes &lt;em&gt;READY&lt;/em&gt;, again.&lt;/p&gt;</content><category term="openstack"></category><category term="lenovo"></category></entry><entry><title>Setup a MAAS Virtualbox lab</title><link href="https://fengxia41103.github.io/myblog/maas%20virtualbox.html" rel="alternate"></link><published>2016-12-08T10:45:00-05:00</published><updated>2016-12-08T10:45:00-05:00</updated><author><name>Feng Xia</name></author><id>tag:fengxia41103.github.io,2016-12-08:/myblog/maas virtualbox.html</id><summary type="html">&lt;p&gt;Canonical &lt;a href="http://maas.io/"&gt;MAAS&lt;/a&gt; is a deployment tool that can give a bare metal
life by putting an OS on it. Working together with &lt;a href="https://www.ubuntu.com/cloud/juju"&gt;Juju&lt;/a&gt;, they can
setup a cluster of applications quite quickly. Think of them as a
package manage like Ubuntu's &lt;code&gt;apt-get&lt;/code&gt;, but in the context of a
cloud. Interesting.&lt;/p&gt;
&lt;p&gt;This article shows how to setup a virtual lab so one can play with
these two tools and get a sense of what they do. The whole setup is
based on Virtualbox. One thing I found out the hard way is that
despite their nice looking website and rather recent project history,
there is no single document that can bring this environment live from
A to Z. All official documents have out-of-date commands here and
there which made following them useless. I consulted countless blogs,
posts, chasing down bugs (or I thought they were bugs), and finally
when everything works, it became so obvious and simple. Hopefully this
article will shorten this journey for readers and they can have this
environment easily.&lt;/p&gt;
&lt;h1&gt;Baseline environment&lt;/h1&gt;
&lt;p&gt;&lt;strong&gt;Virtualbox â€¦&lt;/strong&gt;&lt;/p&gt;</summary><content type="html">&lt;p&gt;Canonical &lt;a href="http://maas.io/"&gt;MAAS&lt;/a&gt; is a deployment tool that can give a bare metal
life by putting an OS on it. Working together with &lt;a href="https://www.ubuntu.com/cloud/juju"&gt;Juju&lt;/a&gt;, they can
setup a cluster of applications quite quickly. Think of them as a
package manage like Ubuntu's &lt;code&gt;apt-get&lt;/code&gt;, but in the context of a
cloud. Interesting.&lt;/p&gt;
&lt;p&gt;This article shows how to setup a virtual lab so one can play with
these two tools and get a sense of what they do. The whole setup is
based on Virtualbox. One thing I found out the hard way is that
despite their nice looking website and rather recent project history,
there is no single document that can bring this environment live from
A to Z. All official documents have out-of-date commands here and
there which made following them useless. I consulted countless blogs,
posts, chasing down bugs (or I thought they were bugs), and finally
when everything works, it became so obvious and simple. Hopefully this
article will shorten this journey for readers and they can have this
environment easily.&lt;/p&gt;
&lt;h1&gt;Baseline environment&lt;/h1&gt;
&lt;p&gt;&lt;strong&gt;Virtualbox 5.1.10 and its extension pack&lt;/strong&gt;. I could not verify why
this particular version worked. I had 5.1.8 and the first
successful trial occurred after I upgraded to 5.1.10. Was that a
coincidence? Without being able to reproduce this, I am merely
documenting what I have.&lt;/p&gt;
&lt;h1&gt;Network topology&lt;/h1&gt;
&lt;p&gt;Getting network configurations right is the key for success. The
biggest &lt;strong&gt;gotcha&lt;/strong&gt; is that MAAS server &lt;strong&gt;must&lt;/strong&gt; be the DHCP server on
its managing subnet! The official document talks about "if there is an
existing DHCP, points it to the MAAS server", huh? I never figured
that out, so don't listen to that.&lt;/p&gt;
&lt;p&gt;There will be two VMs and one internal network, &lt;code&gt;intnet1&lt;/code&gt;.&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;strong&gt;VM #1&lt;/strong&gt;: is the MAAS server. Use Xenial 16.04 desktop image.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;VM #2&lt;/strong&gt;: is an emulated BM.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;intnet1&lt;/code&gt;: is a subnet (192.168.8.0/24) that MAAS server will
   live together with its managed nodes (I call them targets).&lt;/li&gt;
&lt;/ol&gt;
&lt;figure class="s12 center"&gt;
  &lt;img src="images/maas_networking_topology.png"/&gt;
  &lt;figcaption&gt;MAAS Virtualbox lab networking topology&lt;/figcaption&gt;
&lt;/figure&gt;

&lt;h1&gt;Setup instructions&lt;/h1&gt;
&lt;p&gt;Personally I dislike those step-by-step instructions because first of
all, it is intimidating; secondly, each environment is a bit
different, so how confident user will feel to duplicate other's
success? Not much. I'll explain thoughts and lessons learned along the
way. I think that is more useful even from the point that Google may
pick up a few words here and will help others if they search.&lt;/p&gt;
&lt;h2&gt;Install MAAS server, admin account, subnet&lt;/h2&gt;
&lt;p&gt;MAAS server uses Ubuntu 16.04 Xenial image. Setup the
networking to have two interfaces &amp;mdash; one uses default NAT so you
have internet access, while the other uses &lt;strong&gt;Internal Network&lt;/strong&gt; with
name &lt;code&gt;intnet1&lt;/code&gt;.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Defining the subnet managed by MAAS server is the most imporant step
  in MAAS configuration.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;Config subnet &lt;code&gt;intnet1&lt;/code&gt;. Define it as &lt;code&gt;192.168.8.x&lt;/code&gt; (This is
   completly arbitrary. Use whatever network range you want to
   use). Use &lt;code&gt;ifconfig&lt;/code&gt; to find out interface name that corresponds to
   &lt;code&gt;intnet1&lt;/code&gt; (a clue: the one that has no IP assigned):&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="err"&gt;```&lt;/span&gt;&lt;span class="nx"&gt;shell&lt;/span&gt;
&lt;span class="err"&gt;$&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;nano&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="nx"&gt;etc&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="nx"&gt;network&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="nx"&gt;interfaces&lt;/span&gt;

&lt;span class="kt"&gt;auto&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;enp0s9&lt;/span&gt;
&lt;span class="nx"&gt;iface&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;enp0s9&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;inet&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;static&lt;/span&gt;
&lt;span class="nx"&gt;address&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="m m-Double"&gt;192.168.8.1&lt;/span&gt;
&lt;span class="nx"&gt;netmask&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="m m-Double"&gt;255.255.255.0&lt;/span&gt;
&lt;span class="nx"&gt;gateway&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="m m-Double"&gt;192.168.8.1&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="err"&gt;#&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;this&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;will&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;be&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;setup&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;in&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;MAAS&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;as&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;default&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;gateway&lt;/span&gt;&lt;span class="p"&gt;!&lt;/span&gt;
&lt;span class="err"&gt;```&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;At Virtualbox level we have added an interface to this VM using
&lt;code&gt;Internal Network&lt;/code&gt;, we need then define this network in VM. Also,
defining this before installing MAAS will have MAAS installer pick
up this subnet automatically so to save some manual work down the
road.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Install MAAS is simple. Don't bother with other methods.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;```shell
sudo add-apt-repository ppa:maas/stable
sudo apt update
sudo apt install maas
```
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Create MAAS admin: &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;```shell
sudo maas createadmin
```
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Create SSH key and copy content from &lt;code&gt;~/.ssh/id_rsa.pub&lt;/code&gt;:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;```shell
mkdir .ssh
ssh-keygen -t rsa
less ~/.ssh/id_rsa.pub
```
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Login in &lt;code&gt;http://localhost:5240/MAAS&lt;/code&gt; using admin created in step
  3, goto user preference (click &lt;strong&gt;user name&lt;/strong&gt;).
  select &lt;code&gt;upload&lt;/code&gt; and paste step 4's content into the text box. This is
  the public key that will be copied to each MAAS target at
  deployment so later you can SSH into these targets without knowing
  the password.&lt;/p&gt;
&lt;p&gt;&lt;figure class="s12 center"&gt;
  &lt;img src="images/maas%20ssh%20key.png"/&gt;
  &lt;figcaption&gt;MAAS upload SSH key&lt;/figcaption&gt;
&lt;/figure&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Setup MAAS gateway. This was actually asked when installing MAAS
    server. But I missed this and ended up spending 5 days debugging a
    &lt;em&gt;strange&lt;/em&gt; issue where provisioned node can not ping outside world.
    In short, set MAAS default gateway to be the IP of the MAAS
    server, in our case, &lt;code&gt;192.168.8.1&lt;/code&gt;!&lt;/p&gt;
&lt;p&gt;&lt;figure class="s12 center"&gt;
  &lt;img src="images/maas%20default%20gateway.png"/&gt;
  &lt;figcaption&gt;MAAS default gateway&lt;/figcaption&gt;
&lt;/figure&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;At this point, the MAAS server is installed and user can login the web
admin console. Next, setup firewall rules on MAAS server so it can be
the router for managed subnet.&lt;/p&gt;
&lt;h2&gt;MAAS server firewall rules&lt;/h2&gt;
&lt;p&gt;Install &lt;a href="https://help.ubuntu.com/community/UFW"&gt;UFW&lt;/a&gt;. UFW is infinitely easier to use than iptables. Making
the MAAS server as a router is necessary because targets, once
acquired an OS, will need internet access in order to APT other
things. (If using real metal server, the server can be connected to
multiple VLANs among which one is providing internet access.)&lt;/p&gt;
&lt;h3&gt;Masquerading&lt;/h3&gt;
&lt;p&gt;Following the &lt;a href="https://help.ubuntu.com/lts/serverguide/firewall.html"&gt;instructions&lt;/a&gt; to enable default port forwarding:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;Packet forwarding needs to be enabled in ufw. Two configuration
   files will need to be adjusted, in &lt;code&gt;/etc/default/ufw&lt;/code&gt; change the
   &lt;code&gt;DEFAULT_FORWARD_POLICY&lt;/code&gt; to &lt;code&gt;ACCEPT&lt;/code&gt;:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;```shell
DEFAULT_FORWARD_POLICY=&amp;quot;ACCEPT&amp;quot;
```
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Then edit &lt;code&gt;/etc/ufw/sysctl.conf&lt;/code&gt; and uncomment:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;```shell
net/ipv4/ip_forward=1
net/ipv6/conf/default/forwarding=1
```
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;/li&gt;
&lt;/ol&gt;
&lt;h3&gt;Firewall policies&lt;/h3&gt;
&lt;blockquote&gt;
&lt;p&gt;Enabling UFW will deny all access (except the current ssh
session). So before anything, allow port 22!&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;To config MAAS server to route 192.168.8.x subnet traffic to internet
using UFW is simple. Using &lt;code&gt;ifconfig&lt;/code&gt; to find the interface name that
is connected to the internet(NAT), in this example, &lt;code&gt;enp0s3&lt;/code&gt;:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;    ```shell
    nano /etc/ufw/before.rules
    ```
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Paste this at the bottom of the file, &lt;strong&gt;after&lt;/strong&gt; the &lt;code&gt;COMMIT&lt;/code&gt; that has
already been in that document:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;    ```shell
    # nat Table rules
    *nat
    :POSTROUTING ACCEPT [0:0]
    -A POSTROUTING -s 192.168.8.0/24 -o enp0s3 -j MASQUERADE
    COMMIT
    ```
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;What this does is to make &lt;code&gt;enp0s3&lt;/code&gt; as the router for subnet
192.168.8.x &amp;larr; welcome the internet!&lt;/p&gt;
&lt;h3&gt;Ports&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://help.ubuntu.com/community/UFW"&gt;UFW&lt;/a&gt; will erect a firewall that blocks everything by default! We
have poked holes for port 22 to allow SSH. More need to be done:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Allow http 80: ufw allow http&lt;/li&gt;
&lt;li&gt;Allow ping: ufw allow 53&lt;/li&gt;
&lt;li&gt;Allow region controller API port: 5240&lt;/li&gt;
&lt;li&gt;Allow Bootp server and client: 67, 68&lt;/li&gt;
&lt;li&gt;Allow Img service: 5248&lt;/li&gt;
&lt;li&gt;Allow tftp: 69, 5244&lt;/li&gt;
&lt;li&gt;Allow domain service: 5246&lt;/li&gt;
&lt;li&gt;Allow rndc service: 5247&lt;/li&gt;
&lt;li&gt;Allow iscsi: 3260&lt;/li&gt;
&lt;li&gt;Allow ntp: 123&lt;/li&gt;
&lt;li&gt;Allow MAAS bootstrap sever: 8000&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Finally, &lt;code&gt;sudo ufw enable&lt;/code&gt;. Our GFW is up.&lt;/p&gt;
&lt;h2&gt;MAAS as DHCP server&lt;/h2&gt;
&lt;blockquote&gt;
&lt;p&gt;As I have mentioned, the MAAS server node &lt;strong&gt;must&lt;/strong&gt; be the DHCP
server on subnet 192.168.8.x. No exception!&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;MAAS admin web is the tool to use for this configuration. &lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;Login into &lt;code&gt;http://192.168.8.1/MAAS/&lt;/code&gt;, goto &lt;code&gt;Subnets&lt;/code&gt; and select
   the &lt;code&gt;VLAN&lt;/code&gt; &amp;larr; this is how you can turn on DHCP on a subnet:&lt;/p&gt;
&lt;p&gt;&lt;figure class="row"&gt;
  &lt;img src="images/maas_vlan_config.png"
       class="col s6" /&gt;
  &lt;img src="images/maas_subnet_config.png"
       class="col s6" /&gt;  &lt;br&gt;
  &lt;figcaption&gt;MAAS  DHCP config&lt;/figcaption&gt;
&lt;/figure&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Click &lt;code&gt;Vlan&lt;/code&gt; column on &lt;code&gt;192.168.8.0/24&lt;/code&gt; subnet row to get to the
   Vlan configuration page. &lt;code&gt;Take action&lt;/code&gt; to enable DHCP. Change the
   gateway to 192.168.8.1, which is this server's static IP on this
   subnet.&lt;/p&gt;
&lt;p&gt;&lt;figure class="s12 center"&gt;
  &lt;img src="images/maas_dhcp_config.png"/&gt;
  &lt;figcaption&gt;MAAS admin DHCP config&lt;/figcaption&gt;
&lt;/figure&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;We have done the hard part &amp;mdash; setting up the MAAS server. In our
&lt;a href="https://fengxia41103.github.io/myblog/maas target.html"&gt;next article&lt;/a&gt;, I'll show you what MAAS can do for fun &amp;rarr;
brining up a bare metal machine to life. Stay tuned.&lt;/p&gt;</content><category term="openstack"></category><category term="lenovo"></category></entry></feed>