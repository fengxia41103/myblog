# -*- coding: utf-8 -*-

"""The sequence of triangle numbers is generated by adding the natural
numbers. So the 7th triangle number would be 1 + 2 + 3 + 4 + 5 + 6 + 7
= 28. The first ten terms would be:

1, 3, 6, 10, 15, 21, 28, 36, 45, 55, ...

Let us list the factors of the first seven triangle numbers:

 1: 1
 3: 1,3
 6: 1,2,3,6
10: 1,2,5,10
15: 1,3,5,15
21: 1,3,7,21
28: 1,2,4,7,14,28
We can see that 28 is the first triangle number to have over five divisors.

What is the value of the first triangle number to have over five
hundred divisors?
"""


def divisors(n):
    """Find all divisors given number "n".

    Note that problem space is sqrt(n) since factors
    will repeat themselves passing that point. This greatly reduced
    number of iteration needed.
    """
    i = 1
    while i * i <= n:
        if n % i == 0:
            yield [i, n / i]
        i += 1


def method_1(n):
    max_count = 0
    m = 10000
    num = 0
    while max_count <= n:
        num = m * (m + 1) / 2
        all_divisors = reduce(lambda x, y: x + y, divisors(num))
        max_count = max(max_count, len(all_divisors))

        # test criteria
        if max_count > n:
            break

        # move on
        m += 1

    # print result
    print num, m - 1, max_count


def main():
    n = 500
    method_1(n)

if __name__ == '__main__':
    main()
