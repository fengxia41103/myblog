<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom"><title>Be Care Free - dev</title><link href="https://fengxia41103.github.io/myblog/" rel="alternate"></link><link href="https://fengxia41103.github.io/myblog/feeds/dev.atom.xml" rel="self"></link><id>https://fengxia41103.github.io/myblog/</id><updated>2023-11-21T10:49:00-05:00</updated><subtitle></subtitle><entry><title>Nginx Redirect</title><link href="https://fengxia41103.github.io/myblog/nginx%20redirect.html" rel="alternate"></link><published>2023-11-21T10:49:00-05:00</published><updated>2023-11-21T10:49:00-05:00</updated><author><name>Feng Xia</name></author><id>tag:fengxia41103.github.io,2023-11-21:/myblog/nginx redirect.html</id><summary type="html">&lt;p&gt;Nginx redirect is a super confusing topic. I have see way too many
blogs and articles and SO posts, each having a specific example of a
sort, but none talks about it &lt;strong&gt;systematically&lt;/strong&gt;. So this article is
an attempt to consolidate the information as part of my own study
notes, and provide a clear understanding of how to use these redirects
in nginx.&lt;/p&gt;
&lt;h1&gt;Overview&lt;/h1&gt;
&lt;p&gt;First of all, there are 5 directives who will cause a redirect:  &lt;code&gt;index&lt;/code&gt;,
&lt;code&gt;try_files&lt;/code&gt;, &lt;code&gt;error_page&lt;/code&gt;, &lt;code&gt;return&lt;/code&gt;, &lt;code&gt;rewrite&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;Second, there are two types of redirect &amp;mdash; internal &amp;amp;
external. Internal redirect will cause nginx to &lt;strong&gt;re-evaluate&lt;/strong&gt;
location block, and browser is not involved. An external redirect is
to send a HTTP code w/ target URL back to the browser, and it's up to
the browser's behavior to decide what to happen next.&lt;/p&gt;
&lt;p&gt;Below shows the five directives and their capabilities in term of
internal and external redirect:&lt;/p&gt;
&lt;figure class="col s12"&gt;
  &lt;img src="images/nginx%20redirect.png"/&gt;
&lt;/figure&gt;

&lt;h2&gt;http redirect code&lt;/h2&gt;
&lt;p&gt;For external redirect, the response will be sent to the browser, thus
it's up to the implementation of the browser to react based on …&lt;/p&gt;</summary><content type="html">&lt;p&gt;Nginx redirect is a super confusing topic. I have see way too many
blogs and articles and SO posts, each having a specific example of a
sort, but none talks about it &lt;strong&gt;systematically&lt;/strong&gt;. So this article is
an attempt to consolidate the information as part of my own study
notes, and provide a clear understanding of how to use these redirects
in nginx.&lt;/p&gt;
&lt;h1&gt;Overview&lt;/h1&gt;
&lt;p&gt;First of all, there are 5 directives who will cause a redirect:  &lt;code&gt;index&lt;/code&gt;,
&lt;code&gt;try_files&lt;/code&gt;, &lt;code&gt;error_page&lt;/code&gt;, &lt;code&gt;return&lt;/code&gt;, &lt;code&gt;rewrite&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;Second, there are two types of redirect &amp;mdash; internal &amp;amp;
external. Internal redirect will cause nginx to &lt;strong&gt;re-evaluate&lt;/strong&gt;
location block, and browser is not involved. An external redirect is
to send a HTTP code w/ target URL back to the browser, and it's up to
the browser's behavior to decide what to happen next.&lt;/p&gt;
&lt;p&gt;Below shows the five directives and their capabilities in term of
internal and external redirect:&lt;/p&gt;
&lt;figure class="col s12"&gt;
  &lt;img src="images/nginx%20redirect.png"/&gt;
&lt;/figure&gt;

&lt;h2&gt;http redirect code&lt;/h2&gt;
&lt;p&gt;For external redirect, the response will be sent to the browser, thus
it's up to the implementation of the browser to react based on the
http status code. There are some subtle differences of these code.&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Code&lt;/th&gt;
&lt;th&gt;Name&lt;/th&gt;
&lt;th&gt;Description&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href="https://developer.mozilla.org/en-US/docs/Web/HTTP/Status/301"&gt;301&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;Moved Permanently&lt;/td&gt;
&lt;td&gt;A browser redirects to the new URL and search engines update their links to the resource.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href="https://developer.mozilla.org/en-US/docs/Web/HTTP/Status/302"&gt;302&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;Found&lt;/td&gt;
&lt;td&gt;A browser redirects to this page but search engines don't update their links to the resource.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href="https://developer.mozilla.org/en-US/docs/Web/HTTP/Status/303"&gt;303&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;See Other&lt;/td&gt;
&lt;td&gt;Redirects don't link to the requested resource itself, but to another page. Always return &lt;code&gt;GET&lt;/code&gt;.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href="https://developer.mozilla.org/en-US/docs/Web/HTTP/Status/307"&gt;307&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;Temporary Redirect&lt;/td&gt;
&lt;td&gt;Same as 302 except request method &amp;amp; body is not altered.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href="https://developer.mozilla.org/en-US/docs/Web/HTTP/Status/308"&gt;308&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;Permanent Redirect&lt;/td&gt;
&lt;td&gt;Same as 301 except request method &amp;amp; body is not altered.&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h2&gt;internal limit&lt;/h2&gt;
&lt;p&gt;You will write a redirect loop at some point. Nginx has a safe-guard.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;There is a limit of 10 internal redirects per request to prevent
request processing cycles that can occur in incorrect
configurations. If this limit is reached, the error 500 (Internal
Server Error) is returned. In such cases, the “rewrite or internal
redirection cycle” message can be seen in the error log.&lt;/p&gt;
&lt;p&gt;Ref: &lt;a href="https://nginx.org/en/docs/http/ngx_http_core_module.html#internal"&gt;source&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h1&gt;index&lt;/h1&gt;
&lt;p&gt;Index is probably one of the oldest Internet concept. I remember my
very first webpage was an &lt;code&gt;index.html&lt;/code&gt; in a web server folder. Note
that redirect by index is only applicable when we serve a request w/
&lt;strong&gt;ending slash&lt;/strong&gt;.&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Index is referring to a &lt;strong&gt;file&lt;/strong&gt; in the &lt;code&gt;root&lt;/code&gt; directory,
   eg. &lt;code&gt;index.html&lt;/code&gt;, but could be any file name designated as you
   wish.&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Serving index is only applicable to request ending with the slash
   character (‘/’). This is &lt;strong&gt;critical&lt;/strong&gt; in redirect loop!&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Index always triggers an internal redirect, so location match are
   evaluated &lt;strong&gt;twice&lt;/strong&gt;.&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h2&gt;index modules&lt;/h2&gt;
&lt;p&gt;There are three nginx modules that will serve a form of an index:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href="https://nginx.org/en/docs/http/ngx_http_index_module.html#index"&gt;&lt;code&gt;ngx_http_index_module&lt;/code&gt;&lt;/a&gt;: Defined as &lt;code&gt;index &amp;lt;filename 1&amp;gt;
   &amp;lt;filename 2&amp;gt; ...&lt;/code&gt;. When matched location has trailing slash, index
   is evaluated in order:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;If the file is found, redirect to &lt;code&gt;$uri/&amp;lt;index file&amp;gt;&lt;/code&gt;;&lt;/li&gt;
&lt;li&gt;If none is found, redirect to &lt;code&gt;$uri/&amp;lt;last index value&amp;gt;&lt;/code&gt;.&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href="https://nginx.org/en/docs/http/ngx_http_autoindex_module.html"&gt;&lt;code&gt;ngx_http_autoindex_module&lt;/code&gt;&lt;/a&gt;: Defined as &lt;code&gt;autoindex
   on&lt;/code&gt;. It returns all contents of the doc root.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="https://nginx.org/en/docs/http/ngx_http_random_index_module.html"&gt;&lt;code&gt;ngx_http_random_index_module&lt;/code&gt;&lt;/a&gt;: Defined as
   &lt;code&gt;random_index on&lt;/code&gt;. It picks a random file in the doc root to serve.&lt;/li&gt;
&lt;/ol&gt;
&lt;h2&gt;index definition&lt;/h2&gt;
&lt;p&gt;Location can inherit and override index.&lt;/p&gt;
&lt;p&gt;```[1-2,5]
root /var/www/me;
index index-A.html;&lt;/p&gt;
&lt;p&gt;location /path/a/ {}
location /path/b/ {index index-B.html}&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;You can define multiple values, and their **existence** will be tested
in sequence. If it exists, a redirect as &lt;span class="sb"&gt;`$uri/&amp;lt;index filename&amp;gt;`&lt;/span&gt; will
be issued, which then cause a new round of location match.
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;index index.$geo.html index.0.html /index.html;&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;## index redirect
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;root /var/www/A;
index index-A.html;&lt;/p&gt;
&lt;p&gt;location = / {}&lt;/p&gt;
&lt;p&gt;location / {alias /home/feng;}&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="n"&gt;A&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;request&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;to&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n n-Quoted"&gt;`http://blah.com/`&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;will&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;

&lt;span class="mf"&gt;1.&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;Match&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n n-Quoted"&gt;`= /`&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;first&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;because&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;the&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;**&lt;/span&gt;&lt;span class="n"&gt;exact&lt;/span&gt;&lt;span class="o"&gt;**&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;takes&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;precedence&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;in&lt;/span&gt;
&lt;span class="w"&gt;   &lt;/span&gt;&lt;span class="n"&gt;location&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;matching&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;
&lt;span class="mf"&gt;2.&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;We&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;are&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;now&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;in&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;the&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;1st&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;location&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;block&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;Nginx&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;tests&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;existence&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;of&lt;/span&gt;
&lt;span class="w"&gt;   &lt;/span&gt;&lt;span class="n n-Quoted"&gt;`/var/www/A/index-A.html`&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;If&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;it&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;exists&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;it&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;issues&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;**&lt;/span&gt;&lt;span class="n"&gt;redirect&lt;/span&gt;&lt;span class="o"&gt;**&lt;/span&gt;
&lt;span class="w"&gt;   &lt;/span&gt;&lt;span class="k"&gt;to&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n n-Quoted"&gt;`/index-A.html`&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;thus&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;triggering&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;another&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;location&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;match&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;
&lt;span class="mf"&gt;3.&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;This&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="kt"&gt;time&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;it&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;will&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;match&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;the&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;**&lt;/span&gt;&lt;span class="n"&gt;2nd&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;block&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;processed&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;the&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;URI&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;as&lt;/span&gt;
&lt;span class="w"&gt;   &lt;/span&gt;&lt;span class="n n-Quoted"&gt;`/index-A.html`&lt;/span&gt;&lt;span class="o"&gt;**&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;Since&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;the&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;URI&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;is&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;not&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;ending&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;w&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;slash&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;this&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="kt"&gt;time&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
&lt;span class="w"&gt;   &lt;/span&gt;&lt;span class="k"&gt;index&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;is&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;not&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;evaluated&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;anymore&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;File&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n n-Quoted"&gt;`/home/feng/index-A.html`&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;will&lt;/span&gt;
&lt;span class="w"&gt;   &lt;/span&gt;&lt;span class="n"&gt;be&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;returned&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;or&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;404&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;if&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;doesn&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;t exist.&lt;/span&gt;

&lt;span class="s1"&gt;# `try_files`&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;location / {
  try_files /system/maintenance.html
            $uri
            $uri/
            $uri/index.html
            $uri.html
            @mongrel;
}
```&lt;/p&gt;
&lt;p&gt;Internal redirect only (&lt;a href="https://nginx.org/en/docs/http/ngx_http_core_module.html#try_file"&gt;doc&lt;/a&gt;). Multiple values can be
tested using white-space as delimiter. The last uri value will be the
redirect target if all tests fail.&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Value&lt;/th&gt;
&lt;th&gt;Example&lt;/th&gt;
&lt;th&gt;Test&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;hardcoded filename&lt;/td&gt;
&lt;td&gt;/system/maintenance.html&lt;/td&gt;
&lt;td&gt;Existence of this file in doc root by &lt;code&gt;root&lt;/code&gt; or &lt;code&gt;alias&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;filename w/ variable&lt;/td&gt;
&lt;td&gt;$uri, $uri/me.html, $myname-this.html&lt;/td&gt;
&lt;td&gt;Existence of file&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;w/ ending slash&lt;/td&gt;
&lt;td&gt;$uri/&lt;/td&gt;
&lt;td&gt;Existence of directory&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;named location&lt;/td&gt;
&lt;td&gt;@blah&lt;/td&gt;
&lt;td&gt;Existence of a named location block&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;=[code|named]&lt;/td&gt;
&lt;td&gt;=404, =@django&lt;/td&gt;
&lt;td&gt;&lt;strong&gt;Can only be the last test&lt;/strong&gt;, catch-all redirect&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h1&gt;error_page&lt;/h1&gt;
&lt;p&gt;&lt;a href="https://nginx.org/en/docs/http/ngx_http_core_module.html#error_page"&gt;official doc&lt;/a&gt;. Both internal and external. If you
redirect to a named location, a proxy could take cover to continue the
process, and it may have its own error handling strategy.&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Example&lt;/th&gt;
&lt;th&gt;Effect&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;error_page 404 /404.html;&lt;/td&gt;
&lt;td&gt;Redirect to &lt;code&gt;/404.html&lt;/code&gt; for 404 error code.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;error_page 500 502 503 504 /50x.html;&lt;/td&gt;
&lt;td&gt;Combine error handling to a single uri redirect.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;error_page 404 =200 /empty.gif;&lt;/td&gt;
&lt;td&gt;Return status 200 instead of 404. Can map multiple to one.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;error_page 404 = @fallback;&lt;/td&gt;
&lt;td&gt;Proxy determines what to be returned. URI is passed on as-is.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;error_page 404 =301 http://...;&lt;/td&gt;
&lt;td&gt;Redirect to another URL. Default to 302. Can map to 301, 302, 303, 307, and 308 only.&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h1&gt;return&lt;/h1&gt;
&lt;p&gt;Will terminate any further processing, and send a response to the
browser (&lt;a href="https://nginx.org/en/docs/http/ngx_http_rewrite_module.html"&gt;doc&lt;/a&gt;). Thus it's usually define the full URL for the
target. If it's using only a uri such as &lt;code&gt;/photos&lt;/code&gt;, the full URL will
be composed by Nginx based on a couple other directive values.&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Example&lt;/th&gt;
&lt;th&gt;Context&lt;/th&gt;
&lt;th&gt;Effect&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;return 301 $scheme://www.newdomain.com$request_uri;&lt;/td&gt;
&lt;td&gt;Server&lt;/td&gt;
&lt;td&gt;Redirect all requests to a new domain&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;return 301 $scheme://blah.com/here;&lt;/td&gt;
&lt;td&gt;Location&lt;/td&gt;
&lt;td&gt;Redirect to new URL&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;return 301 /photos;&lt;/td&gt;
&lt;td&gt;Location&lt;/td&gt;
&lt;td&gt;Redirect to a URI&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;return [http|https|$scheme]://blah.com/...&lt;/td&gt;
&lt;td&gt;Location&lt;/td&gt;
&lt;td&gt;Imply code 302&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h1&gt;rewrite&lt;/h1&gt;
&lt;p&gt;Rewrite is the most flexible one since it uses regex. Behavior is
determined by the &lt;strong&gt;flag&lt;/strong&gt; (&lt;a href="https://nginx.org/en/docs/http/ngx_http_rewrite_module.html"&gt;doc&lt;/a&gt;).&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Flag&lt;/th&gt;
&lt;th&gt;Context&lt;/th&gt;
&lt;th&gt;Return Code&lt;/th&gt;
&lt;th&gt;Effect&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;last&lt;/td&gt;
&lt;td&gt;Server&lt;/td&gt;
&lt;td&gt;n/a&lt;/td&gt;
&lt;td&gt;Internal redirect. Start new location match.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;break&lt;/td&gt;
&lt;td&gt;Location&lt;/td&gt;
&lt;td&gt;n/a&lt;/td&gt;
&lt;td&gt;Skip other &lt;code&gt;rewrite&lt;/code&gt; in this &lt;code&gt;Location&lt;/code&gt; context.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;redirect&lt;/td&gt;
&lt;td&gt;n/a&lt;/td&gt;
&lt;td&gt;302&lt;/td&gt;
&lt;td&gt;Any replacement &lt;strong&gt;not&lt;/strong&gt; starting w/ [http|https|$scheme]&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;permanent&lt;/td&gt;
&lt;td&gt;n/a&lt;/td&gt;
&lt;td&gt;301&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;</content><category term="dev"></category></entry><entry><title>Django Permission, DRF, OAuth2</title><link href="https://fengxia41103.github.io/myblog/django%20permission%20oauth2.html" rel="alternate"></link><published>2023-09-10T18:44:00-04:00</published><updated>2023-09-10T18:44:00-04:00</updated><author><name>Feng Xia</name></author><id>tag:fengxia41103.github.io,2023-09-10:/myblog/django permission oauth2.html</id><summary type="html">&lt;p&gt;&lt;a href="https://www.rfc-editor.org/rfc/rfc6749#section-1.2"&gt;OAuth2&lt;/a&gt; is confusing! Here I'm gonna use Django as the framework
to how OAuth2 can be implemented. This shall provide a reference point
for others to see how OAuth2 is meant to work.&lt;/p&gt;
&lt;h1&gt;who is who is who&lt;/h1&gt;
&lt;p&gt;I'm gonna use layman's term instead of the &lt;a href="https://www.rfc-editor.org/rfc/rfc6749#section-1.2"&gt;RFC&lt;/a&gt;.&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Who&lt;/th&gt;
&lt;th&gt;Description&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;You&lt;/td&gt;
&lt;td&gt;The user who has a user account w/ Authorization Server.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Application&lt;/td&gt;
&lt;td&gt;For example, my Stock app. You are delegating this app on your behalf to access resources, thus the "Grant".&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Resource Server&lt;/td&gt;
&lt;td&gt;For example, Gmail is a &lt;em&gt;resource server&lt;/em&gt; for my emails, GDrive is another for my drives, etc.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Authorization Server&lt;/td&gt;
&lt;td&gt;Google as a whole is an Authorization Server. I authenticate w/ &lt;code&gt;google.com&lt;/code&gt;. Same for GitHub, FB, etc.&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h1&gt;OAuth2 is &amp;amp; is-not&lt;/h1&gt;
&lt;p&gt;Read &lt;a href="https://www.rfc-editor.org/rfc/rfc6749#section-1.2"&gt;RFC&lt;/a&gt;. Some points not clear from the RFC, but are important:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;It's a protocol&lt;/strong&gt;. In other words it describes a way to
   &lt;em&gt;negotiate&lt;/em&gt; authorization, but doesn't care implementation details,
   eg. each framework/language has a dozen different implementations,
   all vary at details but follow the same &lt;em&gt;requirements&lt;/em&gt; defined in
   RFC.  This &lt;a href="https://www.rfc-editor.org/rfc/rfc6749#section-1.2"&gt;RFC …&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;&lt;/ol&gt;</summary><content type="html">&lt;p&gt;&lt;a href="https://www.rfc-editor.org/rfc/rfc6749#section-1.2"&gt;OAuth2&lt;/a&gt; is confusing! Here I'm gonna use Django as the framework
to how OAuth2 can be implemented. This shall provide a reference point
for others to see how OAuth2 is meant to work.&lt;/p&gt;
&lt;h1&gt;who is who is who&lt;/h1&gt;
&lt;p&gt;I'm gonna use layman's term instead of the &lt;a href="https://www.rfc-editor.org/rfc/rfc6749#section-1.2"&gt;RFC&lt;/a&gt;.&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Who&lt;/th&gt;
&lt;th&gt;Description&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;You&lt;/td&gt;
&lt;td&gt;The user who has a user account w/ Authorization Server.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Application&lt;/td&gt;
&lt;td&gt;For example, my Stock app. You are delegating this app on your behalf to access resources, thus the "Grant".&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Resource Server&lt;/td&gt;
&lt;td&gt;For example, Gmail is a &lt;em&gt;resource server&lt;/em&gt; for my emails, GDrive is another for my drives, etc.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Authorization Server&lt;/td&gt;
&lt;td&gt;Google as a whole is an Authorization Server. I authenticate w/ &lt;code&gt;google.com&lt;/code&gt;. Same for GitHub, FB, etc.&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h1&gt;OAuth2 is &amp;amp; is-not&lt;/h1&gt;
&lt;p&gt;Read &lt;a href="https://www.rfc-editor.org/rfc/rfc6749#section-1.2"&gt;RFC&lt;/a&gt;. Some points not clear from the RFC, but are important:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;It's a protocol&lt;/strong&gt;. In other words it describes a way to
   &lt;em&gt;negotiate&lt;/em&gt; authorization, but doesn't care implementation details,
   eg. each framework/language has a dozen different implementations,
   all vary at details but follow the same &lt;em&gt;requirements&lt;/em&gt; defined in
   RFC.  This &lt;a href="https://www.rfc-editor.org/rfc/rfc6749#section-1.2"&gt;RFC&lt;/a&gt; dictates &lt;strong&gt;a very specific sequence of call
   flow/workflow&lt;/strong&gt;, and it dictates some restrictions, eg. &lt;code&gt;client
   secret&lt;/code&gt; should never be made available to the frontend/browser.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Authorization Server is the source-of-truth for user&lt;/strong&gt;. This is
   very important. OAuth2 is meant to allow a user to access
   &lt;strong&gt;multiple applications&lt;/strong&gt; while these applications don't have any
   data/table of user records! In other words, in today's micro
   service world, if I have two services and each service is a Django
   app, I don't want to maintain two separate user name called
   &lt;code&gt;fengxia&lt;/code&gt; in two DBs. Instead, I create 3rd Django app/service just
   to manage user, and this Django app is also the OAuth2
   Authorization Server.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Resource Server can be separate from Authorization Server&lt;/strong&gt;. If
   thinking of micro service architecture, this is pretty
   obvious. Individual service is the resource server, and there will
   be one Authorization Server vs. multiple resource servers. In this
   case you need to implement &lt;a href="https://datatracker.ietf.org/doc/html/rfc7662"&gt;OAuth2 Introspection&lt;/a&gt; on the
   Authorization Server (see later) so that resource server could
   obtain more information of the user by querying this token, and
   then use the user's whatever information for its own purpose.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;If letting ppl use social media account to login your own app,
   it's OAuth2&lt;/strong&gt;. Say you created the Stock app, how to entice ppl to
   use it? Instead of asking ppl to register w/ your app, you let them
   login using their Google credential. This, is OAuth2. In this case,
   Google is the Authorization Server. You will be granting the Stock
   app a &lt;code&gt;read&lt;/code&gt; scope of the &lt;code&gt;user&lt;/code&gt; resource, for example, thus now
   the Stock app can get your name, phone, email, and save them in the
   Stock's DB, the Stock app can render a HTML template w/ &lt;code&gt;Hello, {{
   user.name }}&lt;/code&gt;. You will also &lt;strong&gt;save the token&lt;/strong&gt; in Stock's DB,
   eg. a field in &lt;code&gt;User&lt;/code&gt; model, because all subsequent calls to Google
   uses this token.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;You must register application w/ Authorization Server&lt;/strong&gt;. If you
   Stock app is not the Authorization Server, and the Authorization
   Server has something(aka. resource) your want, register your
   application w/ the Authorization Server. This is defined in the
   &lt;a href="https://www.rfc-editor.org/rfc/rfc6749#page-23"&gt;protocol&lt;/a&gt;, and &lt;strong&gt;must be done&lt;/strong&gt;.&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h1&gt;OAuth2 workflow&lt;/h1&gt;
&lt;p&gt;&lt;img alt="" src="https://miro.medium.com/v2/resize:fit:1400/format:webp/1*9R2CC0_HxtzYERiqHyGs-Q.png"&gt;&lt;/p&gt;
&lt;h1&gt;OAuth2 scope&lt;/h1&gt;
&lt;p&gt;It's super confusing what OAuth2 &lt;a href="https://www.rfc-editor.org/rfc/rfc6749#page-23"&gt;scope is&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;First, scope is just string. The Authorization Server could define any
scope it wants.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;The value of the scope parameter is expressed as a list of space-
delimited, case-sensitive strings.  The strings are defined by the
authorization server.  If the value contains multiple space-delimited
strings, their order does not matter, and each string adds an
additional access range to the requested scope.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Second, it's definition &lt;strong&gt;isn't completely arbitrary&lt;/strong&gt;. Because
Authorization Server is using scope to control access to registered
application and its resources, it only makes sense that the &lt;em&gt;scope&lt;/em&gt;
string means something about the &lt;em&gt;access control&lt;/em&gt;* of the
resource. Therefore, naming a scope is rather like naming a variable
&amp;larr; there is certain &lt;a href="https://www.oauth.com/oauth2-servers/scope/defining-scopes/"&gt;best practice&lt;/a&gt; involved.&lt;/p&gt;
&lt;p&gt;And this is where Django comes in. For following discussion, we are
talking about a &lt;em&gt;Resource Server implemented in Django &amp;amp; DRF&lt;/em&gt;.&lt;/p&gt;
&lt;h2&gt;Scope can bypass permission&lt;/h2&gt;
&lt;p&gt;OAuth2 only cares scope. Whether the scope is enforcing a permission
is determined by implementation. Since scope is arbitrary string,
there is nothing preventing an API assigned a scope called "feng",
and returns a queryset of sensitive data even though the requesting user
John has no permission on this data.&lt;/p&gt;
&lt;p&gt;What influence the exact behavior in this scenario also depends on:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;the default DRF permission in the &lt;code&gt;settings.py&lt;/code&gt;:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;```python
&lt;span class="gh"&gt;#&lt;/span&gt; settings.py

REST_FRAMEWORK = {
    &amp;#39;DEFAULT_PERMISSION_CLASSES&amp;#39;: [
        &amp;#39;rest_framework.permissions.IsAuthenticated&amp;#39;,  &amp;lt;== default
    ]
}
```
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;In this case, John must be authenticated and has the "feng"
  scope. Since OAuth2 always requires authentication, so this is
  a given. However, DRF has a list of other built-in
  permissions, and some would tie into model permission, which
  then enforce a permission on top of scope.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;and &lt;code&gt;permission_classes=&lt;/code&gt; per DRF view:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="err"&gt;```&lt;/span&gt;&lt;span class="n"&gt;python&lt;/span&gt;
&lt;span class="c1"&gt;# views.py&lt;/span&gt;

&lt;span class="kn"&gt;from&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nn"&gt;guardian.shortcuts&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;assign_perm&lt;/span&gt;
&lt;span class="kn"&gt;from&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nn"&gt;rest_framework&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;viewsets&lt;/span&gt;
&lt;span class="kn"&gt;from&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nn"&gt;rest_framework.permissions&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;DjangoObjectPermissions&lt;/span&gt;

&lt;span class="kn"&gt;from&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nn"&gt;.models&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;Message&lt;/span&gt;

&lt;span class="k"&gt;class&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nc"&gt;MessageViewSet&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;viewsets&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;ModelViewSet&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;

    &lt;span class="n"&gt;permission_classes&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="o"&gt;....&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;  &lt;span class="o"&gt;&amp;lt;==&lt;/span&gt; &lt;span class="n"&gt;logical&lt;/span&gt; &lt;span class="n"&gt;AND&lt;/span&gt;
&lt;span class="err"&gt;```&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Besides the default above, each view can have a list, which is
  a logical AND. Only when user has all the permissions will he
  be allowed access to the view/API. This is essentially the
  mechanism how &lt;code&gt;django-oauth-toolkit&lt;/code&gt; checks its scope together
  w/ other DRF permissions.&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h2&gt;Scope &amp;amp; permission work together&lt;/h2&gt;
&lt;p&gt;Permission is the foundation of ACL. Really depending on the framework
and implementation, there are different level of security you could
enforce. Ideally the underline permission &lt;strong&gt;is directly translated
into scope&lt;/strong&gt;. In Django's world, this is what it looks like:&lt;/p&gt;
&lt;p&gt;&lt;img alt="" src="images/oauth2%20scope%20and%20django%20permissions.png"&gt;&lt;/p&gt;
&lt;p&gt;Django model CRUD permissions are created whenever a model is
created. So you get &lt;code&gt;blog.view_post&lt;/code&gt; permission for free, which means
you could easily use the string &lt;code&gt;blog.view_post&lt;/code&gt; as a scope &amp;lrar; a
1:1 mapping! But, each model generates 4 permissions by default, thus
using them directly as scope is too tedious.&lt;/p&gt;
&lt;p&gt;Instead, you can define two general scopes called &lt;code&gt;READ&lt;/code&gt; and &lt;code&gt;WRITE&lt;/code&gt;,
and add some custom scope, say &lt;code&gt;music&lt;/code&gt;, to protect all the
music-related APIs.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="n"&gt;In&lt;/span&gt; &lt;span class="err"&gt;`&lt;/span&gt;&lt;span class="n"&gt;settings&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;py&lt;/span&gt;&lt;span class="err"&gt;`&lt;/span&gt; &lt;span class="n"&gt;by&lt;/span&gt; &lt;span class="n"&gt;django&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;auth&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;toolkit&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;

&lt;span class="n"&gt;OAUTH2_PROVIDER&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="s1"&gt;&amp;#39;SCOPES&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="s1"&gt;&amp;#39;read&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;Read scope&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;  &lt;span class="o"&gt;&amp;lt;==&lt;/span&gt; &lt;span class="n"&gt;GET&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;HEAD&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;OPTIONS&lt;/span&gt;
        &lt;span class="s1"&gt;&amp;#39;write&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;Write scope&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;==&lt;/span&gt; &lt;span class="n"&gt;POST&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;PUT&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;PATCH&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;DELETE&lt;/span&gt;
        &lt;span class="s1"&gt;&amp;#39;music&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;Music scope&amp;#39;&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;==&lt;/span&gt; &lt;span class="n"&gt;arbitrary&lt;/span&gt;
    &lt;span class="p"&gt;},&lt;/span&gt;

    &lt;span class="s1"&gt;&amp;#39;CLIENT_ID_GENERATOR_CLASS&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;oauth2_provider.generators.ClientIdGenerator&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;

&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="n"&gt;Then&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;a&lt;/span&gt; &lt;span class="n"&gt;DRF&lt;/span&gt; &lt;span class="n"&gt;view&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;

&lt;span class="k"&gt;class&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nc"&gt;SongView&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;views&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;APIView&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="n"&gt;authentication_classes&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;OAuth2Authentication&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
    &lt;span class="n"&gt;permission_classes&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;TokenHasScope&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;DjangoModelPermissions&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;  &lt;span class="o"&gt;&amp;lt;==&lt;/span&gt;&lt;span class="n"&gt;work&lt;/span&gt; &lt;span class="n"&gt;together&lt;/span&gt;&lt;span class="err"&gt;!&lt;/span&gt;
    &lt;span class="n"&gt;required_scopes&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;music&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;h2&gt;publish scope&lt;/h2&gt;
&lt;p&gt;Let's say once you design a list of scopes, you provide them as
document so client of your Authorization Server knows what to expect,
for example, &lt;a href="https://developers.google.com/identity/protocols/oauth2/scopes"&gt;Google scopes&lt;/a&gt;.&lt;/p&gt;
&lt;h1&gt;Django &amp;amp; DRF permission&lt;/h1&gt;
&lt;p&gt;Since the idea of "scope" is to control access to &lt;em&gt;resource&lt;/em&gt;, and a
resource is an API/URL (essentially a &lt;code&gt;view&lt;/code&gt; whether DRF-ed or not),
it'd better be &lt;strong&gt;coherent w/ Django's access control &amp;mdash;
&lt;a href="https://testdriven.io/blog/django-permissions/"&gt;Permission&lt;/a&gt;&lt;/strong&gt;. In other words, Django's fundamental resource are
those data and data models. Accessing these data are controlled by the
&lt;a href="https://testdriven.io/blog/django-permissions/"&gt;Permission&lt;/a&gt;. Therefore, these permissions must be the foundation
to define a "scope". And they are.&lt;/p&gt;
&lt;h2&gt;Permissions&lt;/h2&gt;
&lt;p&gt;A couple really good articles about Django permissions, &lt;a href="https://testdriven.io/blog/django-permissions/"&gt;here&lt;/a&gt; &amp;amp;
&lt;a href="https://medium.com/djangotube/django-roles-groups-and-permissions-introduction-a54d1070544"&gt;here&lt;/a&gt;. They have good code examples of how to define and
enforce.&lt;/p&gt;
&lt;p&gt;To define a permission:&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Per&lt;/th&gt;
&lt;th&gt;Django&lt;/th&gt;
&lt;th&gt;DRF&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;Arbitrary permission&lt;/td&gt;
&lt;td&gt;&lt;code&gt;Permission.objects.create()&lt;/code&gt;, then link to &lt;code&gt;User/Group&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;n/a&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Object/row/data record&lt;/td&gt;
&lt;td&gt;&lt;a href="https://django-guardian.readthedocs.io/en/stable/"&gt;&lt;code&gt;django-guardian&lt;/code&gt;&lt;/a&gt;, &lt;a href="https://github.com/dfunckt/django-rules"&gt;&lt;code&gt;django-rules&lt;/code&gt;&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;DjangoObjectPermissions&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Model&lt;/td&gt;
&lt;td&gt;Any Django Model: C(add), R(view), U(change), D(delete)&lt;/td&gt;
&lt;td&gt;&lt;code&gt;DjangoModelPermissions&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Model custom permission&lt;/td&gt;
&lt;td&gt;Model's &lt;code&gt;Meta&lt;/code&gt;: any permission you design&lt;/td&gt;
&lt;td&gt;n/a&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;View custom permission&lt;/td&gt;
&lt;td&gt;n/a&lt;/td&gt;
&lt;td&gt;extend &lt;code&gt;BasePermission&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;To enforce a permission:&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Per&lt;/th&gt;
&lt;th&gt;Django&lt;/th&gt;
&lt;th&gt;DRF&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;Group&lt;/td&gt;
&lt;td&gt;1:n to &lt;code&gt;permissions&lt;/code&gt; via Admin console&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;User&lt;/td&gt;
&lt;td&gt;1:n to &lt;code&gt;permissions&lt;/code&gt; via Admin console, can inherit Group's directly&lt;/td&gt;
&lt;td&gt;DRF Permissions&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Enforcement @ View&lt;/td&gt;
&lt;td&gt;&lt;code&gt;PermissionRequiredMixin&lt;/code&gt;, &lt;code&gt;UserPassesTestMixin&lt;/code&gt;, &lt;code&gt;@permission_required&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;permission_classes&lt;/code&gt;, &lt;code&gt;@permission_classes&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Enforce @ Template&lt;/td&gt;
&lt;td&gt;&lt;code&gt;{% if perms.blog.view_post %}&lt;/code&gt;, &lt;code&gt;user.has_perm("blog.view_post")&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;n/a&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h1&gt;Authenticated (Group, Role) vs. Anonymous&lt;/h1&gt;
&lt;p&gt;If you are anonymous, ACL is depending on whether the view is
&lt;em&gt;protected&lt;/em&gt; using an enforcement.&lt;/p&gt;
&lt;p&gt;If you are authenticated, we know the &lt;code&gt;User&lt;/code&gt; and his &lt;code&gt;Group&lt;/code&gt;, thus the
permission is enforced by what's assigned to the &lt;code&gt;User&lt;/code&gt; or his &lt;code&gt;Group&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;Django does &lt;strong&gt;not have "role"&lt;/strong&gt;. Django uses &lt;code&gt;Group&lt;/code&gt; to group
user, and &lt;code&gt;permission&lt;/code&gt; can be attached to &lt;code&gt;Group&lt;/code&gt; so to be applied
batchly to all users in this group. Role, if implemented, will
essentially achieve the same &lt;code&gt;permission&lt;/code&gt; control. Therefore, you
&lt;strong&gt;should treat &lt;code&gt;Group&lt;/code&gt; == role&lt;/strong&gt; in Django.&lt;/p&gt;
&lt;h2&gt;DRF access control by who you are&lt;/h2&gt;
&lt;p&gt;There are two types of users &amp;mdash; authenticated, and
anonymous. Authenticated users are further divided in Django
as. &lt;strong&gt;Note&lt;/strong&gt; that staff user could also have &lt;code&gt;Group&lt;/code&gt; so &lt;code&gt;D&lt;/code&gt; and &lt;code&gt;E&lt;/code&gt;
are &lt;strong&gt;not exclusive&lt;/strong&gt; to each other. In the followings I'm treating &lt;code&gt;E&lt;/code&gt; as the
super set of &lt;code&gt;D&lt;/code&gt;.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="n"&gt;.&lt;/span&gt;
├──&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;A&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;anonymous&lt;/span&gt;
└──&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;B&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;authenticated&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;├──&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;C&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;super&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;├──&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;D&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;staff&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="nf"&gt;admin &lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;User&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;&lt;/span&gt;&lt;span class="err"&gt;s `is_staff=True`)&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;└──&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;E&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;User&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;&amp;lt;-&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;n&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="n"&gt;n&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;Group&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;We code name them as &lt;code&gt;ABCDE&lt;/code&gt;. So, how to control who can do what?&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;DRF Permission&lt;/th&gt;
&lt;th&gt;Anon can use&lt;/th&gt;
&lt;th&gt;Can Read&lt;/th&gt;
&lt;th&gt;Can Write&lt;/th&gt;
&lt;th&gt;Enforce Model Permission&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;AllowAny&lt;/td&gt;
&lt;td&gt;yes&lt;/td&gt;
&lt;td&gt;A,B&lt;/td&gt;
&lt;td&gt;A,B&lt;/td&gt;
&lt;td&gt;none&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;IsAuthenticated&lt;/td&gt;
&lt;td&gt;no&lt;/td&gt;
&lt;td&gt;B&lt;/td&gt;
&lt;td&gt;B&lt;/td&gt;
&lt;td&gt;none&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;IsAuthenticatedOrReadOnly&lt;/td&gt;
&lt;td&gt;yes&lt;/td&gt;
&lt;td&gt;A,B&lt;/td&gt;
&lt;td&gt;B&lt;/td&gt;
&lt;td&gt;none&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;IsAdminUser&lt;/td&gt;
&lt;td&gt;no&lt;/td&gt;
&lt;td&gt;D&lt;/td&gt;
&lt;td&gt;D&lt;/td&gt;
&lt;td&gt;none&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;DjangoModelPermissions&lt;/td&gt;
&lt;td&gt;no&lt;/td&gt;
&lt;td&gt;permission(B)&lt;/td&gt;
&lt;td&gt;permission(B)&lt;/td&gt;
&lt;td&gt;B's CRUD&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;DjangoModelPermissionsOrAnon&lt;/td&gt;
&lt;td&gt;yes&lt;/td&gt;
&lt;td&gt;A,B&lt;/td&gt;
&lt;td&gt;permission(B)&lt;/td&gt;
&lt;td&gt;B's CUD&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;DjangoObjectPermissions&lt;/td&gt;
&lt;td&gt;no&lt;/td&gt;
&lt;td&gt;permission(B)&lt;/td&gt;
&lt;td&gt;permission(B)&lt;/td&gt;
&lt;td&gt;B's CRUD&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h2&gt;django-oauth-toolkit access control by scope&lt;/h2&gt;
&lt;p&gt;Finally, we can look at the ACL of &lt;a href="https://django-oauth-toolkit.readthedocs.io/"&gt;&lt;code&gt;django-auto-toolkit&lt;/code&gt;&lt;/a&gt;, which
is just a list of &lt;a href="https://django-oauth-toolkit.readthedocs.io/en/latest/rest-framework/permissions.html#"&gt;permissions&lt;/a&gt; in addition to DRF permissions!
This extension focuses on checking the oauth scope by the token, and
&lt;strong&gt;can be combined in AND w/ all other DRF permissions&lt;/strong&gt;, and then
through DRF's &lt;code&gt;DjangoModelPermissions&lt;/code&gt;, it will be further tied into
Django model permissions:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="k"&gt;class&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nc"&gt;SongView&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;views&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;APIView&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="n"&gt;authentication_classes&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;OAuth2Authentication&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
    &lt;span class="n"&gt;permission_classes&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;TokenHasScope&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;DjangoModelPermissions&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;  &lt;span class="o"&gt;&amp;lt;==&lt;/span&gt;&lt;span class="n"&gt;work&lt;/span&gt; &lt;span class="n"&gt;together&lt;/span&gt;&lt;span class="err"&gt;!&lt;/span&gt;
    &lt;span class="n"&gt;required_scopes&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;music&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Below shows the behavior of toolkit permission behaviors. Because OAuth2 user
must have been authenticated, all these are &lt;strong&gt;not applicable&lt;/strong&gt; to anonymous users.&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Control&lt;/th&gt;
&lt;th&gt;required_scopes&lt;/th&gt;
&lt;th&gt;authentication_classes&lt;/th&gt;
&lt;th&gt;Read&lt;/th&gt;
&lt;th&gt;Write&lt;/th&gt;
&lt;th&gt;Enforce Model Permission&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;TokenHasScope&lt;/td&gt;
&lt;td&gt;required&lt;/td&gt;
&lt;td&gt;&lt;code&gt;[OAuth2Authentication]&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;has all &lt;code&gt;required_scopes&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;has all &lt;code&gt;required_scopes&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;none&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;TokenHasReadWriteScope&lt;/td&gt;
&lt;td&gt;optional&lt;/td&gt;
&lt;td&gt;&lt;code&gt;[OAuth2Authentication]&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;has &lt;code&gt;read&lt;/code&gt; scope&lt;/td&gt;
&lt;td&gt;has &lt;code&gt;write&lt;/code&gt; scope&lt;/td&gt;
&lt;td&gt;none&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;TokenHasResourceScope&lt;/td&gt;
&lt;td&gt;required&lt;/td&gt;
&lt;td&gt;&lt;code&gt;[OAuth2Authentication]&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;has &lt;code&gt;music:read&lt;/code&gt; scope&lt;/td&gt;
&lt;td&gt;has &lt;code&gt;music:write&lt;/code&gt; scope&lt;/td&gt;
&lt;td&gt;none&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;IsAuthenticatedOrTokenHasScope&lt;/td&gt;
&lt;td&gt;required&lt;/td&gt;
&lt;td&gt;DRF's&lt;/td&gt;
&lt;td&gt;has &lt;code&gt;music:read&lt;/code&gt; scope or authenticated&lt;/td&gt;
&lt;td&gt;has &lt;code&gt;music:write&lt;/code&gt; scope or authenticated&lt;/td&gt;
&lt;td&gt;should use &lt;code&gt;permission_classes = [IsAuthenticatedOrTokenHasScope, DjangoModelPermission]&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;TokenMatchesOASRequirements&lt;/td&gt;
&lt;td&gt;&lt;code&gt;required_alternate_scopes&lt;/code&gt; per method&lt;/td&gt;
&lt;td&gt;&lt;code&gt;[OAuth2Authentication]&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;has all scopes by the HTTP verb&lt;/td&gt;
&lt;td&gt;has all scopes by the HTTP verrb&lt;/td&gt;
&lt;td&gt;no&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;Complicated, isn't it!?&lt;/p&gt;</content><category term="dev"></category></entry><entry><title>Full stack Django on k8s</title><link href="https://fengxia41103.github.io/myblog/full%20stack%20django%20on%20k8s.html" rel="alternate"></link><published>2023-08-29T10:59:00-04:00</published><updated>2023-08-29T10:59:00-04:00</updated><author><name>Feng Xia</name></author><id>tag:fengxia41103.github.io,2023-08-29:/myblog/full stack django on k8s.html</id><summary type="html">&lt;p&gt;Assuming you already know k8s basics. This article is for deploying a
full stack application, in this case my beloved &lt;a href="https://fengxia41103.github.io/stock/#/"&gt;stock analyzer&lt;/a&gt; on
k8s. In particular I'll talk about how to migrate a &lt;em&gt;legacy&lt;/em&gt; system
like this onto a k8s based on my experience. This would give many
systems out there a clue of how to design a roadmap for such end
state.&lt;/p&gt;
&lt;h1&gt;App's architecture&lt;/h1&gt;
&lt;p&gt;Nothing special here: backend mainly as API, frontend React, celery worker
assuming a redis queue, redis, and DB.&lt;/p&gt;
&lt;h1&gt;Migration steps&lt;/h1&gt;
&lt;p&gt;The entire stack has been &lt;a href="https://github.com/fengxia41103/stock/blob/dev/docker-compose.yml"&gt;&lt;code&gt;docker-compose&lt;/code&gt;&lt;/a&gt;. So the question is
how to migrate these dockers onto k8s? In my case, three components
are going onto k8s: frontend, backend, celery.&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Registry&lt;/strong&gt;. In development mode, docker images are usually built
   and stored on the local where the &lt;code&gt;docker-compose&lt;/code&gt; is
   launched. This is not the case in k8s anymore. Essential difference
   is that &lt;strong&gt;k8s does not build image&lt;/strong&gt;. It's to take the artifact
   from some registry and deploy. Therefore, for the two
   application-specific images &amp;mdash; Django app and frontend, the
   images must be &lt;strong&gt;built …&lt;/strong&gt;&lt;/p&gt;&lt;/li&gt;&lt;/ol&gt;</summary><content type="html">&lt;p&gt;Assuming you already know k8s basics. This article is for deploying a
full stack application, in this case my beloved &lt;a href="https://fengxia41103.github.io/stock/#/"&gt;stock analyzer&lt;/a&gt; on
k8s. In particular I'll talk about how to migrate a &lt;em&gt;legacy&lt;/em&gt; system
like this onto a k8s based on my experience. This would give many
systems out there a clue of how to design a roadmap for such end
state.&lt;/p&gt;
&lt;h1&gt;App's architecture&lt;/h1&gt;
&lt;p&gt;Nothing special here: backend mainly as API, frontend React, celery worker
assuming a redis queue, redis, and DB.&lt;/p&gt;
&lt;h1&gt;Migration steps&lt;/h1&gt;
&lt;p&gt;The entire stack has been &lt;a href="https://github.com/fengxia41103/stock/blob/dev/docker-compose.yml"&gt;&lt;code&gt;docker-compose&lt;/code&gt;&lt;/a&gt;. So the question is
how to migrate these dockers onto k8s? In my case, three components
are going onto k8s: frontend, backend, celery.&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Registry&lt;/strong&gt;. In development mode, docker images are usually built
   and stored on the local where the &lt;code&gt;docker-compose&lt;/code&gt; is
   launched. This is not the case in k8s anymore. Essential difference
   is that &lt;strong&gt;k8s does not build image&lt;/strong&gt;. It's to take the artifact
   from some registry and deploy. Therefore, for the two
   application-specific images &amp;mdash; Django app and frontend, the
   images must be &lt;strong&gt;built beforehand&lt;/strong&gt; and pushed to a registry. In
   our case I'm using a private Harbor. Harbor is deployed outside the
   k8s cluster. I'm assuming it has its own admin, storage, and so
   on. The integration point is a Harbor user/token for k8s to pull
   image from it. I'll cover this later.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Django setting&lt;/strong&gt;. Need to parameterize some settings and read
   them from env. The env would be fed by container launcher just like
   the &lt;code&gt;env:&lt;/code&gt; list in compose. There are two sets of envs &amp;mdash; one
   sensitive info such as password, and one not sensitive. The former
   will be in k8s secret, the latter as configmap. Which settings to
   be parameterized is subjective. See section for mine.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;React dotnev&lt;/strong&gt;. Frontend dotenv is &lt;strong&gt;not dynamic&lt;/strong&gt;. It's baked
   inside the built image. Thus, you must &lt;strong&gt;decide on&lt;/strong&gt; a deployment
   strategy for the Django api service, and coordinate this w/
   frontend's dotenv. The strategy will determine the service's uri,
   which then is baked into frontend's image. Because the
   k8s-generated uri is rather dynamic, eg. namespace, service name,
   this coordination &lt;strong&gt;must be done offline&lt;/strong&gt; before frontend can be
   deployed.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Celery workers&lt;/strong&gt;. Image is the same as the Django app, only the
   &lt;code&gt;command&lt;/code&gt; is different. Key is to scale its replica so we can
   control how quickly to drain a queue. You can play w/ the launch
   command &lt;code&gt;-Q summary,stock,statement,price,news -l INFO&lt;/code&gt; to decide
   how you want to deploy these workers. For example, should they all
   be watching the same queue, or one for each? and the log level?&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Redis, DB&lt;/strong&gt;. I call these common services. They &lt;strong&gt;don't have to
   live on the same cluster&lt;/strong&gt;. If they already exist somewhere else,
   migration can use them directly. In my case, I'm leaving DB outside
   the k8s, thinking service such as RDS or a dedicated DBA is better
   than me administrating a DB. Redis will be moved to k8s because
   it's used as a message broker. So it's transient in nature for
   me. But if you use it for data records, it may be better off just
   like RDS service. In other words, I'm expecting k8s cluster to
   scale of application, frontend, transient services, but leaving
   persisted data to a &lt;em&gt;professional&lt;/em&gt;.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Customer A,B,C, ingress&lt;/strong&gt;. Imagine this application is sold
   to multiple customers.&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Backend, frontend, and celery will be in a namespace, whereas
     redis service is shared.&lt;/li&gt;
&lt;li&gt;Backend API is exposed in k8s ingress, and further config is
     required to be &lt;strong&gt;accessible from the internet&lt;/strong&gt; such as using
     an &lt;a href="https://fengxia41103.github.io/myblog/k8s lab.html"&gt;external node LB&lt;/a&gt;. Each api's url will be different,
     eg. &lt;code&gt;app.client-a.feng.local&lt;/code&gt;, &lt;code&gt;app.client-b.feng.local&lt;/code&gt;. In
     production this will be customer's full domain.&lt;/li&gt;
&lt;li&gt;The api's url will be baked into frontend image via dotenv.&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h1&gt;End state&lt;/h1&gt;
&lt;p&gt;After everything is done:&lt;/p&gt;
&lt;p&gt;&lt;img alt="" src="images/django%20fullstack%20on%20k8s.png"&gt;&lt;/p&gt;
&lt;h1&gt;Harbor&lt;/h1&gt;
&lt;p&gt;You need to configure Harbor project and access to this project. Then
add the access info to k8s:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;kubectl&lt;span class="w"&gt; &lt;/span&gt;create&lt;span class="w"&gt; &lt;/span&gt;secret&lt;span class="w"&gt; &lt;/span&gt;docker-registry&lt;span class="w"&gt; &lt;/span&gt;harbor&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="se"&gt;\&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;--docker-server&lt;span class="o"&gt;=&lt;/span&gt;blah&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="se"&gt;\&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;--docker-username&lt;span class="o"&gt;=&lt;/span&gt;blah&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="se"&gt;\&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;--docker-password&lt;span class="o"&gt;=&lt;/span&gt;blah&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="se"&gt;\&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;--docker-email&lt;span class="o"&gt;=&lt;/span&gt;blah
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Then, in helm &lt;code&gt;values.yaml&lt;/code&gt;, specify the image to use:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="nt"&gt;image&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="nt"&gt;repository&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="l l-Scalar l-Scalar-Plain"&gt;harbor.feng.local:9800/library/frontend_stock&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="nt"&gt;pullPolicy&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="l l-Scalar l-Scalar-Plain"&gt;Always  &amp;lt;== Use this is best practice!!!&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="nt"&gt;tag&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s"&gt;&amp;quot;v1.1.0.beta&amp;quot;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;h2&gt;tag and push&lt;/h2&gt;
&lt;p&gt;To push an image to harbor:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;List the docker images you have on the server/dev machine, &lt;code&gt;docker
   image ls&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Tag an image: &lt;code&gt;docker tag e6bbf5e4d606
   harbor.feng.local:9800/library/frontend_stock:v1.0.0&lt;/code&gt;&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;code&gt;e6...&lt;/code&gt;: is the image digest&lt;/li&gt;
&lt;li&gt;&lt;code&gt;harbor.feng.local:9800&lt;/code&gt;: the harbor server &amp;amp; port. You should
     be able to see the web UI by going to
     &lt;code&gt;https://harbor.feng.local:9800&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;library&lt;/code&gt;: is a &lt;code&gt;project&lt;/code&gt; inside harbor.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;frontend_stock&lt;/code&gt;: your image name, could be anything. In harbor
     this is called a &lt;code&gt;repository&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;v1.0.0&lt;/code&gt;: image tag.&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Then, &lt;code&gt;docker push
   harbor.feng.local:9800/library/frontend_stock:v1.0.0&lt;/code&gt;, and watch
   the image uloaded to harbor.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;Goto harbor to double check.&lt;/li&gt;
&lt;/ol&gt;
&lt;h1&gt;Parameterize frontend docker&lt;/h1&gt;
&lt;p&gt;In order to bake dotenv into frontend image:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;a href="https://www.npmjs.com/package/env-cmd"&gt;&lt;code&gt;yarn install -D env-cmd&lt;/code&gt;&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Update &lt;code&gt;package.json&lt;/code&gt;: &lt;code&gt;"start": "env-cmd -f
   envs/$ENV... craco..."&lt;/code&gt;, whereas we dotenv files are under the
   &lt;code&gt;envs/&lt;/code&gt; folder. Also, parameter &lt;code&gt;$ENV&lt;/code&gt; so that cli becomes
   &lt;code&gt;ENV=blah yarn start&lt;/code&gt;. Same goes to &lt;code&gt;build:&lt;/code&gt;.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;```json
&amp;quot;scripts&amp;quot;: {
  &amp;quot;start&amp;quot;: &amp;quot;env-cmd -f envs/$ENV craco start&amp;quot;,
},
```
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Add &lt;code&gt;arg&lt;/code&gt; to Dockerfile. There is a good &lt;a href="https://vsupalov.com/docker-arg-env-variable-guide/#arg-and-env"&gt;article&lt;/a&gt; about ARG
   vs. ENV. To build, &lt;code&gt;docker build --build-arg BUILD_FOR=a_value...&lt;/code&gt;.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;```
#&lt;span class="w"&gt; &lt;/span&gt;build&lt;span class="w"&gt; &lt;/span&gt;environment
FROM&lt;span class="w"&gt; &lt;/span&gt;node:16.15.1&lt;span class="w"&gt; &lt;/span&gt;as&lt;span class="w"&gt; &lt;/span&gt;builder

ARG&lt;span class="w"&gt; &lt;/span&gt;NPM_TOKEN&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="err"&gt;&amp;lt;&lt;/span&gt;==&lt;span class="w"&gt; &lt;/span&gt;private&lt;span class="w"&gt; &lt;/span&gt;npm&lt;span class="w"&gt; &lt;/span&gt;registry&lt;span class="w"&gt; &lt;/span&gt;token
ARG&lt;span class="w"&gt; &lt;/span&gt;BUILD_FOR&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="err"&gt;&amp;lt;&lt;/span&gt;==&lt;span class="w"&gt; &lt;/span&gt;env&lt;span class="w"&gt; &lt;/span&gt;parameter

...

#&lt;span class="w"&gt; &lt;/span&gt;npmrc
RUN&lt;span class="w"&gt; &lt;/span&gt;echo&lt;span class="w"&gt; &lt;/span&gt;&amp;quot;//npm.pkg.github.com/:_authToken=&lt;span class="cp"&gt;${&lt;/span&gt;&lt;span class="n"&gt;NPM_TOKEN&lt;/span&gt;&lt;span class="cp"&gt;}&lt;/span&gt;&amp;quot;&lt;span class="w"&gt; &lt;/span&gt;&amp;gt;&amp;gt;&lt;span class="w"&gt; &lt;/span&gt;~/.npmrc
RUN&lt;span class="w"&gt; &lt;/span&gt;echo&lt;span class="w"&gt; &lt;/span&gt;&amp;quot;//npm.pkg.github.com/:_authToken=&lt;span class="cp"&gt;${&lt;/span&gt;&lt;span class="n"&gt;NPM_TOKEN&lt;/span&gt;&lt;span class="cp"&gt;}&lt;/span&gt;&amp;quot;&lt;span class="w"&gt; &lt;/span&gt;&amp;gt;&amp;gt;&lt;span class="w"&gt; &lt;/span&gt;~/.yarnrc
...

#&lt;span class="w"&gt; &lt;/span&gt;build
RUN&lt;span class="w"&gt; &lt;/span&gt;env-cmd&lt;span class="w"&gt; &lt;/span&gt;-f&lt;span class="w"&gt; &lt;/span&gt;envs/&lt;span class="cp"&gt;${&lt;/span&gt;&lt;span class="n"&gt;BUILD_FOR&lt;/span&gt;&lt;span class="cp"&gt;}&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;yarn&lt;span class="w"&gt; &lt;/span&gt;run&lt;span class="w"&gt; &lt;/span&gt;build&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="err"&gt;&amp;lt;&lt;/span&gt;==&lt;span class="w"&gt; &lt;/span&gt;use&lt;span class="w"&gt; &lt;/span&gt;env&lt;span class="w"&gt; &lt;/span&gt;parameter
...
```
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;(optional) Add the same Dockerfile args to &lt;code&gt;docker-compose&lt;/code&gt;. This
   is really for convenience and consistency so that using compose
   will achieve the same effect as above. To use, &lt;code&gt;BUILD_FOR=blah
   NPM_TOKEN=blah docker-compose up --build frontend&lt;/code&gt;.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;```yaml
frontend:
&lt;span class="w"&gt;  &lt;/span&gt;image:&lt;span class="w"&gt; &lt;/span&gt;frontend_stock
&lt;span class="w"&gt;  &lt;/span&gt;build:
&lt;span class="w"&gt;    &lt;/span&gt;context:&lt;span class="w"&gt; &lt;/span&gt;./frontend
&lt;span class="w"&gt;    &lt;/span&gt;dockerfile:&lt;span class="w"&gt; &lt;/span&gt;./Dockerfile
&lt;span class="w"&gt;    &lt;/span&gt;args:
&lt;span class="w"&gt;      &lt;/span&gt;BUILD_FOR:&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="cp"&gt;${&lt;/span&gt;&lt;span class="n"&gt;BUILD_FOR&lt;/span&gt;&lt;span class="cp"&gt;}&lt;/span&gt;
&lt;span class="w"&gt;      &lt;/span&gt;NPM_TOKEN:&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="cp"&gt;${&lt;/span&gt;&lt;span class="n"&gt;NPM_TOKEN&lt;/span&gt;&lt;span class="cp"&gt;}&lt;/span&gt;
```
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Now you can build the image, tag it, then push to harbor. However you
are earmarking the image to be client-A's vs. B's is your choice
&amp;larr; different tag, different project, whatever. Docker tagging is
itself a topic which is not covered here.&lt;/p&gt;
&lt;h1&gt;Django setting params&lt;/h1&gt;
&lt;p&gt;There are endless options to parameterize Django app. For my purpose a
few things worth highlighting here:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="n"&gt;DJANGO_DEBUG&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;bool&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;int&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;os&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;environ&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;DJANGO_DEBUG&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="ow"&gt;or&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
&lt;span class="n"&gt;DATABASE&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;os&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;environ&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;MYSQL_DATABASE&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;DEPLOY_TYPE&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;os&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;environ&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;DEPLOY_TYPE&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;dev&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;DB_USER&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;os&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;environ&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;DJANGO_DB_USER&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;DB_PWD&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;os&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;environ&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;DJANGO_DB_PWD&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;DB_HOST&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;os&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;environ&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;DJANGO_DB_HOST&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;DB_PORT&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;os&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;environ&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;DJANGO_DB_PORT&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;REDIS_HOST&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;os&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;environ&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;DJANGO_REDIS_HOST&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;h2&gt;redis&lt;/h2&gt;
&lt;p&gt;&lt;code&gt;REDIS_HOST&lt;/code&gt; is used as &lt;code&gt;BROKER_URL = "redis://%s:6379/0" %
REDIS_HOST&lt;/code&gt;, whereas the value follows the format
&lt;code&gt;&amp;lt;user&amp;gt;:&amp;lt;pwd&amp;gt;@&amp;lt;server&amp;gt;&lt;/code&gt;. Default user for redis is &lt;strong&gt;&lt;code&gt;default&lt;/code&gt;&lt;/strong&gt;, and
there seems to &lt;a href="https://artifacthub.io/packages/helm/bitnami/redis"&gt;only possible to change password by this helm&lt;/a&gt;. For
example:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="k"&gt;default&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="n"&gt;blah&lt;/span&gt;&lt;span class="err"&gt;@&lt;/span&gt;&lt;span class="n"&gt;redis&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;master&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;redis&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;svc&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;cluster&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;local&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;&lt;strong&gt;Be sure&lt;/strong&gt; to use the &lt;code&gt;redis-master&lt;/code&gt; because celery will require a
&lt;code&gt;write&lt;/code&gt; access. Other replicas are for read-only.&lt;/p&gt;
&lt;h1&gt;Provide env from k8s&lt;/h1&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;Save the values in two files. Keys should be the env's key, thus be
   sure it's the same as the Python code &lt;code&gt;os.env["blah"]&lt;/code&gt; key.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;```conf
&lt;span class="gh"&gt;#&lt;/span&gt; configmap

DJANGO_DEBUG=1
MYSQL_DATABASE=
DEPLOY_TYPE=dev
DJANGO_DB_HOST=
DJANGO_DB_PORT=

&lt;span class="gh"&gt;#&lt;/span&gt; secret

MYSQL_USER=
MYSQL_PASSWORD=
MYSQL_ROOT_PASSWORD=
DJANGO_DB_USER=
DJANGO_DB_PWD=
DJANGO_REDIS_HOST=
```
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Create configmap and secret from the files. Note the names
   &lt;code&gt;stock-backend-env&lt;/code&gt; and &lt;code&gt;stock-backend-secret&lt;/code&gt;. They will be used
   next.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;```shell
kubectl create configmap stock-backend-env \
  --from-env-file=config-dotenv \
  --namespace client-a

k create secret generic stock-backend-secret \
  --from-env-file=secret-dotenv \
  --namespace client-a
```
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;In helm's &lt;code&gt;values.yaml&lt;/code&gt;:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;```yml
env:
  configmap: stock-backend-env
  secret: stock-backend-secret
```
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;In helm's &lt;code&gt;deployment.yaml&lt;/code&gt;, use &lt;code&gt;envFrom&lt;/code&gt; in the container section:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="x"&gt;```yml&lt;/span&gt;
&lt;span class="x"&gt;containers:&lt;/span&gt;
&lt;span class="x"&gt;  - name: &lt;/span&gt;&lt;span class="cp"&gt;{{&lt;/span&gt; &lt;span class="nv"&gt;.Chart.Name&lt;/span&gt; &lt;span class="cp"&gt;}}&lt;/span&gt;
&lt;span class="x"&gt;    envFrom:  &amp;lt;== Import k8s configmap &amp;amp; secret as env!!!&lt;/span&gt;
&lt;span class="x"&gt;    &lt;/span&gt;&lt;span class="cp"&gt;{{&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="k"&gt;with&lt;/span&gt; &lt;span class="nv"&gt;.Values.env.configmap&lt;/span&gt; &lt;span class="cp"&gt;}}&lt;/span&gt;
&lt;span class="x"&gt;    - configMapRef:&lt;/span&gt;
&lt;span class="x"&gt;        name: &amp;quot;&lt;/span&gt;&lt;span class="cp"&gt;{{&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="nv"&gt;toYaml&lt;/span&gt; &lt;span class="err"&gt;.&lt;/span&gt; &lt;span class="cp"&gt;}}&lt;/span&gt;&lt;span class="x"&gt;&amp;quot;&lt;/span&gt;
&lt;span class="x"&gt;    &lt;/span&gt;&lt;span class="cp"&gt;{{&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="nv"&gt;end&lt;/span&gt; &lt;span class="cp"&gt;}}&lt;/span&gt;
&lt;span class="x"&gt;    &lt;/span&gt;&lt;span class="cp"&gt;{{&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="k"&gt;with&lt;/span&gt; &lt;span class="nv"&gt;.Values.env.secret&lt;/span&gt; &lt;span class="cp"&gt;}}&lt;/span&gt;
&lt;span class="x"&gt;    - secretRef:&lt;/span&gt;
&lt;span class="x"&gt;        name: &amp;quot;&lt;/span&gt;&lt;span class="cp"&gt;{{&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="nv"&gt;toYaml&lt;/span&gt; &lt;span class="err"&gt;.&lt;/span&gt; &lt;span class="cp"&gt;}}&lt;/span&gt;&lt;span class="x"&gt;&amp;quot;&lt;/span&gt;
&lt;span class="x"&gt;    &lt;/span&gt;&lt;span class="cp"&gt;{{&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="nv"&gt;end&lt;/span&gt; &lt;span class="cp"&gt;}}&lt;/span&gt;
&lt;span class="x"&gt;```&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;/li&gt;
&lt;/ol&gt;
&lt;h1&gt;frontend helm&lt;/h1&gt;
&lt;p&gt;A few special considerations:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;By default I'm disabling ingress. This is just an extra layer of
   protection against accident in deployment.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;```yml
ingress:
  enabled: false
```
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Then, I create a &lt;code&gt;profiles/&lt;/code&gt; folder to hold ingress profile for
   each client. For example, client A's will be
   &lt;code&gt;profiles/client-a.yaml&lt;/code&gt; as:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;```yml
ingress:
  enabled: true
  className: &amp;quot;nginx&amp;quot;
  annotations:
    nginx.ingress.kubernetes.io/rewrite-target: /
  hosts:
    - host: client-a.blah.com  &amp;lt;== A&amp;#39;s domain
      paths:
        - path: /
          pathType: Prefix

  tls: []
```
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Now when I deploy for A using and enable its ingress:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;helm install stock-frontend helm \
  -n client-a \
  -f path/to/profiles/client-a.yaml \
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;h1&gt;now, deploy for client A&lt;/h1&gt;
&lt;p&gt;By now I have three helms: backend api, celery, and frontend.&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Create/pick a namespace, say &lt;code&gt;client-a&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;Create envs as configmap &amp;amp; secret.&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Backend api. In order to override list value &lt;code&gt;ingress.hosts[0]&lt;/code&gt;,
   you &lt;strong&gt;must use &lt;code&gt;-f path/to/values.yaml&lt;/code&gt;&lt;/strong&gt; &amp;larr; this is a helm known
   limitation.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;```shell
helm install stock-backend-api helm-stock-backend-api \
  -n client-a \
  -f helm-stock-backend-api/values.yaml \
  --set &amp;quot;ingress.hosts[0].host=client-a.blah.com&amp;quot; \
  --set image.tag=&amp;quot;blah&amp;quot;
```
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Backend celery. Easy.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;```shell
helm install stock-backend-celery helm-stock-backend-celery \
  -n client-a \
  --set image.tag=&amp;quot;blah&amp;quot;
```
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Frontend.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;```shell
helm install stock-frontend helm \
  -n client-a \
  -f helm/profiles/client-a.yaml \
  --set image.tag=&amp;quot;blah&amp;quot;
```
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;If using an external nginx as LB to cluster nodes, add a &lt;code&gt;server&lt;/code&gt;
   block in nginx conf:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="err"&gt;```&lt;/span&gt;&lt;span class="nt"&gt;conf&lt;/span&gt;
&lt;span class="nt"&gt;server&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="err"&gt;server_name&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="err"&gt;client-a.blah.com&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="err"&gt;location&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="err"&gt;/&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="err"&gt;{&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="err"&gt;include&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="err"&gt;/etc/nginx/proxy_params&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="err"&gt;proxy_pass&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;http&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="o"&gt;//&lt;/span&gt;&lt;span class="n"&gt;k8s&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="err"&gt;}&lt;/span&gt;
&lt;span class="err"&gt;```&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Reload the LB nginx, and visit &lt;code&gt;http://client-a.blah.com&lt;/code&gt;. You should
be good to go.&lt;/p&gt;</content><category term="dev"></category></entry><entry><title>k8s lab</title><link href="https://fengxia41103.github.io/myblog/k8s%20lab.html" rel="alternate"></link><published>2023-06-26T08:47:00-04:00</published><updated>2023-06-26T08:47:00-04:00</updated><author><name>Feng Xia</name></author><id>tag:fengxia41103.github.io,2023-06-26:/myblog/k8s lab.html</id><summary type="html">&lt;p&gt;I'm surprised that no article is giving a clear setup of a home k8s lab
w/ a Linux host. So here it is.&lt;/p&gt;
&lt;h1&gt;On Dev node&lt;/h1&gt;
&lt;p&gt;On your dev node, which is a machine outside k8s cluster
node. Assuming you have the following installed already:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;Python and python &lt;code&gt;venv&lt;/code&gt; module.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Ansible. Install it in a &lt;code&gt;venv&lt;/code&gt;.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;KVM stuff. See my dev's &lt;code&gt;kvm&lt;/code&gt; project for details. You could also
   use any VM framework as long as you could create 3 VMs.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;ssh-keygen&lt;/code&gt; to create SSH key. If you already have a previous one,
   you could either use the same key, or create a new one dedicated
   for automation by changing the default value below:&lt;/p&gt;
&lt;p&gt;&lt;code&gt;shell
  Enter file in which to save the key (/home/fengxia/.ssh/id_rsa):&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Create a &lt;code&gt;$HOME/.kube&lt;/code&gt;.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Install &lt;code&gt;kubectl&lt;/code&gt;. I may ansible this later as well. For now a
   manual process.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;In Ansible working directory, dump a vanilla ansible config file:
   &lt;code&gt;ansible-config init --disabled &amp;gt; ansible.cfg&lt;/code&gt;. Change the line
   &lt;code&gt;private_key_file=/home/fengxia/.ssh/id_rsa_auto&lt;/code&gt; to point it to
   the SSH key we …&lt;/p&gt;&lt;/li&gt;&lt;/ol&gt;</summary><content type="html">&lt;p&gt;I'm surprised that no article is giving a clear setup of a home k8s lab
w/ a Linux host. So here it is.&lt;/p&gt;
&lt;h1&gt;On Dev node&lt;/h1&gt;
&lt;p&gt;On your dev node, which is a machine outside k8s cluster
node. Assuming you have the following installed already:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;Python and python &lt;code&gt;venv&lt;/code&gt; module.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Ansible. Install it in a &lt;code&gt;venv&lt;/code&gt;.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;KVM stuff. See my dev's &lt;code&gt;kvm&lt;/code&gt; project for details. You could also
   use any VM framework as long as you could create 3 VMs.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;ssh-keygen&lt;/code&gt; to create SSH key. If you already have a previous one,
   you could either use the same key, or create a new one dedicated
   for automation by changing the default value below:&lt;/p&gt;
&lt;p&gt;&lt;code&gt;shell
  Enter file in which to save the key (/home/fengxia/.ssh/id_rsa):&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Create a &lt;code&gt;$HOME/.kube&lt;/code&gt;.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Install &lt;code&gt;kubectl&lt;/code&gt;. I may ansible this later as well. For now a
   manual process.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;In Ansible working directory, dump a vanilla ansible config file:
   &lt;code&gt;ansible-config init --disabled &amp;gt; ansible.cfg&lt;/code&gt;. Change the line
   &lt;code&gt;private_key_file=/home/fengxia/.ssh/id_rsa_auto&lt;/code&gt; to point it to
   the SSH key we are to use for.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Install &lt;code&gt;helm&lt;/code&gt;.&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h1&gt;Bootstrap k8s cluster&lt;/h1&gt;
&lt;p&gt;We bootstrap using ansible.&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;Start three VMs, one control node and two worker nodes. Write their
   IPs in the &lt;code&gt;hosts&lt;/code&gt;. You could either use the &lt;code&gt;cloud-init&lt;/code&gt; to bake
   in the SSH's pub key, or do &lt;code&gt;ssh-copy-id -i ~/.ssh/id_rsa_auto.pub
   fengxia@ip&lt;/code&gt; to copy them manually. Test &lt;code&gt;ssh
   fengxia@ip&lt;/code&gt; after that keys are working.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Run ansible: &lt;code&gt;ansible-playbook -i hosts bootstrap.yml&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;On your dev node, &lt;code&gt;scp fengxia@ip:~/.kube/config ~/.kube/config&lt;/code&gt; to
   copy the cluster config to the dev machine. IP could be any of the
   k8s nodes because the same config are on&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h1&gt;k8s storage&lt;/h1&gt;
&lt;p&gt;For local dev purpose, use server disks on worker nodes, aka. local
storage, for data persistence.&lt;/p&gt;
&lt;h2&gt;provisioner&lt;/h2&gt;
&lt;p&gt;&lt;strong&gt;Note&lt;/strong&gt; that there is no &lt;code&gt;kubectl&lt;/code&gt; command to list installed
provisioners.&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;Add static provisioner helm repo:&lt;/p&gt;
&lt;p&gt;```shell
  helm repo add \
    sig-storage-local-static-provisioner \
    https://kubernetes-sigs.github.io/sig-storage-local-static-provisioner&lt;/p&gt;
&lt;p&gt;helm repo update
  ```&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Re-generate a provisioner config:&lt;/p&gt;
&lt;p&gt;&lt;code&gt;shell
  helm template --debug \
     sig-storage-local-static-provisioner/local-static-provisioner \
     --version 1 \
     --namespace default \
     &amp;gt; local-volume-provisioner.generated.yaml`&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Install or delete this provisioner:&lt;/p&gt;
&lt;p&gt;&lt;code&gt;shell
  kubectl apply -f local-volume-provisioner.generated.yaml
  kubectl delete -f local-volume-provisioner.generated.yaml&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h2&gt;storage class&lt;/h2&gt;
&lt;p&gt;The &lt;code&gt;metadata.name&lt;/code&gt; value is &lt;strong&gt;important&lt;/strong&gt;.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;kubectl&lt;span class="w"&gt; &lt;/span&gt;apply&lt;span class="w"&gt; &lt;/span&gt;-f&lt;span class="w"&gt; &lt;/span&gt;storage-class.yml

&lt;span class="c1"&gt;# to list all storage classes&lt;/span&gt;
kubectl&lt;span class="w"&gt; &lt;/span&gt;get&lt;span class="w"&gt; &lt;/span&gt;sc

&lt;span class="c1"&gt;# to delete a storage class&lt;/span&gt;
kubectl&lt;span class="w"&gt; &lt;/span&gt;delete&lt;span class="w"&gt; &lt;/span&gt;sc&lt;span class="w"&gt; &lt;/span&gt;&amp;lt;name&amp;gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;h2&gt;PV&lt;/h2&gt;
&lt;p&gt;Now create a PV which can be claimed by deployments.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;kubectl&lt;span class="w"&gt; &lt;/span&gt;apply&lt;span class="w"&gt; &lt;/span&gt;-f&lt;span class="w"&gt; &lt;/span&gt;pv.yml

&lt;span class="c1"&gt;# to list all PVs&lt;/span&gt;
kubectl&lt;span class="w"&gt; &lt;/span&gt;get&lt;span class="w"&gt; &lt;/span&gt;pv
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;&lt;strong&gt;Note&lt;/strong&gt; that &lt;code&gt;helm uninstall&lt;/code&gt; does not delete PVC nor the actual
data. You could observe it by watching the data mount,
eg. &lt;code&gt;/mnt/disks&lt;/code&gt;. Essentially it is not yet observing PV's retention
policy &lt;code&gt;Delete&lt;/code&gt;. Therefore, it's advised to manually delete PVC first,
then delete PV, then &lt;code&gt;rm -r /mnt/disks/data&lt;/code&gt;, if data cleanup is
needed.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="c1"&gt;# to delete a PV&lt;/span&gt;
kubectl&lt;span class="w"&gt; &lt;/span&gt;delete&lt;span class="w"&gt; &lt;/span&gt;pv&lt;span class="w"&gt; &lt;/span&gt;&amp;lt;name&amp;gt;

&lt;span class="c1"&gt;# delete by force&lt;/span&gt;
kubectl&lt;span class="w"&gt; &lt;/span&gt;delete&lt;span class="w"&gt; &lt;/span&gt;pv&lt;span class="w"&gt; &lt;/span&gt;local-pv-20g&lt;span class="w"&gt; &lt;/span&gt;--grace-period&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="m"&gt;0&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;--force

&lt;span class="c1"&gt;# clear etcd record&lt;/span&gt;
kubectl&lt;span class="w"&gt; &lt;/span&gt;patch&lt;span class="w"&gt; &lt;/span&gt;pv&lt;span class="w"&gt; &lt;/span&gt;local-pv-20g&lt;span class="w"&gt; &lt;/span&gt;-p&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;{&amp;quot;metadata&amp;quot;: {&amp;quot;finalizers&amp;quot;: null}}&amp;#39;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;h1&gt;Deploy an app&lt;/h1&gt;
&lt;p&gt;This is easy w/ helm. You can set custom configs using a &lt;code&gt;values.yml&lt;/code&gt;
file, eg. &lt;code&gt;wordpress-values.yml&lt;/code&gt; in this case to specify the mariadb's
&lt;code&gt;storageClass&lt;/code&gt;. It's deeply nested YAML structure, no fun if typing in
cmd.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;helm&lt;span class="w"&gt; &lt;/span&gt;repo&lt;span class="w"&gt; &lt;/span&gt;add&lt;span class="w"&gt; &lt;/span&gt;bitnami&lt;span class="w"&gt; &lt;/span&gt;https://charts.bitnami.com/bitnami
helm&lt;span class="w"&gt; &lt;/span&gt;repo&lt;span class="w"&gt; &lt;/span&gt;update

&lt;span class="c1"&gt;# install w/ customized config values&lt;/span&gt;
helm&lt;span class="w"&gt; &lt;/span&gt;install&lt;span class="w"&gt; &lt;/span&gt;-f&lt;span class="w"&gt; &lt;/span&gt;wordpress-values.yml&lt;span class="w"&gt; &lt;/span&gt;happy-panda&lt;span class="w"&gt; &lt;/span&gt;bitnami/wordpress

&lt;span class="c1"&gt;# uninstall&lt;/span&gt;
helm&lt;span class="w"&gt; &lt;/span&gt;uninstall&lt;span class="w"&gt; &lt;/span&gt;happy-panda

&lt;span class="c1"&gt;# if setting configs on CLI:&lt;/span&gt;
helm&lt;span class="w"&gt; &lt;/span&gt;install&lt;span class="w"&gt; &lt;/span&gt;happy-pada&lt;span class="w"&gt; &lt;/span&gt;bitnami/wordpress&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="se"&gt;\&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;--set&lt;span class="w"&gt; &lt;/span&gt;mariadb.primary.persistence.enabled&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="nb"&gt;true&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="se"&gt;\&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;--set&lt;span class="w"&gt; &lt;/span&gt;mariadb.primary.persistence.storageClass&lt;span class="o"&gt;=&lt;/span&gt;local-storage&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="se"&gt;\&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;--set&lt;span class="w"&gt; &lt;/span&gt;mariadb.primary.persistence.size&lt;span class="o"&gt;=&lt;/span&gt;20Gi&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="se"&gt;\&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;--set&lt;span class="w"&gt; &lt;/span&gt;persistence.enabled&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="nb"&gt;false&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;h1&gt;Expose an app&lt;/h1&gt;
&lt;p&gt;There are two ways, both use nodeport. But who is behind the nodeport
is different. In the first method, the app itself is listenning a
nodeport, and in the 2nd method an ingress controller is.&lt;/p&gt;
&lt;h2&gt;Nodeport directly&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;Get the name of your app service w/ &lt;code&gt;kubectl get svc&lt;/code&gt;:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt; ```
 NAME                                                  TYPE           CLUSTER-IP      EXTERNAL-IP   PORT(S)                      AGE
 happy-panda-mariadb                                   ClusterIP      10.102.33.53    &amp;lt;none&amp;gt;        3306/TCP                     2d19h
 happy-panda-wordpress                                 LoadBalancer   10.97.29.91     &amp;lt;pending&amp;gt;     80:31142/TCP,443:30121/TCP   2d19h
 kubernetes                                            ClusterIP      10.96.0.1       &amp;lt;none&amp;gt;        443/TCP                      3d22h
 ```
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;You see the &lt;code&gt;80:31142&lt;/code&gt; and &lt;code&gt;443:30121&lt;/code&gt;. It's read as &lt;code&gt;&amp;lt;container
   port&amp;gt;:&amp;lt;node port&amp;gt;&lt;/code&gt;. So this service is mapped to node port &lt;code&gt;31142&lt;/code&gt;
   for http and &lt;code&gt;30121&lt;/code&gt; for https. You can further confirm this w/
   &lt;code&gt;kubectl describe svc &amp;lt;svc name&amp;gt;&lt;/code&gt;:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="err"&gt;```&lt;/span&gt;
&lt;span class="err"&gt;➜&lt;/span&gt;&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="err"&gt;~&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;kubectl&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;describe&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;svc&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;happy&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;panda&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;wordpress&lt;/span&gt;
&lt;span class="n"&gt;Name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt;                     &lt;/span&gt;&lt;span class="n"&gt;happy&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;panda&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;wordpress&lt;/span&gt;
&lt;span class="n"&gt;Namespace&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt;                &lt;/span&gt;&lt;span class="k"&gt;default&lt;/span&gt;
&lt;span class="n"&gt;Labels&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt;                   &lt;/span&gt;&lt;span class="n"&gt;app&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;kubernetes&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;io&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;instance&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;happy&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;panda&lt;/span&gt;
&lt;span class="w"&gt;                          &lt;/span&gt;&lt;span class="n"&gt;app&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;kubernetes&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;io&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;managed&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;by&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;Helm&lt;/span&gt;
&lt;span class="w"&gt;                          &lt;/span&gt;&lt;span class="n"&gt;app&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;kubernetes&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;io&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;wordpress&lt;/span&gt;
&lt;span class="w"&gt;                          &lt;/span&gt;&lt;span class="n"&gt;helm&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;sh&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;chart&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;wordpress&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mf"&gt;16.1&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="mi"&gt;18&lt;/span&gt;
&lt;span class="n"&gt;Annotations&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt;              &lt;/span&gt;&lt;span class="n"&gt;meta&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;helm&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;sh&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;release&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;happy&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;panda&lt;/span&gt;
&lt;span class="w"&gt;                          &lt;/span&gt;&lt;span class="n"&gt;meta&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;helm&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;sh&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;release&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;namespace&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;default&lt;/span&gt;
&lt;span class="n"&gt;Selector&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt;                 &lt;/span&gt;&lt;span class="n"&gt;app&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;kubernetes&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;io&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;instance&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;happy&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;panda&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;app&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;kubernetes&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;io&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;wordpress&lt;/span&gt;
&lt;span class="n"&gt;Type&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt;                     &lt;/span&gt;&lt;span class="n"&gt;LoadBalancer&lt;/span&gt;
&lt;span class="n"&gt;IP&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;Family&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;Policy&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt;         &lt;/span&gt;&lt;span class="n"&gt;SingleStack&lt;/span&gt;
&lt;span class="n"&gt;IP&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;Families&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt;              &lt;/span&gt;&lt;span class="n"&gt;IPv4&lt;/span&gt;
&lt;span class="n"&gt;IP&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt;                       &lt;/span&gt;&lt;span class="mf"&gt;10.97&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="mf"&gt;29.91&lt;/span&gt;
&lt;span class="n"&gt;IPs&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt;                      &lt;/span&gt;&lt;span class="mf"&gt;10.97&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="mf"&gt;29.91&lt;/span&gt;
&lt;span class="n"&gt;Port&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt;                     &lt;/span&gt;&lt;span class="n"&gt;http&lt;/span&gt;&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="mi"&gt;80&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;TCP&lt;/span&gt;
&lt;span class="n"&gt;TargetPort&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt;               &lt;/span&gt;&lt;span class="n"&gt;http&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;TCP&lt;/span&gt;
&lt;span class="n"&gt;NodePort&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt;                 &lt;/span&gt;&lt;span class="n"&gt;http&lt;/span&gt;&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="mi"&gt;31142&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;TCP&lt;/span&gt;&lt;span class="w"&gt;   &lt;/span&gt;&lt;span class="o"&gt;&amp;lt;===&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;here&lt;/span&gt;
&lt;span class="n"&gt;Endpoints&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt;                &lt;/span&gt;&lt;span class="mf"&gt;10.244&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="mf"&gt;2.18&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="mi"&gt;8080&lt;/span&gt;
&lt;span class="n"&gt;Port&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt;                     &lt;/span&gt;&lt;span class="n"&gt;https&lt;/span&gt;&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="mi"&gt;443&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;TCP&lt;/span&gt;&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="o"&gt;&amp;lt;===&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;here&lt;/span&gt;
&lt;span class="n"&gt;TargetPort&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt;               &lt;/span&gt;&lt;span class="n"&gt;https&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;TCP&lt;/span&gt;
&lt;span class="n"&gt;NodePort&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt;                 &lt;/span&gt;&lt;span class="n"&gt;https&lt;/span&gt;&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="mi"&gt;30121&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;TCP&lt;/span&gt;
&lt;span class="n"&gt;Endpoints&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt;                &lt;/span&gt;&lt;span class="mf"&gt;10.244&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="mf"&gt;2.18&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="mi"&gt;8443&lt;/span&gt;
&lt;span class="n"&gt;Session&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;Affinity&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt;         &lt;/span&gt;&lt;span class="n"&gt;None&lt;/span&gt;
&lt;span class="n"&gt;External&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;Traffic&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;Policy&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="n"&gt;Cluster&lt;/span&gt;
&lt;span class="n"&gt;Events&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt;                   &lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;none&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
&lt;span class="err"&gt;```&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Now w/ nodeport available, you could directly go to &lt;code&gt;http://&amp;lt;any node's
   IP&amp;gt;:31142&lt;/code&gt; to see the app. The IP could be any of the cluster
   nodes, control plane or worker nodes, all the same.&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;The cons of this method is obvious &amp;mdash; you need to keep a book of
all the apps and their nodeport assignments. If an application is
uninstalled and redeployed, its ports will change. This will be
especially so if k8s cluster is used for CICD purpose because
deployment happens dynamically in this case, thus port assignments
would be quite difficult to track.&lt;/p&gt;
&lt;p&gt;Another con is that the number of apps deployed will be limited by the
number of ports (default port range &lt;code&gt;30000-32267&lt;/code&gt;). This doesn't seem
to be an issue for small footprints, but will definitely a scalability
bottleneck for some good size deployment.&lt;/p&gt;
&lt;p&gt;Last, if each app is listenning on a nodeport, it creates a large
attack surface in security. Essentially node/server must expose these
ports.&lt;/p&gt;
&lt;h2&gt;ingress w/ an external LB&lt;/h2&gt;
&lt;p&gt;&lt;img alt="" src="images/k8s%20expose%20app%20lb.png"&gt;&lt;/p&gt;
&lt;p&gt;A better way is to deploy an ingress controller as a central
gate. Ingress comes w/ more features such as telemetry so it's
definitely the way to go.&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;Install nginx, &lt;code&gt;helm install my-ingress
   ingress-nginx/ingerss-nginx&lt;/code&gt;.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Create a &lt;code&gt;ingress.yml&lt;/code&gt; and create an ingress rule. The key is
   &lt;code&gt;ingressClassName&lt;/code&gt; must be &lt;code&gt;nginx&lt;/code&gt;, and &lt;code&gt;backend.service.name&lt;/code&gt; be
   your app's service, in this case &lt;code&gt;happy-panda-wordpress&lt;/code&gt;. Value for
   the &lt;code&gt;host&lt;/code&gt; and &lt;code&gt;path&lt;/code&gt; will be explained later.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;```yml
---
apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  name: wp
  namespace: default
spec:
  ingressClassName: nginx
  rules:
    - host: wp.myk8s.local
      http:
        paths:
          - path: /
            pathType: Prefix
            backend:
              service:
                name: happy-panda-wordpress
                port:
                  number: 80

```
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;You can install &lt;code&gt;kubectl apply -f&lt;/code&gt;, and delete &lt;code&gt;kubectl delete
  ingress wp&lt;/code&gt; any number of times. No harm. I think behind the
  scene it adds a nginx rule and loads it automatically.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Find the nodeport this ingress is listenning: &lt;code&gt;kubectl describe svc
   my-ingress-nginx-ingress-controller&lt;/code&gt;.&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Now you need an &lt;strong&gt;external load balancer&lt;/strong&gt;. This will be on your dev
node using a nginx.&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;Create a subdomain &lt;code&gt;wp.myk8s.local&lt;/code&gt; in &lt;code&gt;/etc/hosts&lt;/code&gt; w/ IP of &lt;code&gt;.1&lt;/code&gt;
   (this IP needs to be the IP this dev node on the cluster nodes'
   network). We are using this dev node as a LB and DNS.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;```
# /etc/hosts

192.168.122.1   myk8s.local wp.myk8s.local
```
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Setup LB. The &lt;code&gt;upstream&lt;/code&gt; block defines the load balancing
   act. Default is round-robin. The key is &lt;code&gt;server_name&lt;/code&gt; which must
   match the DNS record above.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="err"&gt;```&lt;/span&gt;&lt;span class="nx"&gt;conf&lt;/span&gt;
&lt;span class="nx"&gt;upstream&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;k8s&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="nx"&gt;server&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="m m-Double"&gt;192.168.122.191&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="mi"&gt;32536&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;&lt;span class="w"&gt;   &lt;/span&gt;&lt;span class="o"&gt;&amp;lt;=&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;cluster&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;node&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;IP&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;&amp;amp;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;ingress&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;node&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;port&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="nx"&gt;server&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="m m-Double"&gt;192.168.122.153&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="mi"&gt;32536&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="nx"&gt;server&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="m m-Double"&gt;192.168.122.172&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="mi"&gt;32536&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="nx"&gt;server&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="nx"&gt;server_name&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;wp&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;myk8s&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;local&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="o"&gt;&amp;lt;=&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;dev&lt;/span&gt;&lt;span class="err"&gt;&amp;#39;&lt;/span&gt;&lt;span class="nx"&gt;s&lt;/span&gt;

&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="nx"&gt;location&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="nx"&gt;proxy_pass&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;http&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="c1"&gt;//k8s;&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="nx"&gt;proxy_redirect&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;off&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="nx"&gt;proxy_http_version&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="m m-Double"&gt;1.1&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="nx"&gt;proxy_set_header&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;Upgrade&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="err"&gt;$&lt;/span&gt;&lt;span class="nx"&gt;http_upgrade&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="nx"&gt;proxy_set_header&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;Connection&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s"&gt;&amp;quot;upgrade&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="nx"&gt;proxy_redirect&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;off&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="nx"&gt;proxy_set_header&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;Host&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="err"&gt;$&lt;/span&gt;&lt;span class="nx"&gt;host&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="nx"&gt;proxy_set_header&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;X&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="nx"&gt;Real&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="nx"&gt;IP&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="err"&gt;$&lt;/span&gt;&lt;span class="nx"&gt;remote_addr&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="nx"&gt;proxy_set_header&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;X&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="nx"&gt;Forwarded&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="nx"&gt;For&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="err"&gt;$&lt;/span&gt;&lt;span class="nx"&gt;proxy_add_x_forwarded_for&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="nx"&gt;proxy_set_header&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;X&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="nx"&gt;Forwarded&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="nx"&gt;Host&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="err"&gt;$&lt;/span&gt;&lt;span class="nx"&gt;host&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="err"&gt;#&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;disable&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;caching&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="nx"&gt;add_header&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;Last&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="nx"&gt;Modified&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="err"&gt;$&lt;/span&gt;&lt;span class="nx"&gt;date_gmt&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="nx"&gt;add_header&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;Cache&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="nx"&gt;Control&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="err"&gt;&amp;#39;&lt;/span&gt;&lt;span class="nx"&gt;no&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="nx"&gt;store&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;no&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="nx"&gt;cache&lt;/span&gt;&lt;span class="err"&gt;&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="nx"&gt;if_modified_since&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;off&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="nx"&gt;expires&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;off&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="nx"&gt;etag&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;off&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="err"&gt;```&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Now on your dev node, &lt;code&gt;http://wp.myk8s.local&lt;/code&gt;. Enjoy.&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h2&gt;load balancing&lt;/h2&gt;
&lt;p&gt;k8s document quotes this a way to expose a deployment. However, this
is rather confusing because it's assuming a &lt;em&gt;cloud provider&lt;/em&gt; who then
assigns an &lt;strong&gt;external IP&lt;/strong&gt; to the ingress controller. This is not how
a home lab dev node will be! Then somewhere it says something about
ingress controller being load balancer, or kubectl proxy being load
balancer... ?&lt;/p&gt;
&lt;p&gt;Frist of all, there are three layers of load balancing: of the nodes,
of service, and of the pods. Request hits the server/node
eventually.&lt;/p&gt;
&lt;p&gt;Balancing the nodes. So between outside world and the k8s cluster,
requests are balanced among nodes. This, of course, assumes these
nodes being &lt;strong&gt;logically identical&lt;/strong&gt;, which is exactly how the ingress
nodeport can achieve!  Perfect. We set up an external nginx to do
this. This makes the nodeport of the ingress controller the only info
exposed to the outside world.&lt;/p&gt;
&lt;p&gt;Balancing the services. Once the ingress controller receives the call,
it uses the ingress rules to know which service this is for by using
the &lt;code&gt;hostname&lt;/code&gt; match, eg. &lt;code&gt;wp.myk8s.local&lt;/code&gt;, then routes the
call. Here, the usage of &lt;em&gt;balance&lt;/em&gt; is different. You can spin up v1
and v2 of the same application but under different service name, then
ingress can now be used to route some pcnt of traffic to v1 vs. v2. Of
course, you could also spin up the same application over and over
under different service name and have them &lt;em&gt;routed/balanced&lt;/em&gt;, but I
don't see a point here because of the next one.&lt;/p&gt;
&lt;p&gt;Balancing the pods. There are number of pods behind a service. k8s is
doing the balance. So a call to a service will be automatically
balanced among the number of pods behind the scene. This is k8s
internal now, and is not of our concern anymore.&lt;/p&gt;
&lt;h1&gt;Troubleshooting&lt;/h1&gt;
&lt;h2&gt;Reinstall Wordpress helm, service shows 503 unavailable&lt;/h2&gt;
&lt;p&gt;First of all, &lt;code&gt;helm uninstall&lt;/code&gt; does not clean up PVC! This is a known
issue, and I have seen github feature request threads.&lt;/p&gt;
&lt;p&gt;I think the cause is the local storage I'm using in lab. After &lt;code&gt;helm
uninstall&lt;/code&gt;, the next &lt;code&gt;helm install&lt;/code&gt; would show the web service can't
connect to DB, and DB service shows no node have &lt;code&gt;pv&lt;/code&gt; meeting its
requirement.&lt;/p&gt;
&lt;p&gt;To clean this up:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Clean up PVC: &lt;code&gt;kubectl get pvc&lt;/code&gt;, then &lt;code&gt;kubectl delete pvc &amp;lt;name&amp;gt;&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;Clean up PV: &lt;code&gt;kubectl delete pv &amp;lt;name&amp;gt;&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;Recreate PV: &lt;code&gt;kubectl apply -f pv.yml&lt;/code&gt;.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;In an extreme case, also login worker nodes and delete the static
storage folders &lt;code&gt;rm -r ...&lt;/code&gt;, then &lt;code&gt;mkdir ..&lt;/code&gt; again. This, of course,
will result in data loss.&lt;/p&gt;
&lt;h1&gt;Commands&lt;/h1&gt;
&lt;p&gt;To list cluster nodes' IP:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="nx"&gt;kubectl&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;get&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;nodes&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="nx"&gt;o&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;json&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;|&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;jq&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="nx"&gt;rc&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="err"&gt;&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;items&lt;/span&gt;&lt;span class="p"&gt;[].&lt;/span&gt;&lt;span class="nx"&gt;status&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;addresses&lt;/span&gt;&lt;span class="p"&gt;[]&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;|&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;select&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;(.&lt;/span&gt;&lt;span class="k"&gt;type&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;==&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s"&gt;&amp;quot;Hostname&amp;quot;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;or&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="k"&gt;type&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;==&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s"&gt;&amp;quot;InternalIP&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;|&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;address&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="err"&gt;&amp;#39;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;</content><category term="dev"></category></entry><entry><title>Fedex API generating label</title><link href="https://fengxia41103.github.io/myblog/fedex%20api%20generating%20label.html" rel="alternate"></link><published>2023-05-31T11:33:00-04:00</published><updated>2023-05-31T11:33:00-04:00</updated><author><name>Feng Xia</name></author><id>tag:fengxia41103.github.io,2023-05-31:/myblog/fedex api generating label.html</id><summary type="html">&lt;p&gt;&lt;a href="https://developer.fedex.com/api/en-us/get-started.html"&gt;Fedex API&lt;/a&gt; is complex. A few things you want to watch out:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;When googling Fedex API, the top returns are usually 3rd API who
   &lt;em&gt;supports&lt;/em&gt; Fedex. &lt;strong&gt;Not covered here&lt;/strong&gt;.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Always&lt;/strong&gt;, use the &lt;strong&gt;test&lt;/strong&gt; credentials and API endpoints for
   development. Switch to production when you are ready for
   production.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Once you generate a &lt;em&gt;test&lt;/em&gt; label, it requires a &lt;strong&gt;verification&lt;/strong&gt;
   step by Fedex team. Email it to them and wait for approval. This is
   a human process I guess.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;It appears to be a micro-service architecture because each service
   gets its own API endpoint. This makes integration a bit tedious
   because each endpoint requires a different learning curve. Not for
   a faint heart. For label, use &lt;a href="https://developer.fedex.com/api/en-us/catalog/ship/v1/docs.html"&gt;ship API&lt;/a&gt;. It's a long doc, but
   not difficult to understand once you get a feel of it.&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;To generate a label, 5 steps:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Get an authentication token from API&lt;/li&gt;
&lt;li&gt;Compose sender info&lt;/li&gt;
&lt;li&gt;Compose recipients info&lt;/li&gt;
&lt;li&gt;Set shipment method values. Many are &lt;code&gt;enumeration&lt;/code&gt; values specified
   by the Fedex doc (they are in CAPITAL letters!).&lt;/li&gt;
&lt;li&gt;Call API. If successful, returning JSON body …&lt;/li&gt;&lt;/ol&gt;</summary><content type="html">&lt;p&gt;&lt;a href="https://developer.fedex.com/api/en-us/get-started.html"&gt;Fedex API&lt;/a&gt; is complex. A few things you want to watch out:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;When googling Fedex API, the top returns are usually 3rd API who
   &lt;em&gt;supports&lt;/em&gt; Fedex. &lt;strong&gt;Not covered here&lt;/strong&gt;.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Always&lt;/strong&gt;, use the &lt;strong&gt;test&lt;/strong&gt; credentials and API endpoints for
   development. Switch to production when you are ready for
   production.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Once you generate a &lt;em&gt;test&lt;/em&gt; label, it requires a &lt;strong&gt;verification&lt;/strong&gt;
   step by Fedex team. Email it to them and wait for approval. This is
   a human process I guess.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;It appears to be a micro-service architecture because each service
   gets its own API endpoint. This makes integration a bit tedious
   because each endpoint requires a different learning curve. Not for
   a faint heart. For label, use &lt;a href="https://developer.fedex.com/api/en-us/catalog/ship/v1/docs.html"&gt;ship API&lt;/a&gt;. It's a long doc, but
   not difficult to understand once you get a feel of it.&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;To generate a label, 5 steps:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Get an authentication token from API&lt;/li&gt;
&lt;li&gt;Compose sender info&lt;/li&gt;
&lt;li&gt;Compose recipients info&lt;/li&gt;
&lt;li&gt;Set shipment method values. Many are &lt;code&gt;enumeration&lt;/code&gt; values specified
   by the Fedex doc (they are in CAPITAL letters!).&lt;/li&gt;
&lt;li&gt;Call API. If successful, returning JSON body has: tracking number,
   ship date stamp, and URL to download the label PDF&lt;/li&gt;
&lt;/ol&gt;
&lt;h2&gt;Get authentication token&lt;/h2&gt;
&lt;p&gt;Once you create an account on the dev portal, you would be given a
&lt;code&gt;key&lt;/code&gt; and &lt;code&gt;secret&lt;/code&gt;. Use these to get a token:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="k"&gt;def&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nf"&gt;get_new_token&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="n"&gt;headers&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;content-type&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;application/x-www-form-urlencoded&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="n"&gt;token_req_payload&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="s2"&gt;&amp;quot;grant_type&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;client_credentials&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="s2"&gt;&amp;quot;client_id&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;FEDEX_KEY&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="s2"&gt;&amp;quot;client_secret&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;FEDEX_SECRET&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;

    &lt;span class="n"&gt;response&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;requests&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;post&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
        &lt;span class="sa"&gt;f&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="n"&gt;FEDEX_API&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;/oauth/token&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="n"&gt;headers&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;headers&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="n"&gt;data&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;token_req_payload&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="n"&gt;verify&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="kc"&gt;False&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="n"&gt;allow_redirects&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="kc"&gt;False&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;response&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;json&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;access_token&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;h2&gt;HTTP header&lt;/h2&gt;
&lt;p&gt;Once you have the token, you need to include it in all the
consecutive calls. Note that you &lt;strong&gt;must set &lt;code&gt;x-locale&lt;/code&gt;&lt;/strong&gt;.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="n"&gt;token&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;get_new_token&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;headers&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="s2"&gt;&amp;quot;content-type&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;application/json&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="s2"&gt;&amp;quot;x-locale&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;en-US&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="s2"&gt;&amp;quot;Authorization&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="sa"&gt;f&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;Bearer &lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="n"&gt;token&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;h2&gt;sender&lt;/h2&gt;
&lt;p&gt;Two basic info to setup sender: &lt;code&gt;address&lt;/code&gt; and &lt;code&gt;contact&lt;/code&gt;. The bits
below are the minimal to keep the API happy:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="n"&gt;me&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="s2"&gt;&amp;quot;address&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="s2"&gt;&amp;quot;streetLines&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;xxx&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt;
        &lt;span class="s2"&gt;&amp;quot;city&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;xxx&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="s2"&gt;&amp;quot;stateOrProvinceCode&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;NC&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="s2"&gt;&amp;quot;postalCode&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;27713&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="s2"&gt;&amp;quot;countryCode&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;US&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="p"&gt;},&lt;/span&gt;
    &lt;span class="s2"&gt;&amp;quot;contact&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="s2"&gt;&amp;quot;personName&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;xxx&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="s2"&gt;&amp;quot;emailAddress&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;xxx&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="s2"&gt;&amp;quot;phoneNumber&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;xxx&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="s2"&gt;&amp;quot;companyName&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;xxx&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="p"&gt;},&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;h2&gt;recipients&lt;/h2&gt;
&lt;p&gt;It's a &lt;strong&gt;list&lt;/strong&gt;. Again, minimal below to keep the API happy:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="n"&gt;recipients&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;
    &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="s2"&gt;&amp;quot;address&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="s2"&gt;&amp;quot;streetLines&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;for_whom&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;street_address&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt;
            &lt;span class="s2"&gt;&amp;quot;city&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;for_whom&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;city&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
            &lt;span class="s2"&gt;&amp;quot;stateOrProvinceCode&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;for_whom&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;state&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
            &lt;span class="s2"&gt;&amp;quot;postalCode&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;for_whom&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;zipcode&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
            &lt;span class="s2"&gt;&amp;quot;countryCode&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;US&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="p"&gt;},&lt;/span&gt;
        &lt;span class="s2"&gt;&amp;quot;contact&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="s2"&gt;&amp;quot;personName&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;for_whom&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;last_name_then_first_name&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
            &lt;span class="s2"&gt;&amp;quot;emailAddress&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;for_whom&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;email&lt;/span&gt;
            &lt;span class="s2"&gt;&amp;quot;phoneNumber&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;for_whom&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;phone&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;10&lt;/span&gt;&lt;span class="p"&gt;:]&lt;/span&gt;
        &lt;span class="p"&gt;},&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;]&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;h2&gt;shipping method&lt;/h2&gt;
&lt;p&gt;Tweak based on your shipment preference. These are the minimal info
needed for my purpose.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="n"&gt;shipment&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="s2"&gt;&amp;quot;shipper&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;me&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="s2"&gt;&amp;quot;recipients&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;recipients&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="s2"&gt;&amp;quot;pickupType&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;DROPOFF_AT_FEDEX_LOCATION&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="s2"&gt;&amp;quot;serviceType&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;FEDEX_EXPRESS_SAVER&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="s2"&gt;&amp;quot;packagingType&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;FEDEX_ENVELOPE&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="s2"&gt;&amp;quot;shippingChargesPayment&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;paymentType&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;SENDER&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;},&lt;/span&gt;
    &lt;span class="s2"&gt;&amp;quot;labelSpecification&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="s2"&gt;&amp;quot;labelStockType&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;PAPER_4X6&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="s2"&gt;&amp;quot;imageType&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;PDF&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="p"&gt;},&lt;/span&gt;
    &lt;span class="s2"&gt;&amp;quot;requestedPackageLineItems&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;[{&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;weight&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;units&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;LB&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;value&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;}}],&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;h2&gt;call API&lt;/h2&gt;
&lt;p&gt;Now we have all the pieces to call the API to give us a label.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="n"&gt;response&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;requests&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;post&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="sa"&gt;f&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="n"&gt;FEDEX_API&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;/ship/v1/shipments&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="n"&gt;headers&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;headers&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="n"&gt;data&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;json&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;dumps&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
        &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="s2"&gt;&amp;quot;accountNumber&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;value&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;FEDEX_ACCOUNT&lt;/span&gt;&lt;span class="p"&gt;},&lt;/span&gt;
            &lt;span class="s2"&gt;&amp;quot;labelResponseOptions&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;URL_ONLY&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
            &lt;span class="s2"&gt;&amp;quot;requestedShipment&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;shipment&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="p"&gt;),&lt;/span&gt;
&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="n"&gt;resp&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;response&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;json&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;

&lt;span class="c1"&gt;# error&lt;/span&gt;
&lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="ow"&gt;not&lt;/span&gt; &lt;span class="n"&gt;resp&lt;/span&gt; &lt;span class="ow"&gt;or&lt;/span&gt; &lt;span class="ow"&gt;not&lt;/span&gt; &lt;span class="n"&gt;resp&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;output&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="n"&gt;logger&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;error&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;response&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;h2&gt;response&lt;/h2&gt;
&lt;p&gt;In response, if successful, will be a JSON which has a master tracking
number, a ship date stamp, and a URL to download label in PDF. The URL
is by choice. You could also receive the PDF as a file directly, I
think. But I think it's better to save the URL in my app instead of
storing the file. &lt;strong&gt;Note&lt;/strong&gt; that the URL expires after, I think, 48
hours? There is no harm to generate a new label. The unused one will
be deprecated and has no charge. So in my case, I let the user to
click a button on UI to generate label, put this request to a celery
queue which in turn calls the API, then the URL is shown as a link on
the UI, then user can download whenever.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="n"&gt;info&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;resp&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;output&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;transactionShipments&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;span class="n"&gt;master_tracking&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;info&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;masterTrackingNumber&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;shipping_date&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;info&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;shipDatestamp&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="n"&gt;info&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;info&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;pieceResponses&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;span class="n"&gt;pdf_url&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;info&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;packageDocuments&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;url&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Seems simple!? Cause I have done the hard part. Thank me.&lt;/p&gt;</content><category term="dev"></category></entry><entry><title>Python handling PDF</title><link href="https://fengxia41103.github.io/myblog/python%20handling%20pdf.html" rel="alternate"></link><published>2023-05-31T10:34:00-04:00</published><updated>2023-05-31T10:34:00-04:00</updated><author><name>Feng Xia</name></author><id>tag:fengxia41103.github.io,2023-05-31:/myblog/python handling pdf.html</id><summary type="html">&lt;p&gt;It was a task I encountered in the China visa job whereas I need to
extract info from a PDF file that has been generated from the online
website. In its reverse, business also needs to generate PDF doc such
as an invoice so we could email them to customer. Since these tasks
are handled by backend and my backend is usually Django, it's
important to figure out a general solution to handle PDF parsing and
generation.&lt;/p&gt;
&lt;h1&gt;Generate a PDF&lt;/h1&gt;
&lt;p&gt;There are two ways to generate PDF: generate a HTML and print to PDF
using browser, or generate a PDF in backend and (auto) download. The
first one is universal. It has no issue of many of the quirks such as
fonts. It's an WYSIWYG solution. The second one, on the other hand, is
relying on &lt;a href="https://xhtml2pdf.readthedocs.io/en/latest/"&gt;xhtml2pdf&lt;/a&gt;, which comes a few things you need to know.&lt;/p&gt;
&lt;p&gt;Why we opt for one versus the other? In short, the printer solution is
easiest but it keeps no record of a user's action. This is fine for
docs …&lt;/p&gt;</summary><content type="html">&lt;p&gt;It was a task I encountered in the China visa job whereas I need to
extract info from a PDF file that has been generated from the online
website. In its reverse, business also needs to generate PDF doc such
as an invoice so we could email them to customer. Since these tasks
are handled by backend and my backend is usually Django, it's
important to figure out a general solution to handle PDF parsing and
generation.&lt;/p&gt;
&lt;h1&gt;Generate a PDF&lt;/h1&gt;
&lt;p&gt;There are two ways to generate PDF: generate a HTML and print to PDF
using browser, or generate a PDF in backend and (auto) download. The
first one is universal. It has no issue of many of the quirks such as
fonts. It's an WYSIWYG solution. The second one, on the other hand, is
relying on &lt;a href="https://xhtml2pdf.readthedocs.io/en/latest/"&gt;xhtml2pdf&lt;/a&gt;, which comes a few things you need to know.&lt;/p&gt;
&lt;p&gt;Why we opt for one versus the other? In short, the printer solution is
easiest but it keeps no record of a user's action. This is fine for
docs such as manuals, instructions, those general-purpose docs. But in
the visa business, we are passing onto prospective customers of some
docs/forms that we wanted them to fill and used in their later
application. Therefore, these docs, most of them, bear some customer
info in the doc such as their name. For these we wanted to keep them
as a track record of a customer engagement so that we know what have
been sent to a customer. So the PDF, if sent, was saved. Therefore,
it makes sense to let backend: generate the file &amp;rarr; storage &amp;rarr;
link to customer's account w/ timestamp and other meta &amp;rarr; customer
downloads it (could be on-the-spot or a download link).&lt;/p&gt;
&lt;h2&gt;workflow&lt;/h2&gt;
&lt;p&gt;The general workflow is the same for both solutions because you are
always generating a HTML version of the doc first. Therefore, in
Django there is always a template, CSS and so on. The different would
be that:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;templates: &lt;code&gt;xhtml2pdf&lt;/code&gt; solution takes some additional CSS in order
   to work (see "Asian fonts" below). Printer solution, on the other
   hand, works pretty much as-is because the PDF is rendered as an
   image (I believe). So as long as the HTML looks right, the PDF will
   be fine.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;download/email: these are only available when using &lt;code&gt;xhtml2pdf&lt;/code&gt;
   because backend now has the chance to handle different &lt;em&gt;action&lt;/em&gt;
   depending on the function we want to provide. Printer solution has
   no control over the generation step, thus having no such capability.&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h2&gt;Asian fonts, inconsistency&lt;/h2&gt;
&lt;p&gt;When using &lt;code&gt;xhtml2pdf&lt;/code&gt;, you have to set to use &lt;a href="https://xhtml2pdf.readthedocs.io/en/latest/reference.html#asian-fonts-support"&gt;these fonts&lt;/a&gt; if
your doc is in Chinese. This, however, will make the generated doc
looks &lt;strong&gt;different&lt;/strong&gt; from the HTML version! I don't have a solution for
this. Additionally, because of the fonts I had to enlarge some
&lt;code&gt;font-size&lt;/code&gt; as shown below in order to make them easy to read. These
are side effects.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;style&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nt"&gt;type&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;text/css&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nt"&gt;body&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
&lt;span class="w"&gt;   &lt;/span&gt;&lt;span class="k"&gt;font-family&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;STSong-Light&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="w"&gt;   &lt;/span&gt;&lt;span class="k"&gt;margin-left&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="kt"&gt;cm&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="w"&gt;   &lt;/span&gt;&lt;span class="k"&gt;margin-right&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="kt"&gt;cm&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="w"&gt;   &lt;/span&gt;&lt;span class="k"&gt;margin-top&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="kt"&gt;cm&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nt"&gt;h1&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
&lt;span class="w"&gt;   &lt;/span&gt;&lt;span class="k"&gt;font-size&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;16&lt;/span&gt;&lt;span class="kt"&gt;pt&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nt"&gt;li&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nt"&gt;p&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
&lt;span class="w"&gt;   &lt;/span&gt;&lt;span class="k"&gt;font-size&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;12&lt;/span&gt;&lt;span class="kt"&gt;pt&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="o"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;style&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;h2&gt;html from template&lt;/h2&gt;
&lt;p&gt;I won't go into details of a Django template setup. My basic setup has
a &lt;code&gt;pdf_layout.html&lt;/code&gt; which inherits a &lt;code&gt;base.html&lt;/code&gt;. Then, individual PDF
doc's template is inheriting the &lt;code&gt;pdf_layout.html&lt;/code&gt;, mostly just now
filling in different segments of contents based on the doc's purpose.&lt;/p&gt;
&lt;p&gt;Once you have these, prepare Django for the rendering:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="k"&gt;def&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nf"&gt;pdf_visa_cancellation&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;request&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;application_id&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;action&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="n"&gt;application&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;Application&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;objects&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;id&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;application_id&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;person&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;application&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;for_whom&lt;/span&gt;
    &lt;span class="n"&gt;context&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;application&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;application&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;person&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;person&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;today&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;date&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;today&lt;/span&gt;&lt;span class="p"&gt;()}&lt;/span&gt;
    &lt;span class="n"&gt;template&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;pdf_visa_cancellation.html&amp;quot;&lt;/span&gt;

    &lt;span class="c1"&gt;# render html&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;render&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;request&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;template&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;context&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;h2&gt;PDF generator class&lt;/h2&gt;
&lt;p&gt;First, we define a generator class as the engine. Given &lt;code&gt;context&lt;/code&gt; and
&lt;code&gt;template&lt;/code&gt;, it would have enough info to generate a HTML. Then the
&lt;code&gt;filename&lt;/code&gt; determines the actual file being persisted in file storage
based on the &lt;code&gt;MEDIA_ROOT&lt;/code&gt;. You can read more &lt;a href="https://xhtml2pdf.readthedocs.io/en/latest/usage.html"&gt;here&lt;/a&gt;.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="kn"&gt;import&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nn"&gt;os&lt;/span&gt;

&lt;span class="kn"&gt;from&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nn"&gt;django.conf&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;settings&lt;/span&gt;
&lt;span class="kn"&gt;from&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nn"&gt;django.contrib.staticfiles&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;finders&lt;/span&gt;
&lt;span class="kn"&gt;from&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nn"&gt;django.http&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;HttpResponse&lt;/span&gt;
&lt;span class="kn"&gt;from&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nn"&gt;django.template.loader&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;get_template&lt;/span&gt;
&lt;span class="kn"&gt;from&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nn"&gt;xhtml2pdf&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;pisa&lt;/span&gt;


&lt;span class="k"&gt;class&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nc"&gt;PDFGenerator&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="k"&gt;def&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="fm"&gt;__init__&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;context&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;template&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;filename&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;context&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;context&lt;/span&gt;
        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;template&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;template&lt;/span&gt;
        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;filename&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;filename&lt;/span&gt;

    &lt;span class="c1"&gt;# https://xhtml2pdf.readthedocs.io/en/latest/usage.html#using-xhtml2pdf-in-django&lt;/span&gt;
    &lt;span class="k"&gt;def&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nf"&gt;link_callback&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;uri&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;rel&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="sd"&gt;&amp;quot;&amp;quot;&amp;quot;&lt;/span&gt;
&lt;span class="sd"&gt;        Convert HTML URIs to absolute system paths so xhtml2pdf can access those&lt;/span&gt;
&lt;span class="sd"&gt;        resources&lt;/span&gt;
&lt;span class="sd"&gt;        &amp;quot;&amp;quot;&amp;quot;&lt;/span&gt;
        &lt;span class="n"&gt;result&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;finders&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;find&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;uri&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;result&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
            &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="ow"&gt;not&lt;/span&gt; &lt;span class="nb"&gt;isinstance&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;result&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;list&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nb"&gt;tuple&lt;/span&gt;&lt;span class="p"&gt;)):&lt;/span&gt;
                &lt;span class="n"&gt;result&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;result&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
            &lt;span class="n"&gt;result&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;list&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;os&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;path&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;realpath&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;path&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;path&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;result&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
            &lt;span class="n"&gt;path&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;result&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
        &lt;span class="k"&gt;else&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
            &lt;span class="n"&gt;sUrl&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;settings&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;STATIC_URL&lt;/span&gt;  &lt;span class="c1"&gt;# Typically /static/&lt;/span&gt;
            &lt;span class="n"&gt;sRoot&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;settings&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;STATIC_ROOT&lt;/span&gt;  &lt;span class="c1"&gt;# Typically /home/userX/project_static/&lt;/span&gt;
            &lt;span class="n"&gt;mUrl&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;settings&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;MEDIA_URL&lt;/span&gt;  &lt;span class="c1"&gt;# Typically /media/&lt;/span&gt;
            &lt;span class="n"&gt;mRoot&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
                &lt;span class="n"&gt;settings&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;MEDIA_ROOT&lt;/span&gt;
            &lt;span class="p"&gt;)&lt;/span&gt;  &lt;span class="c1"&gt;# Typically /home/userX/project_static/media/&lt;/span&gt;

            &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;uri&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;startswith&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;mUrl&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
                &lt;span class="n"&gt;path&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;os&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;path&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;join&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;mRoot&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;uri&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;replace&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;mUrl&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
            &lt;span class="k"&gt;elif&lt;/span&gt; &lt;span class="n"&gt;uri&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;startswith&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;sUrl&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
                &lt;span class="n"&gt;path&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;os&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;path&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;join&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;sRoot&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;uri&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;replace&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;sUrl&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
            &lt;span class="k"&gt;else&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
                &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;uri&lt;/span&gt;

        &lt;span class="c1"&gt;# make sure that file exists&lt;/span&gt;
        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="ow"&gt;not&lt;/span&gt; &lt;span class="n"&gt;os&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;path&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;isfile&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;path&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
            &lt;span class="k"&gt;raise&lt;/span&gt; &lt;span class="ne"&gt;Exception&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;media URI must start with &lt;/span&gt;&lt;span class="si"&gt;%s&lt;/span&gt;&lt;span class="s2"&gt; or &lt;/span&gt;&lt;span class="si"&gt;%s&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;&lt;/span&gt; &lt;span class="o"&gt;%&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;sUrl&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;mUrl&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;path&lt;/span&gt;

    &lt;span class="k"&gt;def&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nf"&gt;export&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="c1"&gt;# proceed to create PDF&lt;/span&gt;
        &lt;span class="c1"&gt;# Create a Django response object, and specify content_type as pdf&lt;/span&gt;
        &lt;span class="n"&gt;response&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;HttpResponse&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;content_type&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;application/pdf&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="n"&gt;response&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;
            &lt;span class="s2"&gt;&amp;quot;Content-Disposition&amp;quot;&lt;/span&gt;
        &lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="sa"&gt;f&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;attachment; filename=&amp;quot;&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;filename&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="s1"&gt;.pdf&amp;quot;&amp;#39;&lt;/span&gt;
        &lt;span class="n"&gt;template&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;get_template&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;template&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="n"&gt;html&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;template&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;render&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;context&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

        &lt;span class="c1"&gt;# create a pdf&lt;/span&gt;
        &lt;span class="n"&gt;pisa_status&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;pisa&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;CreatePDF&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
            &lt;span class="n"&gt;html&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;dest&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;response&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;link_callback&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;link_callback&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;encoding&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;UTF-8&amp;quot;&lt;/span&gt;
        &lt;span class="p"&gt;)&lt;/span&gt;

        &lt;span class="c1"&gt;# if error then show some funny view&lt;/span&gt;
        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;pisa_status&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;err&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
            &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;HttpResponse&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;We had some errors &amp;lt;pre&amp;gt;&amp;quot;&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="n"&gt;html&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;&amp;lt;/pre&amp;gt;&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;response&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;h2&gt;download immediately&lt;/h2&gt;
&lt;p&gt;Then, generating a PDF and return a &lt;code&gt;HTTPResponse&lt;/code&gt; object which will
trigger an &lt;strong&gt;immediate download&lt;/strong&gt; on the browser end.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="c1"&gt;# find the template and render it.&lt;/span&gt;
&lt;span class="n"&gt;pdf_filename&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="sa"&gt;f&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="n"&gt;application&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;cova&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;-visa-cancellation&amp;quot;&lt;/span&gt;
&lt;span class="n"&gt;generator&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;PDFGenerator&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;context&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;template&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;pdf_filename&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;pdf&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;generator&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;export&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;

&lt;span class="c1"&gt;# download immediately&lt;/span&gt;
&lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;pdf&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;h2&gt;email body &amp;amp; as attachment&lt;/h2&gt;
&lt;p&gt;The HTML template can generate an email body directly. Here I'm
showing how to attach the generated PDF as an email attachment.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="n"&gt;message&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;EmailMessage&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="n"&gt;subject&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;Chinese Visa Application Supplementary Doc: Deprecate Old&lt;/span&gt;
    &lt;span class="n"&gt;Visa&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;,&lt;/span&gt;

    &lt;span class="c1"&gt;# email body generated from template&lt;/span&gt;
    &lt;span class="n"&gt;body&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;get_template&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;template&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;render&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;context&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;

    &lt;span class="n"&gt;from_email&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;chinesevisaexpress1@gmail.com&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="n"&gt;to&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;application&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;for_whom&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;email&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt;
    &lt;span class="n"&gt;reply_to&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;chinesevisaexpress1@gmail.com&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt;
&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;message&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;content_subtype&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;html&amp;quot;&lt;/span&gt;

&lt;span class="c1"&gt;# attach generated PDF&lt;/span&gt;
&lt;span class="n"&gt;message&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;attach&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;pdf_filename&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;pdf&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;content&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;application/pdf&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;message&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;send&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;h1&gt;Parse a PDF&lt;/h1&gt;
&lt;p&gt;Extracting info out of a PDF isn't an easy one. Here I'm using the
&lt;a href="https://py-pdf-parser.readthedocs.io/en/latest/"&gt;py-pdf-parser&lt;/a&gt;. The trick mostly lies in the structure of the file
itself that what you think the element should be isn't.&lt;/p&gt;
&lt;p&gt;There isn't a general solution to this. You will be dealing w/ a lot
of data anomaly such as index of the info you want, empty/null data,
matching data broken to multiple lines, things like these. The general
capability of reading the doc in general is there. I would say it
works 90+% of the time. Hey, if it could parse a Chinese-made PDF, I
would certainly expect it to handle other (better structured) docs,
better.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="kn"&gt;import&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nn"&gt;logging&lt;/span&gt;
&lt;span class="kn"&gt;import&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nn"&gt;re&lt;/span&gt;

&lt;span class="kn"&gt;from&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nn"&gt;py_pdf_parser.loaders&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;load_file&lt;/span&gt;

&lt;span class="kn"&gt;from&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nn"&gt;visa.utils.normalizer&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;Normalizer&lt;/span&gt;

&lt;span class="n"&gt;logger&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;logging&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;getLogger&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;visa&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;


&lt;span class="k"&gt;class&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nc"&gt;MyPDFParser&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;Normalizer&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="k"&gt;def&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="fm"&gt;__init__&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;filename&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;filename&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;filename&lt;/span&gt;
        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;doc&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;load_file&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;filename&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;data&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;el&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;text&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;el&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;doc&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;elements&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;

    &lt;span class="k"&gt;def&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nf"&gt;parse&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="n"&gt;title&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="n"&gt;force_to_index&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="kc"&gt;None&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="n"&gt;direction&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;below&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="n"&gt;split_index&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="n"&gt;delimiter&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;&lt;span class="se"&gt;\n&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="n"&gt;logger&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;debug&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;-&amp;quot;&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="mi"&gt;50&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="n"&gt;logger&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;debug&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="sa"&gt;f&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;Parsing: &lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="n"&gt;title&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

        &lt;span class="n"&gt;found&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kc"&gt;None&lt;/span&gt;

        &lt;span class="c1"&gt;# search&lt;/span&gt;
        &lt;span class="n"&gt;full_list&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;doc&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;elements&lt;/span&gt;
        &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;el&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;full_list&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
            &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;title&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;el&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;text&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt;
                &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;direction&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;below&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
                    &lt;span class="n"&gt;found&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;full_list&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;below&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;el&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
                &lt;span class="k"&gt;elif&lt;/span&gt; &lt;span class="n"&gt;direction&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;right&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
                    &lt;span class="n"&gt;found&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;full_list&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;to_the_right_of&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;el&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
                &lt;span class="k"&gt;elif&lt;/span&gt; &lt;span class="n"&gt;direction&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;above&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
                    &lt;span class="n"&gt;found&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;full_list&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;above&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;el&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
                &lt;span class="k"&gt;break&lt;/span&gt;

        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;found&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
            &lt;span class="c1"&gt;# logger.debug([x.text() for x in found])&lt;/span&gt;
            &lt;span class="n"&gt;result&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;text&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;found&lt;/span&gt;&lt;span class="p"&gt;][&lt;/span&gt;&lt;span class="n"&gt;force_to_index&lt;/span&gt; &lt;span class="ow"&gt;or&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
        &lt;span class="k"&gt;else&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
            &lt;span class="n"&gt;result&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;&amp;quot;&lt;/span&gt;

        &lt;span class="c1"&gt;# cleansing&lt;/span&gt;
        &lt;span class="n"&gt;result&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;result&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;split&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;delimiter&lt;/span&gt;&lt;span class="p"&gt;)[&lt;/span&gt;&lt;span class="n"&gt;split_index&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
        &lt;span class="n"&gt;result&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;&amp;quot;&lt;/span&gt; &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;/&amp;quot;&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;result&lt;/span&gt; &lt;span class="k"&gt;else&lt;/span&gt; &lt;span class="n"&gt;result&lt;/span&gt;

        &lt;span class="n"&gt;logger&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;debug&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="sa"&gt;f&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="n"&gt;title&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;: &lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="n"&gt;result&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;re&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;sub&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="sa"&gt;r&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;\s+&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot; &amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;result&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;strip&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;

    &lt;span class="k"&gt;def&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nf"&gt;parseByIndex&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;index&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="c1"&gt;# TODO: no data!?&lt;/span&gt;
        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="ow"&gt;not&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;data&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
            &lt;span class="nb"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="sa"&gt;f&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;filename&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;: no data&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
            &lt;span class="k"&gt;return&lt;/span&gt;

        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;data&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;index&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;split&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="sa"&gt;r&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;：&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)[&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;

    &lt;span class="k"&gt;def&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nf"&gt;parseByKey&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;keys&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="n"&gt;logger&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;debug&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;-&amp;quot;&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="mi"&gt;50&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="n"&gt;logger&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;debug&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="sa"&gt;f&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;Parsing: &lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="n"&gt;keys&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

        &lt;span class="n"&gt;pat&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;re&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;compile&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="sa"&gt;rf&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="n"&gt;keys&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;\s?[:：]\s?(?P&amp;lt;value&amp;gt;\S+)&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

        &lt;span class="n"&gt;result&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;&amp;quot;&lt;/span&gt;
        &lt;span class="n"&gt;full_list&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;doc&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;elements&lt;/span&gt;
        &lt;span class="n"&gt;content&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;&amp;quot;&lt;/span&gt;
        &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;index&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;el&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="nb"&gt;enumerate&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;full_list&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
            &lt;span class="n"&gt;content&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;el&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;text&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;

            &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="nb"&gt;all&lt;/span&gt;&lt;span class="p"&gt;([&lt;/span&gt;&lt;span class="n"&gt;key&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;content&lt;/span&gt; &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;key&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;keys&lt;/span&gt;&lt;span class="p"&gt;]):&lt;/span&gt;
                &lt;span class="n"&gt;content&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;&lt;span class="se"&gt;\n&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;join&lt;/span&gt;&lt;span class="p"&gt;([&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;text&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;full_list&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;index&lt;/span&gt;&lt;span class="p"&gt;:]])&lt;/span&gt;

                &lt;span class="k"&gt;break&lt;/span&gt;

        &lt;span class="n"&gt;tmp&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;pat&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;search&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;content&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;tmp&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
            &lt;span class="n"&gt;result&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;tmp&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;group&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;value&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

            &lt;span class="n"&gt;logger&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;debug&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="sa"&gt;f&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="n"&gt;keys&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;: &lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="n"&gt;result&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
            &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;re&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;sub&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="sa"&gt;r&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;\s+&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot; &amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;result&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;strip&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;&amp;quot;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;</content><category term="dev"></category></entry><entry><title>Fullstack deployment: nginx, dotenv</title><link href="https://fengxia41103.github.io/myblog/fullstack%20deployment%20nginx%20dotenv.html" rel="alternate"></link><published>2023-05-16T08:47:00-04:00</published><updated>2023-05-16T08:47:00-04:00</updated><author><name>Feng Xia</name></author><id>tag:fengxia41103.github.io,2023-05-16:/myblog/fullstack deployment nginx dotenv.html</id><summary type="html">&lt;figure class="col l6 m6 s12"&gt;
  &lt;img src="images/architecture_joke.jpg"
       class="center img-responsive"&gt;
&lt;/figure&gt;

&lt;p&gt;Deployment a fullstack requires multiple &lt;strong&gt;special treatments&lt;/strong&gt;. First
of all, the overall umbrella is the separation of configs by the
deployment targets, eg. dev/test/prod. Nature of these targets in
practice are quite different. Here I'm identifying some common tasks.&lt;/p&gt;
&lt;h2&gt;nginx.conf&lt;/h2&gt;
&lt;p&gt;I use &lt;code&gt;nginx&lt;/code&gt; for both the backend &amp;amp; frontend. It serves three purposes:
serve static/media files, frontend (eg. bundled React), and backend proxy.&lt;/p&gt;
&lt;h3&gt;http vs. https&lt;/h3&gt;
&lt;p&gt;In dev it's usually a http, but in production it's always
&lt;code&gt;https&lt;/code&gt;. When using https, use this config. The key is the &lt;code&gt;.pem&lt;/code&gt;
which, if using Azure VM as the host, would have these key files
already. If you are building your own host, you need to generate these
&lt;code&gt;.pem&lt;/code&gt; yourself.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;server {
  listen 8443 default_server ssl http2;
  listen [::]:8443 ssl http2;

  ssl_certificate /etc/nginx/waagent/TransportCert.pem;
  ssl_certificate_key /etc/nginx/waagent/TransportPrivate.pem;

  location ....
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Assuming the &lt;code&gt;.pem&lt;/code&gt; is from the docker host, you just need to mount
them to &lt;code&gt;/etc/nginx/...&lt;/code&gt; inside the nginx docker via &lt;code&gt;docker-compose&lt;/code&gt;.&lt;/p&gt;
&lt;h3&gt;proxy backend&lt;/h3&gt;
&lt;p&gt;Main use of nginx is to proxy …&lt;/p&gt;</summary><content type="html">&lt;figure class="col l6 m6 s12"&gt;
  &lt;img src="images/architecture_joke.jpg"
       class="center img-responsive"&gt;
&lt;/figure&gt;

&lt;p&gt;Deployment a fullstack requires multiple &lt;strong&gt;special treatments&lt;/strong&gt;. First
of all, the overall umbrella is the separation of configs by the
deployment targets, eg. dev/test/prod. Nature of these targets in
practice are quite different. Here I'm identifying some common tasks.&lt;/p&gt;
&lt;h2&gt;nginx.conf&lt;/h2&gt;
&lt;p&gt;I use &lt;code&gt;nginx&lt;/code&gt; for both the backend &amp;amp; frontend. It serves three purposes:
serve static/media files, frontend (eg. bundled React), and backend proxy.&lt;/p&gt;
&lt;h3&gt;http vs. https&lt;/h3&gt;
&lt;p&gt;In dev it's usually a http, but in production it's always
&lt;code&gt;https&lt;/code&gt;. When using https, use this config. The key is the &lt;code&gt;.pem&lt;/code&gt;
which, if using Azure VM as the host, would have these key files
already. If you are building your own host, you need to generate these
&lt;code&gt;.pem&lt;/code&gt; yourself.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;server {
  listen 8443 default_server ssl http2;
  listen [::]:8443 ssl http2;

  ssl_certificate /etc/nginx/waagent/TransportCert.pem;
  ssl_certificate_key /etc/nginx/waagent/TransportPrivate.pem;

  location ....
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Assuming the &lt;code&gt;.pem&lt;/code&gt; is from the docker host, you just need to mount
them to &lt;code&gt;/etc/nginx/...&lt;/code&gt; inside the nginx docker via &lt;code&gt;docker-compose&lt;/code&gt;.&lt;/p&gt;
&lt;h3&gt;proxy backend&lt;/h3&gt;
&lt;p&gt;Main use of nginx is to proxy backend. Three pieces needed.&lt;/p&gt;
&lt;p&gt;First, define an &lt;code&gt;upstream&lt;/code&gt;, which is the backend app itself. Here
it's in a docker named &lt;code&gt;web&lt;/code&gt; and on the docker's port &lt;code&gt;8001&lt;/code&gt;:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="n"&gt;upstream&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;django&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="err"&gt;{&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="c1"&gt;# must be your docker host IP, `localhost` won&amp;#39;t work!&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="k"&gt;server&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;web&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="mi"&gt;8001&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="err"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Second, in &lt;code&gt;location /&lt;/code&gt; block, define &lt;code&gt;try_files&lt;/code&gt;. &lt;code&gt;nginx&lt;/code&gt; will try
serve the request as much as it can, for example the static files, and
will fallback to &lt;code&gt;@proxy_to_app&lt;/code&gt;, then to 404 if all fails, cool!&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="n"&gt;location&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="err"&gt;{&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="p"&gt;....&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="n"&gt;try_files&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="err"&gt;$&lt;/span&gt;&lt;span class="n"&gt;uri&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nv"&gt;@proxy_to_app&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="err"&gt;$&lt;/span&gt;&lt;span class="n"&gt;uri&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;404&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="o"&gt;&amp;lt;===&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="err"&gt;!!&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="err"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Last, link proxy to &lt;code&gt;upstream&lt;/code&gt;:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="nx"&gt;location&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="err"&gt;@&lt;/span&gt;&lt;span class="nx"&gt;proxy_to_app&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="nx"&gt;proxy_pass&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;http&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="c1"&gt;//django;  &amp;lt;=== link to upstream&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="nx"&gt;proxy_http_version&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="m m-Double"&gt;1.1&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="nx"&gt;proxy_set_header&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;Upgrade&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="err"&gt;$&lt;/span&gt;&lt;span class="nx"&gt;http_upgrade&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="nx"&gt;proxy_set_header&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;Connection&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s"&gt;&amp;quot;upgrade&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="nx"&gt;proxy_redirect&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;off&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="nx"&gt;proxy_set_header&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;Host&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="err"&gt;$&lt;/span&gt;&lt;span class="nx"&gt;http_host&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="nx"&gt;proxy_set_header&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;X&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="nx"&gt;Real&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="nx"&gt;IP&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="err"&gt;$&lt;/span&gt;&lt;span class="nx"&gt;remote_addr&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="nx"&gt;proxy_set_header&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;X&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="nx"&gt;Forwarded&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="nx"&gt;For&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="err"&gt;$&lt;/span&gt;&lt;span class="nx"&gt;proxy_add_x_forwarded_for&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="nx"&gt;proxy_set_header&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;X&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="nx"&gt;Forwarded&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="nx"&gt;Host&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="err"&gt;$&lt;/span&gt;&lt;span class="nx"&gt;server_name&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;h3&gt;serve static/media files&lt;/h3&gt;
&lt;p&gt;You need two pieces for serving these type of files: &lt;code&gt;root&lt;/code&gt; which
defines the path on the file system where these files are stored, and
&lt;code&gt;location&lt;/code&gt; which defines uri pattern to match.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="n"&gt;root&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="k"&gt;var&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;www&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;html&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="n"&gt;location&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="k"&gt;static&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="n"&gt;autoindex&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;on&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="n"&gt;alias&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;path&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;to&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;another&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;place&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="n"&gt;location&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;media&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="n"&gt;autoindex&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;on&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="c1"&gt;# root ONLY!!&lt;/span&gt;
&lt;span class="n"&gt;location&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;

&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="c1"&gt;# catch all domain&lt;/span&gt;
&lt;span class="n"&gt;location&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="o"&gt;....&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Three things:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;Here &lt;code&gt;root /var/www/html&lt;/code&gt; is telling &lt;code&gt;nginx&lt;/code&gt; that the file system
   folder for storing these files is &lt;code&gt;/var/www/html&lt;/code&gt;. This could be
   changed to any other folder one chooses. Now when serving uri
   &lt;code&gt;/media&lt;/code&gt;, nginx will look for the file under &lt;code&gt;&amp;lt;root&amp;gt;/media/&lt;/code&gt;.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;This file storage value can be overridden using the &lt;code&gt;alias&lt;/code&gt; per
   location. Therefore, as shown above, you could serve the static
   files from &lt;code&gt;/path/to/another/place&lt;/code&gt; instead of the
   &lt;code&gt;&amp;lt;root&amp;gt;&lt;/code&gt;. Further, you could capture value from uri regex, and use
   it to compose a path &lt;strong&gt;dynamically&lt;/strong&gt;:&lt;/p&gt;
&lt;p&gt;&lt;code&gt;location ~ ^/myapp/([a-zA-Z0-9_-]+)/(.*)$ {
   alias /var/lib/myapp/$1/static/$2;
   autoindex on;
  }&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;nginx&lt;/code&gt; matches uri from top down, but will use the
   longest matched one.&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h3&gt;match exactly&lt;/h3&gt;
&lt;p&gt;If you want to match a uri &lt;strong&gt;exactly&lt;/strong&gt;, use &lt;code&gt;location = &amp;lt;uri&amp;gt;&lt;/code&gt;. For
example, &lt;code&gt;location = /&lt;/code&gt; will match only the &lt;code&gt;&amp;lt;domain&amp;gt;/&lt;/code&gt;, not
&lt;code&gt;&amp;lt;domain&amp;gt;/user/1&lt;/code&gt;. W/ this you could control exactly the nginx
behavior.&lt;/p&gt;
&lt;h3&gt;trailing slash&lt;/h3&gt;
&lt;p&gt;Location ends w/ a slash. This is to force a permanent 301
redirect. This is significant when you define django URL
&lt;code&gt;APPEND_SLASH&lt;/code&gt; which is default to &lt;code&gt;True&lt;/code&gt;. In other words, be
consistent between your proxied django app's url and other urls in
nginx, using either all ending slash, or not. For me I opt to use
ending slash throughout.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;If a location is defined by a prefix string that ends with the slash
character, and requests are processed by one of proxy_pass,
fastcgi_pass, uwsgi_pass, scgi_pass, memcached_pass, or grpc_pass,
then the special processing is performed. In response to a request
with URI equal to this string, but without the trailing slash, a
permanent redirect with the code 301 will be returned to the requested
URI with the slash appended. If this is not desired, an exact match of
the URI and location could be defined like this:&lt;/p&gt;
&lt;p&gt;```
location /user/ {
    proxy_pass http://user.example.com;
}&lt;/p&gt;
&lt;p&gt;location = /user {
    proxy_pass http://login.example.com;
}
```
&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2&gt;React &lt;code&gt;.env&lt;/code&gt;&lt;/h2&gt;
&lt;p&gt;If I have a React frontend, how to parameterize it so that I could
deploy a frontend coupling w/ a specific backend but &lt;strong&gt;without
changing code&lt;/strong&gt;!?  The answer is &lt;a href="https://create-react-app.dev/docs/adding-custom-environment-variables/"&gt;&lt;code&gt;.env&lt;/code&gt;&lt;/a&gt; file.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;The environment variables are embedded during the build time. Since
Create React App produces a static HTML/CSS/JS bundle, it can’t
possibly read them at runtime. To read them at runtime, you would need
to load HTML into memory on the server and replace placeholders in
runtime, as described here. Alternatively you can rebuild the app on
the server anytime you change them.&lt;/p&gt;
&lt;p&gt;Note: You must create custom environment variables beginning with
&lt;code&gt;REACT_APP_&lt;/code&gt;. Any other variables except NODE_ENV will be ignored to
avoid accidentally exposing a private key on the machine that could
have the same name. Changing any environment variables will require
you to restart the development server if it is running.&lt;/p&gt;
&lt;p&gt;These environment variables will be defined for you on
process.env. For example, having an environment variable named
REACT_APP_NOT_SECRET_CODE will be exposed in your JS as
&lt;code&gt;process.env.REACT_APP_NOT_SECRET_CODE&lt;/code&gt;.
&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;So now I define &lt;code&gt;.env.dev&lt;/code&gt; and &lt;code&gt;.env.prod&lt;/code&gt;, and specify the backend's
IP in it:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="c1"&gt;# .env.dev:&lt;/span&gt;

&lt;span class="nv"&gt;REACT_APP_HOST_URL&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;http://192.168.68.106:8003

&lt;span class="c1"&gt;# .env.prod:&lt;/span&gt;

&lt;span class="nv"&gt;REACT_APP_HOST_URL&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;https://104.208.79.231:8443
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Then in REACT code, I read this value in and provide it in a global context:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="k"&gt;import&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;createContext&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="kr"&gt;from&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;react&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;GlobalContext&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;createContext&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="nx"&gt;backend&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="nx"&gt;api&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="sb"&gt;`&lt;/span&gt;&lt;span class="si"&gt;${&lt;/span&gt;&lt;span class="nx"&gt;process&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;env&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;REACT_APP_HOST_URL&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="sb"&gt;/api/v1`&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="nx"&gt;host&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;process&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;env&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;REACT_APP_HOST_URL&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="p"&gt;},&lt;/span&gt;
&lt;span class="p"&gt;});&lt;/span&gt;

&lt;span class="k"&gt;export&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;default&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;GlobalContext&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Now, if to build a frontend coupling w/ backend at &lt;code&gt;192.168...&lt;/code&gt;, I do
a symlink &lt;code&gt;.env -&amp;gt; .env.dev&lt;/code&gt;, then &lt;code&gt;npm build&lt;/code&gt;. This version of the
frontend can then be deployed to any web server, and it will use use
the &lt;code&gt;192.168..&lt;/code&gt; backend. Similarly, if I build one using &lt;code&gt;.env.prod&lt;/code&gt;,
then I have one using the &lt;code&gt;104.208..&lt;/code&gt; backend. With these, I have 3
benefits:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Can build a frontend w/ any backend w/o changing frontend code.&lt;/li&gt;
&lt;li&gt;Can deploy frontend to any web server, eg. s3, nginx&lt;/li&gt;
&lt;li&gt;Can release and scale backend and frontend independently.&lt;/li&gt;
&lt;/ol&gt;
&lt;h2&gt;docker-compose &lt;code&gt;.env&lt;/code&gt;&lt;/h2&gt;
&lt;p&gt;To define &lt;code&gt;env&lt;/code&gt; variables in &lt;code&gt;docker-compose&lt;/code&gt; such as DB credentials,
you can either define them directly in the compose. The downside of
this approach is that sensitive values are saved in git, and a dev
using this same file but different value would have to make
modifications directly, and usually these changes got checked in git
also which then causes conflict.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="n"&gt;environment&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="n"&gt;HTTP_TYPE&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;http&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="n"&gt;HOST_SERVER&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mf"&gt;192.168&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="mf"&gt;68.110&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="mi"&gt;8003&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="n"&gt;PYTHONUNBUFFERED&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="n"&gt;DJANGO_DEBUG&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="err"&gt;#&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;or&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="n"&gt;MYSQL_DATABASE&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;chinesevisaexpress&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="n"&gt;DEPLOY_TYPE&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;dev&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="err"&gt;#&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;dev&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;or&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;prod&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="n"&gt;DJANGO_DB_USER&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;sldkjflsdj&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="n"&gt;DJANGO_DB_PWD&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;sdkjflsj&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="n"&gt;DJANGO_DB_HOST&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;db&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="n"&gt;DJANGO_DB_PORT&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;3306&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="n"&gt;DJANGO_REDIS_HOST&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;redis&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="n"&gt;DJANGO_SUPERUSER_USERNAME&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;dlksjldlfjd&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="n"&gt;DJANGO_SUPERUSER_PASSWORD&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;sldkjfljdslkj&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="n"&gt;DJANGO_SUPERUSER_EMAIL&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;feng_xia41103&lt;/span&gt;&lt;span class="err"&gt;@&lt;/span&gt;&lt;span class="n"&gt;hotmail&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;com&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Or, you define them as &lt;code&gt;key=val&lt;/code&gt; in &lt;code&gt;.env&lt;/code&gt;, then &lt;code&gt;docker-compose&lt;/code&gt; will
read in &lt;strong&gt;automagically&lt;/strong&gt;. You can check its effect by &lt;code&gt;docker-compose
config&lt;/code&gt; which is essentially a populated compose yaml w/ these values
plugged in.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;#&lt;span class="w"&gt; &lt;/span&gt;.env

HTTP_TYPE=http
HOST_SERVER=192.168.68.110:8003
MYSQL_DATABASE=ljlsjdlfkjlsfj
DEPLOY_TYPE=dev&lt;span class="w"&gt; &lt;/span&gt;#&lt;span class="w"&gt; &lt;/span&gt;dev&lt;span class="w"&gt; &lt;/span&gt;or&lt;span class="w"&gt; &lt;/span&gt;prod
DJANGO_DB_USER=sldkjfljs
DJANGO_DB_PWD=sldkjfldsjf
DJANGO_SUPERUSER_USERNAME=sdljkfldsj
DJANGO_SUPERUSER_PASSWORD=dslkjfljdsl
DJANGO_SUPERUSER_EMAIL=feng_xia41103@hotmail.com

#&lt;span class="w"&gt; &lt;/span&gt;docker-compose

environment:

&lt;span class="w"&gt;  &lt;/span&gt;HTTP_TYPE:&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="cp"&gt;${&lt;/span&gt;&lt;span class="n"&gt;HTTP_TYPE&lt;/span&gt;&lt;span class="cp"&gt;}&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;HOST_SERVER:&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="cp"&gt;${&lt;/span&gt;&lt;span class="n"&gt;HOST_SERVER&lt;/span&gt;&lt;span class="cp"&gt;}&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;MYSQL_DATABASE:&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="cp"&gt;${&lt;/span&gt;&lt;span class="n"&gt;MYSQL_DATABASE&lt;/span&gt;&lt;span class="cp"&gt;}&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;DJANGO_DB_USER:&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="cp"&gt;${&lt;/span&gt;&lt;span class="n"&gt;DJANGO_DB_USER&lt;/span&gt;&lt;span class="cp"&gt;}&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;DJANGO_DB_PWD:&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="cp"&gt;${&lt;/span&gt;&lt;span class="n"&gt;DJANGO_DB_PWD&lt;/span&gt;&lt;span class="cp"&gt;}&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;DJANGO_SUPERUSER_USERNAME:&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="cp"&gt;${&lt;/span&gt;&lt;span class="n"&gt;DJANGO_SUPERUSER_USERNAME&lt;/span&gt;&lt;span class="cp"&gt;}&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;DJANGO_SUPERUSER_PASSWORD:&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="cp"&gt;${&lt;/span&gt;&lt;span class="n"&gt;DJANGO_SUPERUSER_PASSWORD&lt;/span&gt;&lt;span class="cp"&gt;}&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;DJANGO_SUPERUSER_EMAIL:&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="cp"&gt;${&lt;/span&gt;&lt;span class="n"&gt;DJANGO_SUPERUSER_EMAIL&lt;/span&gt;&lt;span class="cp"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;</content><category term="dev"></category><category term="dev"></category></entry><entry><title>Nginx Https</title><link href="https://fengxia41103.github.io/myblog/nginx%20https.html" rel="alternate"></link><published>2023-03-19T16:16:00-04:00</published><updated>2023-03-19T16:16:00-04:00</updated><author><name>Feng Xia</name></author><id>tag:fengxia41103.github.io,2023-03-19:/myblog/nginx https.html</id><summary type="html">&lt;figure class="col s12"&gt;
  &lt;img src="images/DSC_0820.JPG"/&gt;
&lt;/figure&gt;

&lt;p&gt;In my development this is a common scenario that I have a stack up and
running on a server which has an IP but no domain. This creates a
problem for getting a cert using &lt;a href="https://certbot.eff.org/"&gt;certbot&lt;/a&gt;. Instead, on Azure VM
there is already a folder called &lt;code&gt;waagent&lt;/code&gt; which has a cert. So the
idea is to use the same cert for HTTPs.&lt;/p&gt;
&lt;p&gt;First, define the django application as an &lt;code&gt;upstream&lt;/code&gt;. Here the
&lt;code&gt;web:8001&lt;/code&gt; is that the django docker service is named &lt;code&gt;web&lt;/code&gt; (in
&lt;code&gt;docker-compose&lt;/code&gt;) and on port &lt;code&gt;8001&lt;/code&gt; of this web docker.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="n"&gt;upstream&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;django&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="err"&gt;{&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="c1"&gt;# must be your docker host IP, `localhost` won&amp;#39;t work!&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="k"&gt;server&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;web&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="mi"&gt;8001&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="err"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Second, serve as the proxy for upstream &lt;code&gt;django&lt;/code&gt;. This snippet lives
inside a &lt;code&gt;server {.... }&lt;/code&gt;. Here we define the location as
&lt;code&gt;@proxy_to_app&lt;/code&gt;, important!! This will later be used in &lt;code&gt;redirect&lt;/code&gt; section.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="nx"&gt;location&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="err"&gt;@&lt;/span&gt;&lt;span class="nx"&gt;proxy_to_app&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="nx"&gt;proxy_pass&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;http&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="c1"&gt;//django;&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="nx"&gt;proxy_http_version&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="m m-Double"&gt;1.1&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="nx"&gt;proxy_set_header&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;Upgrade&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="err"&gt;$&lt;/span&gt;&lt;span class="nx"&gt;http_upgrade&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="nx"&gt;proxy_set_header&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;Connection&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s"&gt;&amp;quot;upgrade&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="nx"&gt;proxy_redirect&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;off&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="nx"&gt;proxy_set_header&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;Host&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="err"&gt;$&lt;/span&gt;&lt;span class="nx"&gt;host&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="nx"&gt;proxy_set_header&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;X&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="nx"&gt;Real&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="nx"&gt;IP&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="err"&gt;$&lt;/span&gt;&lt;span class="nx"&gt;remote_addr&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="nx"&gt;proxy_set_header&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;X&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="nx"&gt;Forwarded&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="nx"&gt;For&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="err"&gt;$&lt;/span&gt;&lt;span class="nx"&gt;proxy_add_x_forwarded_for&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="nx"&gt;proxy_set_header&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;X&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="nx"&gt;Forwarded&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="nx"&gt;Host&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="err"&gt;$&lt;/span&gt;&lt;span class="nx"&gt;server_name&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Third, the https …&lt;/p&gt;</summary><content type="html">&lt;figure class="col s12"&gt;
  &lt;img src="images/DSC_0820.JPG"/&gt;
&lt;/figure&gt;

&lt;p&gt;In my development this is a common scenario that I have a stack up and
running on a server which has an IP but no domain. This creates a
problem for getting a cert using &lt;a href="https://certbot.eff.org/"&gt;certbot&lt;/a&gt;. Instead, on Azure VM
there is already a folder called &lt;code&gt;waagent&lt;/code&gt; which has a cert. So the
idea is to use the same cert for HTTPs.&lt;/p&gt;
&lt;p&gt;First, define the django application as an &lt;code&gt;upstream&lt;/code&gt;. Here the
&lt;code&gt;web:8001&lt;/code&gt; is that the django docker service is named &lt;code&gt;web&lt;/code&gt; (in
&lt;code&gt;docker-compose&lt;/code&gt;) and on port &lt;code&gt;8001&lt;/code&gt; of this web docker.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="n"&gt;upstream&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;django&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="err"&gt;{&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="c1"&gt;# must be your docker host IP, `localhost` won&amp;#39;t work!&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="k"&gt;server&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;web&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="mi"&gt;8001&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="err"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Second, serve as the proxy for upstream &lt;code&gt;django&lt;/code&gt;. This snippet lives
inside a &lt;code&gt;server {.... }&lt;/code&gt;. Here we define the location as
&lt;code&gt;@proxy_to_app&lt;/code&gt;, important!! This will later be used in &lt;code&gt;redirect&lt;/code&gt; section.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="nx"&gt;location&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="err"&gt;@&lt;/span&gt;&lt;span class="nx"&gt;proxy_to_app&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="nx"&gt;proxy_pass&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;http&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="c1"&gt;//django;&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="nx"&gt;proxy_http_version&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="m m-Double"&gt;1.1&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="nx"&gt;proxy_set_header&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;Upgrade&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="err"&gt;$&lt;/span&gt;&lt;span class="nx"&gt;http_upgrade&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="nx"&gt;proxy_set_header&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;Connection&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s"&gt;&amp;quot;upgrade&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="nx"&gt;proxy_redirect&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;off&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="nx"&gt;proxy_set_header&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;Host&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="err"&gt;$&lt;/span&gt;&lt;span class="nx"&gt;host&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="nx"&gt;proxy_set_header&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;X&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="nx"&gt;Real&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="nx"&gt;IP&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="err"&gt;$&lt;/span&gt;&lt;span class="nx"&gt;remote_addr&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="nx"&gt;proxy_set_header&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;X&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="nx"&gt;Forwarded&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="nx"&gt;For&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="err"&gt;$&lt;/span&gt;&lt;span class="nx"&gt;proxy_add_x_forwarded_for&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="nx"&gt;proxy_set_header&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;X&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="nx"&gt;Forwarded&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="nx"&gt;Host&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="err"&gt;$&lt;/span&gt;&lt;span class="nx"&gt;server_name&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Third, the https piece. Again these live inside a &lt;code&gt;server {...}&lt;/code&gt;.
We are listening to port &lt;code&gt;8443&lt;/code&gt; of the host server (&lt;strong&gt;therefore, you
need to add networking rules to allow port 8443 traffic by
azure/aws&lt;/strong&gt;!), and the certs are the ones I mentioned earlier which
you can find in azure's vm itself &amp;larr; this is the main trick!&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;listen 8443 default_server ssl http2;
listen [::]:8443 ssl http2;

ssl_certificate /etc/nginx/waagent/TransportCert.pem;
ssl_certificate_key /etc/nginx/waagent/TransportPrivate.pem;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Fourth, catch all to redirect! So up to the section above, if you type
in &lt;code&gt;https://&amp;lt;ip&amp;gt;:8443&lt;/code&gt;, you should hit your django app. If you ommitt
8443, for example, or typed &lt;code&gt;http://&lt;/code&gt; instead of &lt;code&gt;https://&lt;/code&gt;, this
redirect will come into effect. Notice that it says &lt;code&gt;try_files $uri
@proxy_to_app;&lt;/code&gt;, and the &lt;code&gt;@proxy_to_app&lt;/code&gt; is the named block of django
app we defined earlier! So this is saying that any traffic hitting &lt;code&gt;/&lt;/code&gt;
(if not matched earlier because nginx matches url pattern in order)
will be redirected to &lt;code&gt;@proxy_to_app&lt;/code&gt;, just what we want:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="n"&gt;location&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="err"&gt;{&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="n"&gt;add_header&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;Access&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;Control&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;Allow&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;Origin&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="ss"&gt;&amp;quot;*&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="n"&gt;add_header&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;Access&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;Control&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;Allow&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;Methods&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;GET, POST, OPTIONS, PUT, PATCH, DELETE&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="n"&gt;add_header&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;Access&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;Control&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;Allow&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;Headers&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;X-Requested-With,Accept,Content-Type, Origin&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="n"&gt;try_files&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="err"&gt;$&lt;/span&gt;&lt;span class="n"&gt;uri&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nv"&gt;@proxy_to_app&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="n"&gt;keepalive_timeout&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="err"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Last, any url pattern other than &lt;code&gt;/&lt;/code&gt; should be put before the &lt;code&gt;/&lt;/code&gt;
block so to give them a chance to match. This is used for nginx
serving static files such as media (your uploaded files) and css/js
stuff. For example, here we are using nginx to serve &lt;code&gt;/static/&lt;/code&gt; and
&lt;code&gt;/media/&lt;/code&gt; before it goes to the catch all &lt;code&gt;/&lt;/code&gt;. &lt;strong&gt;Note&lt;/strong&gt; that location
must have the &lt;strong&gt;trailing slash&lt;/strong&gt;!!!!&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="n"&gt;location&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="k"&gt;static&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="n"&gt;root&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="k"&gt;var&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;www&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;html&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="n"&gt;autoindex&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;on&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="n"&gt;location&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;media&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="n"&gt;root&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="k"&gt;var&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;www&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;html&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="n"&gt;autoindex&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;on&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="n"&gt;location&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;...&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;So to piece all these together, this is a &lt;code&gt;nginx.conf&lt;/code&gt; I use in
production to serve https:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="n"&gt;upstream&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;django&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="err"&gt;{&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="c1"&gt;# must be your docker host IP, `localhost` won&amp;#39;t work!&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="k"&gt;server&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;web&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="mi"&gt;8001&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="err"&gt;}&lt;/span&gt;

&lt;span class="k"&gt;server&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="err"&gt;{&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="n"&gt;listen&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;8443&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;default_server&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;ssl&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;http2&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="n"&gt;listen&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="err"&gt;[&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="err"&gt;]&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="mi"&gt;8443&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;ssl&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;http2&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="n"&gt;ssl_certificate&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;etc&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;nginx&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;waagent&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;TransportCert&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;pem&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="n"&gt;ssl_certificate_key&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;etc&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;nginx&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;waagent&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;TransportPrivate&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;pem&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;


&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="n"&gt;location&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;static&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="err"&gt;{&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="n"&gt;root&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;var&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;www&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;html&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="n"&gt;autoindex&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;on&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="err"&gt;}&lt;/span&gt;

&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="n"&gt;location&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;media&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="err"&gt;{&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="n"&gt;root&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;var&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;www&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;html&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="n"&gt;autoindex&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;on&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="err"&gt;}&lt;/span&gt;

&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="n"&gt;location&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="err"&gt;{&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="n"&gt;add_header&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;Access&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;Control&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;Allow&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;Origin&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;*&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="n"&gt;add_header&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;Access&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;Control&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;Allow&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;Methods&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;GET, POST, OPTIONS, PUT, PATCH, DELETE&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="n"&gt;add_header&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;Access&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;Control&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;Allow&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;Headers&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;X-Requested-With,Accept,Content-Type, Origin&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="n"&gt;try_files&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;$uri&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nv"&gt;@proxy_to_app&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="n"&gt;keepalive_timeout&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="err"&gt;}&lt;/span&gt;

&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="n"&gt;location&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nv"&gt;@proxy_to_app&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="err"&gt;{&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="n"&gt;proxy_pass&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;http&lt;/span&gt;&lt;span class="o"&gt;://&lt;/span&gt;&lt;span class="n"&gt;django&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="n"&gt;proxy_http_version&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mf"&gt;1.1&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="n"&gt;proxy_set_header&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;Upgrade&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;$http_upgrade&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="n"&gt;proxy_set_header&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;Connection&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;upgrade&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="n"&gt;proxy_redirect&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;off&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="n"&gt;proxy_set_header&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;Host&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;$host&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="n"&gt;proxy_set_header&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;X&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="kt"&gt;Real&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;IP&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;$remote_addr&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="n"&gt;proxy_set_header&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;X&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;Forwarded&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="k"&gt;For&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;$proxy_add_x_forwarded_for&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="n"&gt;proxy_set_header&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;X&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;Forwarded&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="k"&gt;Host&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;$server_name&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="err"&gt;}&lt;/span&gt;
&lt;span class="err"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;And the very last, to make the &lt;code&gt;waagent&lt;/code&gt; available to nginx, we mount
them in &lt;code&gt;docker-compse&lt;/code&gt;, together with nginx config, static file
folder, media folder:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="n"&gt;backend&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;proxy&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="n"&gt;image&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;nginx&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="n"&gt;restart&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;always&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="n"&gt;ports&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;8443:8443&amp;quot;&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="n"&gt;volumes&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;./&lt;/span&gt;&lt;span class="n"&gt;waagent&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;etc&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;nginx&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;waagent&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="n"&gt;ro&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;./&lt;/span&gt;&lt;span class="n"&gt;backend&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;nginx&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;prod&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;conf&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;etc&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;nginx&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;conf&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;d&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;default&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;conf&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="n"&gt;ro&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;./&lt;/span&gt;&lt;span class="n"&gt;backend&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;staticfiles&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="k"&gt;var&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;www&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;html&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="k"&gt;static&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="n"&gt;ro&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;./&lt;/span&gt;&lt;span class="n"&gt;media&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="k"&gt;var&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;www&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;html&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;media&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="n"&gt;depends_on&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;web&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="n"&gt;command&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;nginx&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;debug&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;-g&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;daemon off;&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="n"&gt;networks&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;management&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;</content><category term="dev"></category></entry><entry><title>REACT in website</title><link href="https://fengxia41103.github.io/myblog/react%20in%20website.html" rel="alternate"></link><published>2022-11-15T14:19:00-05:00</published><updated>2022-11-15T14:19:00-05:00</updated><author><name>Feng Xia</name></author><id>tag:fengxia41103.github.io,2022-11-15:/myblog/react in website.html</id><summary type="html">&lt;p&gt;This is to answer the question of "how to use REACT with your
website?" For example, I'm using Pelican to generate this blog
site. These are static files. So if I want to utilize my REACT skill
to write some &lt;em&gt;web application&lt;/em&gt;, how to incorporate that into this
website?&lt;/p&gt;
&lt;p&gt;The idea is straightforward &amp;mdash; REACT is a Javascript. So, if I
can package my REACT application into a &lt;code&gt;.js&lt;/code&gt;, can't I just import it
using the &lt;code&gt;&amp;lt;script...&lt;/code&gt; HTML syntax? Yes I can! The key is
&lt;a href="https://rollupjs.org/guide/en/"&gt;rollup.js&lt;/a&gt;. So the idea is this: rollup will package your REACT
files into a single &lt;code&gt;bundle.js&lt;/code&gt;, and you import it in your HTML. The
connection between REACT code and HTML page will be a HTML &lt;strong&gt;id&lt;/strong&gt;.&lt;/p&gt;
&lt;h1&gt;React component&lt;/h1&gt;
&lt;p&gt;Use my &lt;code&gt;quote.jsx&lt;/code&gt; for example. In here I define the REACT component
however I will do:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="k"&gt;import&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;React&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;StrictMode&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;useState&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;useEffect&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="kr"&gt;from&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;react&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;createRoot&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="kr"&gt;from&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;react-dom/client&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;fetchJsonp&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="kr"&gt;from&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;fetch-jsonp&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="k"&gt;export&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;default&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="kd"&gt;function&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;QuoteBox&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;props&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="kd"&gt;const&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;quote&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;setQuote&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;useState&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kc"&gt;null&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="kd"&gt;const&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;img&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;setImg&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;useState&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kc"&gt;null&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="kd"&gt;const&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;loading&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;setLoading …&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;</summary><content type="html">&lt;p&gt;This is to answer the question of "how to use REACT with your
website?" For example, I'm using Pelican to generate this blog
site. These are static files. So if I want to utilize my REACT skill
to write some &lt;em&gt;web application&lt;/em&gt;, how to incorporate that into this
website?&lt;/p&gt;
&lt;p&gt;The idea is straightforward &amp;mdash; REACT is a Javascript. So, if I
can package my REACT application into a &lt;code&gt;.js&lt;/code&gt;, can't I just import it
using the &lt;code&gt;&amp;lt;script...&lt;/code&gt; HTML syntax? Yes I can! The key is
&lt;a href="https://rollupjs.org/guide/en/"&gt;rollup.js&lt;/a&gt;. So the idea is this: rollup will package your REACT
files into a single &lt;code&gt;bundle.js&lt;/code&gt;, and you import it in your HTML. The
connection between REACT code and HTML page will be a HTML &lt;strong&gt;id&lt;/strong&gt;.&lt;/p&gt;
&lt;h1&gt;React component&lt;/h1&gt;
&lt;p&gt;Use my &lt;code&gt;quote.jsx&lt;/code&gt; for example. In here I define the REACT component
however I will do:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="k"&gt;import&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;React&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;StrictMode&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;useState&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;useEffect&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="kr"&gt;from&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;react&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;createRoot&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="kr"&gt;from&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;react-dom/client&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;fetchJsonp&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="kr"&gt;from&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;fetch-jsonp&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="k"&gt;export&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;default&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="kd"&gt;function&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;QuoteBox&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;props&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="kd"&gt;const&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;quote&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;setQuote&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;useState&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kc"&gt;null&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="kd"&gt;const&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;img&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;setImg&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;useState&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kc"&gt;null&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="kd"&gt;const&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;loading&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;setLoading&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;useState&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kc"&gt;false&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="kd"&gt;const&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;getImage&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;=&amp;gt;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="nx"&gt;setLoading&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kc"&gt;true&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="c1"&gt;// AJAX&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="kd"&gt;const&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;min&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mf"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
&lt;span class="w"&gt;      &lt;/span&gt;&lt;span class="nx"&gt;max&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mf"&gt;1743&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="c1"&gt;// 1743 is from manual testing&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="kd"&gt;const&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;id&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nb"&gt;Math&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;floor&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;Math&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;random&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;max&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;min&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;min&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="c1"&gt;// NOTE: must use `https` if using github page, which is&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="c1"&gt;// served in https (is a setting option, however).&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="kd"&gt;const&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;apiUrl&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="sb"&gt;`https://dynamic.xkcd.com/api-0/jsonp/comic/&lt;/span&gt;&lt;span class="si"&gt;${&lt;/span&gt;&lt;span class="nx"&gt;id&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="sb"&gt;`&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="nx"&gt;fetchJsonp&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;apiUrl&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="w"&gt;      &lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;then&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="nx"&gt;resp&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;=&amp;gt;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;resp&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;json&lt;/span&gt;&lt;span class="p"&gt;())&lt;/span&gt;
&lt;span class="w"&gt;      &lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;then&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="nx"&gt;data&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;=&amp;gt;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="nx"&gt;setQuote&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;data&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;title&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="nx"&gt;setImg&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;data&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;img&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="nx"&gt;setLoading&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kc"&gt;false&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="w"&gt;      &lt;/span&gt;&lt;span class="p"&gt;});&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="p"&gt;};&lt;/span&gt;

&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="nx"&gt;useEffect&lt;/span&gt;&lt;span class="p"&gt;(()&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;=&amp;gt;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;getImage&lt;/span&gt;&lt;span class="p"&gt;(),&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;[]);&lt;/span&gt;

&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="k"&gt;return&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;div&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
&lt;span class="w"&gt;      &lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;figure&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;onClick&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;getImage&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;img&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;src&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;img&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;className&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;center img-responsive&amp;quot;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;/&amp;gt;&lt;/span&gt;
&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;figcaption&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
&lt;span class="w"&gt;          &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;quote&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="w"&gt;          &lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;span&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;style&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;{{&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;marginLeft&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;1em&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="kr"&gt;float&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;none&amp;quot;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;}}&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
&lt;span class="w"&gt;            &lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;i&lt;/span&gt;
&lt;span class="w"&gt;              &lt;/span&gt;&lt;span class="nx"&gt;className&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;loading&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;?&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;fa fa-spinner&amp;quot;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;fa fa-angle-right&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="w"&gt;              &lt;/span&gt;&lt;span class="nx"&gt;style&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;{{&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;paddingLeft&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;1em&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;marginRight&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;1em&amp;quot;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;}}&lt;/span&gt;
&lt;span class="w"&gt;            &lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&amp;lt;&lt;/span&gt;&lt;span class="err"&gt;/i&amp;gt;&lt;/span&gt;
&lt;span class="w"&gt;          &lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="err"&gt;/span&amp;gt;&lt;/span&gt;
&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="err"&gt;/figcaption&amp;gt;&lt;/span&gt;
&lt;span class="w"&gt;      &lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="err"&gt;/figure&amp;gt;&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="err"&gt;/div&amp;gt;&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Then at the end of this component, I must use &lt;code&gt;createRoot&lt;/code&gt; to add an
element to the DOM, thus making this component's render appear to the
HTML page. The &lt;code&gt;getElementById("quote")&lt;/code&gt; is where this component will
be put under.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;rootElem&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nb"&gt;document&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;getElementById&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;quote&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="k"&gt;if&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;rootElem&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="kd"&gt;const&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;root&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;createRoot&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;rootElem&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="nx"&gt;root&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;render&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;StrictMode&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
&lt;span class="w"&gt;      &lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;QuoteBox&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;/&amp;gt;&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="err"&gt;/StrictMode&amp;gt;&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;h1&gt;HTML element&lt;/h1&gt;
&lt;p&gt;Next, in my &lt;code&gt;.md&lt;/code&gt; (Pelican uses &lt;code&gt;.md&lt;/code&gt; to render &lt;code&gt;html&lt;/code&gt;), all I need is
an element w/ ID &lt;code&gt;"quote"&lt;/code&gt;. Apparently now I can plug in the component
above to anywhere in the page, so you can make some really neat
component and plug it into your running text to make the page interesting.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;Title: Quote
Tags: quote
Slug: quote
Author: Feng Xia

&amp;lt;div id=&amp;quot;quote&amp;quot;&amp;gt;&amp;lt;/div&amp;gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;h1&gt;rollup&lt;/h1&gt;
&lt;p&gt;Now enters the &lt;code&gt;rollup&lt;/code&gt;. First is its config. Two key values: &lt;code&gt;input:
"index.jsx"&lt;/code&gt;, which defines the list of components we are to package,
and &lt;code&gt;output: "bundle.js"&lt;/code&gt; which is the final package name we are to
import in HTML.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="k"&gt;import&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;serve&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="kr"&gt;from&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;rollup-plugin-serve&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;livereload&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="kr"&gt;from&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;rollup-plugin-livereload&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;babel&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="kr"&gt;from&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;@rollup/plugin-babel&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;nodeResolve&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="kr"&gt;from&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;@rollup/plugin-node-resolve&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;commonjs&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="kr"&gt;from&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;@rollup/plugin-commonjs&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;replace&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="kr"&gt;from&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;@rollup/plugin-replace&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;export&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;default&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="nx"&gt;input&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;index.jsx&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="o"&gt;&amp;lt;====&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;!!&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="nx"&gt;output&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="nx"&gt;file&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;bundle.js&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;&amp;lt;====&lt;/span&gt;&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="o"&gt;!!&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="nx"&gt;format&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;iife&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="nx"&gt;sourcemap&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="kc"&gt;true&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="p"&gt;},&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="nx"&gt;plugins&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="nx"&gt;nodeResolve&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt;
&lt;span class="w"&gt;      &lt;/span&gt;&lt;span class="nx"&gt;extensions&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;.js&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="p"&gt;}),&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="nx"&gt;replace&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt;
&lt;span class="w"&gt;      &lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;process.env.NODE_ENV&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nb"&gt;JSON&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;stringify&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;development&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="p"&gt;}),&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="nx"&gt;babel&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt;
&lt;span class="w"&gt;      &lt;/span&gt;&lt;span class="nx"&gt;presets&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;@babel/preset-react&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="p"&gt;}),&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="nx"&gt;commonjs&lt;/span&gt;&lt;span class="p"&gt;(),&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="nx"&gt;serve&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt;
&lt;span class="w"&gt;      &lt;/span&gt;&lt;span class="nx"&gt;open&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="kc"&gt;true&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
&lt;span class="w"&gt;      &lt;/span&gt;&lt;span class="nx"&gt;verbose&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="kc"&gt;true&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
&lt;span class="w"&gt;      &lt;/span&gt;&lt;span class="nx"&gt;contentBase&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;public&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt;
&lt;span class="w"&gt;      &lt;/span&gt;&lt;span class="nx"&gt;host&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;localhost&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
&lt;span class="w"&gt;      &lt;/span&gt;&lt;span class="nx"&gt;port&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mf"&gt;3000&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="p"&gt;}),&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="nx"&gt;livereload&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;watch&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;.&amp;quot;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;}),&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt;
&lt;span class="p"&gt;};&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Now in the same folder w/ this config file, you need an &lt;code&gt;index.jsx&lt;/code&gt;.
This doesn't need much explanation. You can put components in a
different file structure also, or even make them like a storybook kind
library, and import the ones you need here.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="k"&gt;import&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;QuoteBox&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="kr"&gt;from&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;./quote.jsx&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;SearchBox&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="kr"&gt;from&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;./search.jsx&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;PresentationBox&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="kr"&gt;from&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;./brother.jsx&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Next, let's roll these components into a single &lt;code&gt;.js&lt;/code&gt;: &lt;code&gt;npx rollup -c
js/rollup.config.js -w&lt;/code&gt;. You should now see a &lt;code&gt;bundle.js&lt;/code&gt; in the same
folder as the config.&lt;/p&gt;
&lt;h1&gt;use &lt;code&gt;bundle.js&lt;/code&gt; in html&lt;/h1&gt;
&lt;p&gt;Last step is to import this &lt;code&gt;bundle.js&lt;/code&gt; in HTML. Really now you can
serve this &lt;code&gt;bundle.js&lt;/code&gt; from anywhere. It's just another JS.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;script&lt;/span&gt;
  &lt;span class="na"&gt;type&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;text/javascript&amp;quot;&lt;/span&gt;
  &lt;span class="na"&gt;src&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;{{ SITEURL }}/theme/js/bundle.js&amp;quot;&lt;/span&gt;
&lt;span class="p"&gt;&amp;gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;script&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Now once the page w/ the given ID is rendered, JS will take effect and
insert the REACT component to that spot. Neat.&lt;/p&gt;</content><category term="dev"></category><category term="dev"></category></entry><entry><title>AWS SSO</title><link href="https://fengxia41103.github.io/myblog/aws%20sso.html" rel="alternate"></link><published>2022-05-10T21:17:00-04:00</published><updated>2022-05-10T21:17:00-04:00</updated><author><name>Feng Xia</name></author><id>tag:fengxia41103.github.io,2022-05-10:/myblog/aws sso.html</id><summary type="html">&lt;p&gt;&lt;a href="https://aws.amazon.com/single-sign-on/"&gt;AWS SSO&lt;/a&gt; is a pretty interesting idea. It's actually a bit confusing
when I first touched it, namely,&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;What is a profile&lt;/li&gt;
&lt;li&gt;How to setup a profile&lt;/li&gt;
&lt;li&gt;How to use a profile&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;The &lt;a href="https://ben11kehoe.medium.com/you-only-need-to-call-aws-sso-login-once-for-all-your-profiles-41a334e1b37e"&gt;article&lt;/a&gt; has good explanation on the concept. I'm gonna quote
it here so I don't need to reinvent the wheels.&lt;/p&gt;
&lt;h1&gt;What is SSO login&lt;/h1&gt;
&lt;blockquote&gt;
&lt;p&gt;With AWS SSO, you log in as a human, and the token you receive that
represent you as a logged-in human can become any of the various IAM
roles in the various accounts that they have been granted access
to. Even though you give a profile in the input to aws sso login, the
resulting session is not scoped to the account and role in that
profile, by design. In the browser, when you log in through your AWS
SSO start URL (in this case, https://foo.awsapps.com/start), you are
logged in for all your access, and can find the account and role and
clicking through it to get into the AWS web console. When you …&lt;/p&gt;&lt;/blockquote&gt;</summary><content type="html">&lt;p&gt;&lt;a href="https://aws.amazon.com/single-sign-on/"&gt;AWS SSO&lt;/a&gt; is a pretty interesting idea. It's actually a bit confusing
when I first touched it, namely,&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;What is a profile&lt;/li&gt;
&lt;li&gt;How to setup a profile&lt;/li&gt;
&lt;li&gt;How to use a profile&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;The &lt;a href="https://ben11kehoe.medium.com/you-only-need-to-call-aws-sso-login-once-for-all-your-profiles-41a334e1b37e"&gt;article&lt;/a&gt; has good explanation on the concept. I'm gonna quote
it here so I don't need to reinvent the wheels.&lt;/p&gt;
&lt;h1&gt;What is SSO login&lt;/h1&gt;
&lt;blockquote&gt;
&lt;p&gt;With AWS SSO, you log in as a human, and the token you receive that
represent you as a logged-in human can become any of the various IAM
roles in the various accounts that they have been granted access
to. Even though you give a profile in the input to aws sso login, the
resulting session is not scoped to the account and role in that
profile, by design. In the browser, when you log in through your AWS
SSO start URL (in this case, https://foo.awsapps.com/start), you are
logged in for all your access, and can find the account and role and
clicking through it to get into the AWS web console. When you want to
switch between accounts and roles, you don't need to log in
again; you go back to the start page and click through into the
console as a different account and role. In the CLI, it works the same
way, you log in as a human using aws sso login, and this permits you
to use any of the accounts and roles you have access to without
logging in again.
&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;The curious thing is, in order do the SSO login, you &lt;strong&gt;must have&lt;/strong&gt; at
least one profile! Read on.&lt;/p&gt;
&lt;h1&gt;What is a profile&lt;/h1&gt;
&lt;blockquote&gt;
&lt;p&gt;A profile configured in ~/.aws/config that is not using IAM User
credentials does not represent a particular human. It represents a
role that any human with the right permissions may assume, and should
be named accordingly. The profile is about the activities those
credentials enable, not who may be performing those activities. A
profile configured for AWS SSO includes the AWS SSO instance (the
start URL and the region that AWS SSO is configured in), the account,
and the role in that account to use, when logged in through AWS SSO as
some human (and will work only if that human has been granted access
to that account and role through AWS SSO).
&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;A hypothetical profile in &lt;code&gt;~/.aws/config&lt;/code&gt; looks something like this:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="k"&gt;[profile AcctA-Role1]&lt;/span&gt;
&lt;span class="na"&gt;sso_start_url&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s"&gt;https://foo.awsapps.com/start&lt;/span&gt;
&lt;span class="na"&gt;sso_region&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s"&gt;us-east-2&lt;/span&gt;
&lt;span class="na"&gt;sso_account_id&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s"&gt;111122223333&lt;/span&gt;
&lt;span class="na"&gt;sso_role_name&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s"&gt;Role1&lt;/span&gt;

&lt;span class="k"&gt;[profile AcctB-Role2]&lt;/span&gt;
&lt;span class="na"&gt;sso_start_url&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s"&gt;https://foo.awsapps.com/start&lt;/span&gt;
&lt;span class="na"&gt;sso_region&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s"&gt;us-east-2&lt;/span&gt;
&lt;span class="na"&gt;sso_account_id&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s"&gt;777788889999&lt;/span&gt;
&lt;span class="na"&gt;sso_role_name&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s"&gt;Role2&lt;/span&gt;

&lt;span class="k"&gt;[profile AcctB-Role1]&lt;/span&gt;
&lt;span class="na"&gt;sso_start_url&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s"&gt;https://foo.awsapps.com/start&lt;/span&gt;
&lt;span class="na"&gt;sso_region&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s"&gt;us-east-2&lt;/span&gt;
&lt;span class="na"&gt;sso_account_id&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s"&gt;777788889999&lt;/span&gt;
&lt;span class="na"&gt;sso_role_name&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s"&gt;Role1&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;In order to do the SSO login in previous section, you must have &lt;strong&gt;at
least one profile&lt;/strong&gt;, let's call it the &lt;code&gt;default&lt;/code&gt; profile:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="k"&gt;[profile default]&lt;/span&gt;
&lt;span class="na"&gt;sso_start_url&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s"&gt;https://foo.awsapps.com/start&lt;/span&gt;
&lt;span class="na"&gt;sso_region&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s"&gt;us-east-2&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;It only needs the &lt;code&gt;start_url&lt;/code&gt; and a &lt;code&gt;region&lt;/code&gt;. With this you so &lt;code&gt;aws
sso login --profile default&lt;/code&gt;, and complete the login process.&lt;/p&gt;
&lt;h1&gt;How to setup a profile&lt;/h1&gt;
&lt;p&gt;Three ways: copy &amp;amp; paste directly to &lt;code&gt;~/.aws/config&lt;/code&gt; (at least for the
&lt;code&gt;default&lt;/code&gt; one, this is the easiest way!), go through &lt;code&gt;aws sso
configure&lt;/code&gt;, or using &lt;a href="https://github.com/benkehoe/aws-sso-util"&gt;&lt;code&gt;aws-sso-util&lt;/code&gt;&lt;/a&gt;.&lt;/p&gt;
&lt;h2&gt;Use &lt;code&gt;aws sso configure&lt;/code&gt;&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;You use &lt;code&gt;aws sso configure&lt;/code&gt; to setup a profile. &lt;strong&gt;Note&lt;/strong&gt; that you
   can also just copy and paste to &lt;code&gt;~/.aws/config&lt;/code&gt; directly if you
   know what you are doing.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="err"&gt;```&lt;/span&gt;&lt;span class="n"&gt;shell&lt;/span&gt;
&lt;span class="n"&gt;fengxia&lt;/span&gt;&lt;span class="nv"&gt;@fl5wvhzxat&lt;/span&gt;&lt;span class="err"&gt;:&lt;/span&gt;&lt;span class="o"&gt;~/&lt;/span&gt;&lt;span class="n"&gt;aws&lt;/span&gt;&lt;span class="err"&gt;$&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;aws&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;configure&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;sso&lt;/span&gt;
&lt;span class="n"&gt;SSO&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;start&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;URL&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="n"&gt;None&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt;&lt;span class="err"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nl"&gt;https&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="o"&gt;//&lt;/span&gt;&lt;span class="n"&gt;d&lt;/span&gt;&lt;span class="o"&gt;-&amp;lt;&lt;/span&gt;&lt;span class="p"&gt;.....&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;awsapps&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;com&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="k"&gt;start&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
&lt;span class="n"&gt;SSO&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;Region&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="n"&gt;None&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt;&lt;span class="err"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;us&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;east&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;
&lt;span class="n"&gt;There&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;are&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;12&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;AWS&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;accounts&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;available&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;to&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;you&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;
&lt;span class="k"&gt;Using&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;the&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;account&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;ID&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="p"&gt;......&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
&lt;span class="n"&gt;The&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;only&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;role&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;available&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;to&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;you&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;is&lt;/span&gt;&lt;span class="err"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;ReadOnly&lt;/span&gt;
&lt;span class="k"&gt;Using&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;the&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;role&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="ss"&gt;&amp;quot;ReadOnly&amp;quot;&lt;/span&gt;
&lt;span class="n"&gt;CLI&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;default&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;client&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;Region&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="n"&gt;None&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt;&lt;span class="err"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;us&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;east&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;
&lt;span class="n"&gt;CLI&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;default&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;output&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nf"&gt;format&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="n"&gt;None&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt;&lt;span class="err"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;json&lt;/span&gt;
&lt;span class="n"&gt;CLI&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;profile&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="n"&gt;ReadOnly-&amp;lt;account id&amp;gt;&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt;&lt;span class="err"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;give&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;it&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;name&lt;/span&gt;
&lt;span class="err"&gt;```&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Now use the profile to login: &lt;code&gt;aws sso login --profile &amp;lt;your
   profile&amp;gt;&lt;/code&gt;. Click the &lt;code&gt;Allow&lt;/code&gt; on the browser.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Get credential(!). This is a step easily omitted, and is exactly
   the warning above is about. Login only gets you the &lt;em&gt;I'm a human&lt;/em&gt;
   proof, but the computer doesn't yet have credential (actually a
   short-life token) to run all the followup calls. Thus you need to
   &lt;strong&gt;acquire&lt;/strong&gt; profile's credential:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;```shell
aws sts get-caller-identity --profile SaaS-Dev.Administrator
```
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Expect to see an output like this:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="err"&gt;```&lt;/span&gt;&lt;span class="n"&gt;json&lt;/span&gt;
&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="err"&gt;{&lt;/span&gt;
&lt;span class="w"&gt;     &lt;/span&gt;&lt;span class="ss"&gt;&amp;quot;UserId&amp;quot;&lt;/span&gt;&lt;span class="err"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="ss"&gt;&amp;quot;xxxxxxx:feng.xia@blah.io&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
&lt;span class="w"&gt;     &lt;/span&gt;&lt;span class="ss"&gt;&amp;quot;Account&amp;quot;&lt;/span&gt;&lt;span class="err"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="ss"&gt;&amp;quot;xxxxxx&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
&lt;span class="w"&gt;     &lt;/span&gt;&lt;span class="ss"&gt;&amp;quot;Arn&amp;quot;&lt;/span&gt;&lt;span class="err"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="ss"&gt;&amp;quot;arn:aws:sts::xxxxxxx:assumed-role/AWSReservedSSO_Administrator_xxxxxx/&amp;lt;email&amp;gt;&amp;quot;&lt;/span&gt;
&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="err"&gt;}&lt;/span&gt;
&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="err"&gt;```&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Now you are ready to launch CLI that will bear the AWS profile you
   choose and have access to the resources this profile is allowed to.&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h2&gt;Use &lt;code&gt;aws-sso-util&lt;/code&gt; for batch&lt;/h2&gt;
&lt;p&gt;It's ok to use the manual way for one profile. But in practice you may
be granted permission on a list of profiles. Use &lt;a href="https://github.com/benkehoe/aws-sso-util"&gt;aws-sso-util&lt;/a&gt; to
populate all the profiles you can have:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;aws-sso-util&lt;span class="w"&gt; &lt;/span&gt;configure&lt;span class="w"&gt; &lt;/span&gt;populate&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="se"&gt;\&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;--region&lt;span class="w"&gt; &lt;/span&gt;us-west-1&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="se"&gt;\&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;--existing-config-action&lt;span class="w"&gt; &lt;/span&gt;keep
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;This will enumerate through your AWS access to grab all profiles you
can have, and dump them into the &lt;code&gt;~/.aws/config&lt;/code&gt;. From that point on,
you just pick one and use it.&lt;/p&gt;
&lt;h1&gt;How to use a profile&lt;/h1&gt;
&lt;p&gt;Now I have logged in, what if I have multiple profiles defined? Can I
switch between them freely? &amp;mdash; pretty much, but read this common
&lt;em&gt;misunderstanding&lt;/em&gt; first!!!&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;I have seen people get the impression that if they want to use Role1
in account A (111122223333), they need to call aws sso login --profile
AcctA-Role1, and that if they subsequently want to use Role2 in
account B (777788889999), they need to then call aws sso login
--profile AcctB-Role2. However, this isn't how AWS SSO or the
CLI works!&lt;/p&gt;
&lt;p&gt;What's critical to note is that aws sso login does not deal
with accounts or roles at all! You can see the code here; it uses the
start URL and SSO region only. After calling aws sso login --profile
AcctA-Role1, there are no credentials for Role1 in account A on your
system.
&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Using a profile is essentially to run a CLI within the context of a
profile. Two tools, &lt;a href="https://github.com/99designs/aws-vault"&gt;aws-vault&lt;/a&gt; and &lt;a href="https://github.com/linaro-its/aws2-wrap"&gt;aws2-wrap&lt;/a&gt;. Both
essentially do the same thing. My experience is better w/
&lt;a href="https://github.com/linaro-its/aws2-wrap"&gt;aws2-wrap&lt;/a&gt; than &lt;a href="https://github.com/99designs/aws-vault"&gt;aws-vault&lt;/a&gt;, so I'll use that for illustration.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;aws2-wrap&lt;span class="w"&gt; &lt;/span&gt;--profile&lt;span class="o"&gt;=&lt;/span&gt;SaaS-Dev.Administrator&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="se"&gt;\&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;aws&lt;span class="w"&gt; &lt;/span&gt;organizations&lt;span class="w"&gt; &lt;/span&gt;list-accounts
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Basically any AWS CLI will be executed by the profile you want to
use. Success of the CLI is controlled by whether this profile has the
permission or not.&lt;/p&gt;</content><category term="dev"></category><category term="dev"></category></entry><entry><title>REACT Key Authentication (2/2) - frontend</title><link href="https://fengxia41103.github.io/myblog/react%20key%20authentication%20frontend.html" rel="alternate"></link><published>2021-08-22T21:18:00-04:00</published><updated>2021-08-22T21:18:00-04:00</updated><author><name>Feng Xia</name></author><id>tag:fengxia41103.github.io,2021-08-22:/myblog/react key authentication frontend.html</id><summary type="html">&lt;p&gt;Following last article on &lt;a href="https://fengxia41103.github.io/myblog/react key authentication backend.html"&gt;API backend&lt;/a&gt; using Tastypie, this
article will show REACT frontend side, in particular, the &lt;code&gt;login&lt;/code&gt; and
&lt;code&gt;logout&lt;/code&gt;. Again, I'm very surprised that not many &lt;code&gt;npm&lt;/code&gt; readily
available to encapsulate such a common task. Blogs show how the author
has done the authentication, aka. authentication, but I couldn't find
much on how to design the logout &amp;mdash; Should I redirect to page
upon logout? if yes, which page, any? How then should the routing be?
and how to protect all pages to require authentication?&lt;/p&gt;
&lt;h1&gt;Design&lt;/h1&gt;
&lt;figure class="col s12"&gt;
  &lt;img src="images/react%20login%20logout.png"/&gt;
  &lt;figcaption&gt;REACT login &amp; logout&lt;/figcaption&gt;
&lt;/figure&gt;

&lt;p&gt;Observe the followings:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;login view&lt;/code&gt;: First of all, I'm not saying this page is only doing
   login. It can be any view as you wish. As long as the login call is
   happening while user is using this page, I'm calling it the &lt;code&gt;login&lt;/code&gt;
   page, thus there is always a &lt;code&gt;login view&lt;/code&gt;. The actual login call to
   &lt;code&gt;post&lt;/code&gt; can be component rendered by this view.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;logout component&lt;/code&gt;: is most likely a button/icon on nav bar that
   lets user to logout. Nothing prevents you doing …&lt;/p&gt;&lt;/li&gt;&lt;/ol&gt;</summary><content type="html">&lt;p&gt;Following last article on &lt;a href="https://fengxia41103.github.io/myblog/react key authentication backend.html"&gt;API backend&lt;/a&gt; using Tastypie, this
article will show REACT frontend side, in particular, the &lt;code&gt;login&lt;/code&gt; and
&lt;code&gt;logout&lt;/code&gt;. Again, I'm very surprised that not many &lt;code&gt;npm&lt;/code&gt; readily
available to encapsulate such a common task. Blogs show how the author
has done the authentication, aka. authentication, but I couldn't find
much on how to design the logout &amp;mdash; Should I redirect to page
upon logout? if yes, which page, any? How then should the routing be?
and how to protect all pages to require authentication?&lt;/p&gt;
&lt;h1&gt;Design&lt;/h1&gt;
&lt;figure class="col s12"&gt;
  &lt;img src="images/react%20login%20logout.png"/&gt;
  &lt;figcaption&gt;REACT login &amp; logout&lt;/figcaption&gt;
&lt;/figure&gt;

&lt;p&gt;Observe the followings:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;login view&lt;/code&gt;: First of all, I'm not saying this page is only doing
   login. It can be any view as you wish. As long as the login call is
   happening while user is using this page, I'm calling it the &lt;code&gt;login&lt;/code&gt;
   page, thus there is always a &lt;code&gt;login view&lt;/code&gt;. The actual login call to
   &lt;code&gt;post&lt;/code&gt; can be component rendered by this view.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;logout component&lt;/code&gt;: is most likely a button/icon on nav bar that
   lets user to logout. Nothing prevents you doing a full page just
   for the logout. So similar to the &lt;code&gt;login view&lt;/code&gt;, as long as the
   logout call to API is happening on this page/view, this is the
   &lt;code&gt;logout component&lt;/code&gt;.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;Auth logic root view&lt;/code&gt;: is the mother view of the &lt;code&gt;login view&lt;/code&gt;. For
   simplicity purpose I'm also drawing it to be the mother of all
   other views which &lt;strong&gt;require authentication&lt;/strong&gt;. Theoretically the
   latter is not mandatory because you can use routing to &lt;code&gt;goto&lt;/code&gt;
   another URL. But keeping them as children view ensures that they
   can not escape the login logic.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;Auth protected views&lt;/code&gt;: any view that requires authentication.&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Once we have these concepts, the requirements are clear:&lt;/p&gt;
&lt;blockquote&gt;
&lt;ol&gt;
&lt;li&gt;If not authenticated, show &lt;code&gt;login view&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Once authenticated:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;If login was his first page, go to app's landing page&lt;/li&gt;
&lt;li&gt;If user was to view a protected view but was rerouted to the
   login, show the protected view.&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Logout will put user back to &lt;code&gt;login view&lt;/code&gt;, or any other public view
   which does not require authentication, ie. marketing site.
&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/blockquote&gt;
&lt;h1&gt;Where to save the key&lt;/h1&gt;
&lt;p&gt;There isn't a single answer. Here I'm using &lt;code&gt;sessionStorage&lt;/code&gt; because
it is &lt;strong&gt;per browser tab&lt;/strong&gt; instead of &lt;code&gt;localStorage&lt;/code&gt; which is
global. Whatever your storage solution is, the auth key needs to be
saved because different view/component would use this storage to
determine whether a key is presented, thus driving its logic what to
render.&lt;/p&gt;
&lt;h1&gt;Pseudo code&lt;/h1&gt;
&lt;h2&gt;Auth logic root view&lt;/h2&gt;
&lt;p&gt;View itself isn't important. A pseudo code to handle auth is shown
below:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="nv"&gt;get&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nv"&gt;storaged&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nv"&gt;auth&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nv"&gt;key&lt;/span&gt;

&lt;span class="k"&gt;if&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nv"&gt;kye&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nv"&gt;is&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nv"&gt;not&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nv"&gt;found&lt;/span&gt;:
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="nv"&gt;render&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nv"&gt;login&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nv"&gt;view&lt;/span&gt;
&lt;span class="k"&gt;else&lt;/span&gt;:
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="nv"&gt;render&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nv"&gt;by&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nv"&gt;routing&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;h2&gt;Login view&lt;/h2&gt;
&lt;p&gt;This is where you design the login form/dialog/inputs, and submit
username and pwd to API for authentication.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="nv"&gt;get&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nv"&gt;username&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;&amp;amp;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nv"&gt;password&lt;/span&gt;
&lt;span class="nv"&gt;POST&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nv"&gt;to&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nv"&gt;API&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nv"&gt;login&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nv"&gt;URL&lt;/span&gt;
&lt;span class="k"&gt;if&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nv"&gt;success&lt;/span&gt;:
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="nv"&gt;save&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nv"&gt;username&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;&amp;amp;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nv"&gt;API&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nv"&gt;key&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nv"&gt;to&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nv"&gt;storage&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="k"&gt;goto&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nl"&gt;protected&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nv"&gt;landing&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nv"&gt;page&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;h2&gt;Logout component&lt;/h2&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="nv"&gt;read&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nv"&gt;storaged&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nv"&gt;username&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nv"&gt;and&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nv"&gt;auth&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nv"&gt;key&lt;/span&gt;
&lt;span class="k"&gt;Call&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nl"&gt;API&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nv"&gt;logout&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nv"&gt;URL&lt;/span&gt;
&lt;span class="k"&gt;if&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nv"&gt;success&lt;/span&gt;:
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="nv"&gt;clean&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nv"&gt;storaged&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nv"&gt;info&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="k"&gt;goto&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nl"&gt;login&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nv"&gt;page&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;When using &lt;code&gt;sessionStorage&lt;/code&gt;, make sure you do both the &lt;code&gt;removeItem(key_name)&lt;/code&gt;
and at last the &lt;code&gt;.clear()&lt;/code&gt;.&lt;/p&gt;
&lt;h1&gt;Routing&lt;/h1&gt;
&lt;ol&gt;
&lt;li&gt;Login view is at &lt;code&gt;/login&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;Application views are at &lt;code&gt;/&amp;lt;something&amp;gt;&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;/&lt;/code&gt; is mapped to anything but &lt;code&gt;/login&lt;/code&gt; &amp;larr; so upon logged in,
   goto &lt;code&gt;/&lt;/code&gt; will lead us somewhere other than the login&lt;sup id="fnref:1"&gt;&lt;a class="footnote-ref" href="#fn:1"&gt;1&lt;/a&gt;&lt;/sup&gt;.&lt;/li&gt;
&lt;li&gt;Once logged in, goto &lt;code&gt;/&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;Once logged out, goto &lt;code&gt;/login&lt;/code&gt;.&lt;/li&gt;
&lt;/ol&gt;
&lt;h2&gt;central routing mapping&lt;/h2&gt;
&lt;p&gt;In &lt;code&gt;route.js&lt;/code&gt; where REACT routers are defined:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;routes&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="c1"&gt;// auth&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;path&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;login&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;element&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;LoginView&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;/&amp;gt;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;},&lt;/span&gt;

&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="c1"&gt;// application specific&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="nx"&gt;path&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;/&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="nx"&gt;element&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;MainLayout&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;sideNavs&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;navbar_items&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;/&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;

&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="nx"&gt;children&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;
&lt;span class="w"&gt;      &lt;/span&gt;&lt;span class="c1"&gt;// landing page, default to dashboard&lt;/span&gt;
&lt;span class="w"&gt;      &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;path&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;/&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;element&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;Navigate&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;to&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;/dashboard&amp;quot;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;/&amp;gt;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;},&lt;/span&gt;

&lt;span class="w"&gt;      &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;path&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;404&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;element&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;NotFoundView&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;/&amp;gt;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;},&lt;/span&gt;

&lt;span class="w"&gt;      &lt;/span&gt;&lt;span class="c1"&gt;// catch all, 404&lt;/span&gt;
&lt;span class="w"&gt;      &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;path&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;*&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;element&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;Navigate&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;to&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;/404&amp;quot;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;/&amp;gt;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;},&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="p"&gt;},&lt;/span&gt;
&lt;span class="p"&gt;];&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;h2&gt;in login&lt;/h2&gt;
&lt;p&gt;Upon success, &lt;code&gt;navigate("/")&lt;/code&gt;, thus use the routing above for further
navigation:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="c1"&gt;// call login handler&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;on_submit&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;async&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;e&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;=&amp;gt;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="nx"&gt;e&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;preventDefault&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="kd"&gt;const&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;resp&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;await&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;login&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;user&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;pwd&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;});&lt;/span&gt;

&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="k"&gt;if&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;resp&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;success&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="nx"&gt;set_auth&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;user&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;resp&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;data&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="nx"&gt;navigate&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;/&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;};&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;h2&gt;in logout&lt;/h2&gt;
&lt;p&gt;Upon logout, &lt;code&gt;navigate("login")&lt;/code&gt;. Here we can't go to &lt;code&gt;/&lt;/code&gt; but must use
&lt;code&gt;/login&lt;/code&gt; because of &lt;strong&gt;disk cache&lt;/strong&gt;! &amp;mdash; Goto &lt;code&gt;/&lt;/code&gt; will route you to
the default landing page. You would expect that landing page will be
reloaded, thus noticing that authenticate info is not there anymore,
thus redirect yet again to &lt;code&gt;/login&lt;/code&gt;. But because of disk cache,
browser will actually render the landing page just fine (&lt;strong&gt;without
rerendering it&lt;/strong&gt;, thus skipping its code)! If you force browser to
reload this landing page again (hold down left &lt;code&gt;CTRL&lt;/code&gt; then refresh),
it will get you back to login page because now it runs code as if for
the first time, and realizes that authentication info is
missing. Therefore, you &lt;strong&gt;must&lt;/strong&gt; goto &lt;code&gt;/login&lt;/code&gt; upon logout.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="c1"&gt;// call logout handler&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;on_logout&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;async&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;e&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;=&amp;gt;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="nx"&gt;e&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;preventDefault&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="kd"&gt;const&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;resp&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;await&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;logout&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;

&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="k"&gt;if&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;resp&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;success&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="c1"&gt;// clear session storage&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="nx"&gt;session&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;removeItem&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;user&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="nx"&gt;session&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;removeItem&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;api_key&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="nx"&gt;session&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;clear&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;

&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="c1"&gt;// back to root&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="nx"&gt;navigate&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;login&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;};&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;div class="footnote"&gt;
&lt;hr&gt;
&lt;ol&gt;
&lt;li id="fn:1"&gt;
&lt;p&gt;We could write in login code  &lt;code&gt;navigate("/landing")&lt;/code&gt;. But this
presents two issues: 1. This is hardcoded behavior that logged in
will always go to this landing page. This is not necessarily the
case. If user is logging in from &lt;code&gt;/&lt;/code&gt; view, this is correct
behavior. But if he was thinking to go &lt;code&gt;/another/page&lt;/code&gt; and was
rerouted back to do the login first, he should be sent to
&lt;code&gt;/another/page&lt;/code&gt; in the end. This, if you go to &lt;code&gt;/&lt;/code&gt; at the end of
login, will be naturally achieved by the routing, instead of you
writing yet another code to catch his intention, then goto that at
the end.&amp;#160;&lt;a class="footnote-backref" href="#fnref:1" title="Jump back to footnote 1 in the text"&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;</content><category term="dev"></category><category term="dev"></category></entry><entry><title>REACT Key Authentication (1/2) - API side</title><link href="https://fengxia41103.github.io/myblog/react%20key%20authentication%20backend.html" rel="alternate"></link><published>2021-08-22T10:38:00-04:00</published><updated>2021-08-22T10:38:00-04:00</updated><author><name>Feng Xia</name></author><id>tag:fengxia41103.github.io,2021-08-22:/myblog/react key authentication backend.html</id><summary type="html">&lt;p&gt;I'm very much surprised that not much information can be found on this
topic. As a matter of fact, there are very few examples on how to
handle two most common tasks that every single frontend must face:
&lt;strong&gt;login&lt;/strong&gt; and &lt;strong&gt;logout&lt;/strong&gt; &amp;mdash; I mean, there are too many code
examples out there which talks from one aspect of things, namely
either from the frontend or the backend, but the code hows too much
details on the how-to, but lacks illustration of how pieces are fit
together. In other words, it has all the implementations but little
design. So after days of trial, let me write down what I learned, and
hopefully will put this task to sleep once for all.&lt;/p&gt;
&lt;h1&gt;API Backend&lt;/h1&gt;
&lt;p&gt;In my case, backend is Django w/ &lt;a href="https://django-tastypie.readthedocs.io/en/v0.9.11/authentication_authorization.html"&gt;Tastypie&lt;/a&gt; REST API and frontend
in REACT. &lt;a href="https://django-tastypie.readthedocs.io/en/v0.9.11/authentication_authorization.html"&gt;Tastypie&lt;/a&gt; is just a matter of convenience. Here in
essence I'm assuming there is a RESTful backend serving data and
supports API key authentication. If you were not fullstack, you may
not need to bother how backend is coded. But …&lt;/p&gt;</summary><content type="html">&lt;p&gt;I'm very much surprised that not much information can be found on this
topic. As a matter of fact, there are very few examples on how to
handle two most common tasks that every single frontend must face:
&lt;strong&gt;login&lt;/strong&gt; and &lt;strong&gt;logout&lt;/strong&gt; &amp;mdash; I mean, there are too many code
examples out there which talks from one aspect of things, namely
either from the frontend or the backend, but the code hows too much
details on the how-to, but lacks illustration of how pieces are fit
together. In other words, it has all the implementations but little
design. So after days of trial, let me write down what I learned, and
hopefully will put this task to sleep once for all.&lt;/p&gt;
&lt;h1&gt;API Backend&lt;/h1&gt;
&lt;p&gt;In my case, backend is Django w/ &lt;a href="https://django-tastypie.readthedocs.io/en/v0.9.11/authentication_authorization.html"&gt;Tastypie&lt;/a&gt; REST API and frontend
in REACT. &lt;a href="https://django-tastypie.readthedocs.io/en/v0.9.11/authentication_authorization.html"&gt;Tastypie&lt;/a&gt; is just a matter of convenience. Here in
essence I'm assuming there is a RESTful backend serving data and
supports API key authentication. If you were not fullstack, you may
not need to bother how backend is coded. But Tastypie doesn't come w/
login/logout touch points out of box, so I had to write code for that.&lt;/p&gt;
&lt;h2&gt;API &amp;amp; data model&lt;/h2&gt;
&lt;p&gt;I have a strong opinion &lt;strong&gt;against&lt;/strong&gt; this type of APIs. In my view,
they should not call themselves APIs even.&lt;/p&gt;
&lt;p&gt;These APIs are designed &lt;strong&gt;artificially&lt;/strong&gt;, meaning they are not
generated from data models, but instead is coded from scratch by some
dev &amp;larr; this kind is the worst because this adds another layer of
translation (and I'm talking about knowledge translation, not coding
language translation) from backend's data model (which is the source of all
truth, especially about data's logical relationships) to yet another
data presentation (in form of web accessible URLs)&lt;sup id="fnref:1"&gt;&lt;a class="footnote-ref" href="#fn:1"&gt;1&lt;/a&gt;&lt;/sup&gt;.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;In short, backend API should only be a (de)serialization of the
underline data. It &lt;strong&gt;should not&lt;/strong&gt; change the meaning of the data,
and absolutely not modifiy their logical relationships.
&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2&gt;three types of auth &amp;amp; data model&lt;/h2&gt;
&lt;p&gt;It's quite confusing when one talks about authentication,
authorization, and sometimes, role-based. How are they fit into a
single picture? In essence the purpose of auth is to answer two
questions: &lt;strong&gt;data ownership&lt;/strong&gt; and &lt;strong&gt;CRUD mapping&lt;/strong&gt;.&lt;/p&gt;
&lt;figure class="col s12"&gt;
  &lt;img src="images/backend%20auth.png"/&gt;
  &lt;figcaption&gt;Backend authentication &amp; authorization&lt;/figcaption&gt;
&lt;/figure&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Type 1&lt;/strong&gt;: Fit for public data API whereas user management can be
  optional. There might still be authentication step, but essentially
  backend doesn't distinguish difference between two users &amp;mdash; A &amp;amp;
  B users have the same right within the data domain. The idea here is
  to focus on the models that support functions of your application,
  so don't get distracted yet by user management.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Type 2&lt;/strong&gt;: Now to introduce user A vs. B because of two things in
  mind:&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;data ownership: a data record may now have a &lt;code&gt;User&lt;/code&gt; key, thus A
     can't see B's data.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;CRUD: anonymous user is READONLY, vs. logged in user can
     CRUD. This is essentially a &lt;code&gt;role&lt;/code&gt;, but without yet separate it
     into its own entity.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;The key is that &lt;code&gt;user&lt;/code&gt; hierarchy is &lt;strong&gt;flat&lt;/strong&gt;. As soon as you are
  thinking hierarchy in user, you need now move to type 3.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Type 3&lt;/strong&gt;: On top of type 2, introduce a role management. If Role
  is flat, type 3 is just a fancy version of type 2. However, role can
  be hierarchical, also.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;data ownership: w/ role, ownership can be &lt;code&gt;User&lt;/code&gt; based, or &lt;code&gt;role&lt;/code&gt;
     based (think of your boss can see your data).&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;CRUD: instead of linked to &lt;code&gt;user&lt;/code&gt; in type 2, now linked to
     &lt;code&gt;role&lt;/code&gt;. This is the same as &lt;code&gt;position&lt;/code&gt; in an org &amp;mdash; that
     employee can change, but function of the position doesn't.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;In the end, there is really only one design, the type 3 &amp;mdash; Type 1
is a special case of 2 (when every user is the same user), and 2 a
special case of 3 (when every user is the same role).&lt;/p&gt;
&lt;h2&gt;Top down vs. bottom up&lt;/h2&gt;
&lt;p&gt;Here is the disconnect &amp;mdash; In dev/POC, I find it much better to do
the bottom up way by starting w/ type 1, the bare minimum, so to focus
on the functions first. Once the application is doing what I want, we
can slap on top of these auth to make it fancy.  But in
meetings/projects, type 3 is often the talk because it is
&lt;strong&gt;theoretically correct&lt;/strong&gt; &amp;larr; how can any design be ok w/o thinking
upfront of auth?&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;But what they don't realize is that type 1 isn't defected at all.
It's only a simplified version of type 3, but it doesn't skip any of
the critical ingredients in the design, just that assigning them a
&lt;em&gt;default&lt;/em&gt; value for the time being.
&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Top down is fine for experienced designer who know how these are fit
together, and what default values are used and what they mean. But too
often than not, the inexperienced  will take the top down approach,
but function, or the foundation of the application, suffers exactly
because of the complexity it introduces at each turn. This is like
teaching 1st graders college math, yes college math is a better
version than &lt;code&gt;1+1&lt;/code&gt;, then?&lt;/p&gt;
&lt;h1&gt;API Authentication Proxy&lt;/h1&gt;
&lt;p&gt;It should be clear by now that &lt;strong&gt;API level authentication is a
proxy&lt;/strong&gt;. In the end it will invoke some backend's native
authentication mechanism for user checking. Hypothetically speaking
API proxy can integrate multiple backend/data sources, thus may
present multiple ways to authenticate a user&lt;sup id="fnref:2"&gt;&lt;a class="footnote-ref" href="#fn:2"&gt;2&lt;/a&gt;&lt;/sup&gt;. But assuming you are
authenticated, the key question remains &amp;mdash; what is the data
ownership and CRUD mapping within each application?&lt;/p&gt;
&lt;h2&gt;API key&lt;/h2&gt;
&lt;p&gt;Tastypie creates a new model &lt;code&gt;ApiKey&lt;/code&gt; w/ &lt;code&gt;1:1&lt;/code&gt; relationship to
&lt;code&gt;User&lt;/code&gt;. When using this authentication, client/frontend is to call w/
username and pwd with a &lt;code&gt;POST&lt;/code&gt;, then server/api authenticate this
user, and return the key. All subsequent client HTTP calls will have
this in the HTTP header, and that's it.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="nx"&gt;Authorization&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="sb"&gt;`ApiKey &lt;/span&gt;&lt;span class="si"&gt;${&lt;/span&gt;&lt;span class="nx"&gt;user&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="sb"&gt;:&lt;/span&gt;&lt;span class="si"&gt;${&lt;/span&gt;&lt;span class="nx"&gt;api_key&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="sb"&gt;`&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Remember, because user management is a backend thing, whether the key
expires or not is irrelevant in authentication itself. If it expires
somehow, client gets an error code/msg. How it handles is a function
discussion by itself.&lt;/p&gt;
&lt;h2&gt;Create a Tastypie Auth resource&lt;/h2&gt;
&lt;p&gt;Now as you can see, even Tastypie can neatly package Django model into
a &lt;a href="https://django-tastypie.readthedocs.io/en/v0.9.7/resources.html"&gt;resource&lt;/a&gt;, a &lt;a href="https://django-tastypie.readthedocs.io/en/v0.9.7/resources.html"&gt;resource&lt;/a&gt; doesn't by itself
authenticate. Instead, you build a touch point for client to call,
&lt;strong&gt;whether the URL is &lt;code&gt;/api/v1/&amp;lt;whatever&lt;/code&gt; or a dedicated view at
&lt;code&gt;/me/blahblah&lt;/code&gt;&lt;/strong&gt; is irrelevant. Below I'm choosing the former because
then auth URLs will be part of &lt;code&gt;/api/v1&lt;/code&gt; schema instead of a made-up
URL, feels cleaner.&lt;/p&gt;
&lt;h3&gt;An auth dummy resource&lt;/h3&gt;
&lt;p&gt;In some blogs login is exposed w/ &lt;code&gt;User&lt;/code&gt; resource/model. However, I
think it's better to create a dummy resource for auth purpose
only. Therefore, one can abuse this touch point and feel safe because
there is model data behind this!&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="k"&gt;class&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nc"&gt;AuthResource&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;Resource&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="k"&gt;class&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nc"&gt;Meta&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="n"&gt;allowed_methods&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;get&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;post&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
        &lt;span class="n"&gt;resource_name&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;auth&amp;quot;&lt;/span&gt;
        &lt;span class="n"&gt;authentication&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;ApiKeyAuthentication&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Here I allow both &lt;code&gt;post&lt;/code&gt; and &lt;code&gt;get&lt;/code&gt;, for we are to login w/ &lt;code&gt;post&lt;/code&gt;, and
logout with &lt;code&gt;get&lt;/code&gt;. For using &lt;code&gt;get&lt;/code&gt; to logout, since I'm not passing
any user data in post body, I need to use the API key to identify this
user, thus it needs &lt;code&gt;authentication=ApiKeyAuthentication&lt;/code&gt; so that
Tastypie workflow will observe the header for API key.&lt;/p&gt;
&lt;h3&gt;prepend url&lt;/h3&gt;
&lt;p&gt;There is very little info on the &lt;a href="https://django-tastypie.readthedocs.io/en/latest/api.html#prepend-urls"&gt;doc&lt;/a&gt;, but this is the key. The
question is, once I have created a resource, how will call to this
resource trigger a login!? This is what you do:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;In the resource, define a class method to handle login details.&lt;/li&gt;
&lt;li&gt;Use &lt;code&gt;prepend_url&lt;/code&gt; to assign a URL linked to this method! In other
   words, you get your resource URL, ie. &lt;code&gt;/api/v1/auth&lt;/code&gt;, but you can
   define a &lt;code&gt;/auth/whatever&lt;/code&gt; in your resource and link to a class
   method as the handler. So as you can see, this isn't much different
   from creating a Django view and link to a URL.&lt;/li&gt;
&lt;/ol&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="kn"&gt;from&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nn"&gt;django.conf.urls&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;url&lt;/span&gt;

&lt;span class="k"&gt;class&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nc"&gt;AuthResource&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;Resource&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="k"&gt;class&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nc"&gt;Meta&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="n"&gt;allowed_methods&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;get&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;post&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
        &lt;span class="n"&gt;resource_name&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;auth&amp;quot;&lt;/span&gt;
        &lt;span class="n"&gt;authentication&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;ApiKeyAuthentication&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;

    &lt;span class="k"&gt;def&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nf"&gt;prepend_urls&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;
            &lt;span class="n"&gt;url&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
                &lt;span class="sa"&gt;r&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;^(?P&amp;lt;resource_name&amp;gt;&lt;/span&gt;&lt;span class="si"&gt;%s&lt;/span&gt;&lt;span class="s2"&gt;)/login&lt;/span&gt;&lt;span class="si"&gt;%s&lt;/span&gt;&lt;span class="s2"&gt;$&amp;quot;&lt;/span&gt;
                &lt;span class="o"&gt;%&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;_meta&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;resource_name&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;trailing_slash&lt;/span&gt;&lt;span class="p"&gt;()),&lt;/span&gt;
                &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;wrap_view&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;login&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;
                &lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;api_login&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
            &lt;span class="p"&gt;),&lt;/span&gt;
            &lt;span class="n"&gt;url&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
                &lt;span class="sa"&gt;r&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;^(?P&amp;lt;resource_name&amp;gt;&lt;/span&gt;&lt;span class="si"&gt;%s&lt;/span&gt;&lt;span class="s2"&gt;)/logout&lt;/span&gt;&lt;span class="si"&gt;%s&lt;/span&gt;&lt;span class="s2"&gt;$&amp;quot;&lt;/span&gt;
                &lt;span class="o"&gt;%&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;_meta&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;resource_name&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;trailing_slash&lt;/span&gt;&lt;span class="p"&gt;()),&lt;/span&gt;
                &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;wrap_view&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;logout&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;
                &lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;api_logout&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
            &lt;span class="p"&gt;),&lt;/span&gt;
        &lt;span class="p"&gt;]&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;So, the key is &lt;code&gt;self.wrap_view("login")&lt;/code&gt;, whereas &lt;code&gt;login&lt;/code&gt; is actually
a class method which I'll do next. The URL pattern is up to whatever
you imagine really. By doing the &lt;code&gt;self._meta.resource_name&lt;/code&gt;, you are
creating a pattern &lt;code&gt;/&amp;lt;your resource name&amp;gt;/login&lt;/code&gt;. Same applies to the
logout function.&lt;/p&gt;
&lt;h3&gt;login&lt;/h3&gt;
&lt;p&gt;I wouldn't go into details of the code. The key here is the
&lt;code&gt;self.deserialize&lt;/code&gt; which gives you a way to extract username and
password in the JSON body. Once  you have them, call Django's built-in
&lt;code&gt;authenticate&lt;/code&gt; for the actual work. Here is where you can see proxy
hooking up w/ other backends for authentication calls if so.&lt;/p&gt;
&lt;p&gt;The &lt;code&gt;ApiKey&lt;/code&gt; part is to create a key for the user if not
presented. Tastypie recommends using model signal so that each new
user gets a key always. They all achieve the same end state &amp;mdash;
&lt;strong&gt;one user, one key&lt;/strong&gt;, therefore key becomes the user. Period.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="k"&gt;def&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nf"&gt;login&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;request&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="o"&gt;**&lt;/span&gt;&lt;span class="n"&gt;kwargs&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;method_check&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;request&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;allowed&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;post&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt;
    &lt;span class="n"&gt;data&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;deserialize&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
        &lt;span class="n"&gt;request&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="n"&gt;request&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;body&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="nb"&gt;format&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;request&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;META&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;CONTENT_TYPE&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;application/json&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;
    &lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;username&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;data&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;username&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;password&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;data&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;password&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;user&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;authenticate&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;username&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;username&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;password&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;password&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;user&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;user&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;is_active&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
            &lt;span class="c1"&gt;# login(request, user)&lt;/span&gt;
            &lt;span class="k"&gt;try&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
                &lt;span class="n"&gt;key&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;ApiKey&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;objects&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;user&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;user&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
                &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="ow"&gt;not&lt;/span&gt; &lt;span class="n"&gt;key&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;key&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
                    &lt;span class="n"&gt;key&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;save&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
            &lt;span class="k"&gt;except&lt;/span&gt; &lt;span class="n"&gt;ApiKey&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;DoesNotExist&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
                &lt;span class="n"&gt;key&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;ApiKey&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;objects&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;create&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;user&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;user&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
            &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;create_response&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
                &lt;span class="n"&gt;request&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
                &lt;span class="p"&gt;{&lt;/span&gt;
                    &lt;span class="s2"&gt;&amp;quot;success&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kc"&gt;True&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
                    &lt;span class="s2"&gt;&amp;quot;data&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;key&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;key&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
                &lt;span class="p"&gt;},&lt;/span&gt;
            &lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="k"&gt;else&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
            &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;create_response&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
                &lt;span class="n"&gt;request&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
                &lt;span class="p"&gt;{&lt;/span&gt;
                    &lt;span class="s2"&gt;&amp;quot;success&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kc"&gt;False&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
                    &lt;span class="s2"&gt;&amp;quot;message&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;User is not active&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
                &lt;span class="p"&gt;},&lt;/span&gt;
                &lt;span class="n"&gt;HttpForbidden&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
            &lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="k"&gt;else&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;create_response&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
            &lt;span class="n"&gt;request&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
            &lt;span class="p"&gt;{&lt;/span&gt;
                &lt;span class="s2"&gt;&amp;quot;success&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kc"&gt;False&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
                &lt;span class="s2"&gt;&amp;quot;message&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;Login failed&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
            &lt;span class="p"&gt;},&lt;/span&gt;
            &lt;span class="n"&gt;HttpUnauthorized&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;h3&gt;logout&lt;/h3&gt;
&lt;p&gt;The key is &lt;code&gt;self.is_authenticated(request)&lt;/code&gt;. This will populate
&lt;code&gt;request.user&lt;/code&gt; w/ the key's user. Otherwise you will always get
&lt;code&gt;request.user&lt;/code&gt; being &lt;code&gt;AnonymousUser&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;Of course, you can choose to use &lt;code&gt;post&lt;/code&gt;, and have frontend pass back
the &lt;code&gt;(user,key)&lt;/code&gt;, and have code here to look up the identity. But
since I have added &lt;code&gt;authentication = ApiKeyAuthentication()&lt;/code&gt; in the
resource Meta, the key in the HTTP header will be picked up by
Tastypie's &lt;code&gt;get&lt;/code&gt; already. Thus making the call a bit cleaner. Further,
&lt;code&gt;get&lt;/code&gt; is a better shot than &lt;code&gt;post&lt;/code&gt; for logging out a user, imho.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="k"&gt;def&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nf"&gt;logout&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;request&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="o"&gt;**&lt;/span&gt;&lt;span class="n"&gt;kwargs&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;method_check&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;request&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;allowed&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;get&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt;

    &lt;span class="c1"&gt;# MUST: call to populate User&lt;/span&gt;
    &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;is_authenticated&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;request&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;request&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;user&lt;/span&gt; &lt;span class="ow"&gt;and&lt;/span&gt; &lt;span class="n"&gt;request&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;user&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;is_authenticated&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="n"&gt;logout&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;request&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;create_response&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;request&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;success&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kc"&gt;True&lt;/span&gt;&lt;span class="p"&gt;})&lt;/span&gt;
    &lt;span class="k"&gt;else&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;create_response&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
            &lt;span class="n"&gt;request&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;success&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kc"&gt;False&lt;/span&gt;&lt;span class="p"&gt;},&lt;/span&gt; &lt;span class="n"&gt;HttpUnauthorized&lt;/span&gt;
        &lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;div class="footnote"&gt;
&lt;hr&gt;
&lt;ol&gt;
&lt;li id="fn:1"&gt;
&lt;p&gt;This is not only risky, but is often than not, wrong! All
language has lib to transform your data model code into API
&lt;strong&gt;automagically&lt;/strong&gt;. There is simply no reason to  write from
scratch. If yours can't, you should consider upgrading the
underline data modeling layer, but not to patch it w/ an
webservice API.&amp;#160;&lt;a class="footnote-backref" href="#fnref:1" title="Jump back to footnote 1 in the text"&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li id="fn:2"&gt;
&lt;p&gt;In some cases, proxy authenticate is really a convenience to
bring more users to your application, ie. allow user to use Google
account in your application w/o doing any user registration.&amp;#160;&lt;a class="footnote-backref" href="#fnref:2" title="Jump back to footnote 2 in the text"&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;</content><category term="dev"></category><category term="dev"></category></entry><entry><title>Git &amp; Jira</title><link href="https://fengxia41103.github.io/myblog/git%20and%20jira.html" rel="alternate"></link><published>2020-05-01T15:11:00-04:00</published><updated>2020-05-01T15:11:00-04:00</updated><author><name>Feng Xia</name></author><id>tag:fengxia41103.github.io,2020-05-01:/myblog/git and jira.html</id><summary type="html">&lt;h1&gt;Introduction&lt;/h1&gt;
&lt;p&gt;We use Jira for project manage, and git for code. W/ a plugin, Jira is
able to integrate w/ Gitlab such as create a link to git commit as
comment. However, it has not the capability to create statistic
analysis of git commits within Jira, for example, how to know the
number of line changes of a Jira (number of line changes are a good
indicator of workload as well as a hotspot of bugs), and vice versa,
how to know a commit is part of a release 5.1.1 (the &lt;code&gt;fix version&lt;/code&gt;
attribute in Jira)? If we are to generate a &lt;strong&gt;release note&lt;/strong&gt; of a
release, wouldn't it be nice if it listed out:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;list of Jira &amp;rarr; tasks the team wants to achieve in planning&lt;/li&gt;
&lt;li&gt;list of commits &amp;rarr; actual code changes/contributions&lt;/li&gt;
&lt;li&gt;statistics of grouped information such as number of commits by Jira
component, or label&lt;/li&gt;
&lt;li&gt;developer contributions: who changed which file, and how much was
changed&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Further, when team follows a development workflow, such as the
&lt;em&gt;popular&lt;/em&gt; &lt;a href="https://nvie.com/posts/a-successful-git-branching-model/"&gt;git
strategy&lt;/a&gt;,
it is …&lt;/p&gt;</summary><content type="html">&lt;h1&gt;Introduction&lt;/h1&gt;
&lt;p&gt;We use Jira for project manage, and git for code. W/ a plugin, Jira is
able to integrate w/ Gitlab such as create a link to git commit as
comment. However, it has not the capability to create statistic
analysis of git commits within Jira, for example, how to know the
number of line changes of a Jira (number of line changes are a good
indicator of workload as well as a hotspot of bugs), and vice versa,
how to know a commit is part of a release 5.1.1 (the &lt;code&gt;fix version&lt;/code&gt;
attribute in Jira)? If we are to generate a &lt;strong&gt;release note&lt;/strong&gt; of a
release, wouldn't it be nice if it listed out:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;list of Jira &amp;rarr; tasks the team wants to achieve in planning&lt;/li&gt;
&lt;li&gt;list of commits &amp;rarr; actual code changes/contributions&lt;/li&gt;
&lt;li&gt;statistics of grouped information such as number of commits by Jira
component, or label&lt;/li&gt;
&lt;li&gt;developer contributions: who changed which file, and how much was
changed&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Further, when team follows a development workflow, such as the
&lt;em&gt;popular&lt;/em&gt; &lt;a href="https://nvie.com/posts/a-successful-git-branching-model/"&gt;git
strategy&lt;/a&gt;,
it is impossible for manager to identify violation w/o bringing
information from both Jira and git together for cross reference,
whether manually or automated. Once we follow the development chain
from dev to CICD to various version of testing/QA, this dilemma is
compounded even more &amp;mdash; how do I know CICD is building the right
source? how do I know QA is testing the right feature? and how do I
know what is deployed on a stack is the right code?&lt;/p&gt;
&lt;p&gt;Essentially, if we agree that QA is a &lt;strong&gt;MUST&lt;/strong&gt; to protect code
quality, then QA is also a &lt;strong&gt;MUST&lt;/strong&gt; to protect process quality. Such
QA for management is harder than code's because it is less well
understood, thus more difficult to quantify, to standardize, and to be
assisted by system &amp;mdash; if CICD is now a cliche in any software
development project, a management version of CICD is not yet an
essence.&lt;/p&gt;
&lt;p&gt;This tool is to solve this.&lt;/p&gt;
&lt;h1&gt;Strategy&lt;/h1&gt;
&lt;p&gt;Building cross reference is an information asymmetry challenge &amp;mdash;
we have multiple information sources scattered in different form,
place, by different owner. Logically, their data have relation to each
other as the status of one becomes the trigger/input for another. The
strategy to solve this challenge is:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Develop data extractor that brings these scattered  information
into one place &amp;larr; 1st tier data.&lt;/li&gt;
&lt;li&gt;Checking consistency of cross reference, eg. a Jira status of "work
in progress" should not find an associated git commit already lived
in a release, not to mention already deployed into production!&lt;/li&gt;
&lt;li&gt;Derive 2nd tier data, such as aggregated statistics following their
logical relationships, so to provide insight to the overall
development activities measured by management expectation.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Following the &lt;a href=""&gt;five-level capability model&lt;/a&gt;, this strategy will
fulfill level 1-3:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;level 1 inventory: have mechanism to collect needed information bits&lt;/li&gt;
&lt;li&gt;level 2 expectation &amp;amp; reality: map out models and relationships
between expectation and reality. For example, management expectation
is represented by Jira items while development reality represented
by code in git. The tool will build cross reference of the two. With
growth of knowledge, we can bring in more related information bits,
thus extending the scope these cross references.&lt;/li&gt;
&lt;li&gt;level 3 diff = expectation - reality: Identify gap between an
expectation and the reality, thus signaling an execution gap that
requires management attention.&lt;/li&gt;
&lt;/ul&gt;
&lt;h1&gt;Information bits&lt;/h1&gt;
&lt;p&gt;What information do we have? Following the development pipeline described
in the diagram below, pretending we are development for a release
called &lt;code&gt;5.1.1&lt;/code&gt;, let's focus on what is in Jira and what is in Git:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Jira: two buckets &amp;mdash; 5.1.1 related vs. non-5.1.1 related&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;5.1.1 items: three kinds&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;5.1.1 features&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Bugs: two types of bugs:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;bugs found in other version, and will be fixed in this release.&lt;/li&gt;
&lt;li&gt;bugs found in &lt;code&gt;5.1.1&lt;/code&gt; (maybe during development), and needs to
   be fixed in this release.&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;5.1.1 non-code related activities &amp;mdash; managerial, logistics&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;non-5.1.1 items&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Git: two buckets &amp;mdash; code/branch that will be included in 5.1.1 build
  vs. those that will not be included.&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;Release 5.1.1 branches/code: two types:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;new code: including newly added code, deleted and/or
   modified old code that was done for the purpose of
   5.1.1. Following the Jira categories above, there are two
   types, and within each, there is Jira tracked
   vs. not-tracked.&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;features: new code for implementing a feature:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;jira tracked: has logical relationship between the
   code work and a Jira ticket&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;not-tracked&lt;/strong&gt;: code was made either w/o a Jira,
   eg. ad-hoc code change not linked to a planned
   activity, or a missing cross reference between the
   two which made this change
   difficult to trace in term of management visibility. &lt;br&gt;
            2. bugs: new code for fixing a bug (remember, two types of
               bugs). Similar to the feature code changes, they can be
               either Jira tracked, or not-tracked.&lt;/li&gt;
&lt;li&gt;jira tracked&lt;/li&gt;
&lt;li&gt;not-tracked&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;old code that didn't change, but will be part of 5.1.1
   &amp;larr; regression.&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Non-5.1.1 branches: these code will not be part of the 5.1.1
   release in term of build and release. Similarly, it can be
   divided into new code vs. old code.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;new code&lt;/li&gt;
&lt;li&gt;old code &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;figure class="col s12"&gt;
  &lt;img src="images/gitjira/git%20and%20jira.png" /&gt;
  &lt;figcaption&gt;
    Git &amp; Jira information bit of a release v5.1.1
  &lt;/figcaption&gt;
&lt;/figure&gt;

&lt;p&gt;If we could harness all these information bits and categorize them, we
will be able to answer:&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Creator&lt;/th&gt;
&lt;th&gt;Information&lt;/th&gt;
&lt;th&gt;Info Source&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;Manager&lt;/td&gt;
&lt;td&gt;What 5.1.1 items to work on &amp;rarr; todo list&lt;/td&gt;
&lt;td&gt;Jira, filtered by &lt;code&gt;release&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Dev&lt;/td&gt;
&lt;td&gt;What is in the 5.1.1 code?&lt;/td&gt;
&lt;td&gt;Git&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;CICD&lt;/td&gt;
&lt;td&gt;Which 5.1.1 code is in build? Is build clean?&lt;/td&gt;
&lt;td&gt;Jenkins, artifacts&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;devops&lt;/td&gt;
&lt;td&gt;Which instance has the 5.1.1 build?&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;QA&lt;/td&gt;
&lt;td&gt;Test coverage of 5.1.1 code?  Is 5.1.1 affecting older functions?&lt;/td&gt;
&lt;td&gt;QA repo, report&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h1&gt;Application design&lt;/h1&gt;
&lt;p&gt;The application is a modern data driven web application divided into
three components: backend, frontend, and data collector.&lt;/p&gt;
&lt;figure class="col s12 center"&gt;
  &lt;img src="images/gitjira/high%20level%20design.png" /&gt;
  &lt;figcaption&gt;High level architecture&lt;/figcaption&gt;
&lt;/figure&gt;

&lt;h2&gt;data model&lt;/h2&gt;
&lt;p&gt;Everything starts w/ data model. It tells what information bits will
be collected and stored, and the logical relationships among them.&lt;/p&gt;
&lt;figure class="col s12 center"&gt;
    &lt;img src="images/gitjira/jirra.png"/&gt;
    &lt;figcaption&gt;Django data model&lt;/figcaption&gt;
&lt;/figure&gt;

&lt;h2&gt;data collector&lt;/h2&gt;
&lt;p&gt;Can be any tool/script to pull information from interested information
source. &lt;code&gt;Gitpython&lt;/code&gt; and &lt;code&gt;jira-python&lt;/code&gt; are self-explanatory. The
&lt;code&gt;git-jira-analyzer&lt;/code&gt; script is to use these two libraries to extract
information from Jira and a clone of a git on your local system.&lt;/p&gt;
&lt;p&gt;The collectors are, however, only a library. The extracted data must
be persisted to the DB in the backend. However, instead of speaking to
DB directly, we are to take advantage of Django's &lt;a href="https://docs.djangoproject.com/en/3.0/howto/custom-management-commands/"&gt;custom
command&lt;/a&gt;,
so the extractor is fully in sync w/ the backend data model, and can
use Django's powerful query and ORM for data manipulation.&lt;/p&gt;
&lt;p&gt;&lt;a href="git_jira_analyzer.py"&gt;source&lt;/a&gt;&lt;/p&gt;
&lt;h2&gt;backend&lt;/h2&gt;
&lt;p&gt;Backend is Django+Gunicorn. We use
&lt;a href="https://django-tastypie.readthedocs.io/en/latest/"&gt;Tastypie&lt;/a&gt; to
provide RESTful API based on Django models. Aggregated stats can be
either processed on the client side (by frontend), or on the server
side (by backend). In this design, we opted for backend for the job.&lt;/p&gt;
&lt;p&gt;Further, we keep the backend as a pure API provider, meaning that we
avoid building any custom URL endpoint that participates backend-front
action &amp;larr; every single bit the frontend needs is obtainable via
exposed and documented REST API, no more and no less.&lt;/p&gt;
&lt;p&gt;As of writing (5/22/2020), API is not enforcing user
authentication. However, backend has capability to provide &lt;a href="https://django-tastypie.readthedocs.io/en/latest/authentication.html"&gt;various
types of
authentication&lt;/a&gt;
when the time comes.&lt;/p&gt;
&lt;h3&gt;tastypie vs. DRF&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://www.django-rest-framework.org/"&gt;Django Rest Framework&lt;/a&gt; is a
more powerful REST API toolset than
&lt;a href="https://django-tastypie.readthedocs.io/en/latest/"&gt;Tastypie&lt;/a&gt;. By my
experience, Tastypie is easier to produce de facto API by using
&lt;code&gt;ModelResource&lt;/code&gt;, which maps neatly 1:1 between Django model to an API
resource. If you need lots of special massage of data between raw
model data to its JSON version, eg. mapping date to some special
format, DRF gives you more machinery along the hydration/dehydration
path.&lt;/p&gt;
&lt;h2&gt;frontend&lt;/h2&gt;
&lt;p&gt;Frontend is based on REACT + &lt;a href="https://materializecss.com/"&gt;materialize
CSS&lt;/a&gt;. The setup is also ready to use &lt;a href="https://react-bootstrap.github.io/"&gt;React
Bootstrap&lt;/a&gt;. For more sophisticated
UI layout and function, a Bootstrap-based approach will be better.&lt;/p&gt;
&lt;figure class="col s12 center"&gt;
  &lt;img src="images/gitjira/frontend.png"/&gt;
  &lt;figcaption&gt;Frontend main page&lt;/figcaption&gt;
&lt;/figure&gt;

&lt;p&gt;Roughly there is a 1:1 mapping between REACT component and &lt;a href="http://10.240.43.48:8001/api/v1/"&gt;API
resource&lt;/a&gt;, simply for the reason
that each resource needs rendering at some point of a UI. Thus even
for simple component such as &lt;code&gt;Branch&lt;/code&gt; which is only rendering the
branch name, we created a separate component (as place holder) so the
code structure is ready to be extended.&lt;/p&gt;
&lt;h3&gt;JWT authentication&lt;/h3&gt;
&lt;p&gt;not implemented yet&lt;/p&gt;
&lt;h3&gt;routing&lt;/h3&gt;
&lt;p&gt;not implemented yet&lt;/p&gt;
&lt;h1&gt;Development&lt;/h1&gt;
&lt;p&gt;Everything has been dockerized. Use it for both development &amp;amp;
deployment. &lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Prerequisite&lt;/strong&gt;: &lt;a href="https://docs.docker.com/compose/install/"&gt;install &lt;code&gt;docker-compose&lt;/code&gt;&lt;/a&gt;.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;for backend: in &lt;code&gt;backend/&lt;/code&gt; folder, &lt;code&gt;docker-compose up --build&lt;/code&gt; if
  you are running it for the first time. You can omit the &lt;code&gt;--build&lt;/code&gt;
  once the image has been built.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;for frontend: in &lt;code&gt;frontend/&lt;/code&gt; folder, run &lt;code&gt;npm install &amp;amp;&amp;amp; npm run
  dev&lt;/code&gt;, then browser to &lt;code&gt;localhost:8080&lt;/code&gt;.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Alternatively, you can use &lt;code&gt;docker-compose up --build&lt;/code&gt;. Here
  &lt;strong&gt;&lt;code&gt;--build&lt;/code&gt; is required&lt;/strong&gt; because the REACT source needs a
  compilation. However, you lose the &lt;code&gt;webpack hot reload&lt;/code&gt; in this
  method because the compilation is happening inside the docker on a
  fresh copy of your &lt;code&gt;/src&lt;/code&gt; each time its &lt;code&gt;docker-compose up&lt;/code&gt;, so
  there is nothing to &lt;em&gt;reload&lt;/em&gt;. This is good for deployment, but
  doesn't work well for frontend dev.&lt;/p&gt;
&lt;h2&gt;manual intervention&lt;/h2&gt;
&lt;p&gt;There are always  configs needed tweaking to fit  your environment . In
particular you want to pay attention to:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;port mapping: expose Docker port to host. For example, MySQL port
   &lt;code&gt;3306&lt;/code&gt; is mapped to host &lt;code&gt;3306&lt;/code&gt; by default as shown below.&lt;/p&gt;
&lt;p&gt;&lt;code&gt;yaml
    ports:
      - "3306:3306"&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;IP mapping: in &lt;code&gt;frontend/src/root.jsx&lt;/code&gt;, class function
   &lt;code&gt;constructor&lt;/code&gt;:&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;code&gt;SERVER&lt;/code&gt;: set to the API server IP or hostname&lt;/li&gt;
&lt;li&gt;&lt;code&gt;PORT&lt;/code&gt;: API server port&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;For example, when we are setting them to &lt;code&gt;localhost&lt;/code&gt; &amp;amp; &lt;code&gt;8002&lt;/code&gt;
   because we are assuming the backend dockers are living on the same
   host (thus &lt;code&gt;localhost&lt;/code&gt;) and is available on port &lt;code&gt;8002&lt;/code&gt; (which is
   listened by the backend nginx).&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;CORS whitelisting: in &lt;code&gt;backend/gitt/settings.py&lt;/code&gt;,
   &lt;code&gt;CORS_ORIGIN_WHITELIST&lt;/code&gt;, adds the API server IP and port. This is
   &lt;strong&gt;critical&lt;/strong&gt;.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Of course, the values in &lt;code&gt;docker-compose&lt;/code&gt; can be changed such as
&lt;code&gt;enviroment&lt;/code&gt; that defines DB port, user name, password, even the
application's database name, and so on. They are fairly
self-explanatory. Therefore I'm skipping them here.&lt;/p&gt;
&lt;h1&gt;Deployment&lt;/h1&gt;
&lt;p&gt;The &lt;code&gt;docker-compose&lt;/code&gt; way is production ready. &lt;/p&gt;
&lt;p&gt;There certainly can be different ways to deploy depending on the
underline platform this is deployed unto. For example, using &lt;code&gt;uwsgi&lt;/code&gt;
instead of &lt;code&gt;gunicorn&lt;/code&gt;, or tweaking the number of &lt;code&gt;gunicorn&lt;/code&gt; workers,
and so on. These topics are beyond the scope of this document.&lt;/p&gt;</content><category term="dev"></category></entry><entry><title>Git strategy for backward compatibility</title><link href="https://fengxia41103.github.io/myblog/git%20rebase%20strategy.html" rel="alternate"></link><published>2020-04-01T11:42:00-04:00</published><updated>2020-04-01T11:42:00-04:00</updated><author><name>Feng Xia</name></author><id>tag:fengxia41103.github.io,2020-04-01:/myblog/git rebase strategy.html</id><summary type="html">&lt;figure class="col s12 center"&gt;
  &lt;img
  src="images/olympia/git%20strategy%20rebase%20for%20release.png"/&gt;
  &lt;figcaption&gt;
  Git strategy for a backward-compatible release
  &lt;/figcaption&gt;
&lt;/figure&gt;

&lt;p&gt;As a sequel to our discussion on &lt;a href="https://fengxia41103.github.io/myblog/git strategy.html"&gt;git strategy&lt;/a&gt;, we have started w/
an objective that we want to "control the release content". Further, I
discussed how &lt;strong&gt;backwards compatibility&lt;/strong&gt; of releases may not be true
if we are introducing long-term-support on releases, that hot fixes
and bugs can only &lt;strong&gt;roll forward&lt;/strong&gt;, eg. V4 bugs can be patched to V5
(assuming V5 was released after V4, time wise and git commit wise),
but not from V5 &amp;rarr; V4 without introducing some V5 contents into V4
(whether this is desired or not is the focal of the discussion,
essentially, how much control you want to have over the release
content!?)&lt;/p&gt;
&lt;p&gt;Now, let's build on top of this and say that &lt;strong&gt;we want backwards
compatibility&lt;/strong&gt; &amp;mdash; all newer releases are always backwards
compatible? This is certainly a desired outcome because this makes
upgrade and maintenance easier (who wants to maintain a 10-year-old
code when a customer &lt;em&gt;frozen in time&lt;/em&gt; call you of a bug which you
probably don't even remember who wrote that crap …&lt;/p&gt;</summary><content type="html">&lt;figure class="col s12 center"&gt;
  &lt;img
  src="images/olympia/git%20strategy%20rebase%20for%20release.png"/&gt;
  &lt;figcaption&gt;
  Git strategy for a backward-compatible release
  &lt;/figcaption&gt;
&lt;/figure&gt;

&lt;p&gt;As a sequel to our discussion on &lt;a href="https://fengxia41103.github.io/myblog/git strategy.html"&gt;git strategy&lt;/a&gt;, we have started w/
an objective that we want to "control the release content". Further, I
discussed how &lt;strong&gt;backwards compatibility&lt;/strong&gt; of releases may not be true
if we are introducing long-term-support on releases, that hot fixes
and bugs can only &lt;strong&gt;roll forward&lt;/strong&gt;, eg. V4 bugs can be patched to V5
(assuming V5 was released after V4, time wise and git commit wise),
but not from V5 &amp;rarr; V4 without introducing some V5 contents into V4
(whether this is desired or not is the focal of the discussion,
essentially, how much control you want to have over the release
content!?)&lt;/p&gt;
&lt;p&gt;Now, let's build on top of this and say that &lt;strong&gt;we want backwards
compatibility&lt;/strong&gt; &amp;mdash; all newer releases are always backwards
compatible? This is certainly a desired outcome because this makes
upgrade and maintenance easier (who wants to maintain a 10-year-old
code when a customer &lt;em&gt;frozen in time&lt;/em&gt; call you of a bug which you
probably don't even remember who wrote that crap 10 years earlier! Was
that me?... this can't be good for self-conscience ~~)&lt;/p&gt;
&lt;p&gt;Now what you do? Pretty simple, use rebase or merge, whichever you
feel comfortable, to keep your branch in sync w/ moving targets
&amp;mdash; changes you will be interested in:&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Who&lt;/th&gt;
&lt;th&gt;Do what&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;feature dev&lt;/td&gt;
&lt;td&gt;rebase feature onto &lt;code&gt;5.1 dev&lt;/code&gt; prior to MR submission&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;5.1 branch owner&lt;/td&gt;
&lt;td&gt;merge changes from &lt;code&gt;develop&lt;/code&gt; periodically&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;CICD&lt;/td&gt;
&lt;td&gt;rebase/merge changes to &lt;code&gt;5.1 staging&lt;/code&gt; from both &lt;code&gt;develop&lt;/code&gt; and &lt;code&gt;5.1 dev&lt;/code&gt; when &lt;code&gt;5.1 dev&lt;/code&gt; becomes stable&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;CICD/release&lt;/td&gt;
&lt;td&gt;rebase &lt;code&gt;5.1 staging&lt;/code&gt; to &lt;code&gt;develop&lt;/code&gt;, close &lt;code&gt;5.1 dev&lt;/code&gt;, tag release on &lt;code&gt;develop&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;A few notes:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;Root of CICD branch does not have to be the same as dev root
   anymore because we are constantly pulling in changes from
   &lt;code&gt;develop&lt;/code&gt;. &lt;strong&gt;This is the most important difference&lt;/strong&gt; from &lt;a href="https://fengxia41103.github.io/myblog/git strategy.html"&gt;previous
   git strategy&lt;/a&gt;, in which I made argument in conclusion that "&lt;em&gt;All
   three types of in-progress branches should root in the same commit,
   ideally a releas commit &amp;mdash; feature, hot fixes, and release
   staging.&lt;/em&gt;" This is because we are now assuming these releases are
   backward compatible, while previously they are not.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;5.1 dev&lt;/code&gt; branch is a &lt;strong&gt;public branch&lt;/strong&gt;, thus should not use
   rebase. Use &lt;code&gt;merge&lt;/code&gt; instead to pull in changes from &lt;code&gt;develop&lt;/code&gt;.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;5.1 staging&lt;/code&gt; should not be treated as CICD's development
   branch. Otherwise, rebase should also be prohibited on it.&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;</content><category term="dev"></category><category term="thoughts"></category></entry><entry><title>Git strategy</title><link href="https://fengxia41103.github.io/myblog/git%20strategy.html" rel="alternate"></link><published>2020-03-21T12:42:00-04:00</published><updated>2020-03-21T12:42:00-04:00</updated><author><name>Feng Xia</name></author><id>tag:fengxia41103.github.io,2020-03-21:/myblog/git strategy.html</id><summary type="html">&lt;figure class="col s12 center"&gt;
  &lt;img src="images/funny/a%20lot%20of%20cats.jpg"/&gt;
&lt;/figure&gt;

&lt;p&gt;&lt;a href="https://fengxia41103.github.io/myblog/git.html"&gt;git&lt;/a&gt; is wonderful, but its workflow is very confusing. Surprised?
Then I would dare to say that you haven't had first hand experience
using it in a full blown enterprise environment &amp;mdash; when in such
environment, the challenge isn't about git itself, but what the
content of a release are, and how we are testing/CICD them.&lt;/p&gt;
&lt;p&gt;You would think it sounds rather cliche that this problem even
exists. After all, these are what a software engineering is all about,
aren't they? But take a step back and consider this scenario:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;We just did a release 5.0.0.&lt;/li&gt;
&lt;li&gt;We have two features: 1 &amp;amp; 2.&lt;/li&gt;
&lt;li&gt;Initially they were all targeting the next release, say &lt;code&gt;5.1&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;We create a &lt;strong&gt;staging&lt;/strong&gt; branch, &lt;code&gt;5.1-staging&lt;/code&gt; and point our CICD to
   this so to QA them (more on this later).&lt;/li&gt;
&lt;li&gt;Feature 1 &amp;amp; 2 have been merged into &lt;code&gt;5.1-staging&lt;/code&gt;. Their source
   branches, eg. &lt;code&gt;feature-1&lt;/code&gt;, have been deleted &amp;larr; at merge
   request, select to delete source branch.&lt;/li&gt;
&lt;li&gt;Time is slipping, 5.1 is up this Friday, but one feature is failing …&lt;/li&gt;&lt;/ol&gt;</summary><content type="html">&lt;figure class="col s12 center"&gt;
  &lt;img src="images/funny/a%20lot%20of%20cats.jpg"/&gt;
&lt;/figure&gt;

&lt;p&gt;&lt;a href="https://fengxia41103.github.io/myblog/git.html"&gt;git&lt;/a&gt; is wonderful, but its workflow is very confusing. Surprised?
Then I would dare to say that you haven't had first hand experience
using it in a full blown enterprise environment &amp;mdash; when in such
environment, the challenge isn't about git itself, but what the
content of a release are, and how we are testing/CICD them.&lt;/p&gt;
&lt;p&gt;You would think it sounds rather cliche that this problem even
exists. After all, these are what a software engineering is all about,
aren't they? But take a step back and consider this scenario:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;We just did a release 5.0.0.&lt;/li&gt;
&lt;li&gt;We have two features: 1 &amp;amp; 2.&lt;/li&gt;
&lt;li&gt;Initially they were all targeting the next release, say &lt;code&gt;5.1&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;We create a &lt;strong&gt;staging&lt;/strong&gt; branch, &lt;code&gt;5.1-staging&lt;/code&gt; and point our CICD to
   this so to QA them (more on this later).&lt;/li&gt;
&lt;li&gt;Feature 1 &amp;amp; 2 have been merged into &lt;code&gt;5.1-staging&lt;/code&gt;. Their source
   branches, eg. &lt;code&gt;feature-1&lt;/code&gt;, have been deleted &amp;larr; at merge
   request, select to delete source branch.&lt;/li&gt;
&lt;li&gt;Time is slipping, 5.1 is up this Friday, but one feature is failing
   QA tests. So management is going to release 5.1 w/ feature 1 only,
   and moving feature 2 to release 5.2, which has another staging
   branch &lt;code&gt;5.2-staging&lt;/code&gt;.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;All sound fair and common. But there are multiple questions. First,
let's set the objective.&lt;/p&gt;
&lt;h1&gt;Objective&lt;/h1&gt;
&lt;blockquote&gt;
&lt;p&gt;AS a product owner, I want to control the release content, so that I
can plan release schedule into the future and communicate w/ stake
holders of availability of a feature based on these schedules.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;No mystery here. Regardless Agile or not, team is to deliver features,
and these features will fall into a release, and release is not Agile
by nature &amp;larr; however Agile desires the product to be &lt;em&gt;usable&lt;/em&gt; by
the end of each Sprint, the reality is not so, and further, the
definition of a release has usually two more requirements than a
product being &lt;em&gt;usable&lt;/em&gt; (&lt;code&gt;usable&lt;/code&gt; is an ambiguous term and is useless
in determining a release):&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;It must pass a set of user defined tests (UAT).&lt;/li&gt;
&lt;li&gt;We must know the content of the release in term of functions
   (aka. features).&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;It's the second requirement we are to discuss in this article.&lt;/p&gt;
&lt;h1&gt;Problem statement&lt;/h1&gt;
&lt;p&gt;The problem is that at any given time, there are multiple teams and
developers working on various topics &amp;mdash; some features, some bug
fixings, thus code is constantly in fluctuation. This is directly
contradicting us controlling the content of a release:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;I want to select the changes I want and nothing else, while the pool
of changes to be selected from is constantly expanding in a rate
higher than an individual can keep up w/.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Since all development result in a code change, and all code changes
are ear marked in git, is there a git strategy to solve this problem?&lt;/p&gt;
&lt;p&gt;Yes there is gotta be. Otherwise, git or any other version control
tool will become useless for software development.&lt;/p&gt;
&lt;h1&gt;Two rules&lt;/h1&gt;
&lt;p&gt;In git, individual code change is ear marked in &lt;strong&gt;commit&lt;/strong&gt;, and
changes are &lt;em&gt;grouped&lt;/em&gt; into &lt;strong&gt;branches&lt;/strong&gt;. Here we are to use two
branches for discussion &amp;mdash; feature branch, and release
staging. Feature branch is to hold the group of changes of a feature;
release staging is hold the group of changes of a release. It is the
release staging we are interested in controlling.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Assuming&lt;/strong&gt; branch &lt;code&gt;develop&lt;/code&gt; is our MASTER:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;Feature branch &lt;strong&gt;must go into a staging&lt;/strong&gt; or abandoned. No one can
   merge a feature directly into &lt;code&gt;develop&lt;/code&gt; &amp;larr; this is to prevent
   skipping CICD/QA.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Release staging will go into &lt;code&gt;develop&lt;/code&gt; eventually instead of
   living as independent branch indefinitely&lt;/strong&gt;. This is assuming that
   all releases are essentially backwards compatible. &lt;strong&gt;This may not
   be true&lt;/strong&gt;, and we will discuss further in "Long term support"
   section.&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h1&gt;Possible strategies&lt;/h1&gt;
&lt;p&gt;Now consider the original story that we have an past release of &lt;code&gt;5.0&lt;/code&gt;,
and two upcoming releases &lt;code&gt;5.1&lt;/code&gt; &amp;amp; &lt;code&gt;5.2&lt;/code&gt;. Since a release must have
staging, we will have two staging branches: &lt;code&gt;5.1-staging&lt;/code&gt; and
&lt;code&gt;5.2-staging&lt;/code&gt;. &lt;/p&gt;
&lt;p&gt;There are two features in development, feature 1 &amp;amp; 2, correspondingly
there are two feature branches.&lt;/p&gt;
&lt;p&gt;Out of all these, there are only finite combinations of possibilities:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;What are the origin of these two staging branches? Two
   possibilities:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;both from &lt;code&gt;develop&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;5.2-staging&lt;/code&gt; is a branch off &lt;code&gt;5.1-staging&lt;/code&gt;, and &lt;code&gt;5.1-staging&lt;/code&gt;
   was branched off &lt;code&gt;develop&lt;/code&gt;.&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;What are the origin of these two feature branches? &lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;both from &lt;code&gt;develop&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;both from &lt;code&gt;5.1-staging&lt;/code&gt; &lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Similarly we determine where these features are merged into, and where
these staging branches are merged in eventually. So with these in
mind, we have the following combinations:&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Strategy&lt;/th&gt;
&lt;th&gt;Staging from&lt;/th&gt;
&lt;th&gt;Staging to&lt;/th&gt;
&lt;th&gt;Feature from&lt;/th&gt;
&lt;th&gt;Feature to&lt;/th&gt;
&lt;th&gt;Applicable&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;1&lt;/td&gt;
&lt;td&gt;develop&lt;/td&gt;
&lt;td&gt;develop&lt;/td&gt;
&lt;td&gt;develop&lt;/td&gt;
&lt;td&gt;staging&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;2&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;develop&lt;/td&gt;
&lt;td&gt;develop&lt;/td&gt;
&lt;td&gt;no&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;3&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;staging 1&lt;/td&gt;
&lt;td&gt;staging 1&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;4&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;staging 1&lt;/td&gt;
&lt;td&gt;staging 2&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;5&lt;/td&gt;
&lt;td&gt;another staging&lt;/td&gt;
&lt;td&gt;develop&lt;/td&gt;
&lt;td&gt;develop&lt;/td&gt;
&lt;td&gt;staging&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;6&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;develop&lt;/td&gt;
&lt;td&gt;develop&lt;/td&gt;
&lt;td&gt;no&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;7&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;staging 1&lt;/td&gt;
&lt;td&gt;staging 1&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;8&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;staging 1&lt;/td&gt;
&lt;td&gt;staging 2&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;9&lt;/td&gt;
&lt;td&gt;develop&lt;/td&gt;
&lt;td&gt;staging&lt;/td&gt;
&lt;td&gt;develop&lt;/td&gt;
&lt;td&gt;staging&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;10&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;develop&lt;/td&gt;
&lt;td&gt;develop&lt;/td&gt;
&lt;td&gt;no&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;11&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;staging 1&lt;/td&gt;
&lt;td&gt;staging 1&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;12&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;staging 1&lt;/td&gt;
&lt;td&gt;staging 2&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;13&lt;/td&gt;
&lt;td&gt;another staging&lt;/td&gt;
&lt;td&gt;yet another staging&lt;/td&gt;
&lt;td&gt;develop&lt;/td&gt;
&lt;td&gt;staging&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;14&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;develop&lt;/td&gt;
&lt;td&gt;develop&lt;/td&gt;
&lt;td&gt;no&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;15&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;staging 1&lt;/td&gt;
&lt;td&gt;staging 1&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;16&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;staging 1&lt;/td&gt;
&lt;td&gt;staging 2&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;Strategy 2,6,10,14 are ruled out because they violate rule #1 &amp;larr;
feature code can not be merged directly to &lt;code&gt;develop&lt;/code&gt;.&lt;/p&gt;
&lt;h1&gt;Strategy 1&lt;/h1&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Strategy&lt;/th&gt;
&lt;th&gt;Staging from&lt;/th&gt;
&lt;th&gt;Staging to&lt;/th&gt;
&lt;th&gt;Feature from&lt;/th&gt;
&lt;th&gt;Feature to&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;1&lt;/td&gt;
&lt;td&gt;develop&lt;/td&gt;
&lt;td&gt;develop&lt;/td&gt;
&lt;td&gt;develop&lt;/td&gt;
&lt;td&gt;staging&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;figure class="col s12 center"&gt;
  &lt;img src="images/olympia/git%20strategy%201.png"/&gt;
    &lt;figcaption&gt;Release staging (dev&amp;rarr;dev), feature (dev&amp;rarr;staging)&lt;/figcaption&gt;
&lt;/figure&gt;

&lt;p&gt;In the diagram I have two feature branches and two staging
branches. All four were created from &lt;code&gt;develop&lt;/code&gt;. &lt;/p&gt;
&lt;p&gt;Pros:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Developer always create his/her feature from &lt;code&gt;develop&lt;/code&gt;. Thus they
  don't have to be aware which release this feature is going
  into. Logistically it's a managerial decision anyway.&lt;/p&gt;
&lt;p&gt;But, this is to creating a big problem! See first item in "cons"
  section below.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Cons:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Developer's starting point is arbitrary &amp;larr; dev don't have
  control what is in &lt;code&gt;C0&lt;/code&gt; and &lt;code&gt;C4&lt;/code&gt;, nor do they really pay attention
  to them when they were creating a branch at that moment.&lt;/p&gt;
&lt;p&gt;What this means is that feature 1 is fine in its own branch,
 but may break as soon as it's merged to &lt;code&gt;5.2-staging&lt;/code&gt;, because
 &lt;code&gt;C4&lt;/code&gt; is after both &lt;code&gt;C0&lt;/code&gt; and &lt;code&gt;C1&lt;/code&gt;, thus having &lt;strong&gt;unknown&lt;/strong&gt;
 contents when developer was working on feature 1.&lt;/p&gt;
&lt;p&gt;Mitigation is to control the starting points, for example, having
 both features starting from &lt;code&gt;C0&lt;/code&gt; &amp;rarr; if we have multiple
 features, the latter ones will have to consult the very first
 feature branch for its starting point.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;staging-5.2&lt;/code&gt; will also have hot fix content because of feature 2
  merge. This may not be desired if I want feature branch to only have
  feature content. &lt;/p&gt;
&lt;p&gt;Because features are created from &lt;code&gt;develop&lt;/code&gt;, &lt;code&gt;C4&lt;/code&gt; from which
 feature 2 branch was created is essentially a random location (you
 don't necessarily know what is before &lt;code&gt;C4&lt;/code&gt; when you decided to
 create a &lt;code&gt;5.2-staging&lt;/code&gt; brach from it), thus making the content of
 &lt;code&gt;5.2-staging&lt;/code&gt; random as well. Same is true for &lt;code&gt;C0&lt;/code&gt; that we don't
 necessarily consider it be part of &lt;code&gt;5.1&lt;/code&gt; release at all, but it is
 pulled in because of the branching strategy.&lt;/p&gt;
&lt;p&gt;Therefore, contents of both feature staging become arbitrary if not
 controlled carefully when the feature branch is
 created. Considering that dev owns feature branch, it's too much a
 risk to rely on personal code of conduct to keep staging branch
 &lt;em&gt;clean/minimal&lt;/em&gt;.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h1&gt;Strategy 3&amp;amp;4&lt;/h1&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Strategy&lt;/th&gt;
&lt;th&gt;Staging from&lt;/th&gt;
&lt;th&gt;Staging to&lt;/th&gt;
&lt;th&gt;Feature from&lt;/th&gt;
&lt;th&gt;Feature to&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;3&lt;/td&gt;
&lt;td&gt;develop&lt;/td&gt;
&lt;td&gt;develop&lt;/td&gt;
&lt;td&gt;staging 1&lt;/td&gt;
&lt;td&gt;staging 1&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;4&lt;/td&gt;
&lt;td&gt;develop&lt;/td&gt;
&lt;td&gt;develop&lt;/td&gt;
&lt;td&gt;staging 1&lt;/td&gt;
&lt;td&gt;staging 2&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;figure class="col s12 center"&gt;
  &lt;img src="images/olympia/git%20strategy%203%20and%204.png"/&gt;
    &lt;figcaption&gt;Release staging (dev&amp;rarr;dev), feature (staging&amp;rarr;staging)&lt;/figcaption&gt;
&lt;/figure&gt;

&lt;p&gt;In this diagram I am covering two strategies: &lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;feature is either folding into the same stating it was branched off
   (case 3) &amp;mdash; feature 2 was developed for 5.2, and will be
   merged to &lt;code&gt;5.2-staging&lt;/code&gt;.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;feature is merged onto yet another staging (case 4) &amp;mdash; feature
   1 was developed for 5.1, but later was decided to be 5.2.&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Cons:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;As in strategy 1, staging branches were created from two different
  &lt;code&gt;develop&lt;/code&gt; commits, making its contents arbitrary.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;In case 4, feature 1 may stop working when merged into &lt;code&gt;5.2-staging&lt;/code&gt;
  because contents between &lt;code&gt;C0&lt;/code&gt; and &lt;code&gt;C3&lt;/code&gt; were unknown to feature 1's
  developer.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Developer has to be aware which release the feature is intended so
  to create the feature branch off the &lt;strong&gt;proper&lt;/strong&gt; staging, even though
  this doesn't have any material impact on the code state. Thus this
  is an unnecessary noise for developer and adds no value but a
  falsified impression that we are feature code is already &lt;em&gt;contained&lt;/em&gt;
  within a release, which it is not.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h1&gt;Strategy 5&lt;/h1&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Strategy&lt;/th&gt;
&lt;th&gt;Staging from&lt;/th&gt;
&lt;th&gt;Staging to&lt;/th&gt;
&lt;th&gt;Feature from&lt;/th&gt;
&lt;th&gt;Feature to&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;5&lt;/td&gt;
&lt;td&gt;another staging&lt;/td&gt;
&lt;td&gt;develop&lt;/td&gt;
&lt;td&gt;develop&lt;/td&gt;
&lt;td&gt;staging&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;figure class="col s12 center"&gt;
  &lt;img src="images/olympia/git%20strategy%205.png"/&gt;
    &lt;figcaption&gt;Release staging (staging&amp;rarr;dev), feature (dev&amp;rarr;staging)&lt;/figcaption&gt;
&lt;/figure&gt;

&lt;p&gt;In this strategy, &lt;code&gt;5.1.1-staging&lt;/code&gt; is created from &lt;code&gt;5.1-staging&lt;/code&gt;. This
is simulating that we started w/ 5.1 release development, but later
decided to do a &lt;code&gt;5.1.1&lt;/code&gt; release first.&lt;/p&gt;
&lt;p&gt;Cons:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;This strategy suffers the same problems as strategy 1, that we will
   have arbitrary contents in the staging depending on what the
   feature is bringing w/ it &amp;mdash; feature 2 will drag in all the
   changes of &lt;code&gt;C0&lt;/code&gt; to &lt;code&gt;C4&lt;/code&gt; into &lt;code&gt;5.1.1-staging&lt;/code&gt;.&lt;/li&gt;
&lt;/ol&gt;
&lt;h1&gt;Strategy 7&lt;/h1&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Strategy&lt;/th&gt;
&lt;th&gt;Staging from&lt;/th&gt;
&lt;th&gt;Staging to&lt;/th&gt;
&lt;th&gt;Feature from&lt;/th&gt;
&lt;th&gt;Feature to&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;7&lt;/td&gt;
&lt;td&gt;another staging&lt;/td&gt;
&lt;td&gt;develop&lt;/td&gt;
&lt;td&gt;staging 1&lt;/td&gt;
&lt;td&gt;staging 1&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;figure class="col s12 center"&gt;
  &lt;img src="images/olympia/git%20strategy%207.png"/&gt;
    &lt;figcaption&gt;Release staging (staging&amp;rarr;dev), feature
  (staging&amp;rarr;same staging)&lt;/figcaption&gt;
&lt;/figure&gt;

&lt;p&gt;Pros:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;This is a clean solution that we have had a 5.0 release, thus any
  staging is off the 5.0 commit, creating a common base for all
  features.&lt;/li&gt;
&lt;li&gt;Features are confined to its release staging during development.&lt;/li&gt;
&lt;li&gt;Contents of the staging is controlled. Nothing on &lt;code&gt;develop&lt;/code&gt; will
  leak into the staging by surprise.&lt;/li&gt;
&lt;/ul&gt;
&lt;h1&gt;Strategy 8&lt;/h1&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Strategy&lt;/th&gt;
&lt;th&gt;Staging from&lt;/th&gt;
&lt;th&gt;Staging to&lt;/th&gt;
&lt;th&gt;Feature from&lt;/th&gt;
&lt;th&gt;Feature to&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;8&lt;/td&gt;
&lt;td&gt;another staging&lt;/td&gt;
&lt;td&gt;develop&lt;/td&gt;
&lt;td&gt;staging 1&lt;/td&gt;
&lt;td&gt;staging 2&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;figure class="col s12 center"&gt;
  &lt;img src="images/olympia/git%20strategy%208.png"/&gt;
    &lt;figcaption&gt;Release staging (staging&amp;rarr;dev), feature
  (staging 1&amp;rarr;staging 2)&lt;/figcaption&gt;
&lt;/figure&gt;

&lt;p&gt;Similar to strategy 4, that we are changing mind during a release
(&lt;code&gt;5.1-staging&lt;/code&gt;), that we are shift one feature to another release
(&lt;code&gt;5.2-staging&lt;/code&gt;) instead.&lt;/p&gt;
&lt;p&gt;Pros:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Because of the common root law of two staging branches, feature 2
  will work the same on &lt;code&gt;5.2-staging&lt;/code&gt; because it is based on 5.0 in
  any case.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Cons:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Feature 2 merging will bring w/ it &lt;code&gt;C1&lt;/code&gt; and &lt;code&gt;C2&lt;/code&gt; to &lt;code&gt;5.2-staging&lt;/code&gt;,
  which may defeat the purpose of moving feature 2 (but feature 1) to
  &lt;code&gt;5.2-staging&lt;/code&gt; at the first place.&lt;/li&gt;
&lt;/ul&gt;
&lt;h1&gt;Strategy 9&lt;/h1&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Strategy&lt;/th&gt;
&lt;th&gt;Staging from&lt;/th&gt;
&lt;th&gt;Staging to&lt;/th&gt;
&lt;th&gt;Feature from&lt;/th&gt;
&lt;th&gt;Feature to&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;9&lt;/td&gt;
&lt;td&gt;develop&lt;/td&gt;
&lt;td&gt;staging&lt;/td&gt;
&lt;td&gt;develop&lt;/td&gt;
&lt;td&gt;staging&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;figure class="col s12 center"&gt;
  &lt;img src="images/olympia/git%20strategy%209.png"/&gt;
    &lt;figcaption&gt;Release staging (dev&amp;rarr;staging), feature
  (dev&amp;rarr;staging)&lt;/figcaption&gt;
&lt;/figure&gt;

&lt;p&gt;Up to this point you can certainly see the similarity between strategy
1, 5 and 9. Even though we are merging staging into another staging
instead of &lt;code&gt;develop&lt;/code&gt;, this strategy suffers all the problems strategy
1&amp;amp;5 suffer. After all, the core of the objective is to have a known
content in a release, which this fails to achieve.&lt;/p&gt;
&lt;h1&gt;Strategy conclusion&lt;/h1&gt;
&lt;p&gt;I'm gonna skip strategy 10-16 because they are redundant after the
discussions so far. It's clear that the key to the issue are two:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;root of the staging&lt;/li&gt;
&lt;li&gt;root of the feature&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;If we can't control these two, we lost control of the contents in each
branch. Therefore, the only viable strategy is 7:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;stagings use the same root, ideally a past release&lt;/li&gt;
&lt;li&gt;root of feature is staging (if we satisfies first point, all
   stagings are essentially the same!)&lt;/li&gt;
&lt;/ol&gt;
&lt;h1&gt;Move feature to new staging&lt;/h1&gt;
&lt;p&gt;Common request is to move a feature to a new release. The feature may
be in progress or having been merged. How to do this properly?&lt;/p&gt;
&lt;p&gt;From strategy 8, we already see that repointing MR is necessarily
sufficient because moving feature 2 will bring commits that were
developed on &lt;code&gt;5.1-staging&lt;/code&gt;. For all we know, these commits can be
intermittent works by feature 1. Therefore, we will be leaking feature
1 works to the &lt;code&gt;5.2-staging&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;The clean method is to fully revert feature 2 on &lt;code&gt;5.1-staging&lt;/code&gt;,
&lt;strong&gt;reimplement&lt;/strong&gt; it from scratch on &lt;code&gt;5.2-staging&lt;/code&gt;, then MR.
`&lt;/p&gt;
&lt;figure class="col s12 center"&gt;
  &lt;img src="images/olympia/git%20strategy%20move%20feature%20to%20new%20staging.png"/&gt;
    &lt;figcaption&gt;Move feature to a new release staging&lt;/figcaption&gt;
&lt;/figure&gt;

&lt;h1&gt;Long term support (LTS) releases and hot fixes&lt;/h1&gt;
&lt;p&gt;A release is a snapshot in time. But hardly, because there will be hot
fixes &amp;mdash; things you have to patch, say, security, that will
ultimately change the content of a released release. What is the
strategy for hot fixes? &lt;/p&gt;
&lt;h2&gt;Hot fixes&lt;/h2&gt;
&lt;figure class="col s12 center"&gt;
  &lt;img src="images/olympia/git%20strategy%20lts.png"/&gt;
    &lt;figcaption&gt;LTS and hot fixes based on Strategy 7&lt;/figcaption&gt;
&lt;/figure&gt;

&lt;p&gt;Coming from strategy 7, you can see that same problem will occur again
if we are to merge hot fixes into my LTS, that unintended commits &lt;code&gt;C0&lt;/code&gt;
and &lt;code&gt;C1&lt;/code&gt; will be included in LTS. Remedy is simple, hot fix branch
must be rooted in &lt;code&gt;5.0&lt;/code&gt; like all &lt;code&gt;5.x&lt;/code&gt; release branches!&lt;/p&gt;
&lt;figure class="col s12 center"&gt;
  &lt;img src="images/olympia/git%20strategy%20lts%20based%20on%208.png"/&gt;
    &lt;figcaption&gt;LTS and hot fixes&lt;/figcaption&gt;
&lt;/figure&gt;

&lt;p&gt;If we had two releases, 4 &amp;amp; 5, we will create two parallel hot fix
branches tracking each.&lt;/p&gt;
&lt;p&gt;Now, what if I found a security bug in V4, fixed it, can I apply the
same fix to V5? or vice versa? From V4&amp;rarr;5, yes; but from 5&amp;rarr;4,
no. See next section on "Bugs".&lt;/p&gt;
&lt;h2&gt;Bugs&lt;/h2&gt;
&lt;p&gt;Bugs are essentially the same as hot fixes but w/ a critical
difference: we don't know bugs are critical until we discover and fix
them; we know hot fixes are critical because they are usually
determined by some external sources such as vendor of a library we are
using, or of the operating system we are deploying into.&lt;/p&gt;
&lt;p&gt;Once bug is found and fixed, we are facing the question whether
this same bug is &lt;strong&gt;critical enough&lt;/strong&gt; that needs to be applied in other
releases.&lt;/p&gt;
&lt;p&gt;Following the hot fix discussion, bugs found in V4 can be applied to
V5 without ill feeling because V4's &lt;code&gt;C0&lt;/code&gt; is already part of V5. But
bringing V5's bug fix into V4 will then bring &lt;code&gt;C1&lt;/code&gt; into V4! Therefore,
bugs and hot fixes can only roll forward, but never backward &amp;mdash;
you can apply a bug fix of a older release to a newer release, but not
the other way around.&lt;/p&gt;
&lt;figure class="col s12 center"&gt;
  &lt;img src="images/olympia/git%20strategy%20lts%20bugs.png"/&gt;
    &lt;figcaption&gt;LTS and bug fixes&lt;/figcaption&gt;
&lt;/figure&gt;

&lt;h2&gt;CICD/QA, UAT, and life cycle of a release&lt;/h2&gt;
&lt;p&gt;When does a release start, when does it end? We have said in rule that
all development will always go into a staging, and the purpose of a
staging is to have a chance for CICD/QA. If we follow git strategy 7,
we will have a clear idea of the contents in a staging, thus whenever
CICD passes a certain criteria, that particular commit can then be a
release candidate.  Usually the criteria is per user-acceptance-test
(UAT), thus it represents &lt;strong&gt;what the user considers done&lt;/strong&gt;.&lt;/p&gt;
&lt;p&gt;At that point, the staging can be further &lt;em&gt;elevated&lt;/em&gt; into a official
release. Again, release is mostly dictated by time line or a
managerial decision. Dev (including QA) is responsible for passing the
UAT on staging, but they don't roll out a release whenever. When we
release V5, we fold the code into &lt;code&gt;develop&lt;/code&gt; and tag it.&lt;/p&gt;
&lt;figure class="col s12 center"&gt;
  &lt;img src="images/olympia/git%20strategy%20release.png"/&gt;
    &lt;figcaption&gt;CICD/QA, UAT, and life cycle of LTS&lt;/figcaption&gt;
&lt;/figure&gt;

&lt;p&gt;If we released V5 and now have a hot fix, what do we do? We roll hot
fix into &lt;code&gt;v5-staging&lt;/code&gt; to test, then to a patched release if UAT
passes. Note that UAT in this case may be an enhanced version of the
original UAT because of the hot fixes. Patch release should also be
foled to &lt;code&gt;develop&lt;/code&gt; as an official release.&lt;/p&gt;
&lt;p&gt;When LTS reaches its end of life, the &lt;code&gt;v5-lts&lt;/code&gt; branch is folded into
&lt;code&gt;develop&lt;/code&gt;. At that point, &lt;code&gt;v5-staging&lt;/code&gt; will be removed.&lt;/p&gt;
&lt;h1&gt;Conclusion&lt;/h1&gt;
&lt;p&gt;To sum these all up:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;All three types of in-progress branches should root in the same
   commit, ideally a releas commit &amp;mdash; feature, hot fixes, and
   release staging.&lt;/li&gt;
&lt;li&gt;If you create multiple release stagings, have them use the same
   root, too.&lt;/li&gt;
&lt;li&gt;CICD/QA monitors staging branch.&lt;/li&gt;
&lt;li&gt;Merge a release commit to &lt;code&gt;develop&lt;/code&gt; as soon as the release is official.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;develop&lt;/code&gt; should not have commits other than releases.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Enjoy. (also available in &lt;a href="https://fengxia41103.github.io/myblog/downloads/git.pdf"&gt;pdf&lt;/a&gt;)&lt;/p&gt;</content><category term="dev"></category><category term="thoughts"></category></entry><entry><title>Strange things of Javascript</title><link href="https://fengxia41103.github.io/myblog/strange%20things%20of%20javascript.html" rel="alternate"></link><published>2019-11-17T13:13:00-05:00</published><updated>2019-11-17T13:13:00-05:00</updated><author><name>Feng Xia</name></author><id>tag:fengxia41103.github.io,2019-11-17:/myblog/strange things of javascript.html</id><summary type="html">&lt;figure class="col l6 m6 s12"&gt;
  &lt;img src="images/wise%20doctor.jpg"/&gt;
&lt;/figure&gt;

&lt;p&gt;God, isn't Angular confusing! and I really think it is because of its
shaky underline language &amp;mdash; Javascript, is itself,
confusing. Well, even by just looking at its name, how many people
have thought that it is a &lt;em&gt;script&lt;/em&gt; derived from Java!? Oh well well,
here are some notes I take while studying Angular(JS, sometimes), and
&lt;code&gt;.js&lt;/code&gt;. Btw, there is another article about all the confusion of &lt;a href="https://fengxia41103.github.io/myblog/ecmascript.html"&gt;&lt;code&gt;ES&amp;lt;a
number&amp;gt;&lt;/code&gt; denotation&lt;/a&gt; that can clarify those naming/version hell.&lt;/p&gt;
&lt;h1&gt;scope&lt;/h1&gt;
&lt;p&gt;Scope is always the most fundamental concept I read of a language, and
for all I know, I'm expecting something like a &lt;code&gt;global&lt;/code&gt; and a &lt;code&gt;local&lt;/code&gt;,
that a local is always &lt;em&gt;private&lt;/em&gt; to its enclosed curly brackets or any
nearest declaration &lt;em&gt;chunk&lt;/em&gt; &amp;mdash; if it is declared in a function, it
is available in a function, not outside; if it is declared in a &lt;code&gt;for&lt;/code&gt;
loop, well, it is only useful inside the &lt;code&gt;for&lt;/code&gt; loop, not outside.&lt;/p&gt;
&lt;p&gt;But there comes this country boy Javascript, and for the first time I
realized there are actually 3 scopes: global …&lt;/p&gt;</summary><content type="html">&lt;figure class="col l6 m6 s12"&gt;
  &lt;img src="images/wise%20doctor.jpg"/&gt;
&lt;/figure&gt;

&lt;p&gt;God, isn't Angular confusing! and I really think it is because of its
shaky underline language &amp;mdash; Javascript, is itself,
confusing. Well, even by just looking at its name, how many people
have thought that it is a &lt;em&gt;script&lt;/em&gt; derived from Java!? Oh well well,
here are some notes I take while studying Angular(JS, sometimes), and
&lt;code&gt;.js&lt;/code&gt;. Btw, there is another article about all the confusion of &lt;a href="https://fengxia41103.github.io/myblog/ecmascript.html"&gt;&lt;code&gt;ES&amp;lt;a
number&amp;gt;&lt;/code&gt; denotation&lt;/a&gt; that can clarify those naming/version hell.&lt;/p&gt;
&lt;h1&gt;scope&lt;/h1&gt;
&lt;p&gt;Scope is always the most fundamental concept I read of a language, and
for all I know, I'm expecting something like a &lt;code&gt;global&lt;/code&gt; and a &lt;code&gt;local&lt;/code&gt;,
that a local is always &lt;em&gt;private&lt;/em&gt; to its enclosed curly brackets or any
nearest declaration &lt;em&gt;chunk&lt;/em&gt; &amp;mdash; if it is declared in a function, it
is available in a function, not outside; if it is declared in a &lt;code&gt;for&lt;/code&gt;
loop, well, it is only useful inside the &lt;code&gt;for&lt;/code&gt; loop, not outside.&lt;/p&gt;
&lt;p&gt;But there comes this country boy Javascript, and for the first time I
realized there are actually 3 scopes: global, function, and
&lt;strong&gt;block&lt;/strong&gt;. It turned out that &lt;strong&gt;anything declared w/ a &lt;code&gt;var xyz&lt;/code&gt; can not
have a block scope&lt;/strong&gt;! What does this mean,&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="kd"&gt;var&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;x&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mf"&gt;10&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="c1"&gt;// Here x is 10&lt;/span&gt;
&lt;span class="p"&gt;{&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="kd"&gt;var&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;x&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mf"&gt;2&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="c1"&gt;// Here x is 2&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="c1"&gt;// Here x is 2&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;So the 2nd declaration of &lt;code&gt;var x=2&lt;/code&gt; is not creating a new &lt;em&gt;private&lt;/em&gt;
variable that is only useful inside the curly bracket&lt;sup id="fnref:1"&gt;&lt;a class="footnote-ref" href="#fn:1"&gt;1&lt;/a&gt;&lt;/sup&gt;. On the
contrary, it &lt;strong&gt;re&lt;/strong&gt;declare the former &lt;code&gt;var x=10&lt;/code&gt;, but now overwriting
its (I guess the reference) w/ a value of 2. &lt;/p&gt;
&lt;p&gt;Isn't this strange! So it turned out that&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Before ES2015 JavaScript did not have Block Scope. &lt;a href="https://www.w3schools.com/js/js_let.asp"&gt;ref&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Well well well, so before the year of 2015, how many poor javascript
coders have tripped on this!? and how many poor written code has been
generated? and why the hell it sets such a trap to begin w/!?&lt;/p&gt;
&lt;p&gt;So the correct way is: &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="kd"&gt;var&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;x&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mf"&gt;10&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="c1"&gt;// Here x is 10&lt;/span&gt;
&lt;span class="p"&gt;{&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="kd"&gt;let&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;x&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mf"&gt;2&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;&amp;lt;==&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;using&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;the&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="sb"&gt;`let`&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="c1"&gt;// Here x is 2&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="c1"&gt;// Here x is 10&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;This doesn't seem very bad if you are enclosing a lot of them into
functions. But still, try this (really, this is a nasty bug!):&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="kd"&gt;var&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;i&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mf"&gt;5&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;for&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kd"&gt;var&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;i&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mf"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;i&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mf"&gt;10&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;i&lt;/span&gt;&lt;span class="o"&gt;++&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="c1"&gt;// some statements&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="c1"&gt;// Here i is 10&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Things like this, makes it very difficult for me to like Javascript.&lt;/p&gt;
&lt;h1&gt;hoisting&lt;/h1&gt;
&lt;p&gt;WTF. After being in the trade for 20+ years, this is the very first
time I heard something like this:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Hoisting is JavaScript's default behavior of moving declarations to
the top. &lt;a href="https://www.w3schools.com/js/js_hoisting.asp"&gt;ref&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;This seems quite fine since it's trying to be smart. But then, here
comes the rub: &lt;strong&gt;JavaScript only hoists declarations, not
initializations.&lt;/strong&gt; What that means? Two examples below:&lt;/p&gt;
&lt;p&gt;Example 1:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="kd"&gt;var&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;x&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mf"&gt;5&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="c1"&gt;// Initialize x&lt;/span&gt;
&lt;span class="kd"&gt;var&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;y&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mf"&gt;7&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="c1"&gt;// Initialize y&lt;/span&gt;

&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;x is &amp;quot;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;x&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;&amp;quot; and y is &amp;quot;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;y&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Example 2:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="kd"&gt;var&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;x&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mf"&gt;5&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="c1"&gt;// Initialize x&lt;/span&gt;

&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;x is &amp;quot;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;x&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;&amp;quot; and y is &amp;quot;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;y&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;

&lt;span class="kd"&gt;var&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;y&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mf"&gt;7&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="c1"&gt;// Initialize y&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Two logs generate different results:
- example 1: &lt;code&gt;x&lt;/code&gt; is 5 and &lt;code&gt;y&lt;/code&gt; is 7
- example 2: &lt;code&gt;x&lt;/code&gt; is 5 and &lt;code&gt;y&lt;/code&gt; is &lt;strong&gt;undefined&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;As a matter of fact, example 2 is equivalent to this:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="kd"&gt;var&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;x&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mf"&gt;5&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="c1"&gt;// Initialize x&lt;/span&gt;
&lt;span class="kd"&gt;var&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;y&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="c1"&gt;// declaration&lt;/span&gt;

&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;x is &amp;quot;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;x&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;&amp;quot; and y is &amp;quot;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;y&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;

&lt;span class="kd"&gt;var&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;y&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mf"&gt;7&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="c1"&gt;// Initialize y&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;I think the problem of this confusion roots in the decision that JS
allows the use of &lt;code&gt;y&lt;/code&gt; even before it has been declared (as seen in the
original example 2 code above)! In any other language, it will do one
of the two things:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;variable will be declared &lt;strong&gt;implicitly&lt;/strong&gt; and given a value of
   null/undefined, sth like that &amp;larr; this is &lt;strong&gt;always a bad idea&lt;/strong&gt;
   on the coder's part&lt;sup id="fnref:2"&gt;&lt;a class="footnote-ref" href="#fn:2"&gt;2&lt;/a&gt;&lt;/sup&gt;.&lt;/li&gt;
&lt;li&gt;compiler will just balk w/ an error &amp;larr; preferred.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Btw, the new &lt;code&gt;let&lt;/code&gt; and &lt;code&gt;const&lt;/code&gt; are not hoisted. Thus, if you just
declare a &lt;code&gt;let feng;&lt;/code&gt;, too bad, it stays where it is in its line
number.&lt;/p&gt;
&lt;h1&gt;True versus Truthy, &lt;code&gt;!!me&lt;/code&gt;&lt;/h1&gt;
&lt;p&gt;In Javascript, the evaluation of a variable to be True or False is a
tricky thing. There are two aspects you need to be aware:&lt;/p&gt;
&lt;h2&gt;strict vs. not-so-strict&lt;/h2&gt;
&lt;p&gt;The strict versions are &lt;code&gt;===&lt;/code&gt; or &lt;code&gt;!==&lt;/code&gt;, which will only equal if both
the &lt;strong&gt;value&lt;/strong&gt; and the &lt;strong&gt;type&lt;/strong&gt; are the same. Otherwise, say you use
&lt;code&gt;==&lt;/code&gt;, you are depending on Javascript's engine implementation, which,
well, is not necessarily what you want, because something is &lt;strong&gt;Truthy&lt;/strong&gt; is not
the same that it is &lt;strong&gt;True&lt;/strong&gt;.&lt;/p&gt;
&lt;h2&gt;truthy&lt;/h2&gt;
&lt;p&gt;What is truthy? That the variable is not evaluated to a Boolean (True
or False), but is considers &lt;em&gt;sort of true&lt;/em&gt; (or _sort_of_false):&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;falsey&lt;/strong&gt;:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Empty string: ""&lt;/li&gt;
&lt;li&gt;0&lt;/li&gt;
&lt;li&gt;null&lt;/li&gt;
&lt;li&gt;undefined&lt;/li&gt;
&lt;li&gt;NaN&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;truthy&lt;/strong&gt;:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Object: {}&lt;/li&gt;
&lt;li&gt;Array: []&lt;/li&gt;
&lt;li&gt;Not empty string: "anything"&lt;/li&gt;
&lt;li&gt;Number other than zero: 3.14&lt;/li&gt;
&lt;li&gt;Date: new Date();&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;So &lt;code&gt;if truthy&lt;/code&gt; will be a positive logic, but this counter-intuitive
when you would expect an empty &lt;code&gt;{}&lt;/code&gt; or &lt;code&gt;[]&lt;/code&gt; to be falsey. &lt;/p&gt;
&lt;p&gt;You can take one step further to convert whatever into a Boolean by
using double exclamation marks: &lt;code&gt;!!myVar&lt;/code&gt;, and you will get a &lt;code&gt;true or
false&lt;/code&gt;. No ambiguity, thus &lt;code&gt;if True&lt;/code&gt; or &lt;code&gt;if False&lt;/code&gt;.&lt;/p&gt;
&lt;div class="footnote"&gt;
&lt;hr&gt;
&lt;ol&gt;
&lt;li id="fn:1"&gt;
&lt;p&gt;But if you define the curly as a function, the &lt;code&gt;var&lt;/code&gt; inside will
have a &lt;em&gt;function scope&lt;/em&gt;, and it is only visible to the function
itself, not outside the function.&amp;#160;&lt;a class="footnote-backref" href="#fnref:1" title="Jump back to footnote 1 in the text"&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li id="fn:2"&gt;
&lt;p&gt;We do use this a lot in python in which we don't have to
   &lt;em&gt;declare&lt;/em&gt; a variable explicitly. But then, it is a solid decision
   in Python, and I don't recall ever need to be aware a &lt;em&gt;trap&lt;/em&gt; like
   what this hoisting idea is producing.&amp;#160;&lt;a class="footnote-backref" href="#fnref:2" title="Jump back to footnote 2 in the text"&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;</content><category term="dev"></category><category term="dev"></category></entry><entry><title>Software engineer</title><link href="https://fengxia41103.github.io/myblog/software%20engineer.html" rel="alternate"></link><published>2019-11-10T15:06:00-05:00</published><updated>2019-11-10T15:06:00-05:00</updated><author><name>Feng Xia</name></author><id>tag:fengxia41103.github.io,2019-11-10:/myblog/software engineer.html</id><summary type="html">&lt;figure class="col l6 m6 s12"&gt;
  &lt;img src="images/scissors.jpg"/&gt;
&lt;/figure&gt;

&lt;p&gt;Had a chat w/ a young engineer on the team about career, technology,
what to study/learn. Whiling writing my responses, many thoughts came
to me, so I'm pasting the email here since I believe they are very
relevant in these topics, and they are truthfully represent what I
think about them.&lt;/p&gt;
&lt;h1&gt;data structure, project Euler&lt;/h1&gt;
&lt;p&gt;I don't recommend you study data structure or OS on paper at
all. There are three data structures you need to know, and they cover
90% of all cases you will ever encounter in your career &amp;mdash; array,
link list, and hash table. In Python's term, they are list -&amp;gt; array,
no equivalent -&amp;gt; link list, and dictionary -&amp;gt; hash table.&lt;/p&gt;
&lt;p&gt;Pick a language you feel comfortable w/, and whatever the term they
use to describe these 3 data structures, read about them. There is no
better way to &lt;em&gt;study&lt;/em&gt; them other than finding a &lt;em&gt;real&lt;/em&gt; problem to
solve using these. I recommend you to try &lt;a href="https://projecteuler.net/"&gt;Project
Euler&lt;/a&gt;. They are pure mathematical
problems, and forces you to use these data structure &lt;em&gt;creatively&lt;/em&gt; for …&lt;/p&gt;</summary><content type="html">&lt;figure class="col l6 m6 s12"&gt;
  &lt;img src="images/scissors.jpg"/&gt;
&lt;/figure&gt;

&lt;p&gt;Had a chat w/ a young engineer on the team about career, technology,
what to study/learn. Whiling writing my responses, many thoughts came
to me, so I'm pasting the email here since I believe they are very
relevant in these topics, and they are truthfully represent what I
think about them.&lt;/p&gt;
&lt;h1&gt;data structure, project Euler&lt;/h1&gt;
&lt;p&gt;I don't recommend you study data structure or OS on paper at
all. There are three data structures you need to know, and they cover
90% of all cases you will ever encounter in your career &amp;mdash; array,
link list, and hash table. In Python's term, they are list -&amp;gt; array,
no equivalent -&amp;gt; link list, and dictionary -&amp;gt; hash table.&lt;/p&gt;
&lt;p&gt;Pick a language you feel comfortable w/, and whatever the term they
use to describe these 3 data structures, read about them. There is no
better way to &lt;em&gt;study&lt;/em&gt; them other than finding a &lt;em&gt;real&lt;/em&gt; problem to
solve using these. I recommend you to try &lt;a href="https://projecteuler.net/"&gt;Project
Euler&lt;/a&gt;. They are pure mathematical
problems, and forces you to use these data structure &lt;em&gt;creatively&lt;/em&gt; for
your computation because they only have two criterias:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;get the right answer&lt;/li&gt;
&lt;li&gt;compute the answer in &amp;lt; 1 minute&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;You will be surprised (and impressed) how to solve these problems. For
example, finding the 1 million-th prime number... Once you get a few
problems solved (starting from problem 1), I can assure you you will
start to see things in arrays and hash tables.&lt;/p&gt;
&lt;h2&gt;a word on &lt;code&gt;link list&lt;/code&gt;&lt;/h2&gt;
&lt;p&gt;You don't see link list much in today's SW job, and you will be
wondering why I recommend it. If you ever do embedded system, or OS
for that matter, anything low level, you see link list
EVERYWHERE. It's the concept that matter -- how data can be chained
(nothing fancy, just a pointer to the NEXT, and another to PREV).&lt;/p&gt;
&lt;p&gt;This same concept, however, will map into anything needs &lt;em&gt;scaling&lt;/em&gt;
up/down &amp;mdash; pagination on UI, a task queue, a sequential
workflow. So without reading their code, you can already grasp the
concept how they could have implemented it.&lt;/p&gt;
&lt;p&gt;Now, the reason I recommend this is, is because of the data model
relationships (see below section "relationships").&lt;/p&gt;
&lt;h1&gt;data modeling, philosophy, life&lt;/h1&gt;
&lt;p&gt;What you have said in email, actually, is not data structure, but data
modeling. Data structure is too low level; very few people need to
deal w/ that kind of idea. If you want to write your own SQL database,
yes, you need data structure; if you want to use Postgresql, or
Java/Python/Ruby to solve a biz problem, you need data modeling.&lt;/p&gt;
&lt;p&gt;There is no golden rule for data modeling, just like there isn't a
&lt;em&gt;good/bad&lt;/em&gt; architecture &amp;mdash; they are just subjective opinions. The
quality of such subjective opinion, however, reflects the person's
philosophy, which then came from his/her education, life experience,
whether was in love or dumped, missed breakfast that morning or
not.. and so on. I'm not joking; data modeling is the &lt;strong&gt;arts&lt;/strong&gt; side of
software engineering, you can't learn it, you have to practice it.&lt;/p&gt;
&lt;p&gt;How to practice it? Implement an idea as web based application.&lt;/p&gt;
&lt;p&gt;Any idea, any web framework, doesn't matter, because the first thing
you will be forced to do is data modeling.&lt;/p&gt;
&lt;h2&gt;two models&lt;/h2&gt;
&lt;p&gt;There are only two things in data modeling &amp;mdash; model, and their
relationship. And in models, there are two types in my opinion &amp;mdash;&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;Sth maps to something real (physical product, for example, a model
   called &lt;code&gt;LenovoSwitch&lt;/code&gt;, or conceptual,for example, &lt;code&gt;vlan&lt;/code&gt;).&lt;/p&gt;
&lt;p&gt;For these, attributes are already defined &amp;mdash; you need to study
them, learn, and use them. For example, you can't invent an
attribute called "color" for model "Vlan", but there &lt;strong&gt;must&lt;/strong&gt; be a
field called "id" because each vlan must have an ID!&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Sth you invented because you say so, for example, in Netbox there is
   model "site", well, who says my definition of "site" is correct? and
   who says it needs a &lt;code&gt;name&lt;/code&gt;? 长安街上有很多sites have no name, but a
   number! How about that!?&lt;/p&gt;
&lt;p&gt;You see, this is where your philosophy stuffy comes in &amp;mdash;
designing data model is completely your world view against
others. The problem/key is open-mindness &amp;mdash; if you design the
&lt;code&gt;site&lt;/code&gt; to be a string, then you need to aware that when you save
"number" to it, numbers would have to be converted, which makes it
difficult to validate, say, some naming convention. Alternatively,
you can design two attributes -- &lt;code&gt;name&lt;/code&gt;, and &lt;code&gt;id&lt;/code&gt;.... see, if you
are a good thinker, you will perceive these possibilities in
design, and will have to make a lot of choices. But this is what I
call "conscious decisions" &amp;mdash; this is completly different from
those 我从来没想到过的scenario.&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;So for a good data modeler, deep thinking is key. However, you will be
very unhappy, because, after all, no philosopher was a happy
person. You know the phrase that "devils are in the details". Well,
what kind of person will be happy dealing w/ devils!?&lt;/p&gt;
&lt;h2&gt;three relationships&lt;/h2&gt;
&lt;p&gt;Easy, 3 types only:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;1-&amp;gt;N: foreign key&lt;/li&gt;
&lt;li&gt;1-1: strong bind, eg. you can only have one biological father.&lt;/li&gt;
&lt;li&gt;N-&amp;gt;N: matrix&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Any model you designed will have one of these three relationships, and
the choice you make &lt;strong&gt;determines&lt;/strong&gt; the quality of your design. Period.&lt;/p&gt;
&lt;p&gt;In Netbox, if I design Site and Rack to be "1-1", I'm screwed. But
whenever you feel confident, or want to restrict the possibility, you
should 1:1 as much as possible. The more of this you have, the narrow
the scope is, the better quality your code will be, because boundaries
are clear.&lt;/p&gt;
&lt;p&gt;"N-N" is a cheap one, catch all. If you don't know what relationship
it should have, give it N-N; but this is lazy work by the
designer. It's a strong signal that you don't understand the problem
well yet.&lt;/p&gt;
&lt;p&gt;"1-N" is 90% of all cases, because I believe that is how human brain
works &amp;mdash; we look at things in a tree mode. You must have seen
Chinese biz love to show off their "deep thinking" in mind map, or
terms like 分层，分等，分级，金字塔结构... what they are really saying
is, 1-N, but of course, they don't understand this part.&lt;/p&gt;
&lt;p&gt;Tree can grow in size quickly, and what they really are is, yes, link
list! Therefore, link list is the implementation of tree.&lt;/p&gt;
&lt;p&gt;In your model, once you formulate these relationships, the limitation
becomes very obvious &amp;mdash; you will never agree to a sale whose
customer wants N sites in 1 rack, because your model doesn't allow
this!  Therefore, it amazes me many SW engr allows the boss to ask for
anything &amp;mdash; it's not that I disagree w/ him being the boss, it's
that I'm defending my world view &amp;mdash; How can I just nodd w/o a
fight?&lt;/p&gt;
&lt;p&gt;And because these relationships define the limitations, it becomes an
art (but also the fun). Therefore, the experience, the deep thinking,
the books you read, will dictate your world view, and that will
reflect in your choice in design. There isn't a single book you must
read; you should read any book you want, but think, think, think.&lt;/p&gt;
&lt;p&gt;The more &lt;em&gt;biased&lt;/em&gt; you are, meaning the stronger an opinion you will
have on the issue, the better, because you won't have your own opinion
unless you have given it a lot of thoughts, will you!? Writing essay
of life, of news, of a movie, or a music, is actually a good way to
learn this, not writing code. I started writing essays in MBA. The
beginning was painful; but it became a habit, and I highly recommend
it.&lt;/p&gt;
&lt;h1&gt;what to learn&lt;/h1&gt;
&lt;p&gt;Don't be fooled by buzz words &amp;mdash; AI, big data, whatever. These
things come and go. Business needs to talk about them so they appear
to be relevant. But don't let them define you.&lt;/p&gt;
&lt;p&gt;Javascript is becoming more and more powerful. Learn Angular or React
to write 1 or 2 hobby applications. I think JS has a strong
future/job.&lt;/p&gt;
&lt;p&gt;Don't learn Ruby. It has passed its prime. I don't hear it much
anymore.&lt;/p&gt;
&lt;p&gt;Python, C#, .net, Java, Scala, R... they are all the same, popular
right now, but they are just tools, and tools don't solve problem,
brain solves problems. They are all fully capable, and overkill for
any biz problem you will ever be hired for. The only time I ran into
limitation of Python was doing a Euler problem, that Python only
allows 27 decimal points(!)... so yes, if you compute size of the
Galaxy, the choice of language matters; otherwise, don't bother.&lt;/p&gt;
&lt;p&gt;Pick one you enjoy writing, that fits your way of
thinking/typing/sleeping/whatever, and use it often. I never learned
Java, and didn't catch Go, because I looked at them, and didn't like
their style at all. But I fell in love w/ Python in 1998, because it
uses TAB for code, and makes the code look, nice!&lt;/p&gt;
&lt;p&gt;Think this way. If now there is a war going on in Shanghai, will you
feel better w/ a bow and arrow which you can shoot in a blink of an
eye, or a 东风 missile that takes probably you and another 12 ppl to
operate and 6 hours to launch? I get it that the 东风 will kill
thousands in one hit; but if you are walking on the street, that power
doesn't help me at all if you just ran into someone hostile.&lt;/p&gt;
&lt;h1&gt;career&lt;/h1&gt;
&lt;p&gt;Last word on career. SW is an unhappy one. The better you become, the
unhappier you will be.&lt;/p&gt;
&lt;p&gt;Biz ppl chase buzz words, thus they will require you to write in
&lt;xyz&gt;.  (Well, does anyone ever care what language Google search
engine was first written in?) Therefore, your "skills" become
&lt;em&gt;obsolete&lt;/em&gt; in a matter of 2 years. This is BS; but I don't know how to
change this. Thus, you feel pushed to learn new language, new lib, new
this and that, solving the same old problem, differently perhaps. But
the real issue is not that previous solution didn't work; nobody ever
bothered to investigate the core of the issue at the first place! I
can't tell you how many times in China I was asked to make a SW that
allows them manipulating data/number (of course, 中国特色，业务需要),
while expecting the number on the report to actually match! &amp;larr;
this, again, is a philosophical problem, because they are asking 当了
婊子立牌坊.&lt;/p&gt;
&lt;p&gt;However, the world seems populated w/ such requests, such people. The
do-ers will end up being at the bottom of the hierarchy, having the
best knowledge and strongest skills, and lowest rewards. So, what to
do?&lt;/p&gt;
&lt;p&gt;Dont rush to 创业， unless u have a rich Dad. But even then, don't,
because that's not your money, you didn't earn it, thus shouldn't
experiment w/ others' money.&lt;/p&gt;
&lt;p&gt;But do create. Create as often as the thought comes to you, whatever
it is, using your skills to create &amp;mdash; a website, a blog, a mobile
app, a POC of some library, a script that makes our daily work easier
&amp;mdash; start to work, smart, not harder. When I first learned Python,
I was tired of looking over 10+M of log files searching for an error
message. Script can do it in 1 second; and it took 10 days to write
one, maybe. But writing the script is fun, learning exp, and you
become stronger, and 10+M or 100+M logs make no difference anymore!
That's the way to work. So again, too many ppl working HARD because
they don't work smart. 磨刀不误砍柴功, everybody knows the phrase,
very few practices it.&lt;/p&gt;
&lt;p&gt;SW is powerful tool, and powerful concept. By using it, you will have
a sharp observation of the world, a strong opinion of a problem, a
know-how to actually move forward (how many entrepreneurs are just,
talking!?). Remember why we go to school and pursue education? Because
the only thing that belong to you, is your knowledge; everything else
you have, today, are, well, removable. Your know-how, however, is
yours.&lt;/p&gt;
&lt;p&gt;It is sad that engineers are viewed as commodities. But don't become
one. If you don't believe anyone who knows alphabets can just write 红
楼梦, then knowing &lt;python/js/...&gt; has nothing to do being a good
programmer/engineer. Engineering is hard work, but solid, because at
the end of all the BS, gears must match exactly, the "if x==y" must be
true or not, no 3rd option!&lt;/p&gt;
&lt;p&gt;I like to end w/ the example of the Alpha Go. Go was viewed as Zen,
and no one bothered to really figure out its engineering/mathematical
patterns till Google come along. Once it's codified, human can only
cry &amp;mdash; it has never been Zen, it was viewed as Zen only because
figuring it out is hard. Engineers are those ppl who have a desire to
see how it works; others are just satisfied w/ that it works, but
becomes victims easily because, well, they have &lt;strong&gt;no
reference&lt;/strong&gt;. Isn't it better to fail w/ knowing why, rather than fail
w/o?&lt;/p&gt;</content><category term="dev"></category><category term="dev"></category></entry><entry><title>Jira</title><link href="https://fengxia41103.github.io/myblog/jira.html" rel="alternate"></link><published>2019-10-23T13:00:00-04:00</published><updated>2019-12-18T08:31:00-05:00</updated><author><name>Feng Xia</name></author><id>tag:fengxia41103.github.io,2019-10-23:/myblog/jira.html</id><summary type="html">&lt;figure class="col s12"&gt;
  &lt;img src="images/jira.gif"/&gt;
&lt;/figure&gt;

&lt;p&gt;Jira is, tough. I have been searching a solution to make my Jira life
easy. The problems I want to fix are:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Loading browser is too slow &amp;larr; how many times I just want to
   get a view of the comment or description so to refresh my memory.&lt;/li&gt;
&lt;li&gt;Navigating from one ticket to another is to open a new tab, but
   that just clutter my browser. Very soon I don't remember which tab
   is for which ticket, so ended up openning the same jira over and
   over.&lt;/li&gt;
&lt;li&gt;To switch its status is again, to load page, click some kind of
   dropdown, then click to select &amp;rarr; 3 clicks. No, I already know
   what status I want it to be, so I want to simplify this.&lt;/li&gt;
&lt;li&gt;#3 also applies to reassign a ticket to someone &amp;mdash; there are
   usually only a handful ppl you deal w/ on a daily basis during
   development. Instead of waiting for the spinning wheel to come up
   the name, just memorize the user's name, and assign.&lt;/li&gt;
&lt;li&gt;This is actually the very first reason got …&lt;/li&gt;&lt;/ol&gt;</summary><content type="html">&lt;figure class="col s12"&gt;
  &lt;img src="images/jira.gif"/&gt;
&lt;/figure&gt;

&lt;p&gt;Jira is, tough. I have been searching a solution to make my Jira life
easy. The problems I want to fix are:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Loading browser is too slow &amp;larr; how many times I just want to
   get a view of the comment or description so to refresh my memory.&lt;/li&gt;
&lt;li&gt;Navigating from one ticket to another is to open a new tab, but
   that just clutter my browser. Very soon I don't remember which tab
   is for which ticket, so ended up openning the same jira over and
   over.&lt;/li&gt;
&lt;li&gt;To switch its status is again, to load page, click some kind of
   dropdown, then click to select &amp;rarr; 3 clicks. No, I already know
   what status I want it to be, so I want to simplify this.&lt;/li&gt;
&lt;li&gt;#3 also applies to reassign a ticket to someone &amp;mdash; there are
   usually only a handful ppl you deal w/ on a daily basis during
   development. Instead of waiting for the spinning wheel to come up
   the name, just memorize the user's name, and assign.&lt;/li&gt;
&lt;li&gt;This is actually the very first reason got me to look into an
   alternative solution than using a browser &amp;mdash; &lt;strong&gt;create ticket&lt;/strong&gt;
   is very tedious! I dislike filling that form very much. Again,
   usually I already know the value I want to use, so a cheat was to
   &lt;em&gt;clone&lt;/em&gt; an existing one. But then, finding an adequate existing one
   is time consuming also. So again, to simplify this is a big win.&lt;/li&gt;
&lt;li&gt;Filters. Too many times there are this view, that view &amp;mdash; I
   want to see all my stories, or all my bugs, or just high priority
   bugs, or just the ones created today, or all bugs associated w/ the
   theme I'm working on because I need to coordinate developers on the
   work.... the list goes on and on, and I know, there is the filter,
   which is nothing but a web version of the JQL query. So why the
   hassle of creating a whole bunch of filters, then the browser takes
   a long time to load, and that filter gives you a &lt;strong&gt;long list of
   fields&lt;/strong&gt; you can display! But hell, I only care a few fields which
   the team uses, so even to hunt down the fields that is useful to me
   is time consuming. I want to use the JQL and a list of fields that
   has valuable info, no more, no less.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;So the journey goes w/ a weekend try starting w/ &lt;a href="https://github.com/ahungry/org-jira"&gt;org-jira&lt;/a&gt;, which
looked very promising! I thought it would also be a good way to learn
org-mode. But hell, the org-mode itself is really slow! Just a small
org file of my bugs make the entire emacs choking to death. WTF!&lt;/p&gt;
&lt;p&gt;Long story short. Here is the &lt;a href="https://github.com/go-jira/jira"&gt;go-jira&lt;/a&gt;, incredibly fast, and
useful! It's a command line (&lt;a href="https://fengxia41103.github.io/myblog/downloads/jira/jira"&gt;download here&lt;/a&gt;), just copy it to
&lt;code&gt;/usr/local/bin&lt;/code&gt; and type &lt;code&gt;jira help&lt;/code&gt;:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;╰─➤&lt;span class="w"&gt;  &lt;/span&gt;jira&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nb"&gt;help&lt;/span&gt;
usage:&lt;span class="w"&gt; &lt;/span&gt;jira&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;&amp;lt;flags&amp;gt;&lt;span class="o"&gt;]&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&amp;lt;command&amp;gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;&amp;lt;args&amp;gt;&lt;span class="w"&gt; &lt;/span&gt;...&lt;span class="o"&gt;]&lt;/span&gt;

Jira&lt;span class="w"&gt; &lt;/span&gt;Command&lt;span class="w"&gt; &lt;/span&gt;Line&lt;span class="w"&gt; &lt;/span&gt;Interface

Global&lt;span class="w"&gt; &lt;/span&gt;flags:
&lt;span class="w"&gt;      &lt;/span&gt;--help&lt;span class="w"&gt;                   &lt;/span&gt;Show&lt;span class="w"&gt; &lt;/span&gt;context-sensitive&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nb"&gt;help&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;also&lt;span class="w"&gt; &lt;/span&gt;try&lt;span class="w"&gt; &lt;/span&gt;--help-long&lt;span class="w"&gt; &lt;/span&gt;and&lt;span class="w"&gt; &lt;/span&gt;--help-man&lt;span class="o"&gt;)&lt;/span&gt;.
&lt;span class="w"&gt;  &lt;/span&gt;-v,&lt;span class="w"&gt; &lt;/span&gt;--verbose&lt;span class="w"&gt; &lt;/span&gt;...&lt;span class="w"&gt;            &lt;/span&gt;Increase&lt;span class="w"&gt; &lt;/span&gt;verbosity&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;for&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;debugging
&lt;span class="w"&gt;  &lt;/span&gt;-e,&lt;span class="w"&gt; &lt;/span&gt;--endpoint&lt;span class="o"&gt;=&lt;/span&gt;ENDPOINT&lt;span class="w"&gt;      &lt;/span&gt;Base&lt;span class="w"&gt; &lt;/span&gt;URI&lt;span class="w"&gt; &lt;/span&gt;to&lt;span class="w"&gt; &lt;/span&gt;use&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;for&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;Jira
&lt;span class="w"&gt;  &lt;/span&gt;-k,&lt;span class="w"&gt; &lt;/span&gt;--insecure&lt;span class="w"&gt;               &lt;/span&gt;Disable&lt;span class="w"&gt; &lt;/span&gt;TLS&lt;span class="w"&gt; &lt;/span&gt;certificate&lt;span class="w"&gt; &lt;/span&gt;verification
&lt;span class="w"&gt;  &lt;/span&gt;-Q,&lt;span class="w"&gt; &lt;/span&gt;--quiet&lt;span class="w"&gt;                  &lt;/span&gt;Suppress&lt;span class="w"&gt; &lt;/span&gt;output&lt;span class="w"&gt; &lt;/span&gt;to&lt;span class="w"&gt; &lt;/span&gt;console
&lt;span class="w"&gt;      &lt;/span&gt;--unixproxy&lt;span class="o"&gt;=&lt;/span&gt;UNIXPROXY&lt;span class="w"&gt;    &lt;/span&gt;Path&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;for&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;a&lt;span class="w"&gt; &lt;/span&gt;unix-socket&lt;span class="w"&gt; &lt;/span&gt;proxy
&lt;span class="w"&gt;      &lt;/span&gt;--socksproxy&lt;span class="o"&gt;=&lt;/span&gt;SOCKSPROXY&lt;span class="w"&gt;  &lt;/span&gt;Address&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;for&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;a&lt;span class="w"&gt; &lt;/span&gt;socks&lt;span class="w"&gt; &lt;/span&gt;proxy
&lt;span class="w"&gt;  &lt;/span&gt;-u,&lt;span class="w"&gt; &lt;/span&gt;--user&lt;span class="o"&gt;=&lt;/span&gt;USER&lt;span class="w"&gt;              &lt;/span&gt;user&lt;span class="w"&gt; &lt;/span&gt;name&lt;span class="w"&gt; &lt;/span&gt;used&lt;span class="w"&gt; &lt;/span&gt;within&lt;span class="w"&gt; &lt;/span&gt;the&lt;span class="w"&gt; &lt;/span&gt;Jira&lt;span class="w"&gt; &lt;/span&gt;service
&lt;span class="w"&gt;      &lt;/span&gt;--login&lt;span class="o"&gt;=&lt;/span&gt;LOGIN&lt;span class="w"&gt;            &lt;/span&gt;login&lt;span class="w"&gt; &lt;/span&gt;name&lt;span class="w"&gt; &lt;/span&gt;that&lt;span class="w"&gt; &lt;/span&gt;corresponds&lt;span class="w"&gt; &lt;/span&gt;to&lt;span class="w"&gt; &lt;/span&gt;the&lt;span class="w"&gt; &lt;/span&gt;user&lt;span class="w"&gt; &lt;/span&gt;used&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;for&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;authentication

Commands:
&lt;span class="w"&gt;  &lt;/span&gt;help:&lt;span class="w"&gt;                &lt;/span&gt;Show&lt;span class="w"&gt; &lt;/span&gt;help.
&lt;span class="w"&gt;  &lt;/span&gt;version:&lt;span class="w"&gt;             &lt;/span&gt;Prints&lt;span class="w"&gt; &lt;/span&gt;version
&lt;span class="w"&gt;  &lt;/span&gt;acknowledge:&lt;span class="w"&gt;         &lt;/span&gt;Transition&lt;span class="w"&gt; &lt;/span&gt;issue&lt;span class="w"&gt; &lt;/span&gt;to&lt;span class="w"&gt; &lt;/span&gt;acknowledge&lt;span class="w"&gt; &lt;/span&gt;state
&lt;span class="w"&gt;  &lt;/span&gt;assign:&lt;span class="w"&gt;              &lt;/span&gt;Assign&lt;span class="w"&gt; &lt;/span&gt;user&lt;span class="w"&gt; &lt;/span&gt;to&lt;span class="w"&gt; &lt;/span&gt;issue
&lt;span class="w"&gt;  &lt;/span&gt;attach&lt;span class="w"&gt; &lt;/span&gt;create:&lt;span class="w"&gt;       &lt;/span&gt;Attach&lt;span class="w"&gt; &lt;/span&gt;file&lt;span class="w"&gt; &lt;/span&gt;to&lt;span class="w"&gt; &lt;/span&gt;issue
&lt;span class="w"&gt;  &lt;/span&gt;attach&lt;span class="w"&gt; &lt;/span&gt;get:&lt;span class="w"&gt;          &lt;/span&gt;Fetch&lt;span class="w"&gt; &lt;/span&gt;attachment
&lt;span class="w"&gt;  &lt;/span&gt;attach&lt;span class="w"&gt; &lt;/span&gt;list:&lt;span class="w"&gt;         &lt;/span&gt;Prints&lt;span class="w"&gt; &lt;/span&gt;attachment&lt;span class="w"&gt; &lt;/span&gt;details&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;for&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;issue
&lt;span class="w"&gt;  &lt;/span&gt;attach&lt;span class="w"&gt; &lt;/span&gt;remove:&lt;span class="w"&gt;       &lt;/span&gt;Delete&lt;span class="w"&gt; &lt;/span&gt;attachment
&lt;span class="w"&gt;  &lt;/span&gt;backlog:&lt;span class="w"&gt;             &lt;/span&gt;Transition&lt;span class="w"&gt; &lt;/span&gt;issue&lt;span class="w"&gt; &lt;/span&gt;to&lt;span class="w"&gt; &lt;/span&gt;Backlog&lt;span class="w"&gt; &lt;/span&gt;state
&lt;span class="w"&gt;  &lt;/span&gt;block:&lt;span class="w"&gt;               &lt;/span&gt;Mark&lt;span class="w"&gt; &lt;/span&gt;issues&lt;span class="w"&gt; &lt;/span&gt;as&lt;span class="w"&gt; &lt;/span&gt;blocker
&lt;span class="w"&gt;  &lt;/span&gt;browse:&lt;span class="w"&gt;              &lt;/span&gt;Open&lt;span class="w"&gt; &lt;/span&gt;issue&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;in&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;browser
&lt;span class="w"&gt;  &lt;/span&gt;close:&lt;span class="w"&gt;               &lt;/span&gt;Transition&lt;span class="w"&gt; &lt;/span&gt;issue&lt;span class="w"&gt; &lt;/span&gt;to&lt;span class="w"&gt; &lt;/span&gt;close&lt;span class="w"&gt; &lt;/span&gt;state
&lt;span class="w"&gt;  &lt;/span&gt;comment:&lt;span class="w"&gt;             &lt;/span&gt;Add&lt;span class="w"&gt; &lt;/span&gt;comment&lt;span class="w"&gt; &lt;/span&gt;to&lt;span class="w"&gt; &lt;/span&gt;issue
&lt;span class="w"&gt;  &lt;/span&gt;component&lt;span class="w"&gt; &lt;/span&gt;add:&lt;span class="w"&gt;       &lt;/span&gt;Add&lt;span class="w"&gt; &lt;/span&gt;component
&lt;span class="w"&gt;  &lt;/span&gt;components:&lt;span class="w"&gt;          &lt;/span&gt;Show&lt;span class="w"&gt; &lt;/span&gt;components&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;for&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;a&lt;span class="w"&gt; &lt;/span&gt;project
&lt;span class="w"&gt;  &lt;/span&gt;create:&lt;span class="w"&gt;              &lt;/span&gt;Create&lt;span class="w"&gt; &lt;/span&gt;issue
&lt;span class="w"&gt;  &lt;/span&gt;createmeta:&lt;span class="w"&gt;          &lt;/span&gt;View&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;create&amp;#39;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;metadata
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="k"&gt;done&lt;/span&gt;:&lt;span class="w"&gt;                &lt;/span&gt;Transition&lt;span class="w"&gt; &lt;/span&gt;issue&lt;span class="w"&gt; &lt;/span&gt;to&lt;span class="w"&gt; &lt;/span&gt;Done&lt;span class="w"&gt; &lt;/span&gt;state
&lt;span class="w"&gt;  &lt;/span&gt;dup:&lt;span class="w"&gt;                 &lt;/span&gt;Mark&lt;span class="w"&gt; &lt;/span&gt;issues&lt;span class="w"&gt; &lt;/span&gt;as&lt;span class="w"&gt; &lt;/span&gt;duplicate
&lt;span class="w"&gt;  &lt;/span&gt;edit:&lt;span class="w"&gt;                &lt;/span&gt;Edit&lt;span class="w"&gt; &lt;/span&gt;issue&lt;span class="w"&gt; &lt;/span&gt;details
&lt;span class="w"&gt;  &lt;/span&gt;editmeta:&lt;span class="w"&gt;            &lt;/span&gt;View&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;edit&amp;#39;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;metadata
&lt;span class="w"&gt;  &lt;/span&gt;epic&lt;span class="w"&gt; &lt;/span&gt;add:&lt;span class="w"&gt;            &lt;/span&gt;Add&lt;span class="w"&gt; &lt;/span&gt;issues&lt;span class="w"&gt; &lt;/span&gt;to&lt;span class="w"&gt; &lt;/span&gt;Epic
&lt;span class="w"&gt;  &lt;/span&gt;epic&lt;span class="w"&gt; &lt;/span&gt;create:&lt;span class="w"&gt;         &lt;/span&gt;Create&lt;span class="w"&gt; &lt;/span&gt;Epic
&lt;span class="w"&gt;  &lt;/span&gt;epic&lt;span class="w"&gt; &lt;/span&gt;list:&lt;span class="w"&gt;           &lt;/span&gt;Prints&lt;span class="w"&gt; &lt;/span&gt;list&lt;span class="w"&gt; &lt;/span&gt;of&lt;span class="w"&gt; &lt;/span&gt;issues&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;for&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;an&lt;span class="w"&gt; &lt;/span&gt;epic&lt;span class="w"&gt; &lt;/span&gt;with&lt;span class="w"&gt; &lt;/span&gt;optional&lt;span class="w"&gt; &lt;/span&gt;search&lt;span class="w"&gt; &lt;/span&gt;criteria
&lt;span class="w"&gt;  &lt;/span&gt;epic&lt;span class="w"&gt; &lt;/span&gt;remove:&lt;span class="w"&gt;         &lt;/span&gt;Remove&lt;span class="w"&gt; &lt;/span&gt;issues&lt;span class="w"&gt; &lt;/span&gt;from&lt;span class="w"&gt; &lt;/span&gt;Epic
&lt;span class="w"&gt;  &lt;/span&gt;export-templates:&lt;span class="w"&gt;    &lt;/span&gt;Export&lt;span class="w"&gt; &lt;/span&gt;templates&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;for&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;customizations
&lt;span class="w"&gt;  &lt;/span&gt;fields:&lt;span class="w"&gt;              &lt;/span&gt;Prints&lt;span class="w"&gt; &lt;/span&gt;all&lt;span class="w"&gt; &lt;/span&gt;fields,&lt;span class="w"&gt; &lt;/span&gt;both&lt;span class="w"&gt; &lt;/span&gt;System&lt;span class="w"&gt; &lt;/span&gt;and&lt;span class="w"&gt; &lt;/span&gt;Custom
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="k"&gt;in&lt;/span&gt;-progress:&lt;span class="w"&gt;         &lt;/span&gt;Transition&lt;span class="w"&gt; &lt;/span&gt;issue&lt;span class="w"&gt; &lt;/span&gt;to&lt;span class="w"&gt; &lt;/span&gt;Progress&lt;span class="w"&gt; &lt;/span&gt;state
&lt;span class="w"&gt;  &lt;/span&gt;issuelink:&lt;span class="w"&gt;           &lt;/span&gt;Link&lt;span class="w"&gt; &lt;/span&gt;two&lt;span class="w"&gt; &lt;/span&gt;issues
&lt;span class="w"&gt;  &lt;/span&gt;issuelinktypes:&lt;span class="w"&gt;      &lt;/span&gt;Show&lt;span class="w"&gt; &lt;/span&gt;the&lt;span class="w"&gt; &lt;/span&gt;issue&lt;span class="w"&gt; &lt;/span&gt;link&lt;span class="w"&gt; &lt;/span&gt;types
&lt;span class="w"&gt;  &lt;/span&gt;issuetypes:&lt;span class="w"&gt;          &lt;/span&gt;Show&lt;span class="w"&gt; &lt;/span&gt;issue&lt;span class="w"&gt; &lt;/span&gt;types&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;for&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;a&lt;span class="w"&gt; &lt;/span&gt;project
&lt;span class="w"&gt;  &lt;/span&gt;labels&lt;span class="w"&gt; &lt;/span&gt;add:&lt;span class="w"&gt;          &lt;/span&gt;Add&lt;span class="w"&gt; &lt;/span&gt;labels&lt;span class="w"&gt; &lt;/span&gt;to&lt;span class="w"&gt; &lt;/span&gt;an&lt;span class="w"&gt; &lt;/span&gt;issue
&lt;span class="w"&gt;  &lt;/span&gt;labels&lt;span class="w"&gt; &lt;/span&gt;remove:&lt;span class="w"&gt;       &lt;/span&gt;Remove&lt;span class="w"&gt; &lt;/span&gt;labels&lt;span class="w"&gt; &lt;/span&gt;from&lt;span class="w"&gt; &lt;/span&gt;an&lt;span class="w"&gt; &lt;/span&gt;issue
&lt;span class="w"&gt;  &lt;/span&gt;labels&lt;span class="w"&gt; &lt;/span&gt;set:&lt;span class="w"&gt;          &lt;/span&gt;Set&lt;span class="w"&gt; &lt;/span&gt;labels&lt;span class="w"&gt; &lt;/span&gt;on&lt;span class="w"&gt; &lt;/span&gt;an&lt;span class="w"&gt; &lt;/span&gt;issue
&lt;span class="w"&gt;  &lt;/span&gt;list:&lt;span class="w"&gt;                &lt;/span&gt;Prints&lt;span class="w"&gt; &lt;/span&gt;list&lt;span class="w"&gt; &lt;/span&gt;of&lt;span class="w"&gt; &lt;/span&gt;issues&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;for&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;given&lt;span class="w"&gt; &lt;/span&gt;search&lt;span class="w"&gt; &lt;/span&gt;criteria
&lt;span class="w"&gt;  &lt;/span&gt;login:&lt;span class="w"&gt;               &lt;/span&gt;Attempt&lt;span class="w"&gt; &lt;/span&gt;to&lt;span class="w"&gt; &lt;/span&gt;login&lt;span class="w"&gt; &lt;/span&gt;into&lt;span class="w"&gt; &lt;/span&gt;jira&lt;span class="w"&gt; &lt;/span&gt;server
&lt;span class="w"&gt;  &lt;/span&gt;logout:&lt;span class="w"&gt;              &lt;/span&gt;Deactivate&lt;span class="w"&gt; &lt;/span&gt;session&lt;span class="w"&gt; &lt;/span&gt;with&lt;span class="w"&gt; &lt;/span&gt;Jira&lt;span class="w"&gt; &lt;/span&gt;server
&lt;span class="w"&gt;  &lt;/span&gt;rank:&lt;span class="w"&gt;                &lt;/span&gt;Mark&lt;span class="w"&gt; &lt;/span&gt;issues&lt;span class="w"&gt; &lt;/span&gt;as&lt;span class="w"&gt; &lt;/span&gt;blocker
&lt;span class="w"&gt;  &lt;/span&gt;reopen:&lt;span class="w"&gt;              &lt;/span&gt;Transition&lt;span class="w"&gt; &lt;/span&gt;issue&lt;span class="w"&gt; &lt;/span&gt;to&lt;span class="w"&gt; &lt;/span&gt;reopen&lt;span class="w"&gt; &lt;/span&gt;state
&lt;span class="w"&gt;  &lt;/span&gt;request:&lt;span class="w"&gt;             &lt;/span&gt;Open&lt;span class="w"&gt; &lt;/span&gt;issue&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;in&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;requestr
&lt;span class="w"&gt;  &lt;/span&gt;resolve:&lt;span class="w"&gt;             &lt;/span&gt;Transition&lt;span class="w"&gt; &lt;/span&gt;issue&lt;span class="w"&gt; &lt;/span&gt;to&lt;span class="w"&gt; &lt;/span&gt;resolve&lt;span class="w"&gt; &lt;/span&gt;state
&lt;span class="w"&gt;  &lt;/span&gt;start:&lt;span class="w"&gt;               &lt;/span&gt;Transition&lt;span class="w"&gt; &lt;/span&gt;issue&lt;span class="w"&gt; &lt;/span&gt;to&lt;span class="w"&gt; &lt;/span&gt;start&lt;span class="w"&gt; &lt;/span&gt;state
&lt;span class="w"&gt;  &lt;/span&gt;stop:&lt;span class="w"&gt;                &lt;/span&gt;Transition&lt;span class="w"&gt; &lt;/span&gt;issue&lt;span class="w"&gt; &lt;/span&gt;to&lt;span class="w"&gt; &lt;/span&gt;stop&lt;span class="w"&gt; &lt;/span&gt;state
&lt;span class="w"&gt;  &lt;/span&gt;subtask:&lt;span class="w"&gt;             &lt;/span&gt;Subtask&lt;span class="w"&gt; &lt;/span&gt;issue
&lt;span class="w"&gt;  &lt;/span&gt;take:&lt;span class="w"&gt;                &lt;/span&gt;Assign&lt;span class="w"&gt; &lt;/span&gt;issue&lt;span class="w"&gt; &lt;/span&gt;to&lt;span class="w"&gt; &lt;/span&gt;yourself
&lt;span class="w"&gt;  &lt;/span&gt;todo:&lt;span class="w"&gt;                &lt;/span&gt;Transition&lt;span class="w"&gt; &lt;/span&gt;issue&lt;span class="w"&gt; &lt;/span&gt;to&lt;span class="w"&gt; &lt;/span&gt;To&lt;span class="w"&gt; &lt;/span&gt;Do&lt;span class="w"&gt; &lt;/span&gt;state
&lt;span class="w"&gt;  &lt;/span&gt;transition:&lt;span class="w"&gt;          &lt;/span&gt;Transition&lt;span class="w"&gt; &lt;/span&gt;issue&lt;span class="w"&gt; &lt;/span&gt;to&lt;span class="w"&gt; &lt;/span&gt;given&lt;span class="w"&gt; &lt;/span&gt;state
&lt;span class="w"&gt;  &lt;/span&gt;transitions:&lt;span class="w"&gt;         &lt;/span&gt;List&lt;span class="w"&gt; &lt;/span&gt;valid&lt;span class="w"&gt; &lt;/span&gt;issue&lt;span class="w"&gt; &lt;/span&gt;transitions
&lt;span class="w"&gt;  &lt;/span&gt;transmeta:&lt;span class="w"&gt;           &lt;/span&gt;List&lt;span class="w"&gt; &lt;/span&gt;valid&lt;span class="w"&gt; &lt;/span&gt;issue&lt;span class="w"&gt; &lt;/span&gt;transitions
&lt;span class="w"&gt;  &lt;/span&gt;unassign:&lt;span class="w"&gt;            &lt;/span&gt;Unassign&lt;span class="w"&gt; &lt;/span&gt;an&lt;span class="w"&gt; &lt;/span&gt;issue
&lt;span class="w"&gt;  &lt;/span&gt;unexport-templates:&lt;span class="w"&gt;  &lt;/span&gt;Remove&lt;span class="w"&gt; &lt;/span&gt;unmodified&lt;span class="w"&gt; &lt;/span&gt;exported&lt;span class="w"&gt; &lt;/span&gt;templates
&lt;span class="w"&gt;  &lt;/span&gt;view:&lt;span class="w"&gt;                &lt;/span&gt;Prints&lt;span class="w"&gt; &lt;/span&gt;issue&lt;span class="w"&gt; &lt;/span&gt;details
&lt;span class="w"&gt;  &lt;/span&gt;vote:&lt;span class="w"&gt;                &lt;/span&gt;Vote&lt;span class="w"&gt; &lt;/span&gt;up/down&lt;span class="w"&gt; &lt;/span&gt;an&lt;span class="w"&gt; &lt;/span&gt;issue
&lt;span class="w"&gt;  &lt;/span&gt;watch:&lt;span class="w"&gt;               &lt;/span&gt;Add/Remove&lt;span class="w"&gt; &lt;/span&gt;watcher&lt;span class="w"&gt; &lt;/span&gt;to&lt;span class="w"&gt; &lt;/span&gt;issue
&lt;span class="w"&gt;  &lt;/span&gt;worklog&lt;span class="w"&gt; &lt;/span&gt;add:&lt;span class="w"&gt;         &lt;/span&gt;Add&lt;span class="w"&gt; &lt;/span&gt;a&lt;span class="w"&gt; &lt;/span&gt;worklog&lt;span class="w"&gt; &lt;/span&gt;to&lt;span class="w"&gt; &lt;/span&gt;an&lt;span class="w"&gt; &lt;/span&gt;issue
&lt;span class="w"&gt;  &lt;/span&gt;worklog&lt;span class="w"&gt; &lt;/span&gt;list:&lt;span class="w"&gt;        &lt;/span&gt;Prints&lt;span class="w"&gt; &lt;/span&gt;the&lt;span class="w"&gt; &lt;/span&gt;worklog&lt;span class="w"&gt; &lt;/span&gt;data&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;for&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;given&lt;span class="w"&gt; &lt;/span&gt;issue
&lt;span class="w"&gt;  &lt;/span&gt;session:&lt;span class="w"&gt;             &lt;/span&gt;Attempt&lt;span class="w"&gt; &lt;/span&gt;to&lt;span class="w"&gt; &lt;/span&gt;login&lt;span class="w"&gt; &lt;/span&gt;into&lt;span class="w"&gt; &lt;/span&gt;jira&lt;span class="w"&gt; &lt;/span&gt;server
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;h1&gt;templates&lt;/h1&gt;
&lt;p&gt;This thing is really sick. It uses YAML template to handle all the
data posting back to the Jira server. Thus, you are dealing w/ a list
of yaml files to tweak what data fields you want to use in an
action. But two most useful ones are: &lt;a href="https://fengxia41103.github.io/myblog/downloads/jira/templates/table"&gt;table&lt;/a&gt; and &lt;a href="https://fengxia41103.github.io/myblog/downloads/jira/templates/create"&gt;create&lt;/a&gt;.&lt;/p&gt;
&lt;h2&gt;&lt;code&gt;table&lt;/code&gt; template&lt;/h2&gt;
&lt;p&gt;&lt;a href="https://fengxia41103.github.io/myblog/downloads/jira/templates/table"&gt;This&lt;/a&gt; is the primary table template to display a list of things, the
same idea in jira browser when you on a list view. Since this is to
display on a terminal, nothing fancy is required, just straightforward
string to compose a &lt;em&gt;table&lt;/em&gt; look. The key to success is to:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;know what &lt;code&gt;fields&lt;/code&gt; are available&lt;/li&gt;
&lt;li&gt;some knowledge of this strange &lt;a href="https://gohugo.io/templates/introduction/"&gt;hugo syntax&lt;/a&gt;. It's quite like
   Jinja2, the concept is the same, just different syntax. One thing I
   find useful is its &lt;a href="https://gohugo.io/functions/"&gt;functions&lt;/a&gt;, so you can do a bit of extra in
   the template. But overall, writing template is not pleasant, but
   it's a one-time deal, so it's ok.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;What it looks like is pretty slick! &amp;rarr;&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="err"&gt;╰─➤&lt;/span&gt;&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="n"&gt;jira&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;cp&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;bug&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;mine&lt;/span&gt;&lt;span class="w"&gt;                                                                                    &lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="err"&gt;↵&lt;/span&gt;
&lt;span class="o"&gt;|&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;OL&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;3228&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;|&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;QA_1910&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="n"&gt;User&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;management&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;section&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;incorrectly&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;r&lt;/span&gt;&lt;span class="o"&gt;...&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;|&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;B&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;|&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;In&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;T&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;|&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;fxia1&lt;/span&gt;&lt;span class="w"&gt;      &lt;/span&gt;&lt;span class="o"&gt;|&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;M&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;|&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;19&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;days&lt;/span&gt;
&lt;span class="o"&gt;|&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;OL&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;3482&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;|&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;Nav&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;area&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;font&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;is&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="ow"&gt;not&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;high&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;contrast&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;enough&lt;/span&gt;&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="o"&gt;|&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;B&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;|&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;Sele&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;|&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;fxia1&lt;/span&gt;&lt;span class="w"&gt;      &lt;/span&gt;&lt;span class="o"&gt;|&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;M&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;|&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;days&lt;/span&gt;
&lt;span class="o"&gt;|&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;OL&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;3453&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;|&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;Storage&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;HA&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;failed&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;notification&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;contact&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;info&lt;/span&gt;&lt;span class="o"&gt;...&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;|&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;B&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;|&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;Sele&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;|&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;fxia1&lt;/span&gt;&lt;span class="w"&gt;      &lt;/span&gt;&lt;span class="o"&gt;|&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;M&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;|&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;6&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;days&lt;/span&gt;
&lt;span class="o"&gt;|&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;OL&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;3342&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;|&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;QA_1910_chat&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;box&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;icon&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;is&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="ow"&gt;not&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;visible&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="ow"&gt;in&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;login&lt;/span&gt;&lt;span class="o"&gt;...&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;|&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;B&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;|&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;Sele&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;|&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;fxia1&lt;/span&gt;&lt;span class="w"&gt;      &lt;/span&gt;&lt;span class="o"&gt;|&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;M&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;|&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;14&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;days&lt;/span&gt;
&lt;span class="o"&gt;|&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;OL&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;3327&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;|&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;QA_1910&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="n"&gt;Shut&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;Down&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;failed&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;for&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;application&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;inst&lt;/span&gt;&lt;span class="o"&gt;...&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;|&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;B&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;|&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;In&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;P&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;|&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;fxia1&lt;/span&gt;&lt;span class="w"&gt;      &lt;/span&gt;&lt;span class="o"&gt;|&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;H&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;|&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;14&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;days&lt;/span&gt;
&lt;span class="o"&gt;|&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;OL&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;3326&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;|&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;QA_1910&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;Chat&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;support&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;box&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;is&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;grey&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;ed out         | B | In P | fxia1      | H | 14 days&lt;/span&gt;
&lt;span class="o"&gt;|&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;OL&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;3241&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;|&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;QA_1910&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;Lenovo&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;EULA&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="ow"&gt;in&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;create&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;account&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;page&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;s&lt;/span&gt;&lt;span class="o"&gt;...&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;|&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;B&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;|&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;In&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;P&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;|&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;fxia1&lt;/span&gt;&lt;span class="w"&gt;      &lt;/span&gt;&lt;span class="o"&gt;|&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;H&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;|&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;19&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;days&lt;/span&gt;
&lt;span class="o"&gt;|&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;OL&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;3560&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;|&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;QA_1910_Empty&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;extra&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;cell&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="ow"&gt;in&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;Network&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;Reosurces&lt;/span&gt;&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="o"&gt;|&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;B&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;|&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;Back&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;|&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;fxia1&lt;/span&gt;&lt;span class="w"&gt;      &lt;/span&gt;&lt;span class="o"&gt;|&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;M&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;|&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;day&lt;/span&gt;
&lt;span class="o"&gt;|&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;OL&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;3552&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;|&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;QA_1910&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;Cloud&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;controller&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;version&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;is&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;displaye&lt;/span&gt;&lt;span class="o"&gt;...&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;|&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;B&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;|&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;Back&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;|&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;fxia1&lt;/span&gt;&lt;span class="w"&gt;      &lt;/span&gt;&lt;span class="o"&gt;|&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;H&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;|&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;day&lt;/span&gt;
&lt;span class="o"&gt;|&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;OL&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;3551&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;|&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;QA_1910&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;User&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;guide&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;page&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;is&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="ow"&gt;not&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;loaded&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;with&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;...&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;|&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;B&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;|&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;Back&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;|&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;fxia1&lt;/span&gt;&lt;span class="w"&gt;      &lt;/span&gt;&lt;span class="o"&gt;|&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;M&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;|&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;day&lt;/span&gt;
&lt;span class="o"&gt;|&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;OL&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;3549&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;|&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;QA_1910_Shows&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;cloudistics&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;fav&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;icon&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;for&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;second&lt;/span&gt;&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="o"&gt;|&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;B&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;|&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;Back&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;|&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;fxia1&lt;/span&gt;&lt;span class="w"&gt;      &lt;/span&gt;&lt;span class="o"&gt;|&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;M&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;|&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;day&lt;/span&gt;
&lt;span class="o"&gt;|&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;OL&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;3548&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;|&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;QA_1910_Lenovo&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;cloud&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;market&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;place&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;filter&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;by&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;l&lt;/span&gt;&lt;span class="o"&gt;...&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;|&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;B&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;|&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;Back&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;|&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;fxia1&lt;/span&gt;&lt;span class="w"&gt;      &lt;/span&gt;&lt;span class="o"&gt;|&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;M&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;|&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;day&lt;/span&gt;
&lt;span class="o"&gt;|&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;OL&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;3546&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;|&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;QA_1910_change&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;filter&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;by&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;label&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;color&lt;/span&gt;&lt;span class="w"&gt;             &lt;/span&gt;&lt;span class="o"&gt;|&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;B&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;|&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;Back&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;|&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;fxia1&lt;/span&gt;&lt;span class="w"&gt;      &lt;/span&gt;&lt;span class="o"&gt;|&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;M&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;|&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;day&lt;/span&gt;
&lt;span class="o"&gt;|&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;OL&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;3545&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;|&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;QA_1910&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;The&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;Lenovo&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;logo&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;from&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;main&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;login&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;page&lt;/span&gt;&lt;span class="o"&gt;...&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;|&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;B&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;|&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;Back&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;|&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;fxia1&lt;/span&gt;&lt;span class="w"&gt;      &lt;/span&gt;&lt;span class="o"&gt;|&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;M&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;|&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;day&lt;/span&gt;
&lt;span class="o"&gt;|&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;OL&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;3544&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;|&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;QA_1910&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;The&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;links&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;to&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;User&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;guide&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="ow"&gt;and&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;Legal&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;In&lt;/span&gt;&lt;span class="o"&gt;...&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;|&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;B&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;|&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;Back&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;|&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;fxia1&lt;/span&gt;&lt;span class="w"&gt;      &lt;/span&gt;&lt;span class="o"&gt;|&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;M&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;|&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;day&lt;/span&gt;
&lt;span class="o"&gt;|&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;OL&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;3532&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;|&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;QA_1910&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;Chat&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;box&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;chat&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;information&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;is&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;displa&lt;/span&gt;&lt;span class="o"&gt;...&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;|&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;B&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;|&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;Back&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;|&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;fxia1&lt;/span&gt;&lt;span class="w"&gt;      &lt;/span&gt;&lt;span class="o"&gt;|&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;M&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;|&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;day&lt;/span&gt;
&lt;span class="o"&gt;|&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;OL&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;3530&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;|&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;QA_1910_Texts&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;are&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="ow"&gt;not&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;visible&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="ow"&gt;in&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;calendar&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;pop&lt;/span&gt;&lt;span class="o"&gt;...&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;|&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;B&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;|&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;Back&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;|&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;fxia1&lt;/span&gt;&lt;span class="w"&gt;      &lt;/span&gt;&lt;span class="o"&gt;|&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;M&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;|&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;day&lt;/span&gt;
&lt;span class="o"&gt;|&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;OL&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;3328&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;|&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;QA_1910&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="n"&gt;Error&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;message&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;received&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;while&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;performi&lt;/span&gt;&lt;span class="o"&gt;...&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;|&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;B&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;|&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;Back&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;|&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;fxia1&lt;/span&gt;&lt;span class="w"&gt;      &lt;/span&gt;&lt;span class="o"&gt;|&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;H&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;|&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;14&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;days&lt;/span&gt;
&lt;span class="o"&gt;|&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;OL&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;3270&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;|&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;QA_1910&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;Trouble&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;downloading&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;multiple&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;templat&lt;/span&gt;&lt;span class="o"&gt;...&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;|&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;B&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;|&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;Back&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;|&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;fxia1&lt;/span&gt;&lt;span class="w"&gt;      &lt;/span&gt;&lt;span class="o"&gt;|&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;H&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;|&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;15&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;days&lt;/span&gt;
&lt;span class="o"&gt;|&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;OL&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;3214&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;|&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;QA_1910&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;Can&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;filter&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;info&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;storage&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;having&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;only&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;...&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;|&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;B&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;|&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;Back&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;|&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;fxia1&lt;/span&gt;&lt;span class="w"&gt;      &lt;/span&gt;&lt;span class="o"&gt;|&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;M&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;|&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;20&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;days&lt;/span&gt;
&lt;span class="o"&gt;|&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;OL&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;3205&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;|&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;QA_1910&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;Invalid&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;port&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nb"&gt;range&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;error&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;message&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;dis&lt;/span&gt;&lt;span class="o"&gt;...&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;|&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;B&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;|&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;Back&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;|&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;fxia1&lt;/span&gt;&lt;span class="w"&gt;      &lt;/span&gt;&lt;span class="o"&gt;|&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;H&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;|&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;20&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;days&lt;/span&gt;
&lt;span class="o"&gt;|&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;OL&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;3204&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;|&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;QA_1910&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="n"&gt;An&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;error&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;appears&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="ow"&gt;in&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;top&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;right&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;corner&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;...&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;|&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;B&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;|&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;Back&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;|&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;fxia1&lt;/span&gt;&lt;span class="w"&gt;      &lt;/span&gt;&lt;span class="o"&gt;|&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;M&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;|&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;20&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;days&lt;/span&gt;
&lt;span class="o"&gt;|&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;OL&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;3201&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;|&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;QA_1910&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;Unable&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;to&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;restart&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;windows&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;Instance&lt;/span&gt;&lt;span class="w"&gt;      &lt;/span&gt;&lt;span class="o"&gt;|&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;B&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;|&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;Back&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;|&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;fxia1&lt;/span&gt;&lt;span class="w"&gt;      &lt;/span&gt;&lt;span class="o"&gt;|&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;H&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;|&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;20&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;days&lt;/span&gt;
&lt;span class="o"&gt;|&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;OL&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;3198&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;|&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;QA_1910&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="n"&gt;No&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;text&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;appears&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="ow"&gt;in&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;the&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;white&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;borders&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;...&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;|&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;B&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;|&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;Back&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;|&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;fxia1&lt;/span&gt;&lt;span class="w"&gt;      &lt;/span&gt;&lt;span class="o"&gt;|&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;M&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;|&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;20&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;days&lt;/span&gt;
&lt;span class="o"&gt;|&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;OL&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;3183&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;|&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;QA_1910&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="n"&gt;Inconsistent&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;behavior&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;when&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;assign&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;V&lt;/span&gt;&lt;span class="o"&gt;...&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;|&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;B&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;|&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;Back&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;|&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;fxia1&lt;/span&gt;&lt;span class="w"&gt;      &lt;/span&gt;&lt;span class="o"&gt;|&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;M&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;|&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;21&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;days&lt;/span&gt;
&lt;span class="o"&gt;|&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;OL&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;3182&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;|&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;QA_1910&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="n"&gt;The&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;window&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;that&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;pops&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;out&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;when&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;user&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;ad&lt;/span&gt;&lt;span class="o"&gt;...&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;|&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;B&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;|&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;Back&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;|&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;fxia1&lt;/span&gt;&lt;span class="w"&gt;      &lt;/span&gt;&lt;span class="o"&gt;|&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;L&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;|&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;21&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;days&lt;/span&gt;
&lt;span class="o"&gt;|&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;OL&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;3117&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;|&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;QA_1910_&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;verify phone number page&amp;#39;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;lenovo&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;Log&lt;/span&gt;&lt;span class="o"&gt;...&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;|&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;B&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;|&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;Back&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;|&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;fxia1&lt;/span&gt;&lt;span class="w"&gt;      &lt;/span&gt;&lt;span class="o"&gt;|&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;M&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;|&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;27&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;days&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;h2&gt;&lt;code&gt;create&lt;/code&gt; template&lt;/h2&gt;
&lt;p&gt;This is to display a YAML file for you to fill in the blanks. This is
where you can plugin all kinds of &lt;em&gt;hardcoded&lt;/em&gt; values to save
time. It's pretty self-explanatory, so &lt;a href="https://fengxia41103.github.io/myblog/downloads/jira/templates/create"&gt;take a look&lt;/a&gt;. I don't know
much about the &lt;a href="https://gohugo.io/templates/introduction/"&gt;hugo&lt;/a&gt; yet, so most of the contents here are just
basics.&lt;/p&gt;
&lt;h1&gt;jira server, username&lt;/h1&gt;
&lt;p&gt;In &lt;a href="https://fengxia41103.github.io/myblog/downloads/jira/config.yml"&gt;config.yml&lt;/a&gt;, just define these:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="nt"&gt;endpoint&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="l l-Scalar l-Scalar-Plain"&gt;https://jira1.labs.company.com:8443&lt;/span&gt;
&lt;span class="nt"&gt;user&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="l l-Scalar l-Scalar-Plain"&gt;fxia1&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;It will prompt you for password when it tries to connect. Somehow it
saves (cookie?) so that once you have authenticated, your CLI works
without asking the password again for a while (good a whole day in my
situation). I haven't found an option where I can save the pwd, like
&lt;code&gt;.authinfo&lt;/code&gt;. Small inconvenience.&lt;/p&gt;
&lt;h1&gt;custom commands&lt;/h1&gt;
&lt;p&gt;This is really a life-saver, unbelievably powerful! You just define a
JQL, and it becomes just another command! Example:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="nt"&gt;custom-commands&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="p p-Indicator"&gt;-&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nt"&gt;name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="l l-Scalar l-Scalar-Plain"&gt;mine&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="nt"&gt;help&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="l l-Scalar l-Scalar-Plain"&gt;Display issues assigned to me&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="nt"&gt;script&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p p-Indicator"&gt;&amp;gt;-&lt;/span&gt;
&lt;span class="w"&gt;      &lt;/span&gt;&lt;span class="no"&gt;{{jira}} list --template table --query &amp;quot;&lt;/span&gt;
&lt;span class="w"&gt;      &lt;/span&gt;&lt;span class="no"&gt;assignee=currentUser()&lt;/span&gt;
&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="no"&gt;AND status not in (DONE,CANCELED)&lt;/span&gt;
&lt;span class="w"&gt;      &lt;/span&gt;&lt;span class="no"&gt;ORDER BY&lt;/span&gt;
&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="no"&gt;issuetype ASC,&lt;/span&gt;
&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="no"&gt;status DESC,&lt;/span&gt;
&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="no"&gt;created DESC,&lt;/span&gt;
&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="no"&gt;key DESC&lt;/span&gt;
&lt;span class="w"&gt;      &lt;/span&gt;&lt;span class="no"&gt;&amp;quot;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;This says to use the &lt;a href="https://fengxia41103.github.io/myblog/downloads/jira/templates/table"&gt;table template&lt;/a&gt; for display, and the query
string is the just whatever you want to speak to jira server. Also by
using the &lt;code&gt;&amp;gt;-&lt;/code&gt; to handle &lt;a href="https://yaml-multiline.info/"&gt;yaml multiline string&lt;/a&gt;, we can type the
query in any nice indented format you like, and it will be converted
into a single string by removing all the newlines in between w/ a
single white space! Slick, isn't it!?&lt;/p&gt;
&lt;p&gt;With this, you can really just learn the JQL and fly w/ your
knowledge. The entire jira server is up for your grab at this
point. Of course you can just copy &amp;amp; paste your filter's SQL query
string from Jira brower to here!  To give you an idea what it can do,
here are the &lt;em&gt;filters&lt;/em&gt; I'm using:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="w"&gt;  &lt;/span&gt;cp-story:&lt;span class="w"&gt;            &lt;/span&gt;All&lt;span class="w"&gt; &lt;/span&gt;CP&lt;span class="w"&gt; &lt;/span&gt;stories
&lt;span class="w"&gt;  &lt;/span&gt;cp-bug:&lt;span class="w"&gt;              &lt;/span&gt;All&lt;span class="w"&gt; &lt;/span&gt;CP&lt;span class="w"&gt; &lt;/span&gt;bugs
&lt;span class="w"&gt;  &lt;/span&gt;cp-story-mine:&lt;span class="w"&gt;       &lt;/span&gt;My&lt;span class="w"&gt; &lt;/span&gt;CP&lt;span class="w"&gt; &lt;/span&gt;stories
&lt;span class="w"&gt;  &lt;/span&gt;cp-bug-mine:&lt;span class="w"&gt;         &lt;/span&gt;My&lt;span class="w"&gt; &lt;/span&gt;CP&lt;span class="w"&gt; &lt;/span&gt;bugs
&lt;span class="w"&gt;  &lt;/span&gt;cp-mine:&lt;span class="w"&gt;             &lt;/span&gt;Everything&lt;span class="w"&gt; &lt;/span&gt;of&lt;span class="w"&gt; &lt;/span&gt;CP&lt;span class="w"&gt; &lt;/span&gt;that&lt;span class="w"&gt; &lt;/span&gt;is&lt;span class="w"&gt; &lt;/span&gt;assigned&lt;span class="w"&gt; &lt;/span&gt;to&lt;span class="w"&gt; &lt;/span&gt;me
&lt;span class="w"&gt;  &lt;/span&gt;cp-done:&lt;span class="w"&gt;             &lt;/span&gt;CP&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;done&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;items
&lt;span class="w"&gt;  &lt;/span&gt;cp-unassigned:&lt;span class="w"&gt;       &lt;/span&gt;CP&lt;span class="w"&gt; &lt;/span&gt;unassigned&lt;span class="w"&gt; &lt;/span&gt;items
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;If I'm really interested the look, I can give it different &lt;code&gt;--template
&amp;lt;whatever&amp;gt;&lt;/code&gt; to customize that experience. But as of today, I really
want to a consistent view, the same view, for all the tables, so I
save on context switching looking at different look for each filter
(which I found very annoying, and no value add in term of information,
whatsoever).&lt;/p&gt;
&lt;h1&gt;editor&lt;/h1&gt;
&lt;p&gt;Set in &lt;a href="https://fengxia41103.github.io/myblog/downloads/jira/config.yml"&gt;&lt;code&gt;config.yml&lt;/code&gt;&lt;/a&gt;. I think it uses whatever the default editor
is. I tried &lt;code&gt;nano&lt;/code&gt; and for now, using &lt;code&gt;emacsclient&lt;/code&gt; will simply reuse
the existing emacs session and opens a new buffer! &amp;rarr; makes
editing YAML so much more pleasant. And it is definitely better than
typing in browser's small text box!&lt;/p&gt;
&lt;h1&gt;commands&lt;/h1&gt;
&lt;p&gt;These are the ones I use the most:&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;command&lt;/th&gt;
&lt;th&gt;description&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;jira mine&lt;/td&gt;
&lt;td&gt;list everything assigned me&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;jira today-mine&lt;/td&gt;
&lt;td&gt;everything created today an assigned to me&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;jira &lt;custom cmd&gt;&lt;/td&gt;
&lt;td&gt;any shortcut you defined&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;jira comment OL-1234&lt;/td&gt;
&lt;td&gt;make a comment&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;jira view OL-1234&lt;/td&gt;
&lt;td&gt;view a ticket&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;jira create -p OL&lt;/td&gt;
&lt;td&gt;create a ticket for project "OL"&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;jira view OL-1234 -t debug&lt;/td&gt;
&lt;td&gt;check what fields are available/useful&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;jira transitions&lt;/td&gt;
&lt;td&gt;available transition values&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;jira transition "&lt;val&gt;" OL-&lt;/td&gt;
&lt;td&gt;move along the workflow&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;jira take OL-&lt;/td&gt;
&lt;td&gt;assign it to myself&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;jira give &lt;userX&gt; OL-&lt;/td&gt;
&lt;td&gt;give it to him/her&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;jira done OL-&lt;/td&gt;
&lt;td&gt;mark it DONE&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;So far, soooooooooooooooooooooooo good ~~~~~&lt;/p&gt;</content><category term="dev"></category></entry><entry><title>Linux Terminator cheatsheet</title><link href="https://fengxia41103.github.io/myblog/linux%20terminator%20cheatsheet.html" rel="alternate"></link><published>2019-10-11T11:34:00-04:00</published><updated>2019-10-11T11:34:00-04:00</updated><author><name>Feng Xia</name></author><id>tag:fengxia41103.github.io,2019-10-11:/myblog/linux terminator cheatsheet.html</id><summary type="html">&lt;p&gt;Linux Terminator keybinding cheat sheet.&lt;/p&gt;</summary><content type="html">&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Key&lt;/th&gt;
&lt;th&gt;Description&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Ctrl+Shift+X&lt;/td&gt;
&lt;td&gt;Toggle between showing all terminals and only showing the current one.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Ctrl+Shift+O&lt;/td&gt;
&lt;td&gt;Split terminals Horizontally.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Ctrl+Shift+E&lt;/td&gt;
&lt;td&gt;Split terminals Vertically.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Ctrl+Shift+Right&lt;/td&gt;
&lt;td&gt;Move parent dragbar Right.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Ctrl+Shift+Left&lt;/td&gt;
&lt;td&gt;Move parent dragbar Left.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Ctrl+Shift+Up&lt;/td&gt;
&lt;td&gt;Move parent dragbar Up.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Ctrl+Shift+Down&lt;/td&gt;
&lt;td&gt;Move parent dragbar Down.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Ctrl+Shift+W&lt;/td&gt;
&lt;td&gt;Close the current terminal.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Ctrl+Shift+T&lt;/td&gt;
&lt;td&gt;Open new tab&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Ctrl+Plus (+)&lt;/td&gt;
&lt;td&gt;Increase  font  size. Note: this may require you to press shift, depending on your keyboard&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Ctrl+Minus (-)&lt;/td&gt;
&lt;td&gt;Decrease font size. Note: this may require you to press shift, depending on your keyboard&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Ctrl+Zero (0)&lt;/td&gt;
&lt;td&gt;Restore font size to original setting.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Alt+Right&lt;/td&gt;
&lt;td&gt;Move to the right pane.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Alt+Left,UP,Down&lt;/td&gt;
&lt;td&gt;Move focus to the pane&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;</content><category term="dev"></category><category term="dev"></category></entry><entry><title>Git</title><link href="https://fengxia41103.github.io/myblog/git.html" rel="alternate"></link><published>2019-10-09T13:18:00-04:00</published><updated>2020-03-20T00:00:00-04:00</updated><author><name>Feng Xia</name></author><id>tag:fengxia41103.github.io,2019-10-09:/myblog/git.html</id><summary type="html">&lt;p&gt;Tips on git.&lt;/p&gt;</summary><content type="html">&lt;p&gt;Too many times I can't remember a particular git command. So here
let's keep notes on the ones I'd like to use and what they are.&lt;/p&gt;
&lt;h1&gt;.gitconfig&lt;/h1&gt;
&lt;p&gt;Copy this to &lt;code&gt;$HOME&lt;/code&gt;:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="o"&gt;[&lt;/span&gt;alias&lt;span class="o"&gt;]&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="nv"&gt;lg&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;!&lt;span class="s2"&gt;&amp;quot;git lg1&amp;quot;&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="nv"&gt;lg1&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;!&lt;span class="s2"&gt;&amp;quot;git lg1-specific --all --simplify-by-decoration&amp;quot;&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="nv"&gt;lg2&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;!&lt;span class="s2"&gt;&amp;quot;git lg2-specific --all --simplify-by-decoration&amp;quot;&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="nv"&gt;lg3&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;!&lt;span class="s2"&gt;&amp;quot;git lg3-specific --all --simplify-by-decoration&amp;quot;&lt;/span&gt;

&lt;span class="w"&gt;    &lt;/span&gt;lg1-specific&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;log&lt;span class="w"&gt; &lt;/span&gt;--graph&lt;span class="w"&gt; &lt;/span&gt;--abbrev-commit&lt;span class="w"&gt; &lt;/span&gt;--decorate
&lt;span class="w"&gt;    &lt;/span&gt;--format&lt;span class="o"&gt;=&lt;/span&gt;format:&lt;span class="s1"&gt;&amp;#39;%C(bold blue)%h%C(reset) - %C(bold&lt;/span&gt;
&lt;span class="s1"&gt;    green)(%ar)%C(reset) %C(white)%s%C(reset) %C(dim white)-&lt;/span&gt;
&lt;span class="s1"&gt;    %an%C(reset)%C(auto)%d%C(reset)&amp;#39;&lt;/span&gt;

&lt;span class="w"&gt;    &lt;/span&gt;lg2-specific&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;log&lt;span class="w"&gt; &lt;/span&gt;--graph&lt;span class="w"&gt; &lt;/span&gt;--abbrev-commit&lt;span class="w"&gt; &lt;/span&gt;--decorate
&lt;span class="w"&gt;    &lt;/span&gt;--format&lt;span class="o"&gt;=&lt;/span&gt;format:&lt;span class="s1"&gt;&amp;#39;%C(bold blue)%h%C(reset) - %C(bold&lt;/span&gt;
&lt;span class="s1"&gt;    cyan)%aD%C(reset) %C(bold&lt;/span&gt;
&lt;span class="s1"&gt;    green)(%ar)%C(reset)%C(auto)%d%C(reset)%n&amp;#39;&amp;#39;&lt;/span&gt;
&lt;span class="s1"&gt;    %C(white)%s%C(reset) %C(dim white)- %an%C(reset)&amp;#39;&lt;/span&gt;

&lt;span class="w"&gt;    &lt;/span&gt;lg3-specific&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;log&lt;span class="w"&gt; &lt;/span&gt;--graph&lt;span class="w"&gt; &lt;/span&gt;--abbrev-commit&lt;span class="w"&gt; &lt;/span&gt;--decorate
&lt;span class="w"&gt;    &lt;/span&gt;--format&lt;span class="o"&gt;=&lt;/span&gt;format:&lt;span class="s1"&gt;&amp;#39;%C(bold blue)%h%C(reset) - %C(bold&lt;/span&gt;
&lt;span class="s1"&gt;    cyan)%aD%C(reset) %C(bold green)(%ar)%C(reset) %C(bold&lt;/span&gt;
&lt;span class="s1"&gt;    cyan)(committed: %cD)%C(reset) %C(auto)%d%C(reset)%n&amp;#39;&amp;#39;&lt;/span&gt;
&lt;span class="s1"&gt;    %C(white)%s%C(reset)%n&amp;#39;&amp;#39;          %C(dim white)- %an &amp;lt;%ae&amp;gt;&lt;/span&gt;
&lt;span class="s1"&gt;    %C(reset) %C(dim white)(committer: %cn &amp;lt;%ce&amp;gt;)%C(reset)&amp;#39;&lt;/span&gt;

&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="nv"&gt;hist&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;log&lt;span class="w"&gt; &lt;/span&gt;--graph&lt;span class="w"&gt; &lt;/span&gt;--first-parent&lt;span class="w"&gt; &lt;/span&gt;--all
&lt;span class="w"&gt;    &lt;/span&gt;--pretty&lt;span class="o"&gt;=&lt;/span&gt;format:&lt;span class="s1"&gt;&amp;#39;%Cred%h%Creset %ad %s %C(yellow)%d%Creset %C(bold&lt;/span&gt;
&lt;span class="s1"&gt;    blue)&amp;lt;%an&amp;gt;%Creset&amp;#39;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;--date&lt;span class="o"&gt;=&lt;/span&gt;short

&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="nv"&gt;gr&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;log&lt;span class="w"&gt; &lt;/span&gt;--graph&lt;span class="w"&gt; &lt;/span&gt;--full-history&lt;span class="w"&gt; &lt;/span&gt;--all&lt;span class="w"&gt; &lt;/span&gt;--color&lt;span class="w"&gt; &lt;/span&gt;--pretty&lt;span class="o"&gt;=&lt;/span&gt;tformat:&lt;span class="s2"&gt;&amp;quot;%x1b[31m%h%x09%x1b[32m%d%x1b[0m%x20%s%x20%x1b[33m(%an)%x1b[0m&amp;quot;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;--simplify-by-decoration
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;h1&gt;checkout and track&lt;/h1&gt;
&lt;p&gt;One bang, create both a local and track:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;git&lt;span class="w"&gt; &lt;/span&gt;checkout&lt;span class="w"&gt; &lt;/span&gt;-t&lt;span class="w"&gt; &lt;/span&gt;origin/&amp;lt;branch&lt;span class="w"&gt; &lt;/span&gt;name&amp;gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;h1&gt;log&lt;/h1&gt;
&lt;h2&gt;show file changed&lt;/h2&gt;
&lt;p&gt;&lt;code&gt;git log --name-only --pretty=format:"%h - %an, %ar : %s" --graph
--all&lt;/code&gt; will show a short commit #, who committed it, the commit
message, and list of files changed:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;*&lt;span class="w"&gt; &lt;/span&gt;f48af046&lt;span class="w"&gt; &lt;/span&gt;-&lt;span class="w"&gt; &lt;/span&gt;fxia1,&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="m"&gt;18&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;minutes&lt;span class="w"&gt; &lt;/span&gt;ago&lt;span class="w"&gt; &lt;/span&gt;:&lt;span class="w"&gt; &lt;/span&gt;Minor&lt;span class="w"&gt; &lt;/span&gt;change&lt;span class="w"&gt; &lt;/span&gt;of&lt;span class="w"&gt; &lt;/span&gt;webapp/README.md.&lt;span class="w"&gt; &lt;/span&gt;Add&lt;span class="w"&gt; &lt;/span&gt;branch&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="m"&gt;422&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;strategy&lt;span class="w"&gt; &lt;/span&gt;diagram&lt;span class="w"&gt; &lt;/span&gt;to&lt;span class="w"&gt; &lt;/span&gt;git.&lt;span class="p"&gt;|&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;
&lt;span class="p"&gt;|&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;diagrams/git&lt;span class="w"&gt; &lt;/span&gt;develop&lt;span class="w"&gt; &lt;/span&gt;branch&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="m"&gt;422&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;strategy.dia
&lt;span class="p"&gt;|&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;diagrams/git&lt;span class="w"&gt; &lt;/span&gt;develop&lt;span class="w"&gt; &lt;/span&gt;branch&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="m"&gt;422&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;strategy.png
&lt;span class="p"&gt;|&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;mwc/src/main/webapp/README.md
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;h2&gt;train tracks&lt;/h2&gt;
&lt;p&gt;Another one is to draw a log graph of train tracks:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;git&lt;span class="w"&gt; &lt;/span&gt;log&lt;span class="w"&gt; &lt;/span&gt;--graph&lt;span class="w"&gt; &lt;/span&gt;--full-history&lt;span class="w"&gt; &lt;/span&gt;--all&lt;span class="w"&gt; &lt;/span&gt;--color&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="se"&gt;\&lt;/span&gt;
&lt;span class="w"&gt;        &lt;/span&gt;--pretty&lt;span class="o"&gt;=&lt;/span&gt;format:&lt;span class="s2"&gt;&amp;quot;%x1b[31m%h%x09%x1b[32m%d%x1b[0m%x20%s&amp;quot;&lt;/span&gt;

git&lt;span class="w"&gt; &lt;/span&gt;log&lt;span class="w"&gt; &lt;/span&gt;--oneline&lt;span class="w"&gt; &lt;/span&gt;--graph&lt;span class="w"&gt; &lt;/span&gt;--abbrev-commit&lt;span class="w"&gt; &lt;/span&gt;--decorate&lt;span class="w"&gt; &lt;/span&gt;--format&lt;span class="o"&gt;=&lt;/span&gt;format:&lt;span class="s1"&gt;&amp;#39;%C(bold blue)%h%C(reset) - %C(bold green)(%ar)%C(reset) %C(white)%s%C(reset) %C(dim white)- %an%C(reset)%C(auto)%d%C(reset)&amp;#39;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;--name-only
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;This will show in terminal of full git histories and draw those train
track graphs. An example of my blog git:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;*&lt;span class="w"&gt; &lt;/span&gt;8775404a&lt;span class="w"&gt;       &lt;/span&gt;Update&lt;span class="w"&gt; &lt;/span&gt;pandoc&lt;span class="w"&gt; &lt;/span&gt;Makefile&lt;span class="w"&gt; &lt;/span&gt;and&lt;span class="w"&gt; &lt;/span&gt;pandoc.css
*&lt;span class="w"&gt;   &lt;/span&gt;495b70e4&lt;span class="w"&gt;     &lt;/span&gt;Merge&lt;span class="w"&gt; &lt;/span&gt;branch&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;dev&amp;#39;&lt;/span&gt;
&lt;span class="p"&gt;|&lt;/span&gt;&lt;span class="se"&gt;\ &lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;
&lt;span class="p"&gt;|&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;*&lt;span class="w"&gt; &lt;/span&gt;9d44fd57&lt;span class="w"&gt;     &lt;/span&gt;Update&lt;span class="w"&gt; &lt;/span&gt;draft&lt;span class="w"&gt; &lt;/span&gt;doc.
*&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;|&lt;/span&gt;&lt;span class="w"&gt;   &lt;/span&gt;656ed837&lt;span class="w"&gt;   &lt;/span&gt;Merge&lt;span class="w"&gt; &lt;/span&gt;branch&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;dev&amp;#39;&lt;/span&gt;
&lt;span class="p"&gt;|&lt;/span&gt;&lt;span class="se"&gt;\ \ &lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;
&lt;span class="p"&gt;|&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;|&lt;/span&gt;/&lt;span class="w"&gt;  &lt;/span&gt;
&lt;span class="p"&gt;|&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;*&lt;span class="w"&gt; &lt;/span&gt;bd47499b&lt;span class="w"&gt;     &lt;/span&gt;Adding&lt;span class="w"&gt; &lt;/span&gt;cp&lt;span class="w"&gt; &lt;/span&gt;deployment.md&lt;span class="w"&gt; &lt;/span&gt;and&lt;span class="w"&gt; &lt;/span&gt;git.md
*&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;|&lt;/span&gt;&lt;span class="w"&gt;   &lt;/span&gt;2b4cdbd0&lt;span class="w"&gt;   &lt;/span&gt;Merge&lt;span class="w"&gt; &lt;/span&gt;branch&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;dev&amp;#39;&lt;/span&gt;
&lt;span class="p"&gt;|&lt;/span&gt;&lt;span class="se"&gt;\ \ &lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;
&lt;span class="p"&gt;|&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;|&lt;/span&gt;/&lt;span class="w"&gt;  &lt;/span&gt;
&lt;span class="p"&gt;|&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;*&lt;span class="w"&gt; &lt;/span&gt;cf000d79&lt;span class="w"&gt;     &lt;/span&gt;Add&lt;span class="w"&gt; &lt;/span&gt;a&lt;span class="w"&gt; &lt;/span&gt;summary&lt;span class="w"&gt; &lt;/span&gt;to&lt;span class="w"&gt; &lt;/span&gt;.md.
*&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;|&lt;/span&gt;&lt;span class="w"&gt;   &lt;/span&gt;eaa16ba3&lt;span class="w"&gt;   &lt;/span&gt;Merge&lt;span class="w"&gt; &lt;/span&gt;branch&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;dev&amp;#39;&lt;/span&gt;
&lt;span class="p"&gt;|&lt;/span&gt;&lt;span class="se"&gt;\ \ &lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;
&lt;span class="p"&gt;|&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;|&lt;/span&gt;/&lt;span class="w"&gt;  &lt;/span&gt;
&lt;span class="p"&gt;|&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;*&lt;span class="w"&gt; &lt;/span&gt;a2efd99c&lt;span class="w"&gt;     &lt;/span&gt;Add&lt;span class="w"&gt; &lt;/span&gt;thoughts/smart&lt;span class="w"&gt; &lt;/span&gt;phone.md
*&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;|&lt;/span&gt;&lt;span class="w"&gt;   &lt;/span&gt;e346f0d5&lt;span class="w"&gt;   &lt;/span&gt;Merge&lt;span class="w"&gt; &lt;/span&gt;branch&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;dev&amp;#39;&lt;/span&gt;
&lt;span class="p"&gt;|&lt;/span&gt;&lt;span class="se"&gt;\ \ &lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;
&lt;span class="p"&gt;|&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;|&lt;/span&gt;/&lt;span class="w"&gt;  &lt;/span&gt;
&lt;span class="p"&gt;|&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;*&lt;span class="w"&gt; &lt;/span&gt;b1c05698&lt;span class="w"&gt;     &lt;/span&gt;Upgrade&lt;span class="w"&gt; &lt;/span&gt;pelican&lt;span class="w"&gt; &lt;/span&gt;to&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="m"&gt;4&lt;/span&gt;.1.2.&lt;span class="w"&gt; &lt;/span&gt;Fixing&lt;span class="w"&gt; &lt;/span&gt;page&lt;span class="w"&gt; &lt;/span&gt;iteration&lt;span class="w"&gt; &lt;/span&gt;on&lt;span class="w"&gt; &lt;/span&gt;the&lt;span class="w"&gt; &lt;/span&gt;index&lt;span class="w"&gt; &lt;/span&gt;page.
*&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;|&lt;/span&gt;&lt;span class="w"&gt;   &lt;/span&gt;e2456350&lt;span class="w"&gt;   &lt;/span&gt;Merge&lt;span class="w"&gt; &lt;/span&gt;branch&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;dev&amp;#39;&lt;/span&gt;
&lt;span class="p"&gt;|&lt;/span&gt;&lt;span class="se"&gt;\ \ &lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;
&lt;span class="p"&gt;|&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;|&lt;/span&gt;/&lt;span class="w"&gt;  &lt;/span&gt;
&lt;span class="p"&gt;|&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;*&lt;span class="w"&gt; &lt;/span&gt;d9bfa593&lt;span class="w"&gt;     &lt;/span&gt;Add&lt;span class="w"&gt; &lt;/span&gt;thoughts/what&lt;span class="w"&gt; &lt;/span&gt;we&lt;span class="w"&gt; &lt;/span&gt;know&lt;span class="w"&gt; &lt;/span&gt;is&lt;span class="w"&gt; &lt;/span&gt;untrue.md
&lt;span class="p"&gt;|&lt;/span&gt;/&lt;span class="w"&gt;  &lt;/span&gt;
*&lt;span class="w"&gt; &lt;/span&gt;5e8e909b&lt;span class="w"&gt;       &lt;/span&gt;Replacing&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;{&lt;/span&gt;filename&lt;span class="o"&gt;}&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;for&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;download&lt;span class="w"&gt; &lt;/span&gt;content&lt;span class="w"&gt; &lt;/span&gt;w/&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;{&lt;/span&gt;static&lt;span class="o"&gt;}&lt;/span&gt;.
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;h2&gt;commits between two dates&lt;/h2&gt;
&lt;p&gt;&lt;code&gt;git log --since "DEC 1 2014" --until "DEC 5 2014"&lt;/code&gt;&lt;/p&gt;
&lt;h1&gt;tag&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;Add one: &lt;code&gt;git tag -a &amp;lt;tag name&amp;gt; -m "Say something"&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Delete: &lt;code&gt;git tag -d &amp;lt;tag name&amp;gt;&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Show a tag list: &lt;code&gt;git tag&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h1&gt;diff&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;two branches: &lt;code&gt;git diff &amp;lt;branch A&amp;gt;..&amp;lt;branch B&amp;gt;&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;two commits: &lt;code&gt;git diff ee4be da82da&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;a single file: &lt;code&gt;git diff &amp;lt;file name&amp;gt;&lt;/code&gt;: this will diff between disk
  file and branch's HEAD.&lt;/li&gt;
&lt;li&gt;a single file between two branches: &lt;code&gt;git diff &amp;lt;branch A&amp;gt;..&amp;lt;branch B&amp;gt;
  -- &amp;lt;file name&amp;gt;&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;list of commits between two branches/commits: &lt;code&gt;git log --left-right
  --cherry-pick --oneline c1..c2&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h1&gt;revert&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;back to HEAD: &lt;code&gt;git reset --hard HEAD&lt;/code&gt;: this throws away everything
  you have changed in this branch.&lt;/li&gt;
&lt;li&gt;back to a commit but keep the local changes: &lt;code&gt;git reset --soft
  &amp;lt;commit #&amp;gt;&lt;/code&gt; &amp;larr; this is going back in time, but keep my changes
  since then scenario. Neat!&lt;/li&gt;
&lt;li&gt;a commit: &lt;code&gt;git revert &amp;lt;commit #&amp;gt;&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h1&gt;port change from one branch to another&lt;/h1&gt;
&lt;p&gt;This is common when a feature is delayed/moved into a later release,
thus we have to create a newer branch for the new release, but keep
all the old changes. How to do that?&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Create a new branch off the new release staging.&lt;/li&gt;
&lt;li&gt;Checkout the old feature branch.&lt;/li&gt;
&lt;li&gt;Use &lt;code&gt;git log --name-only&lt;/code&gt; (see a fancy one above) to see the list
   of file changes.&lt;/li&gt;
&lt;li&gt;Switch back to the new branch, &lt;code&gt;git checkout &amp;lt;old branch&amp;gt;
   &amp;lt;filename&amp;gt;&lt;/code&gt;, one by one.&lt;/li&gt;
&lt;/ol&gt;
&lt;h1&gt;remove remote branch&lt;/h1&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;git&lt;span class="w"&gt; &lt;/span&gt;push&lt;span class="w"&gt; &lt;/span&gt;-d&lt;span class="w"&gt; &lt;/span&gt;origin&lt;span class="w"&gt; &lt;/span&gt;&amp;lt;branch_name&amp;gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;h1&gt;Ref&lt;/h1&gt;
&lt;p&gt;I like &lt;a href="https://ohshitgit.com/"&gt;this blog&lt;/a&gt;.&lt;/p&gt;</content><category term="dev"></category><category term="thoughts"></category></entry><entry><title>My system</title><link href="https://fengxia41103.github.io/myblog/my%20system.html" rel="alternate"></link><published>2019-10-08T19:05:00-04:00</published><updated>2019-10-17T20:55:00-04:00</updated><author><name>Feng Xia</name></author><id>tag:fengxia41103.github.io,2019-10-08:/myblog/my system.html</id><summary type="html">&lt;p&gt;Instructions to rebuild my system from scratch based on Ubuntu 18.04.&lt;/p&gt;</summary><content type="html">&lt;p&gt;Now setting up my Flex Pro from scratch (well, it's too difficult to
get to its hard drive, so without ruining this beautiful machine, I
decided to install Ubuntu from scratch), I'm going to document (rather
a bit catch up) what I need to install in order to get my working
environment back.&lt;/p&gt;
&lt;h1&gt;system files&lt;/h1&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;apt&lt;span class="w"&gt; &lt;/span&gt;install&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="se"&gt;\&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;git&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="se"&gt;\&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;terminator&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="se"&gt;\&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;conky&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="se"&gt;\&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;build-essential&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="se"&gt;\&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;python-pip&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="se"&gt;\&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;fonts-inconsolata&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="se"&gt;\&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;texlive-full&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="se"&gt;\&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;run-one&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="se"&gt;\&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;emacs&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="se"&gt;\&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;python-dev&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="se"&gt;\&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;i3&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="se"&gt;\&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;wicd-curses&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="se"&gt;\&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;virtualenvwrapper&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="se"&gt;\&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;pandoc&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="se"&gt;\&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;dia&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="se"&gt;\&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;evince&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="se"&gt;\&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;gimp&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="se"&gt;\&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;pidgin&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="se"&gt;\&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;pidgin-sipe&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="se"&gt;\&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;git&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="se"&gt;\&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;dkms&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="se"&gt;\&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;openssh-server&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="se"&gt;\&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;openssh-client&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="se"&gt;\&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;tmux&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="se"&gt;\&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;python-mysqldb&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="se"&gt;\&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;mysql-client&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="se"&gt;\&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;libmysqlclient-dev&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="se"&gt;\&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;graphviz&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="se"&gt;\&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;libgraphviz-dev&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="se"&gt;\&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;imagemagick&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="se"&gt;\&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;libssl-dev&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="se"&gt;\&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;libcurl4-openssl-dev&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="se"&gt;\&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;pkg-config&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="se"&gt;\&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;libmemcached-dev&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="se"&gt;\&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;zlib1g-dev&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="se"&gt;\&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;libxml2-dev&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="se"&gt;\&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;libxslt1-dev&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="se"&gt;\&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;nginx&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="se"&gt;\&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;mplayer&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="se"&gt;\&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;vlc&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="se"&gt;\&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;youtube-dl&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="se"&gt;\&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;rsync&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="se"&gt;\&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;gthumb&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="se"&gt;\&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;libvirt-bin&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="se"&gt;\&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;virt-manager&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="se"&gt;\&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;virtinst&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="se"&gt;\&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;libvirt-bin&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="se"&gt;\&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;bridge-utils&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="se"&gt;\&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;cloud-utils&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="se"&gt;\&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;cloud-init&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="se"&gt;\&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;libguestfs-tools&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="se"&gt;\&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;pkg-config&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="se"&gt;\&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;uwsgi&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="se"&gt;\&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;uwsgi-plugin-python&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="se"&gt;\&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;cpu-checker&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="se"&gt;\&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;htop&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="se"&gt;\&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;tree&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="se"&gt;\&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;libffi6&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="se"&gt;\&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;libffi-dev&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="se"&gt;\&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;gthumb&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="se"&gt;\&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;isync&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="se"&gt;\&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;mu4e&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="se"&gt;\&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;default-jre&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="se"&gt;\&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;openconnect&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="se"&gt;\&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;zsh&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="se"&gt;\&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;powerline&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="se"&gt;\&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;fonts-powerline&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="se"&gt;\&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;thunderbird&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="se"&gt;\&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;sshfs&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="se"&gt;\&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;apt-transport-https&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="se"&gt;\&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;ca-certificates&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="se"&gt;\&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;curl&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="se"&gt;\&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;software-properties-common&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="se"&gt;\&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;remmina&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="se"&gt;\&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;pandoc-citeproc&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="se"&gt;\&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;xclip&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="se"&gt;\&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;ffmpeg&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="se"&gt;\&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;recordmydesktop&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="se"&gt;\&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;byzanz&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="se"&gt;\&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;postgresql-server-dev-all&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="se"&gt;\&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;postgresql&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="se"&gt;\&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;pgcli&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="se"&gt;\&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;postgresql-client&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="se"&gt;\&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;fcitx-googlepinyin
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;h1&gt;local kvm setup&lt;/h1&gt;
&lt;ol&gt;
&lt;li&gt;&lt;code&gt;sshkey-gen&lt;/code&gt;: u can leave the passphrase to none (just ENTER).&lt;/li&gt;
&lt;li&gt;&lt;code&gt;git clone http://github.com/fengxia41103/dev&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;paste the content in &lt;code&gt;.ssh/id_rsa.pub&lt;/code&gt; to &lt;code&gt;dev/kvm/my-user-data&lt;/code&gt;:
     this will then allow KVM to be accessible using this key.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;For more info on KVM, read &lt;a href="https://fengxia41103.github.io/myblog/kvm.html"&gt;here&lt;/a&gt;.&lt;/p&gt;
&lt;h1&gt;4k display and font size&lt;/h1&gt;
&lt;p&gt;Fonts will be way too small on a 4k display. The best instruction I
found and works is &lt;a href="https://wiki.archlinux.org/index.php/HiDPI"&gt;by ArchLinux&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;First of all, &lt;strong&gt;don't use &lt;code&gt;xrandr --outout &amp;lt;whatever&amp;gt; --scale
0.5x0.5&lt;/code&gt;&lt;/strong&gt;. This will only decrease the resolution, which makes the
screen/font blurry!&lt;/p&gt;
&lt;p&gt;Instead, there are two things you need to do:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;Add these to &lt;code&gt;.Xresources&lt;/code&gt; (if file doesn't exist, create
   one). Play w/ the &lt;code&gt;Xft.dpi&lt;/code&gt; value &amp;larr; the smaller the value, the
   smaller the font will be (you can check by evoking i3wm's menu bar
   &lt;code&gt;WIN+d&lt;/code&gt;). No idea what the other values are. Then logout and log
   back in, you will be super happy!&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;```shell
Xft.dpi: 200
Xft.autohint: 0
Xft.lcdfilter:  lcddefault
Xft.hintstyle:  hintfull
Xft.hinting: 1
Xft.antialias: 1
Xft.rgba: rgb
```
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Use &lt;code&gt;xdpyinfo&lt;/code&gt; to check screen resolution&lt;sup id="fnref:1"&gt;&lt;a class="footnote-ref" href="#fn:1"&gt;1&lt;/a&gt;&lt;/sup&gt;:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;On X1 gen 8, it's shown &lt;code&gt;2560x1440 pixels (677x381
    millimeters)&lt;/code&gt;. Set &lt;code&gt;dpi=180&lt;/code&gt; gives the same exp/size as what was
    on gen 4 without any tweaking.&lt;/li&gt;
&lt;li&gt;On Flex pro, it gives &lt;code&gt;3840 x 2160&lt;/code&gt;, use &lt;code&gt;dpi=200&lt;/code&gt; is good; 180
    is too small.&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;For Gtk applications, eg. dia, add these to our &lt;code&gt;.zshrc&lt;/code&gt; or &lt;code&gt;.bashrc&lt;/code&gt;:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="err"&gt;```&lt;/span&gt;&lt;span class="n"&gt;shell&lt;/span&gt;
&lt;span class="k"&gt;export&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;QT_AUTO_SCREEN_SCALE_FACTOR&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;
&lt;span class="k"&gt;export&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;GDK_SCALE&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;
&lt;span class="err"&gt;```&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;/li&gt;
&lt;/ol&gt;
&lt;h1&gt;disable NetworkManager&lt;/h1&gt;
&lt;p&gt;You have to disable NetworkManager service in order for wicd to take
over cleanly:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;stop service: &lt;code&gt;systemctl stop NetworkManager&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;disable the service: &lt;code&gt;systemctl disable NetworkManager.service&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;uninstall: &lt;code&gt;apt remove network-manager-gnome network-manager&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;purge: &lt;code&gt;dpkg --purge network-manager-gnome network-manager&lt;/code&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Without doing so will also mess up the &lt;code&gt;openconnect&lt;/code&gt; when it is not
able to modify &lt;code&gt;/etc/resolv.conf&lt;/code&gt; after its connection.&lt;/p&gt;
&lt;h1&gt;nvm and Node.js stuff&lt;/h1&gt;
&lt;ol&gt;
&lt;li&gt;Install &lt;a href="https://github.com/nvm-sh/nvm"&gt;nvm&lt;/a&gt;. Then, &lt;code&gt;nvm install node&lt;/code&gt; will install the latest
   version. Or, do &lt;code&gt;nvm install &amp;lt;versaion&amp;gt;&lt;/code&gt;. Use &lt;code&gt;nvm ls-remote&lt;/code&gt; to
   find which versions are available for installation.&lt;/li&gt;
&lt;li&gt;Update npm &lt;code&gt;npm install npm@latest -g&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;Install bower, &lt;code&gt;npm install -g bower&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;Now go to &lt;code&gt;myblog/template/feng/static&lt;/code&gt;, and run &lt;code&gt;bower install&lt;/code&gt;.&lt;/li&gt;
&lt;/ol&gt;
&lt;h1&gt;zsh&lt;/h1&gt;
&lt;p&gt;Follow &lt;a href="https://dev.to/mskian/install-z-shell-oh-my-zsh-on-ubuntu-1804-lts-4cm4"&gt;this blog&lt;/a&gt;, and you will get a cool looking shell:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;code&gt;git clone https://github.com/robbyrussell/oh-my-zsh.git
   ~/.oh-my-zsh&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;cp ~/.oh-my-zsh/templates/zshrc.zsh-template ~/.zshrc&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;change theme in &lt;code&gt;.zshrc&lt;/code&gt; to &lt;code&gt;ZSH_THEME="agnoster"&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Set zsh as the default shell: &lt;code&gt;chsh -s /bin/zsh&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;git clone https://github.com/zsh-users/zsh-syntax-highlighting.git
   "$HOME/.zsh-syntax-highlighting" --depth 1&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;echo "source
   $HOME/.zsh-syntax-highlighting/zsh-syntax-highlighting.zsh" &amp;gt;&amp;gt;
   "$HOME/.zshrc"&lt;/code&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;If you want to revert back to bash: &lt;code&gt;chsh -s /bin/bash&lt;/code&gt;.&lt;/p&gt;
&lt;h1&gt;sshfs&lt;/h1&gt;
&lt;p&gt;Use this to mount another machine's file system into your local. This
is a great way to share the same code between your localhost and vms.&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;code&gt;apt install sshfs&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Uncomment &lt;code&gt;user_allow_other&lt;/code&gt; in &lt;code&gt;/etc/fuse.conf&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;to mount: &lt;code&gt;sshfs -o allow_other
   fengxia@192.168.1.112:/home/fengxia/workspace ./tmp&lt;/code&gt; &amp;larr; mount
   remove &lt;code&gt;workspace/&lt;/code&gt; to your local &lt;code&gt;./tmp&lt;/code&gt;.&lt;/li&gt;
&lt;/ol&gt;
&lt;h1&gt;i3&lt;/h1&gt;
&lt;p&gt;Under &lt;code&gt;~/.config&lt;/code&gt;, find two folder named &lt;code&gt;i3/&lt;/code&gt; and &lt;code&gt;i3status&lt;/code&gt;. Copy
&lt;a href="https://fengxia41103.github.io/myblog/downloads/i3.conf"&gt;i3.conf&lt;/a&gt; to &lt;code&gt;i3/config&lt;/code&gt;, and &lt;a href="https://fengxia41103.github.io/myblog/downloads/i3status.conf"&gt;i3status.confg&lt;/a&gt; to
&lt;code&gt;i3status/i3status.conf&lt;/code&gt;.&lt;/p&gt;
&lt;h1&gt;pandoc&lt;/h1&gt;
&lt;p&gt;Use Pandoc &lt;a href="https://github.com/jgm/pandoc/releases/tag/2.7.3"&gt;2.7.3&lt;/a&gt;. The v1.9 in Ubuntu 18.04 didn't work for compiling
&lt;a href="https://fengxia41103.github.io/myblog/downloads/loc ra.pdf"&gt;RA PDF&lt;/a&gt;. Read &lt;a href="https://fengxia41103.github.io/myblog/pandoc workflow.html"&gt;this article&lt;/a&gt; for more details of my Pandoc notes.&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;code&gt;pip install pandoc-fignos&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;apt install pandoc-citeproc texlive-full&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;optional: install &lt;code&gt;mermaid-filter&lt;/code&gt;: &lt;code&gt;npm install -g mermaid-filter&lt;/code&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;h1&gt;system tweak&lt;/h1&gt;
&lt;p&gt;In &lt;code&gt;/etc/sysctl.conf&lt;/code&gt;, then &lt;code&gt;sysctl -p&lt;/code&gt; to reload:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;increase watcher limit, needed for webpack hot reloading:
   &lt;code&gt;fs.inotify.max_user_watches=524288&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;set &lt;a href="https://wiki.archlinux.org/index.php/HiDPI"&gt;swappiness&lt;/a&gt; to 10: &lt;code&gt;vm.swappiness=10&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Reboot, of course, will work, too.&lt;/p&gt;
&lt;h1&gt;clear swap script&lt;/h1&gt;
&lt;p&gt;Create a &lt;a href="https://help.ubuntu.com/community/SwapFaq"&gt;&lt;code&gt;/usr/local/sbin/swap2ram.sh&lt;/code&gt;&lt;/a&gt; per this Ubuntu's FAQ,
and paste these lines:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="ch"&gt;#!/bin/sh&lt;/span&gt;

&lt;span class="nv"&gt;mem&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="k"&gt;$(&lt;/span&gt;&lt;span class="nv"&gt;LC_ALL&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;C&lt;span class="w"&gt; &lt;/span&gt;free&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="p"&gt;|&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;awk&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;/Mem:/ {print $4}&amp;#39;&lt;/span&gt;&lt;span class="k"&gt;)&lt;/span&gt;
&lt;span class="nv"&gt;swap&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="k"&gt;$(&lt;/span&gt;&lt;span class="nv"&gt;LC_ALL&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;C&lt;span class="w"&gt; &lt;/span&gt;free&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;|&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;awk&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;/Swap:/ {print $3}&amp;#39;&lt;/span&gt;&lt;span class="k"&gt;)&lt;/span&gt;

&lt;span class="k"&gt;if&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nv"&gt;$mem&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;-lt&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nv"&gt;$swap&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;then&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="nb"&gt;echo&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;ERROR: not enough RAM to write swap back, nothing done&amp;quot;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&amp;gt;&lt;span class="p"&gt;&amp;amp;&lt;/span&gt;&lt;span class="m"&gt;2&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="nb"&gt;exit&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="m"&gt;1&lt;/span&gt;
&lt;span class="k"&gt;fi&lt;/span&gt;

swapoff&lt;span class="w"&gt; &lt;/span&gt;-a&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt;
swapon&lt;span class="w"&gt; &lt;/span&gt;-a
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Then &lt;code&gt;chmod +x&lt;/code&gt; and execute it. It takes a while and has no stdout
prints of any kind. You can watch &lt;code&gt;glances&lt;/code&gt; that swap % is going down
while RAM % is going up, and eventually swap % will be 0!!&lt;/p&gt;
&lt;h1&gt;enterprise stuff&lt;/h1&gt;
&lt;p&gt;Working in an enterprise means that you need a few tools, eg. emails,
to work w/ everybody else (which == Microsoft, actually, sigh).&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;for Cisco's Anyconnect vpn: &lt;a href="https://fengxia41103.github.io/myblog/linux laptop.html"&gt;here&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;for emails: &lt;a href="https://fengxia41103.github.io/myblog/mbsync mu4e email.html"&gt;mbsync &amp;amp; davmail&lt;/a&gt;, or &lt;a href="https://fengxia41103.github.io/myblog/linux laptop.html"&gt;thunderbird&lt;/a&gt;. But
   honestly, setting up &lt;a href="https://fengxia41103.github.io/myblog/mbsync mu4e email.html"&gt;Davmail&lt;/a&gt; is a lot better, and you can
   have Thunderbird acting as just an email agent off davmail anyway.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;for Skype business/Lync: use &lt;a href="https://fengxia41103.github.io/myblog/linux laptop.html"&gt;pidgin&lt;/a&gt;.&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h1&gt;fix a broken upgrade&lt;/h1&gt;
&lt;p&gt;It was a strange experience that by doing &lt;code&gt;do-release-upgrade&lt;/code&gt; to
20.04, my X1 didn't have network manager and &lt;code&gt;wicd&lt;/code&gt; after! This made
it impossible for me to use the wifi. Tried &lt;code&gt;dhclient&lt;/code&gt;, &lt;code&gt;iwconfig&lt;/code&gt; and
so on, no avail. So in the end I learned something quite powerful
&amp;mdash; by booting into the USB live system, you can swap a few things
so that now the OS is running off your installed folder, thus you can
do &lt;code&gt;apt-get&lt;/code&gt; using the live image (I think it's running in memory)
while it will use disk files from your installation!&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Boot a Ubuntu live CD in "Try without installing". Make sure you are connected to the internet.&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;In terminal type:&lt;/p&gt;
&lt;p&gt;&lt;code&gt;shell
  sudo mount --bind /dev /&amp;lt;chrootlocation&amp;gt;/dev
  sudo mount --bind /proc /&amp;lt;chrootlocation&amp;gt;/proc
  sudo mount --bind /sys /&amp;lt;chrootlocation&amp;gt;/sys
  sudo cp /etc/resolv.conf /&amp;lt;chrootlocation&amp;gt;/etc/resolv.conf
  sudo chroot /&amp;lt;chrootlocation&amp;gt;&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;You will need to replace &lt;code&gt;&amp;lt;chrootlocation&amp;gt;&lt;/code&gt; with the appropriate
  location of your Ubuntu install, typically the label of the partition
  it's installed on. The partition must also be mounted so that you can
  access it.
3. Edit your &lt;code&gt;/etc/resolve.conf&lt;/code&gt; and add at least one nameserver:&lt;/p&gt;
&lt;p&gt;&lt;code&gt;shell
  nameserver 8.8.8.8 # Google Public DNS&lt;/code&gt;
4. Now you can do the &lt;code&gt;apt update&lt;/code&gt; and so on.
5. Exit chroot by simply doing &lt;code&gt;exit&lt;/code&gt; in terminal.
6. If you are done, just &lt;code&gt;reboot now&lt;/code&gt;.&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;div class="footnote"&gt;
&lt;hr&gt;
&lt;ol&gt;
&lt;li id="fn:1"&gt;
&lt;p&gt;To check screen resolution: &lt;code&gt;xdpyinfo | grep dimensions&lt;/code&gt;.&amp;#160;&lt;a class="footnote-backref" href="#fnref:1" title="Jump back to footnote 1 in the text"&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;</content><category term="dev"></category><category term="dev"></category></entry><entry><title>Snapshot anything w/ Selenium</title><link href="https://fengxia41103.github.io/myblog/snapshot%20selenium.html" rel="alternate"></link><published>2019-09-25T10:35:00-04:00</published><updated>2019-09-25T10:35:00-04:00</updated><author><name>Feng Xia</name></author><id>tag:fengxia41103.github.io,2019-09-25:/myblog/snapshot selenium.html</id><summary type="html">&lt;figure class="col l6 m6 s12"&gt;
  &lt;img src="images/back%20rub.jpg"/&gt;
&lt;/figure&gt;

&lt;p&gt;In my previous notes on &lt;a href="https://fengxia41103.github.io/myblog/analyzing angular 1x.html"&gt;analyzing Angular 1.x code&lt;/a&gt;, I have stuck at
how to create snapshots of rendered components for my documentation
purpose. In the manual data file &lt;code&gt;.json&lt;/code&gt;, I allowed an entry to plug
in snapshot file taken by human testers. As an example, the code below
shows a block documenting:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;module: &lt;code&gt;mwc.mapping&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;its components as a LIST, and each has a key &lt;code&gt;screenshot&lt;/code&gt; that is a
   path to the snapshot file.&lt;/li&gt;
&lt;/ol&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="p"&gt;{&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="nt"&gt;&amp;quot;components&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
&lt;span class="w"&gt;      &lt;/span&gt;&lt;span class="nt"&gt;&amp;quot;source file&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;../app/topology/components/mappings.component.ts&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
&lt;span class="w"&gt;      &lt;/span&gt;&lt;span class="nt"&gt;&amp;quot;name&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;mwc-mappings&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
&lt;span class="w"&gt;      &lt;/span&gt;&lt;span class="nt"&gt;&amp;quot;screenshot&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;./screenshots/mwc-mappings.png&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
&lt;span class="w"&gt;      &lt;/span&gt;&lt;span class="nt"&gt;&amp;quot;used by&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="kc"&gt;null&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
&lt;span class="w"&gt;      &lt;/span&gt;&lt;span class="nt"&gt;&amp;quot;using&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;
&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;mwc-create-flash-pool-button&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;mwc-flash-pool-actions-button&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;mwc-create-migration-zone-button&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;mwc-migration-zone-actions-button&amp;quot;&lt;/span&gt;
&lt;span class="w"&gt;      &lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt;
&lt;span class="w"&gt;      &lt;/span&gt;&lt;span class="nt"&gt;&amp;quot;class&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;MappingsComponent&amp;quot;&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="nt"&gt;&amp;quot;module&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;mwc.mappings&amp;quot;&lt;/span&gt;
&lt;span class="p"&gt;},&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Well, this gets me going to create the &lt;a href="https://fengxia41103.github.io/myblog/downloads/webapp.pdf"&gt;example doc&lt;/a&gt;, but to have
human hunting down screenshots always give me a fishy feeling &amp;mdash;
you know how deeply I do not trust human to be &lt;strong&gt;exhaustive&lt;/strong&gt; and
&lt;strong&gt;deterministic&lt;/strong&gt; &amp;mdash; on a good day or w/ a capable person, yes,
you get a pretty satisfactory result, but even then, it's no guarantee
his/her next day's delivery will be the same. Not to mention …&lt;/p&gt;</summary><content type="html">&lt;figure class="col l6 m6 s12"&gt;
  &lt;img src="images/back%20rub.jpg"/&gt;
&lt;/figure&gt;

&lt;p&gt;In my previous notes on &lt;a href="https://fengxia41103.github.io/myblog/analyzing angular 1x.html"&gt;analyzing Angular 1.x code&lt;/a&gt;, I have stuck at
how to create snapshots of rendered components for my documentation
purpose. In the manual data file &lt;code&gt;.json&lt;/code&gt;, I allowed an entry to plug
in snapshot file taken by human testers. As an example, the code below
shows a block documenting:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;module: &lt;code&gt;mwc.mapping&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;its components as a LIST, and each has a key &lt;code&gt;screenshot&lt;/code&gt; that is a
   path to the snapshot file.&lt;/li&gt;
&lt;/ol&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="p"&gt;{&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="nt"&gt;&amp;quot;components&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
&lt;span class="w"&gt;      &lt;/span&gt;&lt;span class="nt"&gt;&amp;quot;source file&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;../app/topology/components/mappings.component.ts&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
&lt;span class="w"&gt;      &lt;/span&gt;&lt;span class="nt"&gt;&amp;quot;name&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;mwc-mappings&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
&lt;span class="w"&gt;      &lt;/span&gt;&lt;span class="nt"&gt;&amp;quot;screenshot&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;./screenshots/mwc-mappings.png&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
&lt;span class="w"&gt;      &lt;/span&gt;&lt;span class="nt"&gt;&amp;quot;used by&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="kc"&gt;null&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
&lt;span class="w"&gt;      &lt;/span&gt;&lt;span class="nt"&gt;&amp;quot;using&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;
&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;mwc-create-flash-pool-button&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;mwc-flash-pool-actions-button&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;mwc-create-migration-zone-button&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;mwc-migration-zone-actions-button&amp;quot;&lt;/span&gt;
&lt;span class="w"&gt;      &lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt;
&lt;span class="w"&gt;      &lt;/span&gt;&lt;span class="nt"&gt;&amp;quot;class&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;MappingsComponent&amp;quot;&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="nt"&gt;&amp;quot;module&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;mwc.mappings&amp;quot;&lt;/span&gt;
&lt;span class="p"&gt;},&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Well, this gets me going to create the &lt;a href="https://fengxia41103.github.io/myblog/downloads/webapp.pdf"&gt;example doc&lt;/a&gt;, but to have
human hunting down screenshots always give me a fishy feeling &amp;mdash;
you know how deeply I do not trust human to be &lt;strong&gt;exhaustive&lt;/strong&gt; and
&lt;strong&gt;deterministic&lt;/strong&gt; &amp;mdash; on a good day or w/ a capable person, yes,
you get a pretty satisfactory result, but even then, it's no guarantee
his/her next day's delivery will be the same. Not to mention,
executing a task such as "finding all the HTML tag matching this
pattern, and take a screenshot of it, and save it here, and update the
file here..." is tedious, boring, and no fun &amp;larr; I would hate to do
something like this, not even for once, certainly not for 10th time or
daily. Computer can do this, a lot better, quicker. After all, the
component has been written and computer is rendering it for human to
look at, then why can't computer just capture the &lt;em&gt;look&lt;/em&gt; of it
automatically?&lt;/p&gt;
&lt;p&gt;Of course it can. The idea is this:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Use Selenium to launch a browser.&lt;/li&gt;
&lt;li&gt;Use XPATH to select the element(s) you want.&lt;/li&gt;
&lt;li&gt;Enumerate through the element, determine where to save the file
   &amp;mdash; file path, file name convention.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;element.snapshot(file_path)&lt;/code&gt; will write to &lt;code&gt;file_path&lt;/code&gt; onto the file system.&lt;/li&gt;
&lt;/ol&gt;
&lt;figure class="col s12"&gt;
  &lt;img src="images/selenium%20snapshot.gif"/&gt;
&lt;/figure&gt;

&lt;p&gt;Window on the right hand side is monitoring folder on the file system
for screenshots. It starts w/ an empty directory. Window on the top
left is the terminal where you will see printout from the script when
it finds the interested element and takes its snapshot, eg. &lt;code&gt;smile:
mwc-support-mode-modal&lt;/code&gt;. Window on the bottom left is the browser
window launched by Selenium which gives you an idea how the computer
is working. The browser is shown only for demo purpose. It can be
turned into &lt;strong&gt;headless&lt;/strong&gt; mode.&lt;/p&gt;
&lt;h1&gt;context&lt;/h1&gt;
&lt;p&gt;One thing of taking snapshot is to provide a context to viewer &amp;mdash;
in which page/panel/container this component is being used. Believe or
not, some components I'm dealing w/ is nothing but a small green dot
(see below)! Therefore, it will be pretty useless if I'm just giving
you an image of itself.&lt;/p&gt;
&lt;figure class="col s12"&gt;
  &lt;img src="images/mwc-network-hardware-status-icon.png"/&gt;
  &lt;figcaption&gt;
  Example of an element becoming much more meaningful when given a
  context than only by itself.
  &lt;/figcaption&gt;
&lt;/figure&gt;

&lt;p&gt;On the other hand, by taking the snapshot of a &lt;em&gt;higher&lt;/em&gt; level element
and use a RED square to highlight your target, you have a context of
its usage. The trick is to use the &lt;code&gt;ancestor&lt;/code&gt; axes in XPATH. Say we
are to search any HTML tag starts with &lt;code&gt;feng&lt;/code&gt;: &lt;code&gt;target_xpath =
"*[starts-with(local-name(), 'feng-')]"&lt;/code&gt;, then I want to find its
context matching the same HTML tag pattern: &lt;code&gt;ancestor_xpath =
"ancestor::%s[position()=1]" % target_xpath&lt;/code&gt;.&lt;/p&gt;
&lt;h2&gt;snapshot in a context&lt;/h2&gt;
&lt;p&gt;Taking snapshot to illustrate a context thus taking two steps:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Take a snapshot of the context element, eg. an ancestor, and save
   the file.&lt;/li&gt;
&lt;li&gt;Open this file, and using Python Image Library to draw a rectangle
   using the &lt;code&gt;location&lt;/code&gt; and &lt;code&gt;size&lt;/code&gt; of your target element.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Example of a code snippet is shown below. &lt;strong&gt;Note&lt;/strong&gt; that you must adjust the
element &lt;code&gt;c&lt;/code&gt; location based on the ancestor's because once we took a
snapshot of the ancestor, its origin becomes the new &lt;code&gt;(0,0)&lt;/code&gt;.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="c1"&gt;# looking for the first ancestor matching the xpath&lt;/span&gt;
&lt;span class="n"&gt;ancestor_xpath&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;ancestor::&lt;/span&gt;&lt;span class="si"&gt;%s&lt;/span&gt;&lt;span class="s2"&gt;[position()=1]&amp;quot;&lt;/span&gt; &lt;span class="o"&gt;%&lt;/span&gt; &lt;span class="n"&gt;context&lt;/span&gt;
&lt;span class="n"&gt;ancestors&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;c&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;find_elements_by_xpath&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;ancestor_xpath&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;ancestors&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="n"&gt;parent&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;ancestors&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;

    &lt;span class="c1"&gt;# take snapshot of the ancestor&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="ow"&gt;not&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;_take_snapshot&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;parent&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;filename&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="k"&gt;continue&lt;/span&gt;

    &lt;span class="c1"&gt;# draw a red rectangle around this component&lt;/span&gt;
    &lt;span class="k"&gt;with&lt;/span&gt; &lt;span class="n"&gt;Image&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;open&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;filename&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;as&lt;/span&gt; &lt;span class="n"&gt;im&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="n"&gt;draw&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;ImageDraw&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Draw&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;im&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="n"&gt;x1&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;int&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;c&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;location&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;x&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="nb"&gt;int&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;parent&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;location&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;x&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt;
        &lt;span class="n"&gt;y1&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;int&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;c&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;location&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;y&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="nb"&gt;int&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;parent&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;location&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;y&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt;
        &lt;span class="n"&gt;x2&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;x1&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="nb"&gt;int&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;c&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;size&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;width&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt;
        &lt;span class="n"&gt;y2&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;y1&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="nb"&gt;int&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;c&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;size&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;height&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt;
        &lt;span class="n"&gt;draw&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;rectangle&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
            &lt;span class="p"&gt;[(&lt;/span&gt;&lt;span class="n"&gt;x1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;y1&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;x2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;y2&lt;/span&gt;&lt;span class="p"&gt;)],&lt;/span&gt;
            &lt;span class="n"&gt;outline&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;red&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
            &lt;span class="n"&gt;width&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt;
        &lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="k"&gt;del&lt;/span&gt; &lt;span class="n"&gt;draw&lt;/span&gt;
        &lt;span class="n"&gt;im&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;save&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;filename&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="k"&gt;else&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;_take_snapshot&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;c&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;filename&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;h1&gt;dropdown menu&lt;/h1&gt;
&lt;p&gt;Dropdown is tricky. You don't see the dropdown menu unless user
clicks. However, like the green dot example above, it's not meaningful
you only show the trigger because many times it's only an icon (not
even a button w/ text!). So depending on how dropdown is being
implemented in your code, you have to think of a way to &lt;em&gt;open&lt;/em&gt; the
dropdown, and take a snapshot of it &lt;strong&gt;together w/ its trigger&lt;/strong&gt;:&lt;/p&gt;
&lt;figure class="col l6 m6 s12"&gt;
  &lt;img src="images/mwc-network-controller-actions-button.png"/&gt;
  &lt;figcaption&gt;

  An example of dropdown menu whose trigger is only a small icon. Thus
  by programmatically open the dropdown, we can take a snapshot of the
  menu and the trigger together, giving it a context.

  &lt;/figcaption&gt;
&lt;/figure&gt;

&lt;h1&gt;modal dialog&lt;/h1&gt;
&lt;figure class="col l6 m6 s12"&gt;
  &lt;img src="images/mwc-host-enable-maintenance-mode-modal.png"/&gt;
  &lt;figcaption&gt;

  An example of modal dialog half-rendered when we don't wait for its visibility.

  &lt;/figcaption&gt;
&lt;/figure&gt;

&lt;p&gt;Modals are evil! There are many challenges:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;We need to identify it's trigger pattern &amp;larr; what can trigger a
   modal to appear. In many cases the modal trigger code is already attached
   to DOM, but is invisible. So XPATH can pick them up, but
   &lt;code&gt;element.click()&lt;/code&gt; will fail. Instead, use the brute force way to
   click: &lt;code&gt;driver.execute_script("arguments[0].click();", element)&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;Modal dialog takes time to become &lt;em&gt;present&lt;/em&gt; in DOM and &lt;em&gt;visible&lt;/em&gt;. You have
   to wait for both. Waiting only for presence will give a snapshot
   that the modal is half gray-ed out because it is still in the
   process of rendering &amp;larr; this is the difference between a human
   and a computer &amp;mdash; computer can take the snapshot much quicker
   than human can even though the element is not yet _humanly visible
   (but is already perfectly valid because it has attached to DOM!).&lt;/li&gt;
&lt;li&gt;Modal is often used to prompt user for an action with common option
   of &lt;em&gt;do sth&lt;/em&gt; or &lt;strong&gt;cancel&lt;/strong&gt;. In our snapshot effort, I don't want to
   change anything in the application, but only for the loop of a
   modal. Thus, we should trigger it to appear, and &lt;strong&gt;always click the CANCEL&lt;/strong&gt;!&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;We deliberately ignore Modal's context because a popup usually takes
over the entire screen asset (w/ a gray-ed out background over the
original page), thus is viewed as a stand-alone entity anyway. And
another good news &amp;mdash; modal can not be nested. Thus, we are only
dealing one at a time (if we religiously clicked the CANCEL each time!).&lt;/p&gt;
&lt;h1&gt;code&lt;/h1&gt;
&lt;p&gt;Script is &lt;a href="https://github.com/fengxia41103/dev/tree/master/snapshot"&gt;here&lt;/a&gt;. &lt;/p&gt;
&lt;h2&gt;installation&lt;/h2&gt;
&lt;h3&gt;chrome driver&lt;/h3&gt;
&lt;p&gt;&lt;code&gt;apt search chromedriver&lt;/code&gt;, then install the one you found:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;on Ubuntu 16.04: &lt;code&gt;apt install chromedriver&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;on Ubuntu 18.04: &lt;code&gt;apt install chromium-chromedriver&lt;/code&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;h3&gt;firefox webdriver (aka. geckodriver)&lt;/h3&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="nb"&gt;export&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nv"&gt;GV&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;v0.25.0
wget&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;https://github.com/mozilla/geckodriver/releases/download/&lt;/span&gt;&lt;span class="nv"&gt;$GV&lt;/span&gt;&lt;span class="s2"&gt;/geckodriver-&lt;/span&gt;&lt;span class="nv"&gt;$GV&lt;/span&gt;&lt;span class="s2"&gt;-linux64.tar.gz&amp;quot;&lt;/span&gt;
tar&lt;span class="w"&gt; &lt;/span&gt;xvzf&lt;span class="w"&gt; &lt;/span&gt;geckodriver-&lt;span class="nv"&gt;$GV&lt;/span&gt;-linux64.tar.gz&lt;span class="w"&gt; &lt;/span&gt;
chmod&lt;span class="w"&gt; &lt;/span&gt;+x&lt;span class="w"&gt; &lt;/span&gt;geckodriver
sudo&lt;span class="w"&gt; &lt;/span&gt;cp&lt;span class="w"&gt; &lt;/span&gt;geckodriver&lt;span class="w"&gt; &lt;/span&gt;/usr/local/bin/
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;</content><category term="dev"></category><category term="dev"></category></entry><entry><title>Rebranding</title><link href="https://fengxia41103.github.io/myblog/rebranding.html" rel="alternate"></link><published>2019-09-11T16:15:00-04:00</published><updated>2019-09-11T16:15:00-04:00</updated><author><name>Feng Xia</name></author><id>tag:fengxia41103.github.io,2019-09-11:/myblog/rebranding.html</id><summary type="html">&lt;p&gt;Rebranding is a common task. The core of it is how to evaluate your
code base to pick up interested artifacts &amp;larr; brand
indicator. Definition of these artifacts are highly contextual,
meaning that a string &lt;code&gt;feng&lt;/code&gt; can mean a variable, or a string literal,
or something else. Think of it, how many programming languages in your
application stack, and how many different comment styles there are!?
Crazy.&lt;/p&gt;
&lt;p&gt;So let's start w/ the most basic &amp;mdash; string literal &amp;mdash; if I
find a string &lt;code&gt;whatever&lt;/code&gt; (old brand), replace it w/ &lt;code&gt;feng&lt;/code&gt; (new
brand).&lt;/p&gt;
&lt;h1&gt;the how&lt;/h1&gt;
&lt;p&gt;The script can be found &lt;a href="https://github.com/fengxia41103/dev/blob/master/code%20analysis/fancy_string_search.py"&gt;here&lt;/a&gt;. The idea is to:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Walk through &lt;code&gt;root&lt;/code&gt; folder and its subfolders and files.&lt;/li&gt;
&lt;li&gt;File is selected by its extension &amp;mdash;  an exclusion list and an inclusion
   list. Exclusion has a default list to exclude all binary formats,
   eg. &lt;code&gt;.png&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Open the file as text file, search line by line whether interested
   pattern in found.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;If found, log down the file full path, line number, and original
     line text.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Identify &lt;code&gt;reference&lt;/code&gt;, which is defined as &lt;code&gt;/&amp;lt;.....&amp;gt;&lt;/code&gt; &amp;mdash; this
   covers reference to a …&lt;/p&gt;&lt;/li&gt;&lt;/ol&gt;</summary><content type="html">&lt;p&gt;Rebranding is a common task. The core of it is how to evaluate your
code base to pick up interested artifacts &amp;larr; brand
indicator. Definition of these artifacts are highly contextual,
meaning that a string &lt;code&gt;feng&lt;/code&gt; can mean a variable, or a string literal,
or something else. Think of it, how many programming languages in your
application stack, and how many different comment styles there are!?
Crazy.&lt;/p&gt;
&lt;p&gt;So let's start w/ the most basic &amp;mdash; string literal &amp;mdash; if I
find a string &lt;code&gt;whatever&lt;/code&gt; (old brand), replace it w/ &lt;code&gt;feng&lt;/code&gt; (new
brand).&lt;/p&gt;
&lt;h1&gt;the how&lt;/h1&gt;
&lt;p&gt;The script can be found &lt;a href="https://github.com/fengxia41103/dev/blob/master/code%20analysis/fancy_string_search.py"&gt;here&lt;/a&gt;. The idea is to:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Walk through &lt;code&gt;root&lt;/code&gt; folder and its subfolders and files.&lt;/li&gt;
&lt;li&gt;File is selected by its extension &amp;mdash;  an exclusion list and an inclusion
   list. Exclusion has a default list to exclude all binary formats,
   eg. &lt;code&gt;.png&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Open the file as text file, search line by line whether interested
   pattern in found.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;If found, log down the file full path, line number, and original
     line text.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Identify &lt;code&gt;reference&lt;/code&gt;, which is defined as &lt;code&gt;/&amp;lt;.....&amp;gt;&lt;/code&gt; &amp;mdash; this
   covers reference to a URL or an external file. This is important
   because it means the string has external dependency of some sort
   and requires further coordination.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Identify &lt;code&gt;emails&lt;/code&gt;. Emails can be viewed as another form of external
   references, eg. &lt;code&gt;support@yourcompany.com&lt;/code&gt;. You want to investigate
   what this email is for, and find an equivalent.&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;An example to use this tool:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;python&lt;span class="w"&gt; &lt;/span&gt;fancy_string_search.py&lt;span class="w"&gt; &lt;/span&gt;check-brand-reference&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="se"&gt;\&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;--exclude-folders
&lt;span class="w"&gt;  &lt;/span&gt;node_modules,fonts,contrib,.git,doc,output,bower_components,plugins&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="se"&gt;\&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;--search-for&lt;span class="w"&gt; &lt;/span&gt;whatever&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="se"&gt;\&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;--include-extensions&lt;span class="w"&gt; &lt;/span&gt;md&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="se"&gt;\&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;--no-split-target&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="se"&gt;\&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;~/workspace/myblog
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;h1&gt;example&lt;/h1&gt;
&lt;p&gt;Below is an example output (in &lt;a href="https://fengxia41103.github.io/myblog/pandoc workflow.html"&gt;pandoc&lt;/a&gt; .md format):&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;---
&lt;span class="gu"&gt;title: Rebranding Analysis Report&lt;/span&gt;
&lt;span class="gu"&gt;---&lt;/span&gt;

&lt;span class="gh"&gt;# Search criteria&lt;/span&gt;


&lt;span class="k"&gt;-&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;root folder: 
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="k"&gt;-&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;/home/fengxia/workspace/myblog

&lt;span class="k"&gt;-&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;matching key words: 
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="k"&gt;-&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;cliche
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="k"&gt;-&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;gmail

&lt;span class="k"&gt;-&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;include extensions: 
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="k"&gt;-&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;.md

&lt;span class="k"&gt;-&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;exclude extensions: 
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="k"&gt;-&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;.
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="k"&gt;-&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;.bz2
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="k"&gt;-&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;.tar.gz
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="k"&gt;-&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;.bz
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="k"&gt;-&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;.gz
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="k"&gt;-&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;.xz
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="k"&gt;-&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;.ico
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="k"&gt;-&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;.png
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="k"&gt;-&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;.jpg
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="k"&gt;-&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;.pdf
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="k"&gt;-&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;.dia
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="k"&gt;-&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;.db
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="k"&gt;-&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;.exe
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="k"&gt;-&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;.war
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="k"&gt;-&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;.rpm
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="k"&gt;-&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;.sasldb
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="k"&gt;-&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;.der
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="k"&gt;-&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;.p12
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="k"&gt;-&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;.jar
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="k"&gt;-&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;.mmdb
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="k"&gt;-&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;.bak
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="k"&gt;-&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;.yml_example
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="k"&gt;-&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;.properties
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="k"&gt;-&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;.docx
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="k"&gt;-&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;.doc
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="k"&gt;-&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;.spec
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="k"&gt;-&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;.pyc
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="k"&gt;-&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;.jpeg
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="k"&gt;-&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;.mp4
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="k"&gt;-&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;.gif
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="k"&gt;-&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;.webm
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="k"&gt;-&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;.autosave
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="k"&gt;-&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;.ttf
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="k"&gt;-&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;.svg
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="k"&gt;-&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;.gzip
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="k"&gt;-&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;.woff
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="k"&gt;-&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;.eot

&lt;span class="k"&gt;-&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;exclude folder patterns: 
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="k"&gt;-&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;node_modules
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="k"&gt;-&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;fonts
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="k"&gt;-&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;contrib
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="k"&gt;-&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;.git
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="k"&gt;-&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;doc
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="k"&gt;-&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;output
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="k"&gt;-&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;bower_components
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="k"&gt;-&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;plugins

&lt;span class="k"&gt;-&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;exclude string patterns: 

&lt;span class="gh"&gt;# Swap needed&lt;/span&gt;


&lt;span class="gu"&gt;## External references&lt;/span&gt;

They seem to be some reference to externals such as URLs. Need a value to swap.

&lt;span class="k"&gt;1.&lt;/span&gt; &lt;span class="sb"&gt;`[Gmail]/Starred`&lt;/span&gt;

&lt;span class="k"&gt;1.&lt;/span&gt; &lt;span class="sb"&gt;`[Gmail]/All Mail`&lt;/span&gt;

&lt;span class="k"&gt;1.&lt;/span&gt; &lt;span class="sb"&gt;`[Gmail]/Trash`&lt;/span&gt;

&lt;span class="k"&gt;1.&lt;/span&gt; &lt;span class="sb"&gt;`[Gmail]/Sent Mail`&lt;/span&gt;

&lt;span class="gu"&gt;### AWS S3&lt;/span&gt;


&lt;span class="gu"&gt;## Emails&lt;/span&gt;


&lt;span class="k"&gt;1.&lt;/span&gt; &lt;span class="sb"&gt;`yours@gmail.com`&lt;/span&gt;

&lt;span class="k"&gt;1.&lt;/span&gt; &lt;span class="sb"&gt;`NARENDRA REDDY &amp;lt;bugbounty10378@gmail.com`&lt;/span&gt;

&lt;span class="gh"&gt;# Files skipped&lt;/span&gt;

&lt;span class="gh"&gt;# Matched by &amp;quot;cliche&amp;quot;&lt;/span&gt;


&lt;span class="gu"&gt;## File type: &amp;quot;.md&amp;quot;:&lt;/span&gt;

&lt;span class="k"&gt;-&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;/home/fengxia/workspace/myblog/content/dev/rebranding.md

&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="k"&gt;1.&lt;/span&gt; on line &lt;span class="ni"&gt;#66:&lt;/span&gt; &lt;span class="sb"&gt;`- cliche`&lt;/span&gt;

&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="k"&gt;2.&lt;/span&gt; on line &lt;span class="ni"&gt;#139:&lt;/span&gt; &lt;span class="sb"&gt;`# Matched by &amp;quot;cliche&amp;quot;`&lt;/span&gt;

&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="k"&gt;3.&lt;/span&gt; on line &lt;span class="ni"&gt;#146:&lt;/span&gt; &lt;span class="sb"&gt;`1. on line #15: `&lt;/span&gt;criticized, hated (no I don&amp;#39;t hate this program, just the cliche``

&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="k"&gt;4.&lt;/span&gt; on line &lt;span class="ni"&gt;#149:&lt;/span&gt; &lt;span class="sb"&gt;`1. on line #70: `&lt;/span&gt;be. This may sound like a cliche, typical middle age crisis, poor guy.``

&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="k"&gt;5.&lt;/span&gt; on line &lt;span class="ni"&gt;#152:&lt;/span&gt; &lt;span class="sb"&gt;`1. on line #68: `&lt;/span&gt;traditional political cliches. But now, I feel he is a total disaster,``

&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="k"&gt;6.&lt;/span&gt; on line &lt;span class="ni"&gt;#155:&lt;/span&gt; &lt;span class="sb"&gt;`1. on line #96: `&lt;/span&gt;The fundamental law here is the cliche that **there is no free``

&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="k"&gt;7.&lt;/span&gt; on line &lt;span class="ni"&gt;#158:&lt;/span&gt; &lt;span class="sb"&gt;`1. on line #33: `&lt;/span&gt;frustrated, even hatred. This can&amp;#39;t be just a myth, a cliche that``

&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="k"&gt;8.&lt;/span&gt; on line &lt;span class="ni"&gt;#161:&lt;/span&gt; &lt;span class="sb"&gt;`1. on line #16: `&lt;/span&gt;It&amp;#39;s a cliche when people talk about luck, and someone gets lucky, or``

&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="k"&gt;9.&lt;/span&gt; on line &lt;span class="ni"&gt;#164:&lt;/span&gt; &lt;span class="sb"&gt;`1. on line #32: `&lt;/span&gt;again, which is often a cliche to my education and my generation, when``

&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="k"&gt;10.&lt;/span&gt; on line &lt;span class="ni"&gt;#167:&lt;/span&gt; &lt;span class="sb"&gt;`1. on line #105: `&lt;/span&gt;matter, let&amp;#39;s just use the cliche name, &lt;span class="gs"&gt;**progress**&lt;/span&gt;... then, what are``

&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="k"&gt;11.&lt;/span&gt; on line &lt;span class="ni"&gt;#170:&lt;/span&gt; &lt;span class="sb"&gt;`1. on line #17: `&lt;/span&gt;On one hand, the cliche is always that mid-age is a tough time because``

&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="k"&gt;12.&lt;/span&gt; on line &lt;span class="ni"&gt;#173:&lt;/span&gt; &lt;span class="sb"&gt;`1. on line #52: `&lt;/span&gt;becoming a cliche, and are being used freely without clarification nor``

&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="k"&gt;13.&lt;/span&gt; on line &lt;span class="ni"&gt;#176:&lt;/span&gt; &lt;span class="sb"&gt;`1. on line #153: `&lt;/span&gt;Even further, as we all know the cliche, hate and love are like twins``

&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="k"&gt;14.&lt;/span&gt; on line &lt;span class="ni"&gt;#179:&lt;/span&gt; &lt;span class="sb"&gt;`1. on line #91: `&lt;/span&gt;cliche in love scene, that if your relationships always go sore in the``

&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="k"&gt;15.&lt;/span&gt; on line &lt;span class="ni"&gt;#182:&lt;/span&gt; &lt;span class="sb"&gt;`1. on line #105: `&lt;/span&gt;it is an everyday cliche to have wifi and iPhone, but back to 500``
&lt;span class="k"&gt;-&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;/home/fengxia/workspace/myblog/content/thoughts/a vain debate pattern.md

&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="k"&gt;1.&lt;/span&gt; on line &lt;span class="ni"&gt;#15:&lt;/span&gt; &lt;span class="sb"&gt;`criticized, hated (no I don&amp;#39;t hate this program, just the cliche`&lt;/span&gt;
&lt;span class="k"&gt;-&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;/home/fengxia/workspace/myblog/content/thoughts/city.md

&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="k"&gt;1.&lt;/span&gt; on line &lt;span class="ni"&gt;#70:&lt;/span&gt; &lt;span class="sb"&gt;`be. This may sound like a cliche, typical middle age crisis, poor guy.`&lt;/span&gt;
&lt;span class="k"&gt;-&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;/home/fengxia/workspace/myblog/content/thoughts/law.md

&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="k"&gt;1.&lt;/span&gt; on line &lt;span class="ni"&gt;#68:&lt;/span&gt; &lt;span class="sb"&gt;`traditional political cliches. But now, I feel he is a total disaster,`&lt;/span&gt;
&lt;span class="k"&gt;-&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;/home/fengxia/workspace/myblog/content/thoughts/lost job.md

&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="k"&gt;1.&lt;/span&gt; on line &lt;span class="ni"&gt;#96:&lt;/span&gt; &lt;span class="sb"&gt;`The fundamental law here is the cliche that **there is no free`&lt;/span&gt;
&lt;span class="k"&gt;-&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;/home/fengxia/workspace/myblog/content/thoughts/love life.md

&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="k"&gt;1.&lt;/span&gt; on line &lt;span class="ni"&gt;#33:&lt;/span&gt; &lt;span class="sb"&gt;`frustrated, even hatred. This can&amp;#39;t be just a myth, a cliche that`&lt;/span&gt;
&lt;span class="k"&gt;-&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;/home/fengxia/workspace/myblog/content/thoughts/luck.md

&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="k"&gt;1.&lt;/span&gt; on line &lt;span class="ni"&gt;#16:&lt;/span&gt; &lt;span class="sb"&gt;`It&amp;#39;s a cliche when people talk about luck, and someone gets lucky, or`&lt;/span&gt;
&lt;span class="k"&gt;-&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;/home/fengxia/workspace/myblog/content/thoughts/mind.md

&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="k"&gt;1.&lt;/span&gt; on line &lt;span class="ni"&gt;#32:&lt;/span&gt; &lt;span class="sb"&gt;`again, which is often a cliche to my education and my generation, when`&lt;/span&gt;
&lt;span class="k"&gt;-&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;/home/fengxia/workspace/myblog/content/thoughts/mob.md

&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="k"&gt;1.&lt;/span&gt; on line &lt;span class="ni"&gt;#105:&lt;/span&gt; &lt;span class="sb"&gt;`matter, let&amp;#39;s just use the cliche name, **progress**... then, what are`&lt;/span&gt;
&lt;span class="k"&gt;-&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;/home/fengxia/workspace/myblog/content/thoughts/must do.md

&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="k"&gt;1.&lt;/span&gt; on line &lt;span class="ni"&gt;#17:&lt;/span&gt; &lt;span class="sb"&gt;`On one hand, the cliche is always that mid-age is a tough time because`&lt;/span&gt;
&lt;span class="k"&gt;-&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;/home/fengxia/workspace/myblog/content/thoughts/reflection on technology.md

&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="k"&gt;1.&lt;/span&gt; on line &lt;span class="ni"&gt;#52:&lt;/span&gt; &lt;span class="sb"&gt;`becoming a cliche, and are being used freely without clarification nor`&lt;/span&gt;
&lt;span class="k"&gt;-&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;/home/fengxia/workspace/myblog/content/thoughts/society.md

&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="k"&gt;1.&lt;/span&gt; on line &lt;span class="ni"&gt;#153:&lt;/span&gt; &lt;span class="sb"&gt;`Even further, as we all know the cliche, hate and love are like twins`&lt;/span&gt;
&lt;span class="k"&gt;-&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;/home/fengxia/workspace/myblog/content/thoughts/technology responsibility.md

&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="k"&gt;1.&lt;/span&gt; on line &lt;span class="ni"&gt;#91:&lt;/span&gt; &lt;span class="sb"&gt;`cliche in love scene, that if your relationships always go sore in the`&lt;/span&gt;
&lt;span class="k"&gt;-&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;/home/fengxia/workspace/myblog/content/thoughts/the wrong elite.md

&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="k"&gt;1.&lt;/span&gt; on line &lt;span class="ni"&gt;#105:&lt;/span&gt; &lt;span class="sb"&gt;`it is an everyday cliche to have wifi and iPhone, but back to 500`&lt;/span&gt;

&lt;span class="gu"&gt;## Is a reference&lt;/span&gt;

We think they are file reference or URL link. Changing a value needs cross check.


None

&lt;span class="gu"&gt;## Is an email address&lt;/span&gt;


None

&lt;span class="gh"&gt;# Matched by &amp;quot;gmail&amp;quot;&lt;/span&gt;


&lt;span class="gu"&gt;## File type: &amp;quot;.md&amp;quot;:&lt;/span&gt;

&lt;span class="k"&gt;-&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;/home/fengxia/workspace/myblog/content/dev/mbsync.md

&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="k"&gt;1.&lt;/span&gt; on line &lt;span class="ni"&gt;#18:&lt;/span&gt; &lt;span class="sb"&gt;`configuration to make it work (sort of) with Hotmail&amp;#39;s IMAP. Gmail`&lt;/span&gt;

&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="k"&gt;2.&lt;/span&gt; on line &lt;span class="ni"&gt;#49:&lt;/span&gt; &lt;span class="sb"&gt;`2. for gmail:`&lt;/span&gt;imap.gmail.com``

&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="k"&gt;3.&lt;/span&gt; on line &lt;span class="ni"&gt;#54:&lt;/span&gt; &lt;span class="sb"&gt;`Host imap.outlook.com # or imap.gmail.com`&lt;/span&gt;

&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="k"&gt;4.&lt;/span&gt; on line &lt;span class="ni"&gt;#58:&lt;/span&gt; &lt;span class="sb"&gt;`# These settings work for both gmail and hotmail`&lt;/span&gt;

&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="k"&gt;5.&lt;/span&gt; on line &lt;span class="ni"&gt;#159:&lt;/span&gt; &lt;span class="sb"&gt;`IMAPStore gmail-remote # &amp;lt;-- user defined name`&lt;/span&gt;

&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="k"&gt;6.&lt;/span&gt; on line &lt;span class="ni"&gt;#160:&lt;/span&gt; &lt;span class="sb"&gt;`Account gmail # &amp;lt;-- the account name defined in Account section`&lt;/span&gt;

&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="k"&gt;7.&lt;/span&gt; on line &lt;span class="ni"&gt;#169:&lt;/span&gt; &lt;span class="sb"&gt;`MaildirStore gmail-local`&lt;/span&gt;

&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="k"&gt;8.&lt;/span&gt; on line &lt;span class="ni"&gt;#170:&lt;/span&gt; &lt;span class="sb"&gt;`Path ~/Maildir/Gmail/`&lt;/span&gt;

&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="k"&gt;9.&lt;/span&gt; on line &lt;span class="ni"&gt;#171:&lt;/span&gt; &lt;span class="sb"&gt;`Inbox ~/Maildir/Gmail/inbox/`&lt;/span&gt;

&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="k"&gt;10.&lt;/span&gt; on line &lt;span class="ni"&gt;#178:&lt;/span&gt; &lt;span class="sb"&gt;`Channel gmail-inbox`&lt;/span&gt;

&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="k"&gt;11.&lt;/span&gt; on line &lt;span class="ni"&gt;#179:&lt;/span&gt; &lt;span class="sb"&gt;`Master :gmail-remote: # &amp;lt;-- remote store`&lt;/span&gt;

&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="k"&gt;12.&lt;/span&gt; on line &lt;span class="ni"&gt;#180:&lt;/span&gt; &lt;span class="sb"&gt;`Slave :gmail-local:inbox # &amp;lt;-- local dir`&lt;/span&gt;

&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="k"&gt;13.&lt;/span&gt; on line &lt;span class="ni"&gt;#192:&lt;/span&gt; &lt;span class="sb"&gt;`Group gmail`&lt;/span&gt;

&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="k"&gt;14.&lt;/span&gt; on line &lt;span class="ni"&gt;#193:&lt;/span&gt; &lt;span class="sb"&gt;`Channel gmail-trash`&lt;/span&gt;

&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="k"&gt;15.&lt;/span&gt; on line &lt;span class="ni"&gt;#194:&lt;/span&gt; &lt;span class="sb"&gt;`Channel gmail-inbox`&lt;/span&gt;

&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="k"&gt;16.&lt;/span&gt; on line &lt;span class="ni"&gt;#195:&lt;/span&gt; &lt;span class="sb"&gt;`Channel gmail-sent`&lt;/span&gt;

&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="k"&gt;17.&lt;/span&gt; on line &lt;span class="ni"&gt;#196:&lt;/span&gt; &lt;span class="sb"&gt;`Channel gmail-all`&lt;/span&gt;

&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="k"&gt;18.&lt;/span&gt; on line &lt;span class="ni"&gt;#197:&lt;/span&gt; &lt;span class="sb"&gt;`Channel gmail-starred`&lt;/span&gt;

&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="k"&gt;19.&lt;/span&gt; on line &lt;span class="ni"&gt;#206:&lt;/span&gt; ``~/Maildir/Gmail`.`

&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="k"&gt;20.&lt;/span&gt; on line &lt;span class="ni"&gt;#233:&lt;/span&gt; &lt;span class="sb"&gt;`# Gmail account`&lt;/span&gt;

&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="k"&gt;21.&lt;/span&gt; on line &lt;span class="ni"&gt;#234:&lt;/span&gt; &lt;span class="sb"&gt;`IMAPAccount gmail`&lt;/span&gt;

&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="k"&gt;22.&lt;/span&gt; on line &lt;span class="ni"&gt;#236:&lt;/span&gt; &lt;span class="sb"&gt;`Host imap.gmail.com`&lt;/span&gt;

&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="k"&gt;23.&lt;/span&gt; on line &lt;span class="ni"&gt;#237:&lt;/span&gt; &lt;span class="sb"&gt;`User yours@gmail.com`&lt;/span&gt;

&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="k"&gt;24.&lt;/span&gt; on line &lt;span class="ni"&gt;#255:&lt;/span&gt; &lt;span class="sb"&gt;`IMAPStore gmail-remote`&lt;/span&gt;

&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="k"&gt;25.&lt;/span&gt; on line &lt;span class="ni"&gt;#256:&lt;/span&gt; &lt;span class="sb"&gt;`Account gmail`&lt;/span&gt;

&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="k"&gt;26.&lt;/span&gt; on line &lt;span class="ni"&gt;#258:&lt;/span&gt; &lt;span class="sb"&gt;`# LOCAL STORAGE (CREATE DIRECTORIES with mkdir -p Maildir/gmail)`&lt;/span&gt;

&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="k"&gt;27.&lt;/span&gt; on line &lt;span class="ni"&gt;#259:&lt;/span&gt; &lt;span class="sb"&gt;`MaildirStore gmail-local`&lt;/span&gt;

&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="k"&gt;28.&lt;/span&gt; on line &lt;span class="ni"&gt;#260:&lt;/span&gt; &lt;span class="sb"&gt;`Path ~/Maildir/Gmail/`&lt;/span&gt;

&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="k"&gt;29.&lt;/span&gt; on line &lt;span class="ni"&gt;#261:&lt;/span&gt; &lt;span class="sb"&gt;`Inbox ~/Maildir/Gmail/inbox/`&lt;/span&gt;

&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="k"&gt;30.&lt;/span&gt; on line &lt;span class="ni"&gt;#272:&lt;/span&gt; &lt;span class="sb"&gt;`#       gmail channels`&lt;/span&gt;

&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="k"&gt;31.&lt;/span&gt; on line &lt;span class="ni"&gt;#284:&lt;/span&gt; &lt;span class="sb"&gt;`Channel gmail-inbox`&lt;/span&gt;

&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="k"&gt;32.&lt;/span&gt; on line &lt;span class="ni"&gt;#285:&lt;/span&gt; &lt;span class="sb"&gt;`Master :gmail-remote:`&lt;/span&gt;

&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="k"&gt;33.&lt;/span&gt; on line &lt;span class="ni"&gt;#286:&lt;/span&gt; &lt;span class="sb"&gt;`Slave :gmail-local:inbox`&lt;/span&gt;

&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="k"&gt;34.&lt;/span&gt; on line &lt;span class="ni"&gt;#291:&lt;/span&gt; &lt;span class="sb"&gt;`Channel gmail-trash`&lt;/span&gt;

&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="k"&gt;35.&lt;/span&gt; on line &lt;span class="ni"&gt;#292:&lt;/span&gt; &lt;span class="sb"&gt;`Master :gmail-remote:&amp;quot;[Gmail]/Trash&amp;quot;`&lt;/span&gt;

&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="k"&gt;36.&lt;/span&gt; on line &lt;span class="ni"&gt;#293:&lt;/span&gt; &lt;span class="sb"&gt;`Slave :gmail-local:trash`&lt;/span&gt;

&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="k"&gt;37.&lt;/span&gt; on line &lt;span class="ni"&gt;#298:&lt;/span&gt; &lt;span class="sb"&gt;`Channel gmail-all`&lt;/span&gt;

&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="k"&gt;38.&lt;/span&gt; on line &lt;span class="ni"&gt;#299:&lt;/span&gt; &lt;span class="sb"&gt;`Master :gmail-remote:&amp;quot;[Gmail]/All Mail&amp;quot;`&lt;/span&gt;

&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="k"&gt;39.&lt;/span&gt; on line &lt;span class="ni"&gt;#300:&lt;/span&gt; &lt;span class="sb"&gt;`Slave :gmail-local:all`&lt;/span&gt;

&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="k"&gt;40.&lt;/span&gt; on line &lt;span class="ni"&gt;#305:&lt;/span&gt; &lt;span class="sb"&gt;`Channel gmail-sent`&lt;/span&gt;

&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="k"&gt;41.&lt;/span&gt; on line &lt;span class="ni"&gt;#306:&lt;/span&gt; &lt;span class="sb"&gt;`Master :gmail-remote:&amp;quot;[Gmail]/Sent Mail&amp;quot;`&lt;/span&gt;

&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="k"&gt;42.&lt;/span&gt; on line &lt;span class="ni"&gt;#307:&lt;/span&gt; &lt;span class="sb"&gt;`Slave :gmail-local:sent`&lt;/span&gt;

&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="k"&gt;43.&lt;/span&gt; on line &lt;span class="ni"&gt;#312:&lt;/span&gt; &lt;span class="sb"&gt;`Channel gmail-allChannel gmail-starred`&lt;/span&gt;

&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="k"&gt;44.&lt;/span&gt; on line &lt;span class="ni"&gt;#313:&lt;/span&gt; &lt;span class="sb"&gt;`Master :gmail-remote:&amp;quot;[Gmail]/Starred&amp;quot;`&lt;/span&gt;

&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="k"&gt;45.&lt;/span&gt; on line &lt;span class="ni"&gt;#314:&lt;/span&gt; &lt;span class="sb"&gt;`Slave :gmail-local:starred`&lt;/span&gt;

&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="k"&gt;46.&lt;/span&gt; on line &lt;span class="ni"&gt;#379:&lt;/span&gt; &lt;span class="sb"&gt;`Group gmail`&lt;/span&gt;

&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="k"&gt;47.&lt;/span&gt; on line &lt;span class="ni"&gt;#380:&lt;/span&gt; &lt;span class="sb"&gt;`Channel gmail-trash`&lt;/span&gt;

&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="k"&gt;48.&lt;/span&gt; on line &lt;span class="ni"&gt;#381:&lt;/span&gt; &lt;span class="sb"&gt;`Channel gmail-inbox`&lt;/span&gt;

&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="k"&gt;49.&lt;/span&gt; on line &lt;span class="ni"&gt;#382:&lt;/span&gt; &lt;span class="sb"&gt;`Channel gmail-sent`&lt;/span&gt;

&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="k"&gt;50.&lt;/span&gt; on line &lt;span class="ni"&gt;#383:&lt;/span&gt; &lt;span class="sb"&gt;`Channel gmail-all`&lt;/span&gt;

&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="k"&gt;51.&lt;/span&gt; on line &lt;span class="ni"&gt;#384:&lt;/span&gt; &lt;span class="sb"&gt;`Channel gmail-starred`&lt;/span&gt;

&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="k"&gt;52.&lt;/span&gt; on line &lt;span class="ni"&gt;#465:&lt;/span&gt; &lt;span class="sb"&gt;`# gmail &amp;amp;mdash; less secured`&lt;/span&gt;

&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="k"&gt;53.&lt;/span&gt; on line &lt;span class="ni"&gt;#467:&lt;/span&gt; &lt;span class="sb"&gt;`Sending username and pwd to login in Gmail will be blocked. A couple`&lt;/span&gt;
&lt;span class="k"&gt;-&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;/home/fengxia/workspace/myblog/content/thoughts/strange fate.md

&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="k"&gt;1.&lt;/span&gt; on line &lt;span class="ni"&gt;#26:&lt;/span&gt; &lt;span class="sb"&gt;`KANDULA.VENKATA NARENDRA REDDY &amp;lt;bugbounty10378@gmail.com&amp;gt;`&lt;/span&gt;

&lt;span class="gu"&gt;## Is a reference&lt;/span&gt;

We think they are file reference or URL link. Changing a value needs cross check.

&lt;span class="k"&gt;-&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;/home/fengxia/workspace/myblog/content/dev/mbsync.md

&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="k"&gt;1.&lt;/span&gt; on line &lt;span class="ni"&gt;#292:&lt;/span&gt; &lt;span class="sb"&gt;`Master :gmail-remote:&amp;quot;[Gmail]/Trash&amp;quot;`&lt;/span&gt;

&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="k"&gt;2.&lt;/span&gt; on line &lt;span class="ni"&gt;#299:&lt;/span&gt; &lt;span class="sb"&gt;`Master :gmail-remote:&amp;quot;[Gmail]/All Mail&amp;quot;`&lt;/span&gt;

&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="k"&gt;3.&lt;/span&gt; on line &lt;span class="ni"&gt;#306:&lt;/span&gt; &lt;span class="sb"&gt;`Master :gmail-remote:&amp;quot;[Gmail]/Sent Mail&amp;quot;`&lt;/span&gt;

&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="k"&gt;4.&lt;/span&gt; on line &lt;span class="ni"&gt;#313:&lt;/span&gt; &lt;span class="sb"&gt;`Master :gmail-remote:&amp;quot;[Gmail]/Starred&amp;quot;`&lt;/span&gt;

&lt;span class="gu"&gt;## Is an email address&lt;/span&gt;

&lt;span class="k"&gt;-&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;/home/fengxia/workspace/myblog/content/dev/mbsync.md

&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="k"&gt;1.&lt;/span&gt; on line &lt;span class="ni"&gt;#237:&lt;/span&gt; &lt;span class="sb"&gt;`User yours@gmail.com`&lt;/span&gt;
&lt;span class="k"&gt;-&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;/home/fengxia/workspace/myblog/content/thoughts/strange fate.md

&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="k"&gt;1.&lt;/span&gt; on line &lt;span class="ni"&gt;#26:&lt;/span&gt; &lt;span class="sb"&gt;`KANDULA.VENKATA NARENDRA REDDY &amp;lt;bugbounty10378@gmail.com&amp;gt;`&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Pretty cool, huh!?&lt;/p&gt;</content><category term="dev"></category><category term="lenovo"></category></entry><entry><title>Analyzing Angular 1.x code</title><link href="https://fengxia41103.github.io/myblog/analyzing%20angular%201x.html" rel="alternate"></link><published>2019-09-01T17:58:00-04:00</published><updated>2019-09-25T10:33:00-04:00</updated><author><name>Feng Xia</name></author><id>tag:fengxia41103.github.io,2019-09-01:/myblog/analyzing angular 1x.html</id><summary type="html">&lt;p&gt;&lt;a href="https://github.com/compodoc/compodoc"&gt;Compodoc&lt;/a&gt; can generate component hierarchy diagrams, call chains,
but it didn't work for Angular 1.x code. &lt;/p&gt;
&lt;p&gt;The goal is to &lt;strong&gt;create a lookup/catalogue between code and visual&lt;/strong&gt;
because everyone on the team, including UI devs, can only engage a
discussion using the visual (the rendered look) &amp;mdash; so far, I
haven't been able to develop the capability to &lt;em&gt;see&lt;/em&gt; how it will look
like by just staring at code.&lt;/p&gt;
&lt;p&gt;This issue gets compounded when components are calling each other
&amp;mdash; some pages are calling all kinds of components, and these
components are in turn used in all sorts of &lt;em&gt;parent&lt;/em&gt; pages. This
presents an issue how to knows its effect when, say, I'm taking a task
to change this component? Without such a cross reference, I'm
completely in the dark. Think about this, if component A is used in 3
places, we should have 3 test cases just to be sure it doesn't break
the visual.&lt;/p&gt;
&lt;p&gt;This leads me to a google search and I think the term for what I'm
thinking is &lt;a href="https://storybook.js.org/docs/testing/automated-visual-testing/"&gt;visual regression …&lt;/a&gt;&lt;/p&gt;</summary><content type="html">&lt;p&gt;&lt;a href="https://github.com/compodoc/compodoc"&gt;Compodoc&lt;/a&gt; can generate component hierarchy diagrams, call chains,
but it didn't work for Angular 1.x code. &lt;/p&gt;
&lt;p&gt;The goal is to &lt;strong&gt;create a lookup/catalogue between code and visual&lt;/strong&gt;
because everyone on the team, including UI devs, can only engage a
discussion using the visual (the rendered look) &amp;mdash; so far, I
haven't been able to develop the capability to &lt;em&gt;see&lt;/em&gt; how it will look
like by just staring at code.&lt;/p&gt;
&lt;p&gt;This issue gets compounded when components are calling each other
&amp;mdash; some pages are calling all kinds of components, and these
components are in turn used in all sorts of &lt;em&gt;parent&lt;/em&gt; pages. This
presents an issue how to knows its effect when, say, I'm taking a task
to change this component? Without such a cross reference, I'm
completely in the dark. Think about this, if component A is used in 3
places, we should have 3 test cases just to be sure it doesn't break
the visual.&lt;/p&gt;
&lt;p&gt;This leads me to a google search and I think the term for what I'm
thinking is &lt;a href="https://storybook.js.org/docs/testing/automated-visual-testing/"&gt;visual regression&lt;/a&gt;. I'm surprised to see how new this
concept appears to be by looking at how young a few mentioned
libraries/services are. Maybe I'm just behind the curve. Nonetheless,
here I am, and I'm catching up, fast.&lt;/p&gt;
&lt;p&gt;&lt;a href="https://github.com/americanexpress/jest-image-snapshot"&gt;jest-image-snapshot&lt;/a&gt; mentions of saving
snapshot in some dir &amp;mdash; maybe I can use this to get a snapshot of
component. But it's saving them for future comparison purpose, which
I'm not ready yet to embark this level of testing. So keep the notes
here for now.&lt;/p&gt;
&lt;p&gt;My way is extremely hacky because I'm going to parse &lt;code&gt;.ts&lt;/code&gt; file using
Python regex. So embrace yourself.&lt;/p&gt;
&lt;h1&gt;how to find module definition&lt;/h1&gt;
&lt;p&gt;Module is the core grouping method in Angular:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;code&gt;export .... module('module.name')&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;export .... angular.module('module.name')&lt;/code&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Pretty straightforward, two variations.&lt;/p&gt;
&lt;h1&gt;how to find component definition&lt;/h1&gt;
&lt;p&gt;Component is messy. Just how many ways one can define a component?&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;code&gt;export const A: IComponentOptions&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;class A implements ng.IOnInit&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;class A implements angular.IOnInit&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;export class A&lt;/code&gt;, just a plain class&lt;/li&gt;
&lt;li&gt;&lt;code&gt;export const A = {&lt;/code&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;h1&gt;component hierarchy&lt;/h1&gt;
&lt;p&gt;Strategy of getting component call chain is to parse HTML file. This
relies on a certain naming convention, eg. all your tags are prefixed
with &lt;code&gt;feng-&lt;/code&gt; so that HTHM parser will pick up any tags with this
prefix, and identify inside which HTML tree this is being used, thus
formulating a hierarchy. &lt;/p&gt;
&lt;h1&gt;utility&lt;/h1&gt;
&lt;p&gt;Script is maintained &lt;a href="https://github.com/fengxia41103/dev/blob/master/code%20analysis/analyze_angular_1x.py"&gt;here&lt;/a&gt;. &lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;code&gt;pip install click lxml&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;to create &lt;code&gt;.md&lt;/code&gt;: &lt;code&gt;python code_analysis.py build-doc --manual-data webapp.json --dump-md-to webapp.md --template-header header.md&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;This will parse &lt;code&gt;webapp.json&lt;/code&gt; as an input, and merge w/ machine
scanned version created by &lt;code&gt;walk&lt;/code&gt; the code tree for all &lt;code&gt;.ts&lt;/code&gt; and
&lt;code&gt;.html&lt;/code&gt; files.&lt;/p&gt;
&lt;p&gt;The merged data set will be written back to &lt;code&gt;webapp.json&lt;/code&gt;, and create
a Pandoc version of &lt;code&gt;webapp.md&lt;/code&gt; ready for conversion to &lt;code&gt;.html&lt;/code&gt; and
other formats.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;to find missing screenshots: &lt;code&gt;check-screenshots --data &amp;lt;data&amp;gt;.json&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h1&gt;example doc&lt;/h1&gt;
&lt;p&gt;Once you piece these together, you can get a really impressive doc by
producing a Pandoc &lt;code&gt;.md&lt;/code&gt;. Also, you can dump data into &lt;code&gt;.json&lt;/code&gt; or
&lt;code&gt;.yml&lt;/code&gt; for machine parsing and to incorporate manual generated data
such as screenshot (as of writing 9/4/2019, we are relying on human to
take screenshot by painfully finding the component rendered in a
browser).&lt;/p&gt;
&lt;p&gt;All in all, take a look &lt;a href="https://fengxia41103.github.io/myblog/downloads/webapp.pdf"&gt;this sample&lt;/a&gt; and enjoy ~~&lt;/p&gt;</content><category term="dev"></category><category term="angular"></category><category term="lenovo"></category></entry><entry><title>ECMAScript</title><link href="https://fengxia41103.github.io/myblog/ecmascript.html" rel="alternate"></link><published>2019-07-03T14:15:00-04:00</published><updated>2019-07-03T14:15:00-04:00</updated><author><name>Feng Xia</name></author><id>tag:fengxia41103.github.io,2019-07-03:/myblog/ecmascript.html</id><summary type="html">&lt;p&gt;Isn't this confusing &amp;mdash; &lt;a href="https://en.wikipedia.org/wiki/ECMAScript"&gt;ECMAScript&lt;/a&gt;, &lt;a href="https://en.wikipedia.org/wiki/ECMAScript#6th_Edition_-_ECMAScript_2015"&gt;ES2015&lt;/a&gt;, ES6, Javascript,
&lt;a href="https://en.wikipedia.org/wiki/JScript"&gt;JScript&lt;/a&gt;, &lt;a href="https://en.wikipedia.org/wiki/CoffeeScript"&gt;CoffeeScript&lt;/a&gt;, &lt;a href="https://en.wikipedia.org/wiki/Microsoft_TypeScript"&gt;TypeScript&lt;/a&gt;... what the heck!?&lt;/p&gt;
&lt;figure class="col s12"&gt;
  &lt;img src="images/ecmascript%20relationship.png"/&gt;
  &lt;figcaption&gt;Feng's view of how these confusing Javascript words are
  linked together&lt;/figcaption&gt;
&lt;/figure&gt;

&lt;h1&gt;spec&lt;/h1&gt;
&lt;p&gt;The mother of all is the &lt;a href="https://en.wikipedia.org/wiki/ECMAScript"&gt;ECMAScript&lt;/a&gt;, which is the spec. It has
some wild release notion and cycles. The important one for me is the
&lt;a href="https://en.wikipedia.org/wiki/ECMAScript#6th_Edition_-_ECMAScript_2015"&gt;ES2015&lt;/a&gt;, and I think starting from that release, the schedule
becomes annual, thus we have &lt;code&gt;ECMAScript 2016&lt;/code&gt; and so on. Since the
2015 release is the &lt;strong&gt;6th&lt;/strong&gt; revision of the spec, thus also created
the notion &lt;code&gt;ES6&lt;/code&gt; (&lt;code&gt;ES2015&lt;/code&gt; ==  &lt;code&gt;ES6&lt;/code&gt;).&lt;/p&gt;
&lt;h1&gt;spec implementation&lt;/h1&gt;
&lt;p&gt;Javascript, together with &lt;a href="https://en.wikipedia.org/wiki/JScript"&gt;JScript&lt;/a&gt;, &lt;a href="https://en.wikipedia.org/wiki/ActionScript"&gt;ActionScript&lt;/a&gt;, are
implementation of this spec, and of course, by different
companies. The problem is, each implements some subset of the spec,
thus there are overlaps as well as incompatibilities. Sucks!
Therefore, when reading some Javascript articles, there is always
reference to &lt;code&gt;ES6&lt;/code&gt; compatible or a feature, which means whether the
Javascript implementation is up to that spec's release, or not.&lt;/p&gt;
&lt;h1&gt;javascript engine and compatibility&lt;/h1&gt;
&lt;p&gt;Ok. Here comes the giant twist &amp;mdash; starting when the spec
committee decides that before …&lt;/p&gt;</summary><content type="html">&lt;p&gt;Isn't this confusing &amp;mdash; &lt;a href="https://en.wikipedia.org/wiki/ECMAScript"&gt;ECMAScript&lt;/a&gt;, &lt;a href="https://en.wikipedia.org/wiki/ECMAScript#6th_Edition_-_ECMAScript_2015"&gt;ES2015&lt;/a&gt;, ES6, Javascript,
&lt;a href="https://en.wikipedia.org/wiki/JScript"&gt;JScript&lt;/a&gt;, &lt;a href="https://en.wikipedia.org/wiki/CoffeeScript"&gt;CoffeeScript&lt;/a&gt;, &lt;a href="https://en.wikipedia.org/wiki/Microsoft_TypeScript"&gt;TypeScript&lt;/a&gt;... what the heck!?&lt;/p&gt;
&lt;figure class="col s12"&gt;
  &lt;img src="images/ecmascript%20relationship.png"/&gt;
  &lt;figcaption&gt;Feng's view of how these confusing Javascript words are
  linked together&lt;/figcaption&gt;
&lt;/figure&gt;

&lt;h1&gt;spec&lt;/h1&gt;
&lt;p&gt;The mother of all is the &lt;a href="https://en.wikipedia.org/wiki/ECMAScript"&gt;ECMAScript&lt;/a&gt;, which is the spec. It has
some wild release notion and cycles. The important one for me is the
&lt;a href="https://en.wikipedia.org/wiki/ECMAScript#6th_Edition_-_ECMAScript_2015"&gt;ES2015&lt;/a&gt;, and I think starting from that release, the schedule
becomes annual, thus we have &lt;code&gt;ECMAScript 2016&lt;/code&gt; and so on. Since the
2015 release is the &lt;strong&gt;6th&lt;/strong&gt; revision of the spec, thus also created
the notion &lt;code&gt;ES6&lt;/code&gt; (&lt;code&gt;ES2015&lt;/code&gt; ==  &lt;code&gt;ES6&lt;/code&gt;).&lt;/p&gt;
&lt;h1&gt;spec implementation&lt;/h1&gt;
&lt;p&gt;Javascript, together with &lt;a href="https://en.wikipedia.org/wiki/JScript"&gt;JScript&lt;/a&gt;, &lt;a href="https://en.wikipedia.org/wiki/ActionScript"&gt;ActionScript&lt;/a&gt;, are
implementation of this spec, and of course, by different
companies. The problem is, each implements some subset of the spec,
thus there are overlaps as well as incompatibilities. Sucks!
Therefore, when reading some Javascript articles, there is always
reference to &lt;code&gt;ES6&lt;/code&gt; compatible or a feature, which means whether the
Javascript implementation is up to that spec's release, or not.&lt;/p&gt;
&lt;h1&gt;javascript engine and compatibility&lt;/h1&gt;
&lt;p&gt;Ok. Here comes the giant twist &amp;mdash; starting when the spec
committee decides that before I put feature into writing, there needs
to at least two implementations &amp;rarr; browser's Javacript engines
(and dont' get confused w/ &lt;a href="https://en.wikipedia.org/wiki/Browser_engine"&gt;browser engine&lt;/a&gt;, which itself is
includes an Javascript engine, but do other things such as rendering
HTML), that can make this feature work. So some engine implements a
feature that will be added into ES6, for example, while others then
have to play the catch up game once the spec is out, and even when a
&lt;em&gt;feature&lt;/em&gt; is usable in a browser, it doesn't necessarily in the spec
yet &amp;rarr; isn't this logic circular!? Anway. So this leads the
browser's &lt;a href="https://kangax.github.io/compat-table/es6/"&gt;compatibility hell&lt;/a&gt;, check it out.&lt;/p&gt;
&lt;h1&gt;superset &amp;amp; transpiler&lt;/h1&gt;
&lt;p&gt;Then, nobody likes coding in plain Javascript (why!?), so there comes
the &lt;strong&gt;supersets&lt;/strong&gt; &amp;mdash; &lt;a href="https://en.wikipedia.org/wiki/CoffeeScript"&gt;CoffeeScript&lt;/a&gt;, &lt;a href="https://en.wikipedia.org/wiki/Microsoft_TypeScript"&gt;TypeScript&lt;/a&gt;... and
then, Angular decides to use &lt;code&gt;typescript&lt;/code&gt; to write itself. How
wonderful! The reason they call themselves superset is that any plain
Javascript is legitimate superset codes, but not the other way around
&amp;mdash; it's like you can write assembly in C code, but can't add a C
function in assembly. &lt;/p&gt;
&lt;p&gt;Oh well, so enters the compilers (and the Javascript world must give
it a new name, &lt;code&gt;transpiler&lt;/code&gt;, hell) &amp;mdash; they covert these superset
code into, plain javascripts.. .well, you can translate many
programming languages into many others (see &lt;a href="https://github.com/jashkenas/coffeescript/wiki/List-of-languages-that-compile-to-JS"&gt;the list&lt;/a&gt;). So it's
really in your development pipeline to use some tooling to make this
compilation so &lt;strong&gt;at the end of the day, you are getting
javascript&lt;/strong&gt;. But wait, there is more.&lt;/p&gt;
&lt;p&gt;Not only they translate superset into javascript, it can &lt;strong&gt;downgrade&lt;/strong&gt;
your code from ES15 to some really basics. An example in &lt;a href="https://scotch.io/tutorials/javascript-transpilers-what-they-are-why-we-need-them"&gt;this
article&lt;/a&gt; which I'm showing below:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="s2"&gt;&amp;quot;use strict&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="kd"&gt;class&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;Planet&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;

&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="kr"&gt;constructor&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;mass&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;moons&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;mass&lt;/span&gt;&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;mass&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;moons&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;moons&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;||&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mf"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="nx"&gt;reportMoons&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="sb"&gt;`I have &lt;/span&gt;&lt;span class="si"&gt;${&lt;/span&gt;&lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;moons&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="sb"&gt; moons.`&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="c1"&gt;// Yeah, Jupiter really does have (at least) 67 moons.&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;jupiter&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="ow"&gt;new&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;Planet&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;Pretty Big&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mf"&gt;67&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="nx"&gt;jupiter&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;reportMoons&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;will be translated to:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="c1"&gt;// Everything below is Babel&amp;#39;s output.&lt;/span&gt;
&lt;span class="s1"&gt;&amp;#39;use strict&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="kd"&gt;var&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;_createClass&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="kd"&gt;function&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="kd"&gt;function&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;defineProperties&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;target&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;props&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;for&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kd"&gt;var&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;i&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mf"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;i&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;props&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;length&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;i&lt;/span&gt;&lt;span class="o"&gt;++&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="kd"&gt;var&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;descriptor&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;props&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;i&lt;/span&gt;&lt;span class="p"&gt;];&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;descriptor&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;enumerable&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;descriptor&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;enumerable&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;||&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="kc"&gt;false&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;descriptor&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;configurable&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="kc"&gt;true&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;if&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;value&amp;quot;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="ow"&gt;in&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;descriptor&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;descriptor&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;writable&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="kc"&gt;true&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nb"&gt;Object&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;defineProperty&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;target&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;descriptor&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;key&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;descriptor&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;return&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="kd"&gt;function&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;Constructor&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;protoProps&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;staticProps&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;if&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;protoProps&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;defineProperties&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;Constructor&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;prototype&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;protoProps&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;if&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;staticProps&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;defineProperties&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;Constructor&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;staticProps&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;return&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;Constructor&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;};&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;}();&lt;/span&gt;

&lt;span class="kd"&gt;function&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;_classCallCheck&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;instance&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;Constructor&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;if&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;!&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;instance&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="ow"&gt;instanceof&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;Constructor&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;throw&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="ow"&gt;new&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="ne"&gt;TypeError&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;Cannot call a class as a function&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="kd"&gt;var&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;Planet&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="kd"&gt;function&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="kd"&gt;function&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;Planet&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;mass&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;moons&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="nx"&gt;_classCallCheck&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;Planet&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;mass&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;mass&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;moons&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;moons&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;||&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mf"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="nx"&gt;_createClass&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;Planet&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;[{&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="nx"&gt;key&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;reportMoons&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="nx"&gt;value&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="kd"&gt;function&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;reportMoons&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
&lt;span class="w"&gt;      &lt;/span&gt;&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;I have &amp;#39;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;moons&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s1"&gt;&amp;#39; moons.&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="p"&gt;}]);&lt;/span&gt;

&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="k"&gt;return&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;Planet&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}();&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;blockquote&gt;
&lt;p&gt;You'll notice that there are no ES2015 features. const variables get
converted to carefully scoped var declarations; class is converted to
an old-school function constructor; and the template string desugars
to simple string concatenation.
&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Therefore, transpiler is also a way to map these advanced features
into more vanilla form so it will improve compatibility (and
reliability?). The one name I have seen over and over is the
&lt;a href="https://babeljs.io/"&gt;Babel&lt;/a&gt;, and there is even an &lt;a href="https://babeljs.io/repl/"&gt;live babel&lt;/a&gt;.&lt;/p&gt;
&lt;h1&gt;module loader&lt;/h1&gt;
&lt;p&gt;Coding is complex, and you need to break them up into
&lt;strong&gt;modules&lt;/strong&gt;, but then, who is going to piece them together!? That's
the module loader. Two dominant ones &amp;mdash;
&lt;a href="https://en.wikipedia.org/wiki/CommonJS"&gt;CommonJS&lt;/a&gt;, and &lt;a href="https://en.wikipedia.org/wiki/Asynchronous_module_definition"&gt;Asynchronous Module Definition&lt;/a&gt; (AMD). This
&lt;a href="https://auth0.com/blog/javascript-module-systems-showdown/"&gt;article&lt;/a&gt; explains it very well. &lt;/p&gt;
&lt;p&gt;So, these two are again, just methodologies, philosophies. An
implementation of &lt;code&gt;commonJS&lt;/code&gt; is &lt;code&gt;Node.js&lt;/code&gt;, and for AMD you get
&lt;a href="https://requirejs.org/"&gt;require.js&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;I bet by now you start to see how these names fall into its own place
and start to make sense, hopefully.&lt;/p&gt;
&lt;h1&gt;Reference&lt;/h1&gt;
&lt;ol&gt;
&lt;li&gt;&lt;a href="https://bytearcher.com/articles/es6-vs-es2015-name/"&gt;ES6 vs ES2015 - What to call a JavaScript version?&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://auth0.com/blog/javascript-module-systems-showdown/"&gt;JavaScript Module Systems Showdown: CommonJS vs AMD vs ES2015&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://scotch.io/tutorials/javascript-transpilers-what-they-are-why-we-need-them"&gt;avaScript Transpilers: What They Are &amp;amp; Why We Need Them&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;</content><category term="dev"></category><category term="thoughts"></category></entry><entry><title>Dev structure</title><link href="https://fengxia41103.github.io/myblog/dev%20structure.html" rel="alternate"></link><published>2019-06-24T14:06:00-04:00</published><updated>2019-06-24T14:06:00-04:00</updated><author><name>Feng Xia</name></author><id>tag:fengxia41103.github.io,2019-06-24:/myblog/dev structure.html</id><summary type="html">&lt;figure class="col l5 m5 s12"&gt;
  &lt;img src="images/moses.jpg"/&gt;
  &lt;figcaption&gt;If the Bible story happens today&lt;/figcaption&gt;
&lt;/figure&gt;

&lt;p&gt;This is a common question any team/project will have to address
&amp;mdash; how to structure the knowledge we know of a project so that we
are not missing things? Each project/application, of course, is
different. But the overall is actually quite common. Here is a
structure I'm proposing that is applicable not only during initial
learning phase, but can guide the design and development as well.&lt;/p&gt;
&lt;p&gt;Take an example that we are building a portal, which has frontend and
backend &amp;mdash; the &lt;code&gt;backend&lt;/code&gt; is showing more levels than the
&lt;code&gt;frontend&lt;/code&gt;, the idea is the same:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;Portal
&lt;span class="w"&gt;  &lt;/span&gt;Frontend
&lt;span class="w"&gt;    &lt;/span&gt;Design
&lt;span class="w"&gt;    &lt;/span&gt;Build/packaging
&lt;span class="w"&gt;    &lt;/span&gt;Dev&lt;span class="w"&gt; &lt;/span&gt;breakdown&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;incl.&lt;span class="w"&gt; &lt;/span&gt;unit&lt;span class="w"&gt; &lt;/span&gt;tests&lt;span class="o"&gt;)&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;Tests

&lt;span class="w"&gt;  &lt;/span&gt;Backend
&lt;span class="w"&gt;    &lt;/span&gt;Design
&lt;span class="w"&gt;      &lt;/span&gt;Logical&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nv"&gt;view&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&amp;gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nv"&gt;components&lt;/span&gt;
&lt;span class="w"&gt;                   &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&amp;gt;&lt;span class="w"&gt; &lt;/span&gt;key&lt;span class="w"&gt; &lt;/span&gt;technology&lt;span class="w"&gt; &lt;/span&gt;stack
&lt;span class="w"&gt;      &lt;/span&gt;Components
&lt;span class="w"&gt;        &lt;/span&gt;REST&lt;span class="w"&gt; &lt;/span&gt;API
&lt;span class="w"&gt;        &lt;/span&gt;web&lt;span class="w"&gt; &lt;/span&gt;portal
&lt;span class="w"&gt;        &lt;/span&gt;another..
&lt;span class="w"&gt;        &lt;/span&gt;another..


&lt;span class="w"&gt;    &lt;/span&gt;Build/packaging
&lt;span class="w"&gt;      &lt;/span&gt;&lt;span class="k"&gt;for&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;dev
&lt;span class="w"&gt;      &lt;/span&gt;&lt;span class="k"&gt;for&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nv"&gt;production&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&amp;gt;&lt;span class="w"&gt; &lt;/span&gt;CICD&lt;span class="w"&gt; &lt;/span&gt;integration&lt;span class="w"&gt;   &lt;/span&gt;


&lt;span class="w"&gt;    &lt;/span&gt;Dev&lt;span class="w"&gt; &lt;/span&gt;breakdown&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;incl.&lt;span class="w"&gt; &lt;/span&gt;unit&lt;span class="w"&gt; &lt;/span&gt;tests&lt;span class="o"&gt;)&lt;/span&gt;
&lt;span class="w"&gt;      &lt;/span&gt;component&lt;span class="w"&gt; &lt;/span&gt;A
&lt;span class="w"&gt;      &lt;/span&gt;component&lt;span class="w"&gt; &lt;/span&gt;B
&lt;span class="w"&gt;      &lt;/span&gt;....


&lt;span class="w"&gt;    &lt;/span&gt;Tests
&lt;span class="w"&gt;      &lt;/span&gt;all&lt;span class="w"&gt; &lt;/span&gt;non-dev&lt;span class="w"&gt; &lt;/span&gt;covered&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nv"&gt;tests&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&amp;gt;&lt;span class="w"&gt; &lt;/span&gt;QA
&lt;span class="w"&gt;        &lt;/span&gt;code&lt;span class="w"&gt; &lt;/span&gt;static&lt;span class="w"&gt; &lt;/span&gt;analysis&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;LINT,&lt;span class="w"&gt; &lt;/span&gt;style&lt;span class="w"&gt; &lt;/span&gt;check,&lt;span class="w"&gt; &lt;/span&gt;best&lt;span class="w"&gt; &lt;/span&gt;practice&lt;span class="o"&gt;)&lt;/span&gt;
&lt;span class="w"&gt;        &lt;/span&gt;scenario&lt;span class="w"&gt; &lt;/span&gt;tests&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;incl.&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;integration&amp;quot;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;tests&lt;span class="o"&gt;)&lt;/span&gt;
&lt;span class="w"&gt;      &lt;/span&gt;&lt;span class="nv"&gt;machinary&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&amp;gt;&lt;span class="w"&gt; &lt;/span&gt;CICD&lt;span class="w"&gt; &lt;/span&gt;integration
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;The key is to compose a design/component view …&lt;/p&gt;</summary><content type="html">&lt;figure class="col l5 m5 s12"&gt;
  &lt;img src="images/moses.jpg"/&gt;
  &lt;figcaption&gt;If the Bible story happens today&lt;/figcaption&gt;
&lt;/figure&gt;

&lt;p&gt;This is a common question any team/project will have to address
&amp;mdash; how to structure the knowledge we know of a project so that we
are not missing things? Each project/application, of course, is
different. But the overall is actually quite common. Here is a
structure I'm proposing that is applicable not only during initial
learning phase, but can guide the design and development as well.&lt;/p&gt;
&lt;p&gt;Take an example that we are building a portal, which has frontend and
backend &amp;mdash; the &lt;code&gt;backend&lt;/code&gt; is showing more levels than the
&lt;code&gt;frontend&lt;/code&gt;, the idea is the same:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;Portal
&lt;span class="w"&gt;  &lt;/span&gt;Frontend
&lt;span class="w"&gt;    &lt;/span&gt;Design
&lt;span class="w"&gt;    &lt;/span&gt;Build/packaging
&lt;span class="w"&gt;    &lt;/span&gt;Dev&lt;span class="w"&gt; &lt;/span&gt;breakdown&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;incl.&lt;span class="w"&gt; &lt;/span&gt;unit&lt;span class="w"&gt; &lt;/span&gt;tests&lt;span class="o"&gt;)&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;Tests

&lt;span class="w"&gt;  &lt;/span&gt;Backend
&lt;span class="w"&gt;    &lt;/span&gt;Design
&lt;span class="w"&gt;      &lt;/span&gt;Logical&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nv"&gt;view&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&amp;gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nv"&gt;components&lt;/span&gt;
&lt;span class="w"&gt;                   &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&amp;gt;&lt;span class="w"&gt; &lt;/span&gt;key&lt;span class="w"&gt; &lt;/span&gt;technology&lt;span class="w"&gt; &lt;/span&gt;stack
&lt;span class="w"&gt;      &lt;/span&gt;Components
&lt;span class="w"&gt;        &lt;/span&gt;REST&lt;span class="w"&gt; &lt;/span&gt;API
&lt;span class="w"&gt;        &lt;/span&gt;web&lt;span class="w"&gt; &lt;/span&gt;portal
&lt;span class="w"&gt;        &lt;/span&gt;another..
&lt;span class="w"&gt;        &lt;/span&gt;another..


&lt;span class="w"&gt;    &lt;/span&gt;Build/packaging
&lt;span class="w"&gt;      &lt;/span&gt;&lt;span class="k"&gt;for&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;dev
&lt;span class="w"&gt;      &lt;/span&gt;&lt;span class="k"&gt;for&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nv"&gt;production&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&amp;gt;&lt;span class="w"&gt; &lt;/span&gt;CICD&lt;span class="w"&gt; &lt;/span&gt;integration&lt;span class="w"&gt;   &lt;/span&gt;


&lt;span class="w"&gt;    &lt;/span&gt;Dev&lt;span class="w"&gt; &lt;/span&gt;breakdown&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;incl.&lt;span class="w"&gt; &lt;/span&gt;unit&lt;span class="w"&gt; &lt;/span&gt;tests&lt;span class="o"&gt;)&lt;/span&gt;
&lt;span class="w"&gt;      &lt;/span&gt;component&lt;span class="w"&gt; &lt;/span&gt;A
&lt;span class="w"&gt;      &lt;/span&gt;component&lt;span class="w"&gt; &lt;/span&gt;B
&lt;span class="w"&gt;      &lt;/span&gt;....


&lt;span class="w"&gt;    &lt;/span&gt;Tests
&lt;span class="w"&gt;      &lt;/span&gt;all&lt;span class="w"&gt; &lt;/span&gt;non-dev&lt;span class="w"&gt; &lt;/span&gt;covered&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nv"&gt;tests&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&amp;gt;&lt;span class="w"&gt; &lt;/span&gt;QA
&lt;span class="w"&gt;        &lt;/span&gt;code&lt;span class="w"&gt; &lt;/span&gt;static&lt;span class="w"&gt; &lt;/span&gt;analysis&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;LINT,&lt;span class="w"&gt; &lt;/span&gt;style&lt;span class="w"&gt; &lt;/span&gt;check,&lt;span class="w"&gt; &lt;/span&gt;best&lt;span class="w"&gt; &lt;/span&gt;practice&lt;span class="o"&gt;)&lt;/span&gt;
&lt;span class="w"&gt;        &lt;/span&gt;scenario&lt;span class="w"&gt; &lt;/span&gt;tests&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;incl.&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;integration&amp;quot;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;tests&lt;span class="o"&gt;)&lt;/span&gt;
&lt;span class="w"&gt;      &lt;/span&gt;&lt;span class="nv"&gt;machinary&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&amp;gt;&lt;span class="w"&gt; &lt;/span&gt;CICD&lt;span class="w"&gt; &lt;/span&gt;integration
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;The key is to compose a design/component view so that we can
categorize work into component, which also speaks of key
technology/implementation. Until this is identified, we can say for
sure we don't have 100% coverage of this code base yet.&lt;/p&gt;</content><category term="dev"></category><category term="thoughts"></category></entry><entry><title>Pandoc workflow</title><link href="https://fengxia41103.github.io/myblog/pandoc%20workflow.html" rel="alternate"></link><published>2019-04-30T09:23:00-04:00</published><updated>2019-04-30T09:23:00-04:00</updated><author><name>Feng Xia</name></author><id>tag:fengxia41103.github.io,2019-04-30:/myblog/pandoc workflow.html</id><summary type="html">&lt;figure class="col s12"&gt;
  &lt;img src="images/peppa.jpg"/&gt;
&lt;/figure&gt;

&lt;p&gt;&lt;a href="https://pandoc.org/MANUAL.html"&gt;Pandoc&lt;/a&gt; is awesome. I have been using
it for the last six months now writing a reference architecture
document for work. Here is some tips of how I'm using it.&lt;/p&gt;
&lt;h1&gt;doc header&lt;/h1&gt;
&lt;p&gt;Things that are specific to that document. This, thus, is context
sensitive &amp;mdash; &lt;code&gt;title&lt;/code&gt;, &lt;code&gt;subtitle&lt;/code&gt;, &lt;code&gt;author&lt;/code&gt;, &lt;code&gt;bibliography&lt;/code&gt;,
&lt;code&gt;abstract&lt;/code&gt;, &lt;code&gt;keywords&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;Example:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="nt"&gt;title&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="l l-Scalar l-Scalar-Plain"&gt;Open Cloud  Reference Architecture&lt;/span&gt;
&lt;span class="nt"&gt;subtitle&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="l l-Scalar l-Scalar-Plain"&gt;Version 1.0&lt;/span&gt;
&lt;span class="nt"&gt;author&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="p p-Indicator"&gt;-&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="l l-Scalar l-Scalar-Plain"&gt;Feng Xia&lt;/span&gt;

&lt;span class="nt"&gt;bibliography&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="l l-Scalar l-Scalar-Plain"&gt;feng.bib&lt;/span&gt;
&lt;span class="nt"&gt;keywords&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p p-Indicator"&gt;[&lt;/span&gt;&lt;span class="nv"&gt;Open Cloud&lt;/span&gt;&lt;span class="p p-Indicator"&gt;]&lt;/span&gt;
&lt;span class="nt"&gt;abstract&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p p-Indicator"&gt;|&lt;/span&gt;

&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="no"&gt;Anything goes here.&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;One catch is semicolon in &lt;code&gt;title&lt;/code&gt;! Unbelievably, which I haven't
figured out why, that including a ":" in the title string will mess
up export to PDF. The symptom you will see is that all your
reference in &lt;code&gt;.bib&lt;/code&gt; will not be found!!&lt;/p&gt;
&lt;h1&gt;LaTex setting&lt;/h1&gt;
&lt;p&gt;A universal setting to latex export. This is additional to the LaTex
template file I use. Supposedly I can set all these in the template
also.&lt;/p&gt;
&lt;p&gt;But if I'm using multiple template, this can be looked as the common
settings for all the PDF I write.&lt;/p&gt;
&lt;p&gt;Here is &lt;a href="/downloads/pandoc/latex.yaml"&gt;current version&lt;/a&gt;. It looks like this:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="nn"&gt;---&lt;/span&gt;
&lt;span class="nt"&gt;documentclass&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="l l-Scalar l-Scalar-Plain"&gt;scrreprt&lt;/span&gt;
&lt;span class="nt"&gt;papersize&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="l l-Scalar l-Scalar-Plain"&gt;a4 …&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;</summary><content type="html">&lt;figure class="col s12"&gt;
  &lt;img src="images/peppa.jpg"/&gt;
&lt;/figure&gt;

&lt;p&gt;&lt;a href="https://pandoc.org/MANUAL.html"&gt;Pandoc&lt;/a&gt; is awesome. I have been using
it for the last six months now writing a reference architecture
document for work. Here is some tips of how I'm using it.&lt;/p&gt;
&lt;h1&gt;doc header&lt;/h1&gt;
&lt;p&gt;Things that are specific to that document. This, thus, is context
sensitive &amp;mdash; &lt;code&gt;title&lt;/code&gt;, &lt;code&gt;subtitle&lt;/code&gt;, &lt;code&gt;author&lt;/code&gt;, &lt;code&gt;bibliography&lt;/code&gt;,
&lt;code&gt;abstract&lt;/code&gt;, &lt;code&gt;keywords&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;Example:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="nt"&gt;title&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="l l-Scalar l-Scalar-Plain"&gt;Open Cloud  Reference Architecture&lt;/span&gt;
&lt;span class="nt"&gt;subtitle&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="l l-Scalar l-Scalar-Plain"&gt;Version 1.0&lt;/span&gt;
&lt;span class="nt"&gt;author&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="p p-Indicator"&gt;-&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="l l-Scalar l-Scalar-Plain"&gt;Feng Xia&lt;/span&gt;

&lt;span class="nt"&gt;bibliography&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="l l-Scalar l-Scalar-Plain"&gt;feng.bib&lt;/span&gt;
&lt;span class="nt"&gt;keywords&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p p-Indicator"&gt;[&lt;/span&gt;&lt;span class="nv"&gt;Open Cloud&lt;/span&gt;&lt;span class="p p-Indicator"&gt;]&lt;/span&gt;
&lt;span class="nt"&gt;abstract&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p p-Indicator"&gt;|&lt;/span&gt;

&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="no"&gt;Anything goes here.&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;One catch is semicolon in &lt;code&gt;title&lt;/code&gt;! Unbelievably, which I haven't
figured out why, that including a ":" in the title string will mess
up export to PDF. The symptom you will see is that all your
reference in &lt;code&gt;.bib&lt;/code&gt; will not be found!!&lt;/p&gt;
&lt;h1&gt;LaTex setting&lt;/h1&gt;
&lt;p&gt;A universal setting to latex export. This is additional to the LaTex
template file I use. Supposedly I can set all these in the template
also.&lt;/p&gt;
&lt;p&gt;But if I'm using multiple template, this can be looked as the common
settings for all the PDF I write.&lt;/p&gt;
&lt;p&gt;Here is &lt;a href="/downloads/pandoc/latex.yaml"&gt;current version&lt;/a&gt;. It looks like this:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="nn"&gt;---&lt;/span&gt;
&lt;span class="nt"&gt;documentclass&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="l l-Scalar l-Scalar-Plain"&gt;scrreprt&lt;/span&gt;
&lt;span class="nt"&gt;papersize&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="l l-Scalar l-Scalar-Plain"&gt;a4&lt;/span&gt;
&lt;span class="nt"&gt;mainfont&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="l l-Scalar l-Scalar-Plain"&gt;Ubuntu&lt;/span&gt;
&lt;span class="nt"&gt;monofont&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="l l-Scalar l-Scalar-Plain"&gt;DejaVu Sans Condensed&lt;/span&gt;
&lt;span class="nt"&gt;fontsize&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="l l-Scalar l-Scalar-Plain"&gt;12pt&lt;/span&gt;
&lt;span class="nt"&gt;geometry&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="l l-Scalar l-Scalar-Plain"&gt;margin=1in&lt;/span&gt;
&lt;span class="nt"&gt;linkstyle&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="l l-Scalar l-Scalar-Plain"&gt;slanted&lt;/span&gt;
&lt;span class="nt"&gt;linkcolor&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="c1"&gt;#d52349&lt;/span&gt;
&lt;span class="nt"&gt;titlepage&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="l l-Scalar l-Scalar-Plain"&gt;true&lt;/span&gt;
&lt;span class="nt"&gt;titlepage-color&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s"&gt;&amp;quot;FFFFFF&amp;quot;&lt;/span&gt;
&lt;span class="nt"&gt;titlepage-text-color&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s"&gt;&amp;quot;5C68C0&amp;quot;&lt;/span&gt;
&lt;span class="nt"&gt;titlepage-rule-color&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s"&gt;&amp;quot;5C68C0&amp;quot;&lt;/span&gt;
&lt;span class="nt"&gt;logo&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s"&gt;&amp;quot;../diagrams/company-logo.png&amp;quot;&lt;/span&gt;
&lt;span class="nt"&gt;toc&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="l l-Scalar l-Scalar-Plain"&gt;true&lt;/span&gt;
&lt;span class="nt"&gt;toc-depth&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="l l-Scalar l-Scalar-Plain"&gt;5&lt;/span&gt;
&lt;span class="nt"&gt;toc-own-page&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="l l-Scalar l-Scalar-Plain"&gt;true&lt;/span&gt;
&lt;span class="nt"&gt;lof&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="l l-Scalar l-Scalar-Plain"&gt;true&lt;/span&gt;
&lt;span class="nt"&gt;lot&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="l l-Scalar l-Scalar-Plain"&gt;true&lt;/span&gt;
&lt;span class="nt"&gt;link-citations&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="l l-Scalar l-Scalar-Plain"&gt;true&lt;/span&gt;
&lt;span class="nt"&gt;header-includes&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="p p-Indicator"&gt;-&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="l l-Scalar l-Scalar-Plain"&gt;\usepackage{quotchap}&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="p p-Indicator"&gt;-&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="l l-Scalar l-Scalar-Plain"&gt;\usepackage{fvextra}&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="p p-Indicator"&gt;-&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="l l-Scalar l-Scalar-Plain"&gt;\usepackage{parskip}&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="p p-Indicator"&gt;-&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="l l-Scalar l-Scalar-Plain"&gt;\usepackage{fancyhdr}&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="p p-Indicator"&gt;-&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="l l-Scalar l-Scalar-Plain"&gt;\pagestyle{fancy}&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="p p-Indicator"&gt;-&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="l l-Scalar l-Scalar-Plain"&gt;\fancyhead{}&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="p p-Indicator"&gt;-&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="l l-Scalar l-Scalar-Plain"&gt;\fancyfoot{}&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="p p-Indicator"&gt;-&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="l l-Scalar l-Scalar-Plain"&gt;\fancyhead[L]{\leftmark}&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="p p-Indicator"&gt;-&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="l l-Scalar l-Scalar-Plain"&gt;\fancyhead[R]{\today}&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="p p-Indicator"&gt;-&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="l l-Scalar l-Scalar-Plain"&gt;\fancyfoot[R]{\thepage}&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="p p-Indicator"&gt;-&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="l l-Scalar l-Scalar-Plain"&gt;\renewcommand{\headrulewidth}{0.4pt}&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="p p-Indicator"&gt;-&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="l l-Scalar l-Scalar-Plain"&gt;\DefineVerbatimEnvironment{Highlighting}{Verbatim}{breaklines,commandchars=\\\{\}}&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="p p-Indicator"&gt;-&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="l l-Scalar l-Scalar-Plain"&gt;\lstset{breaklines=true}&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="p p-Indicator"&gt;-&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="l l-Scalar l-Scalar-Plain"&gt;\lstset{language=[Motorola68k]Assembler}&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="p p-Indicator"&gt;-&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="l l-Scalar l-Scalar-Plain"&gt;\lstset{basicstyle=\small\ttfamily}&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="p p-Indicator"&gt;-&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="l l-Scalar l-Scalar-Plain"&gt;\lstset{extendedchars=true}&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="p p-Indicator"&gt;-&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="l l-Scalar l-Scalar-Plain"&gt;\lstset{tabsize=2}&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="p p-Indicator"&gt;-&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="l l-Scalar l-Scalar-Plain"&gt;\lstset{columns=fixed}&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="p p-Indicator"&gt;-&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="l l-Scalar l-Scalar-Plain"&gt;\lstset{showstringspaces=false}&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="p p-Indicator"&gt;-&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="l l-Scalar l-Scalar-Plain"&gt;\lstset{frame=trbl}&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="p p-Indicator"&gt;-&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="l l-Scalar l-Scalar-Plain"&gt;\lstset{frameround=tttt}&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="p p-Indicator"&gt;-&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="l l-Scalar l-Scalar-Plain"&gt;\lstset{framesep=4pt}&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="p p-Indicator"&gt;-&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="l l-Scalar l-Scalar-Plain"&gt;\lstset{numbers=left}&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="p p-Indicator"&gt;-&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="l l-Scalar l-Scalar-Plain"&gt;\lstset{numberstyle=\tiny\ttfamily}&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="p p-Indicator"&gt;-&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="l l-Scalar l-Scalar-Plain"&gt;\lstset{postbreak=\raisebox{0ex}[0ex][0ex]{\ensuremath{\color{red}\hookrightarrow\space}}}&lt;/span&gt;
&lt;span class="nn"&gt;---&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;h1&gt;LaTex template&lt;/h1&gt;
&lt;p&gt;A massive LaTex writing that will be used to generate LaTex and
PDF. As of writing, there are two templates I like:
1. &lt;a href="/downloads/pandoc/eisvogel.tex"&gt;eisvogel.tex&lt;/a&gt;, found &lt;a href="https://github.com/Wandmalfarbe/pandoc-latex-template/blob/master/eisvogel.tex"&gt;here&lt;/a&gt;.
2. &lt;a href="/downloads/pandoc/feng.tex"&gt;feng.tex&lt;/a&gt;, modified based on &lt;code&gt;eisvogel&lt;/code&gt;, and modified to my favourate
   title page.&lt;/p&gt;
&lt;h1&gt;BibTex&lt;/h1&gt;
&lt;p&gt;Lesson learned, though late, is still useful, is the BibTex. &lt;strong&gt;Don't
be lazy&lt;/strong&gt; by using direct Markdown links to reference as hyperlink
&amp;larr; it doesn't cut it. Instead, use the &lt;code&gt;.bib&lt;/code&gt;, it's much better,
and is &lt;strong&gt;incremental&lt;/strong&gt;, meaning your collection will grow, and it
benefits to any follow up docs you will write and want to use the same
source for reference! and to generate a bibliography now at the end of
your doc is a snap, and it looks, beautiful!&lt;/p&gt;
&lt;figure class="col l6 m6 s12"&gt;
  &lt;img src="images/bibliography.png"/&gt;
  &lt;figcaption&gt;Example of .bib result in PDF&lt;/figcaption&gt;
&lt;/figure&gt;

&lt;p&gt;Use the &lt;a href="http://web.mit.edu/rsi/www/pdfs/bibtex-format.pdf"&gt;MIT's guide&lt;/a&gt; for format references.&lt;/p&gt;
&lt;h2&gt;emacs + RefTex&lt;/h2&gt;
&lt;p&gt;Found it &lt;a href="https://gist.github.com/kleinschmidt/5ab0d3c423a7ee013a2c01b3919b009a#file-reftex-markdown-el"&gt;here&lt;/a&gt;:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="c1"&gt;;; reftex in markdown mode&lt;/span&gt;

&lt;span class="c1"&gt;;; if this isn&amp;#39;t already set in your .emacs&lt;/span&gt;
&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;setq&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nv"&gt;reftex-default-bibliography&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;/path/to/library.bib&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;

&lt;span class="c1"&gt;;; define markdown citation formats&lt;/span&gt;
&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;defvar&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nv"&gt;markdown-cite-format&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;setq&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nv"&gt;markdown-cite-format&lt;/span&gt;
&lt;span class="w"&gt;      &lt;/span&gt;&lt;span class="o"&gt;&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;?\C-m&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s"&gt;&amp;quot;[@%l]&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;?p&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s"&gt;&amp;quot;[@%l]&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;?t&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s"&gt;&amp;quot;@%l&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="w"&gt;      &lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="c1"&gt;;; wrap reftex-citation with local variables for markdown format&lt;/span&gt;
&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;defun&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nv"&gt;markdown-reftex-citation&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;interactive&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;let&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="nv"&gt;reftex-cite-format&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nv"&gt;markdown-cite-format&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;reftex-cite-key-separator&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s"&gt;&amp;quot;; @&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;reftex-citation&lt;/span&gt;&lt;span class="p"&gt;)))&lt;/span&gt;

&lt;span class="c1"&gt;;; bind modified reftex-citation to C-c[, without enabling reftex-mode&lt;/span&gt;
&lt;span class="c1"&gt;;; https://www.gnu.org/software/auctex/manual/reftex/Citations-Outside-LaTeX.html#SEC31&lt;/span&gt;
&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;add-hook&lt;/span&gt;
&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="ss"&gt;&amp;#39;markdown-mode-hook&lt;/span&gt;
&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;lambda&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="w"&gt;   &lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;define-key&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nv"&gt;markdown-mode-map&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s"&gt;&amp;quot;\C-c[&amp;quot;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="ss"&gt;&amp;#39;markdown-reftex-citation&lt;/span&gt;&lt;span class="p"&gt;)))&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Once restarted emacs, use &lt;code&gt;C-c[&lt;/code&gt; then &lt;code&gt;C-M&lt;/code&gt; to select a citation
style, and type in a regex, eg. &lt;code&gt;redhat-&lt;/code&gt; and ENTER. Viola, a list of
matched entries to select, and ENTER again &amp;rarr;
&lt;code&gt;[@redhat-rhhi-guide]&lt;/code&gt;. Nice ~~&lt;/p&gt;
&lt;h2&gt;Styles&lt;/h2&gt;
&lt;p&gt;Wow, I never knew there are so many styles to choose from. The list
I'm going by is &lt;a href="https://github.com/citation-style-language/styles"&gt;here&lt;/a&gt;. For web URLs, I found the &lt;a href="https://github.com/citation-style-language/styles/blob/master/ieee-with-url.csl"&gt;ieee with
url&lt;/a&gt; is the only one that works.&lt;/p&gt;
&lt;p&gt;The biggest problem I see, is that web page does not have date (well,
I guess they do, probably in its meta section, but I didn't bother to
look into it). So other styles will render it as "Red Hat, n.d" &amp;rarr;
&lt;code&gt;n.d&lt;/code&gt; for "no date"? Doesn't look nice.&lt;/p&gt;
&lt;h1&gt;Makefile&lt;/h1&gt;
&lt;p&gt;I can't remember all the pandoc CLI switches. Use &lt;code&gt;make&lt;/code&gt; to compile
multiple versions in one bang. Here is &lt;a href="/downloads/pandoc/Makefile"&gt;current version&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Define macros at the beginning:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="nv"&gt;latex_template&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;:=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;feng.tex
&lt;span class="nv"&gt;rhhi_ra_pdf&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;:=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;feng&lt;span class="se"&gt;\ &lt;/span&gt;ra.pdf&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="c1"&gt;# espace white space!&lt;/span&gt;
&lt;span class="nv"&gt;rhhi_ra_md&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;:=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;feng&lt;span class="se"&gt;\ &lt;/span&gt;ra.md
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;To compile to PDF:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;pandoc&lt;span class="w"&gt; &lt;/span&gt;latex.yaml&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;$(&lt;/span&gt;rhhi_ra_md&lt;span class="k"&gt;)&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="se"&gt;\&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;--number-sections&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="se"&gt;\&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;--from&lt;span class="w"&gt; &lt;/span&gt;markdown&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="se"&gt;\&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;-o&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;$(&lt;/span&gt;rhhi_ra_pdf&lt;span class="k"&gt;)&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="se"&gt;\&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;--highlight-style&lt;span class="w"&gt; &lt;/span&gt;pygments&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="se"&gt;\&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;--filter&lt;span class="w"&gt; &lt;/span&gt;pandoc-fignos&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="se"&gt;\&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;--listings&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="se"&gt;\&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;--pdf-engine&lt;span class="w"&gt; &lt;/span&gt;xelatex&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="se"&gt;\&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;--template&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;$(&lt;/span&gt;latex_template&lt;span class="k"&gt;)&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="se"&gt;\&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;-M&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nv"&gt;date&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;`date &amp;quot;&lt;/span&gt;+%B&lt;span class="w"&gt; &lt;/span&gt;%e,&lt;span class="w"&gt; &lt;/span&gt;%Y&lt;span class="s2"&gt;&amp;quot;`&amp;quot;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="se"&gt;\&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;--filter&lt;span class="w"&gt; &lt;/span&gt;pandoc-citeproc&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="se"&gt;\&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;--csl&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;$(&lt;/span&gt;csl&lt;span class="k"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;To compile to DOCX:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;pandoc&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;$(&lt;/span&gt;rhhi_ra_md&lt;span class="k"&gt;)&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="se"&gt;\&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;--from&lt;span class="w"&gt; &lt;/span&gt;markdown&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="se"&gt;\&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;-o&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;$(&lt;/span&gt;rhhi_ra_docx&lt;span class="k"&gt;)&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="se"&gt;\&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;--highlight-style&lt;span class="w"&gt; &lt;/span&gt;pygments&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="se"&gt;\&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;--filter&lt;span class="w"&gt; &lt;/span&gt;pandoc-fignos&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="se"&gt;\&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;--listings&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="se"&gt;\&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;--columns&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="m"&gt;10&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="se"&gt;\&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;--filter&lt;span class="w"&gt; &lt;/span&gt;pandoc-citeproc&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="se"&gt;\&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;--csl&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;$(&lt;/span&gt;csl&lt;span class="k"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;h1&gt;Workflow&lt;/h1&gt;
&lt;p&gt;Quite simple: write &amp;rarr; make &lt;whatever&gt; &amp;rarr; view &amp;rarr; repeat.&lt;/p&gt;
&lt;h2&gt;Cursed by WORD, and coworkers&lt;/h2&gt;
&lt;p&gt;The pain, comes in when you need &lt;strong&gt;collaboration&lt;/strong&gt; &amp;mdash; ppl insist
to use DOC and change tracking. Unbelievable. I think the biggest
curse I have had in my professional training, is that I was introduced
to the LaTex so early that I simply could not stand the WORD, which
makes me the super minority in corporate world. I have been battling
this all my career. I thought pandoc is gonna save the day, since I'm
now dealing with &lt;em&gt;technical&lt;/em&gt; people now.&lt;/p&gt;
&lt;p&gt;No avail. When it comes down to writing a &lt;em&gt;paper&lt;/em&gt;, this generation, is
trained to think of WORD, only. You see emails with attachment, and
filename with a timestamp "_0409", then "_0410" as the next version
&amp;mdash; for me who uses SVN then git as the life line of work, this,
is purely disaster &amp;larr; &lt;strong&gt;every single time&lt;/strong&gt;, somebody will do one
the two things:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;Forgot to change the filename after an edit, thus now we have two
   files of the same name, but different contents.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Forgot to send out the latest, review the latest, for, oh well, how
   would s/he know which is the latest!!? The convention is, of
   course, the last email attachment you received.&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Good luck.&lt;/p&gt;
&lt;p&gt;I give up this battle now at this point. Like teaching a kid &amp;mdash;
you can't really teach them. You just have to wait for them to grow
up, if ever. &lt;/p&gt;</content><category term="dev"></category><category term="dev"></category></entry><entry><title>Browser proxy</title><link href="https://fengxia41103.github.io/myblog/browser%20proxy.html" rel="alternate"></link><published>2019-04-23T14:45:00-04:00</published><updated>2019-04-23T14:45:00-04:00</updated><author><name>Feng Xia</name></author><id>tag:fengxia41103.github.io,2019-04-23:/myblog/browser proxy.html</id><summary type="html">&lt;p&gt;This is a common trick. Say we have local machine (A), and a remote
machine (B). If we can SSH from A&amp;rarr;B, we can reroute browser
traffic from A to B, much quicker than X-windows.&lt;/p&gt;
&lt;figure class="col l4 m4 s12"&gt;
  &lt;img src="images/browser%20proxy.png"
       class="center img-responsive"&gt;
&lt;/figure&gt;

&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;On A, &lt;code&gt;ssh -vv -ND 8080 root@&amp;lt;B's IP&amp;gt;&lt;/code&gt;, then SSH login.&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;-N&lt;/code&gt;: Do not execute a remote command.  This is useful for
   just forwarding ports.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;-D [bind_address:]port&lt;/code&gt;:&lt;/p&gt;
&lt;p&gt;Specifies a local “dynamic” application-level port forwarding.  This works by
allocating a socket to listen to port on the local side, optionally bound to
the specified bind_address.  Whenever a connection is made to this port, the
connection is forwarded over the secure channel, and the application protocol
is then used to determine where to connect to from the remote machine.  Cur‐
rently the SOCKS4 and SOCKS5 protocols are supported, and ssh will act as a
SOCKS server.  Only root can forward privileged ports.  Dynamic port forward‐
ings can also be specified in the configuration file.&lt;/p&gt;
&lt;p&gt;IPv6 addresses can be specified by enclosing the address in square brackets.
Only the superuser …&lt;/p&gt;&lt;/li&gt;&lt;/ol&gt;&lt;/li&gt;&lt;/ol&gt;</summary><content type="html">&lt;p&gt;This is a common trick. Say we have local machine (A), and a remote
machine (B). If we can SSH from A&amp;rarr;B, we can reroute browser
traffic from A to B, much quicker than X-windows.&lt;/p&gt;
&lt;figure class="col l4 m4 s12"&gt;
  &lt;img src="images/browser%20proxy.png"
       class="center img-responsive"&gt;
&lt;/figure&gt;

&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;On A, &lt;code&gt;ssh -vv -ND 8080 root@&amp;lt;B's IP&amp;gt;&lt;/code&gt;, then SSH login.&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;-N&lt;/code&gt;: Do not execute a remote command.  This is useful for
   just forwarding ports.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;-D [bind_address:]port&lt;/code&gt;:&lt;/p&gt;
&lt;p&gt;Specifies a local “dynamic” application-level port forwarding.  This works by
allocating a socket to listen to port on the local side, optionally bound to
the specified bind_address.  Whenever a connection is made to this port, the
connection is forwarded over the secure channel, and the application protocol
is then used to determine where to connect to from the remote machine.  Cur‐
rently the SOCKS4 and SOCKS5 protocols are supported, and ssh will act as a
SOCKS server.  Only root can forward privileged ports.  Dynamic port forward‐
ings can also be specified in the configuration file.&lt;/p&gt;
&lt;p&gt;IPv6 addresses can be specified by enclosing the address in square brackets.
Only the superuser can forward privileged ports.  By default, the local port
is bound in accordance with the GatewayPorts setting.  However, an explicit
bind_address may be used to bind the connection to a specific address.  The
bind_address of “localhost” indicates that the listening port be bound for
local use only, while an empty address or ‘*’ indicates that the port should
be available from all interfaces.&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;On A, open Firefox, and setup proxy as shown below:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Goto &lt;code&gt;Preferences/networking settings&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;Manual proxy configuration&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;SOCKS Host&lt;/code&gt; to &lt;code&gt;localhost&lt;/code&gt;, and port to &lt;code&gt;8080&lt;/code&gt; (whatever the
   port you set above).&lt;/li&gt;
&lt;li&gt;Select &lt;code&gt;socks v5&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Clear &lt;code&gt;No proxy for&lt;/code&gt;, because sometimes &lt;code&gt;localhost&lt;/code&gt; and
   &lt;code&gt;127.0.0.1&lt;/code&gt; are listed. We want to use &lt;code&gt;localhost&lt;/code&gt;!&lt;/p&gt;
&lt;p&gt;&lt;figure class="col s12"&gt;
  &lt;img src="images/browser%20proxy%20firefox%20setting.png"
       class="center img-responsive"&gt;
  &lt;figcaption&gt;Setting up proxy in Firefox&lt;/figcaption&gt;
&lt;/figure&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;This is it. Then anything on this browser will be routed to localhost
port 8080, which by the &lt;code&gt;ssh&lt;/code&gt;, will be forwarded to B.&lt;/p&gt;</content><category term="dev"></category><category term="dev"></category></entry><entry><title>Reveal slides</title><link href="https://fengxia41103.github.io/myblog/reveal%20slides.html" rel="alternate"></link><published>2018-11-27T09:26:00-05:00</published><updated>2018-11-27T09:26:00-05:00</updated><author><name>Feng Xia</name></author><id>tag:fengxia41103.github.io,2018-11-27:/myblog/reveal slides.html</id><summary type="html">&lt;div class="iframe-container"&gt;
  &lt;iframe src="https://fengxia41103.github.io/moment/1236/"
          allowfullscreen&gt;&lt;/iframe&gt;

&lt;/div&gt;

&lt;p&gt;&lt;a href="https://github.com/hakimel/reveal.js/"&gt;reveal.js&lt;/a&gt; is pretty awesome. I have been using it for the last 9
months now and love it. It was a bit of hassle to set it up
initially. Once you have an example, yo can replicate and be
productive by copying and pasting existing one, and getting a
consistent look and workflow. And the results? amazing.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;as photo album: &lt;a href="https://fengxia41103.github.io/moment/1236/"&gt;momoent&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;as for work: &lt;a href="https://fengxia41103.github.io/moment/netbox/"&gt;netbox&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h1&gt;To create a new presentation&lt;/h1&gt;
&lt;p&gt;The easiest way to create a new slides for your topic is to copy an
existing folder, eg. &lt;code&gt;netbox&lt;/code&gt;, and make modifications to your
contents.&lt;/p&gt;
&lt;p&gt;Each folder should have the following contents:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;.
├──&lt;span class="w"&gt; &lt;/span&gt;images
├──&lt;span class="w"&gt; &lt;/span&gt;index.html
├──&lt;span class="w"&gt; &lt;/span&gt;my.css
└──&lt;span class="w"&gt; &lt;/span&gt;slides.md
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Only &lt;code&gt;index.html&lt;/code&gt; and &lt;code&gt;.md&lt;/code&gt; are essential. &lt;code&gt;index.html&lt;/code&gt; is the overall
HTML shell that will be loaded by browser, and &lt;code&gt;.md&lt;/code&gt; are slide
contents that will be converted from Markdown into HTML and included
in &lt;code&gt;index.html&lt;/code&gt;. You can split your contents into multiple &lt;code&gt;.md&lt;/code&gt;
files, which we will cover in more details next.&lt;/p&gt;
&lt;p&gt;&lt;code&gt;my.css&lt;/code&gt; is used to make customized CSS change per …&lt;/p&gt;</summary><content type="html">&lt;div class="iframe-container"&gt;
  &lt;iframe src="https://fengxia41103.github.io/moment/1236/"
          allowfullscreen&gt;&lt;/iframe&gt;

&lt;/div&gt;

&lt;p&gt;&lt;a href="https://github.com/hakimel/reveal.js/"&gt;reveal.js&lt;/a&gt; is pretty awesome. I have been using it for the last 9
months now and love it. It was a bit of hassle to set it up
initially. Once you have an example, yo can replicate and be
productive by copying and pasting existing one, and getting a
consistent look and workflow. And the results? amazing.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;as photo album: &lt;a href="https://fengxia41103.github.io/moment/1236/"&gt;momoent&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;as for work: &lt;a href="https://fengxia41103.github.io/moment/netbox/"&gt;netbox&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h1&gt;To create a new presentation&lt;/h1&gt;
&lt;p&gt;The easiest way to create a new slides for your topic is to copy an
existing folder, eg. &lt;code&gt;netbox&lt;/code&gt;, and make modifications to your
contents.&lt;/p&gt;
&lt;p&gt;Each folder should have the following contents:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;.
├──&lt;span class="w"&gt; &lt;/span&gt;images
├──&lt;span class="w"&gt; &lt;/span&gt;index.html
├──&lt;span class="w"&gt; &lt;/span&gt;my.css
└──&lt;span class="w"&gt; &lt;/span&gt;slides.md
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Only &lt;code&gt;index.html&lt;/code&gt; and &lt;code&gt;.md&lt;/code&gt; are essential. &lt;code&gt;index.html&lt;/code&gt; is the overall
HTML shell that will be loaded by browser, and &lt;code&gt;.md&lt;/code&gt; are slide
contents that will be converted from Markdown into HTML and included
in &lt;code&gt;index.html&lt;/code&gt;. You can split your contents into multiple &lt;code&gt;.md&lt;/code&gt;
files, which we will cover in more details next.&lt;/p&gt;
&lt;p&gt;&lt;code&gt;my.css&lt;/code&gt; is used to make customized CSS change per each deck. There is
also a common which determines the overall look (as default
look). Both are included in &lt;code&gt;index.html&lt;/code&gt;. Of course you can
include/modify other CSS as your wish in &lt;code&gt;index.html&lt;/code&gt;, just like any
other web page programming.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="cm"&gt;&amp;lt;!-- My css --&amp;gt;&lt;/span&gt;
&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;link&lt;/span&gt; &lt;span class="na"&gt;rel&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;stylesheet&amp;quot;&lt;/span&gt;
      &lt;span class="na"&gt;href&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;../css/my.css&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;link&lt;/span&gt; &lt;span class="na"&gt;rel&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;stylesheet&amp;quot;&lt;/span&gt;
      &lt;span class="na"&gt;href&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;my.css&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;h1&gt;index.html&lt;/h1&gt;
&lt;p&gt;&lt;code&gt;index.html&lt;/code&gt; is the entry point for browser. There are a few places
you would like to update to match your topic and contents:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;code&gt;&amp;lt;title&amp;gt;&lt;/code&gt;: the text shown as page title on a browser.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;&amp;lt;meta name="description" content="&amp;lt;&amp;gt;"&amp;gt;&lt;/code&gt;: description text is
   useful when page is picked up by search engine.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;&amp;lt;meta name="autho" content="&amp;lt;&amp;gt;"&amp;gt;&lt;/code&gt;: author names&lt;/li&gt;
&lt;li&gt;&lt;code&gt;&amp;lt;p class="copyright"&amp;gt;...&amp;lt;/p&amp;gt;&lt;/code&gt;: your copyright text.&lt;/li&gt;
&lt;/ol&gt;
&lt;h1&gt;slide contents&lt;/h1&gt;
&lt;p&gt;Slide contents are written in Markdown in separate files,
eg. &lt;code&gt;slides.md&lt;/code&gt;. To include a markdown file into slides:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;section&lt;/span&gt; &lt;span class="na"&gt;data-markdown&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;slides.md&amp;quot;&lt;/span&gt;
         &lt;span class="na"&gt;data-separator&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;^---&amp;quot;&lt;/span&gt;
         &lt;span class="na"&gt;data-vertical&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;^--&amp;quot;&lt;/span&gt;
         &lt;span class="na"&gt;data-notes&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;^Note:&amp;quot;&lt;/span&gt;
         &lt;span class="na"&gt;data-charset&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;utf-8&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
&lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;section&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;You can include multiple &lt;code&gt;.md&lt;/code&gt; files in a single presentation. This
gives you flexibility to organize contents into reusable chunks and
present them in different combinations based on audience.&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;code&gt;data-markdown&lt;/code&gt;: Markdown file to include.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;data-separator&lt;/code&gt;: this is essentially a page break in Markdown
   file.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;data-vertical&lt;/code&gt;: contents separated by this will be included on the
   same page, but will be showns as vertically stacked contents, &lt;strong&gt;one
   at a time&lt;/strong&gt; (like a sub-page).&lt;/li&gt;
&lt;li&gt;&lt;code&gt;data-notes&lt;/code&gt;: mark the start of presenter notes. These notes are
   visible to presenter, but not to audience.&lt;/li&gt;
&lt;/ol&gt;
&lt;h1&gt;Export&lt;/h1&gt;
&lt;ol&gt;
&lt;li&gt;You can follow the &lt;a href="https://github.com/hakimel/reveal.js#pdf-export"&gt;official guide&lt;/a&gt; by &lt;code&gt;reveal.js&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;Or, using the &lt;a href="https://github.com/astefanutti/decktape"&gt;desktape&lt;/a&gt;: &lt;code&gt;decktape reveal &amp;lt;url&amp;gt; &amp;lt;filename&amp;gt;.pdf&lt;/code&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;h1&gt;TOC&lt;/h1&gt;
&lt;p&gt;Automatically generate a humburg nav as TOC using &lt;a href="https://github.com/denehyg/reveal.js-menu"&gt;reveal.js-menu&lt;/a&gt;.&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Install using &lt;code&gt;yarn add&lt;/code&gt; or &lt;code&gt;npm install&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;In &lt;code&gt;index.html&lt;/code&gt;, link to css:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;```html
&amp;lt;link
  rel=&amp;quot;stylesheet&amp;quot;
  href=&amp;quot;../node_modules/reveal.js-menu/menu.css&amp;quot;
/&amp;gt;
```
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;In &lt;code&gt;index.html&lt;/code&gt;, link to js:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;```html
&lt;span class="nt"&gt;&amp;lt;script&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="na"&gt;src=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;../node_modules/reveal.js-menu/menu.js&amp;quot;&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&amp;lt;/script&amp;gt;&lt;/span&gt;
```
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Last, add this to &lt;code&gt;Reveal.initialize({...})&lt;/code&gt;:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;```js
menu:{
  numbers: true
}
```
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;/li&gt;
&lt;/ol&gt;</content><category term="dev"></category><category term="thoughts"></category></entry><entry><title>UML</title><link href="https://fengxia41103.github.io/myblog/uml.html" rel="alternate"></link><published>2018-07-24T12:03:00-04:00</published><updated>2018-07-24T12:03:00-04:00</updated><author><name>Feng Xia</name></author><id>tag:fengxia41103.github.io,2018-07-24:/myblog/uml.html</id><summary type="html">&lt;p&gt;Finally &lt;a href="https://www.amazon.com/Driven-Object-Modeling-UMLTheory-Practice/dp/1590597745"&gt;a book on UML&lt;/a&gt; that makes sense to me (and is short enough
so I was willing to read it, in one morning). &lt;/p&gt;
&lt;h1&gt;Milestone 1: requirement review&lt;/h1&gt;
&lt;p&gt;Everything starts with an analysis of the problem at hand. One thing
learned and I'd like to clarify is &lt;code&gt;requirement&lt;/code&gt; &amp;mdash;
it is a set of &lt;strong&gt;constraints&lt;/strong&gt; (thus the word &lt;code&gt;must&lt;/code&gt;,
&lt;code&gt;should&lt;/code&gt;). Requirements often cause confusion as they are taken as the
system's objectives &amp;rarr; in essence they are, but they are measured
as a set of &lt;strong&gt;conditions&lt;/strong&gt; that the system will have to &lt;strong&gt;behave
within boundary&lt;/strong&gt;. Thus, viewing them as the &lt;strong&gt;law for your
design&lt;/strong&gt;, it's a valid test to your test, but your design
can come in many forms, and that's where engineering has some fun.&lt;/p&gt;
&lt;p&gt;So it becomes clear &amp;amp; natural that design and implementation are like
people living in society &amp;rarr; his behavior is completly boxed by law
he has to obey, that's the minimal.  Anything that no law permits nor
prohibits (functions that links to no requirements), well, is just to
keep the developers happy.&lt;/p&gt;
&lt;figure class="col s12 center"&gt;
  &lt;img src="images/practical%20uml%20problem%20domain.png"
       class="responsive-image"&gt;
  &lt;figcaption&gt;Problem …&lt;/figcaption&gt;&lt;/figure&gt;</summary><content type="html">&lt;p&gt;Finally &lt;a href="https://www.amazon.com/Driven-Object-Modeling-UMLTheory-Practice/dp/1590597745"&gt;a book on UML&lt;/a&gt; that makes sense to me (and is short enough
so I was willing to read it, in one morning). &lt;/p&gt;
&lt;h1&gt;Milestone 1: requirement review&lt;/h1&gt;
&lt;p&gt;Everything starts with an analysis of the problem at hand. One thing
learned and I'd like to clarify is &lt;code&gt;requirement&lt;/code&gt; &amp;mdash;
it is a set of &lt;strong&gt;constraints&lt;/strong&gt; (thus the word &lt;code&gt;must&lt;/code&gt;,
&lt;code&gt;should&lt;/code&gt;). Requirements often cause confusion as they are taken as the
system's objectives &amp;rarr; in essence they are, but they are measured
as a set of &lt;strong&gt;conditions&lt;/strong&gt; that the system will have to &lt;strong&gt;behave
within boundary&lt;/strong&gt;. Thus, viewing them as the &lt;strong&gt;law for your
design&lt;/strong&gt;, it's a valid test to your test, but your design
can come in many forms, and that's where engineering has some fun.&lt;/p&gt;
&lt;p&gt;So it becomes clear &amp;amp; natural that design and implementation are like
people living in society &amp;rarr; his behavior is completly boxed by law
he has to obey, that's the minimal.  Anything that no law permits nor
prohibits (functions that links to no requirements), well, is just to
keep the developers happy.&lt;/p&gt;
&lt;figure class="col s12 center"&gt;
  &lt;img src="images/practical%20uml%20problem%20domain.png"
       class="responsive-image"&gt;
  &lt;figcaption&gt;Problem domain&lt;/figcaption&gt;
&lt;/figure&gt;

&lt;h2&gt;problems&lt;/h2&gt;
&lt;p&gt;Any description of what the client is trying to do or what they
want. There is no restriction at all. What comes out of it are:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;requirement&lt;/li&gt;
&lt;li&gt;domain modeling&lt;/li&gt;
&lt;/ol&gt;
&lt;h2&gt;requirement&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;Uses &lt;strong&gt;shall&lt;/strong&gt;, &lt;strong&gt;must&lt;/strong&gt;.&lt;/li&gt;
&lt;li&gt;Have a N-N mapping to use case &amp;rarr; traceability from requirement
   &amp;rarr; design &amp;rarr; code &amp;rarr; test.&lt;/li&gt;
&lt;li&gt;Many ways to cut it: functional requirement, data requirement,
   performance requirement, and so on.&lt;/li&gt;
&lt;/ol&gt;
&lt;blockquote&gt;
&lt;ul&gt;
&lt;li&gt;A use case describes a unit of behavior.&lt;/li&gt;
&lt;li&gt;Requirements describe the laws that govern that behavior.&lt;/li&gt;
&lt;li&gt;Functions are the individual actions that occur within that behavior.
&lt;/li&gt;
&lt;/ul&gt;
&lt;/blockquote&gt;
&lt;h2&gt;domain modeling&lt;/h2&gt;
&lt;p&gt;Quite similar to ERD from Django graph. The difference is that it
doesn't yet care attributes or methods, and they are not necessarily
translated 1-1 into a DB table.&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Pick out the &lt;code&gt;nouns&lt;/code&gt; &amp;rarr; domain models&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Formulating 3 relationships:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;generalization: parent &amp;rarr; children class&lt;/li&gt;
&lt;li&gt;aggregation: roll up, eg. &lt;code&gt;DailyRecord&lt;/code&gt; &amp;rarr; &lt;code&gt;MonthlyRecord&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;association: the closest understanding I can get is to describe
   the many-to-many relationships.&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h2&gt;use case&lt;/h2&gt;
&lt;p&gt;This is the soul of UML (or at least for this book) since everything
derives from it.&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Inputs: domain models &amp;amp; requirements.&lt;/li&gt;
&lt;li&gt;Two types: &lt;ol&gt;
&lt;li&gt;basic course of action&lt;/li&gt;
&lt;li&gt;alternative course of action &amp;rarr; thus we can cover any
   exceptions we need to handle.&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;Go expansive on case statement. We want to derive two things out of
   it:&lt;ol&gt;
&lt;li&gt;actor&lt;/li&gt;
&lt;li&gt;domain objects&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;What helps &amp;larr; visual and mockup user experience:&lt;ol&gt;
&lt;li&gt;GUI prototyping&lt;/li&gt;
&lt;li&gt;write a user manual in use case statement, or reverse
   engineering case statements from a legacy user manual&lt;/li&gt;
&lt;li&gt;wire frame, or any kind of GUI mockup&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;Ask:&lt;ol&gt;
&lt;li&gt;what happens &amp;rarr; then &amp;rarr; then.... use the word &lt;code&gt;invokes&lt;/code&gt;
   and &lt;code&gt;precedes&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;what else can happen? &amp;rarr; alternative course&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;Being thorough is key&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Once you have done so called analysis, you reach the first milestone
&amp;mdash; requirement review. That's when client should sign off to
recognize these set of &lt;code&gt;use case&lt;/code&gt; do represent what they want to do.&lt;/p&gt;
&lt;h1&gt;Milestone 2: design review&lt;/h1&gt;
&lt;p&gt;With a set of use cases, we can break them down into design
elements. This book talks in context of OOD, thus words like &lt;code&gt;model&lt;/code&gt;
and &lt;code&gt;object&lt;/code&gt; are essentially a &lt;strong&gt;CLASS&lt;/strong&gt; in code. We don't have to be
bound by this. Instead, taking &lt;code&gt;model&lt;/code&gt; as an abstract &amp;mdash; it can
be a database table, or a service &amp;mdash; it's just a representation
of a logical element that describes our view of breaking down the
initial problem into a set of items who interacts with each other. &lt;/p&gt;
&lt;figure class="col s12"&gt;
  &lt;img src="images/practical%20uml%20solution%20domain.png"
       class="responsive-image"&gt;
  &lt;figcaption&gt;How problem domain works w/ solution domain&lt;/figcaption&gt;
&lt;/figure&gt;

&lt;h2&gt;robustness diagrams&lt;/h2&gt;
&lt;figure class="col l3 m4 s6 right"&gt;
&lt;img src="https://docs.oracle.com/cd/E13214_01/wli/docs92/bestpract/wwimages/robustnessanalysisrules.gif"
       class="center responsive-image"&gt;
&lt;/figure&gt;

&lt;p&gt;Robustness diagram is optional. It is the transition
from problem domain &amp;rarr; solution domain because it starts to speak
using design language, not natural English (as in use case) anymore.&lt;/p&gt;
&lt;p&gt;Robustness diagram is essentially a MVC framework. This is optional in
the sense that this is a transition between problem domain to solution
domain.&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Three types of objects:&lt;ol&gt;
&lt;li&gt;boundary obj &amp;larr; interface, UI falls in this category &amp;rarr;
   the &lt;code&gt;V&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;entity obj &amp;rarr; can result in more domain models &amp;rarr; the &lt;code&gt;M&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;control obj &amp;rarr; will be translated to helper models, methods
   &amp;rarr; the &lt;code&gt;C&lt;/code&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;One diagram per use case&lt;/li&gt;
&lt;li&gt;The good thing about robustness diagram is, there is strict rule of
   what is allowed:&lt;ol&gt;
&lt;li&gt;Actor can talk only to boundary objects.&lt;/li&gt;
&lt;li&gt;Boundary objects can talk only to controllers and actors.&lt;/li&gt;
&lt;li&gt;Entity objects can also talk only to controllers.&lt;/li&gt;
&lt;li&gt;Controllers can talk to both boundary objects and controllers,
   but not to actors.&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h2&gt;sequence diagram&lt;/h2&gt;
&lt;p&gt;This is where the solution domain starts. Sequence diagram represents
detailed design.&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Per use case &amp;larr; both basic course and alternative course, try
   to fit them to the same diagram.&lt;/li&gt;
&lt;li&gt;On the side of sequence, note which use case it is for &amp;rarr;
   traceability.&lt;/li&gt;
&lt;li&gt;We will end up with a list of &lt;code&gt;classes&lt;/code&gt; and &lt;code&gt;methods&lt;/code&gt;.&lt;ol&gt;
&lt;li&gt;allocation methods to class &amp;larr; design pattern, eg. class
   factory vs. iterator&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h2&gt;state diagram&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;Per class from sequence diagram, but cherry pick the important ones
   &amp;larr; if it has only two states (on/off), don't bother.&lt;/li&gt;
&lt;li&gt;Three types of events:&lt;ol&gt;
&lt;li&gt;entry: do this when you &lt;strong&gt;enter this state&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;exit: do this when you &lt;strong&gt;leave this state&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;do: do this when you are &lt;strong&gt;at this state&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;"guard": condition (True/False)&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h1&gt;Milestones 3 &amp;amp; 4: development and UAT&lt;/h1&gt;
&lt;p&gt;UML doesn't address development. For completeness I'm adding two more
milestones here:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;dev: topics such as test case fall into this place.&lt;/li&gt;
&lt;li&gt;release: the only thing matters is the &lt;strong&gt;UAT&lt;/strong&gt;, which should come
   straightly from use cases. &lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Here I also want to highlight the &lt;strong&gt;separation between development tool
 from test tool&lt;/strong&gt; &amp;rarr; programming your solution in Python does not
 dictate you to test in Python. If you look at the two type of
 test cases, I think unit test (whitebox) is tightly determined by
 implementation details &amp;rarr; how thorough I traverse code paths
 (those &lt;code&gt;if-else&lt;/code&gt;). It's often a matter of convenience to write them
 in the same language because the language itself offers a toolset for
 the purse, for example, Python's unit test framework.&lt;/p&gt;
&lt;p&gt;But &lt;code&gt;blackbox&lt;/code&gt; cases have not such restriction &amp;mdash; performance
 test can well be done using a tool that has no relevance with Python
 whatsoever because it only concerns &lt;code&gt;use case&lt;/code&gt; which represents
 &lt;code&gt;requirements&lt;/code&gt;! Therefore, these tests are what UAT is about. The
 whitebox tests, on the other hand, are for management purpose so you
 can have control of quality.&lt;/p&gt;
&lt;p&gt;Now, this separation of purse is not to support that quality is just
 for the internal use as long as UAT passes. In practice, use cases (=
 requirements) are simply not possible to address all qualities. Again
 going back the analogy of requirement being the law you obey in daily
 life, law often tells you what not to do, but does not tell you what
 you should do &amp;larr; you can always live a despicable life but being
 a lawful citizen at the same time.&lt;/p&gt;
&lt;figure class="col s12"&gt;
  &lt;img src="images/practical%20uml.png"
       class="responsive-image"&gt;
  &lt;figcaption&gt;A complete view of the framework&lt;/figcaption&gt;
&lt;/figure&gt;

&lt;h1&gt;Exercise&lt;/h1&gt;
&lt;blockquote&gt;
&lt;p&gt;We have a cowboy named Bill Bob, who is driving down the road at 80
miles an hour while drinking beer, scratching, and tossing the empty
beer cans out the window of his pickup truck.
&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ol&gt;
&lt;li&gt;domain models &amp;amp; relationships&lt;/li&gt;
&lt;li&gt;basic course use case diagram&lt;/li&gt;
&lt;li&gt;requirements&lt;/li&gt;
&lt;/ol&gt;</content><category term="dev"></category><category term="dev"></category></entry><entry><title>Screencast</title><link href="https://fengxia41103.github.io/myblog/screencast.html" rel="alternate"></link><published>2018-06-06T21:00:00-04:00</published><updated>2021-08-13T08:32:00-04:00</updated><author><name>Feng Xia</name></author><id>tag:fengxia41103.github.io,2018-06-06:/myblog/screencast.html</id><summary type="html">&lt;p&gt;Introduce tools to create screencast.&lt;/p&gt;</summary><content type="html">&lt;video width="100%" height="100%" controls="controls"&gt;
  &lt;source src="images/publish%20content%20view%20to%20env.mp4 " type="video/mp4" /&gt;
  Your browser does not support the video tag.
  /* instead of the last line you could also add the flash player*/
&lt;/video&gt;

&lt;p&gt;There are time that I need to create screencasts:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;CLI&lt;/li&gt;
&lt;li&gt;Good video quality&lt;/li&gt;
&lt;li&gt;Can convert to mp4&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;After a few tries I find a couple ones I like.&lt;/p&gt;
&lt;h1&gt;ffmpeg&lt;/h1&gt;
&lt;p&gt;Is the most feature rick video tool on Linux. Check out its
&lt;a href="https://wiki.archlinux.org/title/FFmpeg#Screen_capture"&gt;doc&lt;/a&gt; for
details.&lt;/p&gt;
&lt;p&gt;First of all, find out your screen size if you intend to capture the
whole screen. There is a way to specify area using window ID which can
be googled. I'm going to show whole desktop capture here. Once you
have the resolution values, plug them into the commands below after
the &lt;code&gt;-video_size&lt;/code&gt; flag. Otherwise, the capture will be in a wrong
resolution, which visually the capture is a zoomed in version of the
desktop &lt;strong&gt;but cropped&lt;/strong&gt;.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;xdpyinfo&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;|&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;grep&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;dimensions&amp;#39;&lt;/span&gt;

Resp:
dimensions:&lt;span class="w"&gt;    &lt;/span&gt;2560x1440&lt;span class="w"&gt; &lt;/span&gt;pixels&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;677x381&lt;span class="w"&gt; &lt;/span&gt;millimeters&lt;span class="o"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;For lossless .mkv format:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;ffmpeg&lt;span class="w"&gt; &lt;/span&gt;-f&lt;span class="w"&gt; &lt;/span&gt;x11grab&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="se"&gt;\&lt;/span&gt;
&lt;span class="w"&gt;       &lt;/span&gt;-video_size&lt;span class="w"&gt; &lt;/span&gt;1920x1080&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="se"&gt;\&lt;/span&gt;
&lt;span class="w"&gt;       &lt;/span&gt;-framerate&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="m"&gt;25&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="se"&gt;\&lt;/span&gt;
&lt;span class="w"&gt;       &lt;/span&gt;-i&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nv"&gt;$DISPLAY&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="se"&gt;\&lt;/span&gt;
&lt;span class="w"&gt;       &lt;/span&gt;-c:v&lt;span class="w"&gt; &lt;/span&gt;ffvhuff&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="se"&gt;\&lt;/span&gt;
&lt;span class="w"&gt;       &lt;/span&gt;screen.mkv
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;For .mp4 w/ audio:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;ffmpeg&lt;span class="w"&gt; &lt;/span&gt;-f&lt;span class="w"&gt; &lt;/span&gt;x11grab&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="se"&gt;\&lt;/span&gt;
&lt;span class="w"&gt;       &lt;/span&gt;-video_size&lt;span class="w"&gt; &lt;/span&gt;1920x1080&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="se"&gt;\&lt;/span&gt;
&lt;span class="w"&gt;       &lt;/span&gt;-framerate&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="m"&gt;25&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="se"&gt;\&lt;/span&gt;
&lt;span class="w"&gt;       &lt;/span&gt;-i&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nv"&gt;$DISPLAY&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="se"&gt;\&lt;/span&gt;
&lt;span class="w"&gt;       &lt;/span&gt;-f&lt;span class="w"&gt; &lt;/span&gt;alsa&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="se"&gt;\&lt;/span&gt;
&lt;span class="w"&gt;       &lt;/span&gt;-i&lt;span class="w"&gt; &lt;/span&gt;default&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="se"&gt;\&lt;/span&gt;
&lt;span class="w"&gt;       &lt;/span&gt;-c:v&lt;span class="w"&gt; &lt;/span&gt;libx264&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="se"&gt;\&lt;/span&gt;
&lt;span class="w"&gt;       &lt;/span&gt;-preset&lt;span class="w"&gt; &lt;/span&gt;ultrafast&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="se"&gt;\&lt;/span&gt;
&lt;span class="w"&gt;       &lt;/span&gt;-c:a&lt;span class="w"&gt; &lt;/span&gt;aac&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="se"&gt;\&lt;/span&gt;
&lt;span class="w"&gt;       &lt;/span&gt;screen.mp4
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;For .mp4 w/o audio:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;ffmpeg&lt;span class="w"&gt; &lt;/span&gt;-f&lt;span class="w"&gt; &lt;/span&gt;x11grab&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="se"&gt;\&lt;/span&gt;
&lt;span class="w"&gt;       &lt;/span&gt;-video_size&lt;span class="w"&gt; &lt;/span&gt;1920x1080&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="se"&gt;\&lt;/span&gt;
&lt;span class="w"&gt;       &lt;/span&gt;-framerate&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="m"&gt;25&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="se"&gt;\&lt;/span&gt;
&lt;span class="w"&gt;       &lt;/span&gt;-i&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nv"&gt;$DISPLAY&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="se"&gt;\&lt;/span&gt;
&lt;span class="w"&gt;       &lt;/span&gt;-c:v&lt;span class="w"&gt; &lt;/span&gt;libx264&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="se"&gt;\&lt;/span&gt;
&lt;span class="w"&gt;       &lt;/span&gt;-preset&lt;span class="w"&gt; &lt;/span&gt;ultrafast&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="se"&gt;\&lt;/span&gt;
&lt;span class="w"&gt;       &lt;/span&gt;-c:a&lt;span class="w"&gt; &lt;/span&gt;aac&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="se"&gt;\&lt;/span&gt;
&lt;span class="w"&gt;       &lt;/span&gt;screen.mp4
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;h1&gt;recordmydesktop&lt;/h1&gt;
&lt;p&gt;&lt;a href="http://recordmydesktop.sourceforge.net/about.php"&gt;source&lt;/a&gt; &amp;amp; &lt;a href="https://linux.die.net/man/1/recordmydesktop"&gt;man page&lt;/a&gt;. Great for producing video formats:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;$&lt;span class="w"&gt; &lt;/span&gt;sudo&lt;span class="w"&gt; &lt;/span&gt;apt&lt;span class="w"&gt; &lt;/span&gt;install&lt;span class="w"&gt; &lt;/span&gt;recordmydesktop&lt;span class="w"&gt; &lt;/span&gt;ffmpeg
$&lt;span class="w"&gt; &lt;/span&gt;recordmydesktop&lt;span class="w"&gt; &lt;/span&gt;-o&lt;span class="w"&gt; &lt;/span&gt;&amp;lt;f1&amp;gt;.ogv
$&lt;span class="w"&gt; &lt;/span&gt;ffmpeg&lt;span class="w"&gt; &lt;/span&gt;-i&lt;span class="w"&gt; &lt;/span&gt;&amp;lt;f1&amp;gt;.ogv&lt;span class="w"&gt; &lt;/span&gt;-vcodec&lt;span class="w"&gt; &lt;/span&gt;libx264&lt;span class="w"&gt; &lt;/span&gt;-strict&lt;span class="w"&gt; &lt;/span&gt;-4&lt;span class="w"&gt; &lt;/span&gt;-ss&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="m"&gt;5&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&amp;lt;f2&amp;gt;.mp4

Usage:&lt;span class="w"&gt; &lt;/span&gt;recordmydesktop&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;OPTIONS&lt;span class="o"&gt;]&lt;/span&gt;^filename

Generic&lt;span class="w"&gt; &lt;/span&gt;Options
&lt;span class="w"&gt;  &lt;/span&gt;-h,&lt;span class="w"&gt; &lt;/span&gt;--help&lt;span class="w"&gt;                              &lt;/span&gt;Print&lt;span class="w"&gt; &lt;/span&gt;this&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nb"&gt;help&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;and&lt;span class="w"&gt; &lt;/span&gt;exit.
&lt;span class="w"&gt;      &lt;/span&gt;--version&lt;span class="w"&gt;                           &lt;/span&gt;Print&lt;span class="w"&gt; &lt;/span&gt;program&lt;span class="w"&gt; &lt;/span&gt;version&lt;span class="w"&gt; &lt;/span&gt;and&lt;span class="w"&gt; &lt;/span&gt;exit.
&lt;span class="w"&gt;      &lt;/span&gt;--print-config&lt;span class="w"&gt;                      &lt;/span&gt;Print&lt;span class="w"&gt; &lt;/span&gt;info&lt;span class="w"&gt; &lt;/span&gt;about&lt;span class="w"&gt; &lt;/span&gt;options&lt;span class="w"&gt; &lt;/span&gt;selected&lt;span class="w"&gt; &lt;/span&gt;during&lt;span class="w"&gt; &lt;/span&gt;compilation&lt;span class="w"&gt; &lt;/span&gt;and&lt;span class="w"&gt; &lt;/span&gt;exit.

Image&lt;span class="w"&gt; &lt;/span&gt;Options
&lt;span class="w"&gt;      &lt;/span&gt;--windowid&lt;span class="o"&gt;=&lt;/span&gt;id_of_window&lt;span class="w"&gt;             &lt;/span&gt;id&lt;span class="w"&gt; &lt;/span&gt;of&lt;span class="w"&gt; &lt;/span&gt;window&lt;span class="w"&gt; &lt;/span&gt;to&lt;span class="w"&gt; &lt;/span&gt;be&lt;span class="w"&gt; &lt;/span&gt;recorded.
&lt;span class="w"&gt;      &lt;/span&gt;--display&lt;span class="o"&gt;=&lt;/span&gt;DISPLAY&lt;span class="w"&gt;                   &lt;/span&gt;Display&lt;span class="w"&gt; &lt;/span&gt;to&lt;span class="w"&gt; &lt;/span&gt;connect&lt;span class="w"&gt; &lt;/span&gt;to.
&lt;span class="w"&gt;  &lt;/span&gt;-x,&lt;span class="w"&gt; &lt;/span&gt;--x&lt;span class="o"&gt;=&lt;/span&gt;N&amp;gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="m"&gt;0&lt;/span&gt;&lt;span class="w"&gt;                            &lt;/span&gt;Offset&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;in&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;x&lt;span class="w"&gt; &lt;/span&gt;direction.
&lt;span class="w"&gt;  &lt;/span&gt;-y,&lt;span class="w"&gt; &lt;/span&gt;--x&lt;span class="o"&gt;=&lt;/span&gt;N&amp;gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="m"&gt;0&lt;/span&gt;&lt;span class="w"&gt;                            &lt;/span&gt;Offset&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;in&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;y&lt;span class="w"&gt; &lt;/span&gt;direction.
&lt;span class="w"&gt;      &lt;/span&gt;--width&lt;span class="o"&gt;=&lt;/span&gt;N&amp;gt;0&lt;span class="w"&gt;                         &lt;/span&gt;Width&lt;span class="w"&gt; &lt;/span&gt;of&lt;span class="w"&gt; &lt;/span&gt;recorded&lt;span class="w"&gt; &lt;/span&gt;window.
&lt;span class="w"&gt;      &lt;/span&gt;--height&lt;span class="o"&gt;=&lt;/span&gt;N&amp;gt;0&lt;span class="w"&gt;                        &lt;/span&gt;Height&lt;span class="w"&gt; &lt;/span&gt;of&lt;span class="w"&gt; &lt;/span&gt;recorded&lt;span class="w"&gt; &lt;/span&gt;window.
&lt;span class="w"&gt;      &lt;/span&gt;--dummy-cursor&lt;span class="o"&gt;=&lt;/span&gt;color&lt;span class="w"&gt;                &lt;/span&gt;Color&lt;span class="w"&gt; &lt;/span&gt;of&lt;span class="w"&gt; &lt;/span&gt;the&lt;span class="w"&gt; &lt;/span&gt;dummy&lt;span class="w"&gt; &lt;/span&gt;cursor&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;black&lt;span class="p"&gt;|&lt;/span&gt;white&lt;span class="o"&gt;]&lt;/span&gt;
&lt;span class="w"&gt;      &lt;/span&gt;--no-cursor&lt;span class="w"&gt;                         &lt;/span&gt;Disable&lt;span class="w"&gt; &lt;/span&gt;drawing&lt;span class="w"&gt; &lt;/span&gt;of&lt;span class="w"&gt; &lt;/span&gt;the&lt;span class="w"&gt; &lt;/span&gt;cursor.
&lt;span class="w"&gt;      &lt;/span&gt;--no-shared&lt;span class="w"&gt;                         &lt;/span&gt;Disable&lt;span class="w"&gt; &lt;/span&gt;usage&lt;span class="w"&gt; &lt;/span&gt;of&lt;span class="w"&gt; &lt;/span&gt;MIT-shared&lt;span class="w"&gt; &lt;/span&gt;memory&lt;span class="w"&gt; &lt;/span&gt;extension&lt;span class="o"&gt;(&lt;/span&gt;Not&lt;span class="w"&gt; &lt;/span&gt;Recommended!&lt;span class="o"&gt;)&lt;/span&gt;.
&lt;span class="w"&gt;      &lt;/span&gt;--full-shots&lt;span class="w"&gt;                        &lt;/span&gt;Take&lt;span class="w"&gt; &lt;/span&gt;full&lt;span class="w"&gt; &lt;/span&gt;screenshot&lt;span class="w"&gt; &lt;/span&gt;at&lt;span class="w"&gt; &lt;/span&gt;every&lt;span class="w"&gt; &lt;/span&gt;frame&lt;span class="o"&gt;(&lt;/span&gt;Not&lt;span class="w"&gt; &lt;/span&gt;recomended!&lt;span class="o"&gt;)&lt;/span&gt;.
&lt;span class="w"&gt;      &lt;/span&gt;--follow-mouse&lt;span class="w"&gt;                      &lt;/span&gt;Makes&lt;span class="w"&gt; &lt;/span&gt;the&lt;span class="w"&gt; &lt;/span&gt;capture&lt;span class="w"&gt; &lt;/span&gt;area&lt;span class="w"&gt; &lt;/span&gt;follow&lt;span class="w"&gt; &lt;/span&gt;the&lt;span class="w"&gt; &lt;/span&gt;mouse&lt;span class="w"&gt; &lt;/span&gt;cursor.&lt;span class="w"&gt; &lt;/span&gt;Autoenables&lt;span class="w"&gt; &lt;/span&gt;--full-shots.
&lt;span class="w"&gt;      &lt;/span&gt;--quick-subsampling&lt;span class="w"&gt;                 &lt;/span&gt;Do&lt;span class="w"&gt; &lt;/span&gt;subsampling&lt;span class="w"&gt; &lt;/span&gt;of&lt;span class="w"&gt; &lt;/span&gt;the&lt;span class="w"&gt; &lt;/span&gt;chroma&lt;span class="w"&gt; &lt;/span&gt;planes&lt;span class="w"&gt; &lt;/span&gt;by&lt;span class="w"&gt; &lt;/span&gt;discarding,&lt;span class="w"&gt; &lt;/span&gt;not&lt;span class="w"&gt; &lt;/span&gt;averaging.
&lt;span class="w"&gt;      &lt;/span&gt;--fps&lt;span class="o"&gt;=&lt;/span&gt;N&lt;span class="o"&gt;(&lt;/span&gt;number&amp;gt;0.0&lt;span class="o"&gt;)&lt;/span&gt;&lt;span class="w"&gt;                 &lt;/span&gt;A&lt;span class="w"&gt; &lt;/span&gt;positive&lt;span class="w"&gt; &lt;/span&gt;number&lt;span class="w"&gt; &lt;/span&gt;denoting&lt;span class="w"&gt; &lt;/span&gt;desired&lt;span class="w"&gt; &lt;/span&gt;framerate.

Sound&lt;span class="w"&gt; &lt;/span&gt;Options
&lt;span class="w"&gt;      &lt;/span&gt;--channels&lt;span class="o"&gt;=&lt;/span&gt;N&lt;span class="w"&gt;                        &lt;/span&gt;A&lt;span class="w"&gt; &lt;/span&gt;positive&lt;span class="w"&gt; &lt;/span&gt;number&lt;span class="w"&gt; &lt;/span&gt;denoting&lt;span class="w"&gt; &lt;/span&gt;desired&lt;span class="w"&gt; &lt;/span&gt;sound&lt;span class="w"&gt; &lt;/span&gt;channels&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;in&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;recording.
&lt;span class="w"&gt;      &lt;/span&gt;--freq&lt;span class="o"&gt;=&lt;/span&gt;N&lt;span class="w"&gt;                            &lt;/span&gt;A&lt;span class="w"&gt; &lt;/span&gt;positive&lt;span class="w"&gt; &lt;/span&gt;number&lt;span class="w"&gt; &lt;/span&gt;denoting&lt;span class="w"&gt; &lt;/span&gt;desired&lt;span class="w"&gt; &lt;/span&gt;sound&lt;span class="w"&gt; &lt;/span&gt;frequency.
&lt;span class="w"&gt;      &lt;/span&gt;--buffer-size&lt;span class="o"&gt;=&lt;/span&gt;N&lt;span class="w"&gt;                     &lt;/span&gt;A&lt;span class="w"&gt; &lt;/span&gt;positive&lt;span class="w"&gt; &lt;/span&gt;number&lt;span class="w"&gt; &lt;/span&gt;denoting&lt;span class="w"&gt; &lt;/span&gt;the&lt;span class="w"&gt; &lt;/span&gt;desired&lt;span class="w"&gt; &lt;/span&gt;sound&lt;span class="w"&gt; &lt;/span&gt;buffer&lt;span class="w"&gt; &lt;/span&gt;size&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="k"&gt;in&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;frames,when
&lt;span class="w"&gt;                                          &lt;/span&gt;using&lt;span class="w"&gt; &lt;/span&gt;ALSA&lt;span class="w"&gt; &lt;/span&gt;or&lt;span class="w"&gt; &lt;/span&gt;OSS&lt;span class="o"&gt;)&lt;/span&gt;
&lt;span class="w"&gt;      &lt;/span&gt;--ring-buffer-size&lt;span class="o"&gt;=&lt;/span&gt;N&lt;span class="w"&gt;                &lt;/span&gt;A&lt;span class="w"&gt; &lt;/span&gt;float&lt;span class="w"&gt; &lt;/span&gt;number&lt;span class="w"&gt; &lt;/span&gt;denoting&lt;span class="w"&gt; &lt;/span&gt;the&lt;span class="w"&gt; &lt;/span&gt;desired&lt;span class="w"&gt; &lt;/span&gt;ring&lt;span class="w"&gt; &lt;/span&gt;buffer&lt;span class="w"&gt; &lt;/span&gt;size&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="k"&gt;in&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;seconds,when&lt;span class="w"&gt; &lt;/span&gt;using
&lt;span class="w"&gt;                                          &lt;/span&gt;JACK&lt;span class="w"&gt; &lt;/span&gt;only&lt;span class="o"&gt;)&lt;/span&gt;.
&lt;span class="w"&gt;      &lt;/span&gt;--device&lt;span class="o"&gt;=&lt;/span&gt;SOUND_DEVICE&lt;span class="w"&gt;               &lt;/span&gt;Sound&lt;span class="w"&gt; &lt;/span&gt;device&lt;span class="o"&gt;(&lt;/span&gt;default&lt;span class="w"&gt; &lt;/span&gt;default&lt;span class="o"&gt;)&lt;/span&gt;.
&lt;span class="w"&gt;      &lt;/span&gt;--use-jack&lt;span class="o"&gt;=&lt;/span&gt;port1&lt;span class="w"&gt; &lt;/span&gt;port2...&lt;span class="w"&gt; &lt;/span&gt;portn&lt;span class="w"&gt;     &lt;/span&gt;Record&lt;span class="w"&gt; &lt;/span&gt;audio&lt;span class="w"&gt; &lt;/span&gt;from&lt;span class="w"&gt; &lt;/span&gt;the&lt;span class="w"&gt; &lt;/span&gt;specified&lt;span class="w"&gt; &lt;/span&gt;list&lt;span class="w"&gt; &lt;/span&gt;of&lt;span class="w"&gt; &lt;/span&gt;space-separated&lt;span class="w"&gt; &lt;/span&gt;jack&lt;span class="w"&gt; &lt;/span&gt;ports.
&lt;span class="w"&gt;      &lt;/span&gt;--no-sound&lt;span class="w"&gt;                          &lt;/span&gt;Do&lt;span class="w"&gt; &lt;/span&gt;not&lt;span class="w"&gt; &lt;/span&gt;record&lt;span class="w"&gt; &lt;/span&gt;sound.

Encoding&lt;span class="w"&gt; &lt;/span&gt;Options
&lt;span class="w"&gt;      &lt;/span&gt;--on-the-fly-encoding&lt;span class="w"&gt;               &lt;/span&gt;Encode&lt;span class="w"&gt; &lt;/span&gt;the&lt;span class="w"&gt; &lt;/span&gt;audio-video&lt;span class="w"&gt; &lt;/span&gt;data,&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;while&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;recording.
&lt;span class="w"&gt;      &lt;/span&gt;--v_quality&lt;span class="o"&gt;=&lt;/span&gt;n&lt;span class="w"&gt;                       &lt;/span&gt;A&lt;span class="w"&gt; &lt;/span&gt;number&lt;span class="w"&gt; &lt;/span&gt;from&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="m"&gt;0&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;to&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="m"&gt;63&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;for&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;desired&lt;span class="w"&gt; &lt;/span&gt;encoded&lt;span class="w"&gt; &lt;/span&gt;video&lt;span class="w"&gt; &lt;/span&gt;quality&lt;span class="o"&gt;(&lt;/span&gt;default&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="m"&gt;63&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;.
&lt;span class="w"&gt;      &lt;/span&gt;--v_bitrate&lt;span class="o"&gt;=&lt;/span&gt;n&lt;span class="w"&gt;                       &lt;/span&gt;A&lt;span class="w"&gt; &lt;/span&gt;number&lt;span class="w"&gt; &lt;/span&gt;from&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="m"&gt;0&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;to&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="m"&gt;2000000&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;for&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;desired&lt;span class="w"&gt; &lt;/span&gt;encoded&lt;span class="w"&gt; &lt;/span&gt;video&lt;span class="w"&gt; &lt;/span&gt;bitrate&lt;span class="o"&gt;(&lt;/span&gt;default&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="m"&gt;0&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;.
&lt;span class="w"&gt;      &lt;/span&gt;--s_quality&lt;span class="o"&gt;=&lt;/span&gt;n&lt;span class="w"&gt;                       &lt;/span&gt;Desired&lt;span class="w"&gt; &lt;/span&gt;audio&lt;span class="w"&gt; &lt;/span&gt;quality&lt;span class="o"&gt;(&lt;/span&gt;-1&lt;span class="w"&gt; &lt;/span&gt;to&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="m"&gt;10&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;.

Misc&lt;span class="w"&gt; &lt;/span&gt;Options
&lt;span class="w"&gt;      &lt;/span&gt;--rescue&lt;span class="o"&gt;=&lt;/span&gt;path_to_data&lt;span class="w"&gt;               &lt;/span&gt;Encode&lt;span class="w"&gt; &lt;/span&gt;data&lt;span class="w"&gt; &lt;/span&gt;from&lt;span class="w"&gt; &lt;/span&gt;a&lt;span class="w"&gt; &lt;/span&gt;previous,&lt;span class="w"&gt; &lt;/span&gt;crashed,&lt;span class="w"&gt; &lt;/span&gt;session.
&lt;span class="w"&gt;      &lt;/span&gt;--no-wm-check&lt;span class="w"&gt;                       &lt;/span&gt;Do&lt;span class="w"&gt; &lt;/span&gt;not&lt;span class="w"&gt; &lt;/span&gt;try&lt;span class="w"&gt; &lt;/span&gt;to&lt;span class="w"&gt; &lt;/span&gt;detect&lt;span class="w"&gt; &lt;/span&gt;the&lt;span class="w"&gt; &lt;/span&gt;window&lt;span class="w"&gt; &lt;/span&gt;manager&lt;span class="o"&gt;(&lt;/span&gt;and&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nb"&gt;set&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;options&lt;span class="w"&gt; &lt;/span&gt;according&lt;span class="w"&gt; &lt;/span&gt;to&lt;span class="w"&gt; &lt;/span&gt;it&lt;span class="o"&gt;)&lt;/span&gt;
&lt;span class="w"&gt;      &lt;/span&gt;--no-frame&lt;span class="w"&gt;                          &lt;/span&gt;Don&lt;span class="w"&gt; &lt;/span&gt;not&lt;span class="w"&gt; &lt;/span&gt;show&lt;span class="w"&gt; &lt;/span&gt;the&lt;span class="w"&gt; &lt;/span&gt;frame&lt;span class="w"&gt; &lt;/span&gt;that&lt;span class="w"&gt; &lt;/span&gt;visualizes&lt;span class="w"&gt; &lt;/span&gt;the&lt;span class="w"&gt; &lt;/span&gt;recorded&lt;span class="w"&gt; &lt;/span&gt;area.
&lt;span class="w"&gt;      &lt;/span&gt;--pause-shortcut&lt;span class="o"&gt;=&lt;/span&gt;MOD+KEY&lt;span class="w"&gt;            &lt;/span&gt;Shortcut&lt;span class="w"&gt; &lt;/span&gt;that&lt;span class="w"&gt; &lt;/span&gt;will&lt;span class="w"&gt; &lt;/span&gt;be&lt;span class="w"&gt; &lt;/span&gt;used&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;for&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;un&lt;span class="o"&gt;)&lt;/span&gt;pausing&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;default&lt;span class="w"&gt; &lt;/span&gt;Control+Mod1+p&lt;span class="o"&gt;)&lt;/span&gt;.
&lt;span class="w"&gt;      &lt;/span&gt;--stop-shortcut&lt;span class="o"&gt;=&lt;/span&gt;MOD+KEY&lt;span class="w"&gt;             &lt;/span&gt;Shortcut&lt;span class="w"&gt; &lt;/span&gt;that&lt;span class="w"&gt; &lt;/span&gt;will&lt;span class="w"&gt; &lt;/span&gt;be&lt;span class="w"&gt; &lt;/span&gt;used&lt;span class="w"&gt; &lt;/span&gt;to&lt;span class="w"&gt; &lt;/span&gt;stop&lt;span class="w"&gt; &lt;/span&gt;the&lt;span class="w"&gt; &lt;/span&gt;recording&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;default&lt;span class="w"&gt; &lt;/span&gt;Control+Mod1+s&lt;span class="o"&gt;)&lt;/span&gt;.
&lt;span class="w"&gt;      &lt;/span&gt;--compress-cache&lt;span class="w"&gt;                    &lt;/span&gt;Image&lt;span class="w"&gt; &lt;/span&gt;data&lt;span class="w"&gt; &lt;/span&gt;are&lt;span class="w"&gt; &lt;/span&gt;cached&lt;span class="w"&gt; &lt;/span&gt;with&lt;span class="w"&gt; &lt;/span&gt;light&lt;span class="w"&gt; &lt;/span&gt;compression.
&lt;span class="w"&gt;      &lt;/span&gt;--workdir&lt;span class="o"&gt;=&lt;/span&gt;DIR&lt;span class="w"&gt;                       &lt;/span&gt;Location&lt;span class="w"&gt; &lt;/span&gt;where&lt;span class="w"&gt; &lt;/span&gt;a&lt;span class="w"&gt; &lt;/span&gt;temporary&lt;span class="w"&gt; &lt;/span&gt;directory&lt;span class="w"&gt; &lt;/span&gt;will&lt;span class="w"&gt; &lt;/span&gt;be&lt;span class="w"&gt; &lt;/span&gt;created&lt;span class="w"&gt; &lt;/span&gt;to&lt;span class="w"&gt; &lt;/span&gt;hold&lt;span class="w"&gt; &lt;/span&gt;project
&lt;span class="w"&gt;                                          &lt;/span&gt;files&lt;span class="o"&gt;(&lt;/span&gt;default&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nv"&gt;$HOME&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;.
&lt;span class="w"&gt;      &lt;/span&gt;--delay&lt;span class="o"&gt;=&lt;/span&gt;n&lt;span class="o"&gt;[&lt;/span&gt;H&lt;span class="p"&gt;|&lt;/span&gt;h&lt;span class="p"&gt;|&lt;/span&gt;M&lt;span class="p"&gt;|&lt;/span&gt;m&lt;span class="o"&gt;]&lt;/span&gt;&lt;span class="w"&gt;                  &lt;/span&gt;Number&lt;span class="w"&gt; &lt;/span&gt;of&lt;span class="w"&gt; &lt;/span&gt;secs&lt;span class="o"&gt;(&lt;/span&gt;default&lt;span class="o"&gt;)&lt;/span&gt;,minutes&lt;span class="w"&gt; &lt;/span&gt;or&lt;span class="w"&gt; &lt;/span&gt;hours&lt;span class="w"&gt; &lt;/span&gt;before&lt;span class="w"&gt; &lt;/span&gt;capture&lt;span class="w"&gt; &lt;/span&gt;starts&lt;span class="o"&gt;(&lt;/span&gt;number&lt;span class="w"&gt; &lt;/span&gt;can
&lt;span class="w"&gt;                                          &lt;/span&gt;be&lt;span class="w"&gt; &lt;/span&gt;float&lt;span class="o"&gt;)&lt;/span&gt;
&lt;span class="w"&gt;      &lt;/span&gt;--overwrite&lt;span class="w"&gt;                         &lt;/span&gt;If&lt;span class="w"&gt; &lt;/span&gt;there&lt;span class="w"&gt; &lt;/span&gt;is&lt;span class="w"&gt; &lt;/span&gt;already&lt;span class="w"&gt; &lt;/span&gt;a&lt;span class="w"&gt; &lt;/span&gt;file&lt;span class="w"&gt; &lt;/span&gt;with&lt;span class="w"&gt; &lt;/span&gt;the&lt;span class="w"&gt; &lt;/span&gt;same&lt;span class="w"&gt; &lt;/span&gt;name,&lt;span class="w"&gt; &lt;/span&gt;delete&lt;span class="w"&gt; &lt;/span&gt;it&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;default&lt;span class="w"&gt; &lt;/span&gt;is&lt;span class="w"&gt; &lt;/span&gt;to&lt;span class="w"&gt; &lt;/span&gt;add
&lt;span class="w"&gt;                                          &lt;/span&gt;a&lt;span class="w"&gt; &lt;/span&gt;number&lt;span class="w"&gt; &lt;/span&gt;postfix&lt;span class="w"&gt; &lt;/span&gt;to&lt;span class="w"&gt; &lt;/span&gt;the&lt;span class="w"&gt; &lt;/span&gt;new&lt;span class="w"&gt; &lt;/span&gt;one&lt;span class="o"&gt;)&lt;/span&gt;.
&lt;span class="w"&gt;  &lt;/span&gt;-o,&lt;span class="w"&gt; &lt;/span&gt;--output&lt;span class="o"&gt;=&lt;/span&gt;filename&lt;span class="w"&gt;                   &lt;/span&gt;Name&lt;span class="w"&gt; &lt;/span&gt;of&lt;span class="w"&gt; &lt;/span&gt;recorded&lt;span class="w"&gt; &lt;/span&gt;video&lt;span class="o"&gt;(&lt;/span&gt;default&lt;span class="w"&gt; &lt;/span&gt;out.ogv&lt;span class="o"&gt;)&lt;/span&gt;.

&lt;span class="w"&gt;    &lt;/span&gt;If&lt;span class="w"&gt; &lt;/span&gt;no&lt;span class="w"&gt; &lt;/span&gt;other&lt;span class="w"&gt; &lt;/span&gt;options&lt;span class="w"&gt; &lt;/span&gt;are&lt;span class="w"&gt; &lt;/span&gt;specified,&lt;span class="w"&gt; &lt;/span&gt;filename&lt;span class="w"&gt; &lt;/span&gt;can&lt;span class="w"&gt; &lt;/span&gt;be&lt;span class="w"&gt; &lt;/span&gt;given&lt;span class="w"&gt; &lt;/span&gt;without&lt;span class="w"&gt; &lt;/span&gt;the&lt;span class="w"&gt; &lt;/span&gt;-o&lt;span class="w"&gt; &lt;/span&gt;switch.
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Note that &lt;code&gt;-ss 5&lt;/code&gt; is to skip the beginning 5 seconds. For some reason,
ogv &amp;rarr; mp4 conversion sometimes leaves the first few seconds with
a terrible looking patchy greens. I suspect it is caused my switching
desktop in spectrwm.&lt;/p&gt;
&lt;h1&gt;byzanz-record&lt;/h1&gt;
&lt;p&gt;&lt;a href="https://linux.die.net/man/1/byzanz-record"&gt;man page&lt;/a&gt;. Great for producing animated &lt;code&gt;gif&lt;/code&gt;:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;$&lt;span class="w"&gt; &lt;/span&gt;sudo&lt;span class="w"&gt; &lt;/span&gt;apt&lt;span class="w"&gt; &lt;/span&gt;insteall&lt;span class="w"&gt; &lt;/span&gt;byzanz&lt;span class="w"&gt; &lt;/span&gt;&amp;lt;--&lt;span class="w"&gt; &lt;/span&gt;ubuntu&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="m"&gt;18&lt;/span&gt;.04

Usage:
&lt;span class="w"&gt;  &lt;/span&gt;byzanz-record&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;OPTION...&lt;span class="o"&gt;]&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;record&lt;span class="w"&gt; &lt;/span&gt;your&lt;span class="w"&gt; &lt;/span&gt;current&lt;span class="w"&gt; &lt;/span&gt;desktop&lt;span class="w"&gt; &lt;/span&gt;session

Help&lt;span class="w"&gt; &lt;/span&gt;Options:
&lt;span class="w"&gt;  &lt;/span&gt;-?,&lt;span class="w"&gt; &lt;/span&gt;--help&lt;span class="w"&gt;               &lt;/span&gt;Show&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nb"&gt;help&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;options
&lt;span class="w"&gt;  &lt;/span&gt;--help-all&lt;span class="w"&gt;               &lt;/span&gt;Show&lt;span class="w"&gt; &lt;/span&gt;all&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nb"&gt;help&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;options
&lt;span class="w"&gt;  &lt;/span&gt;--help-gtk&lt;span class="w"&gt;               &lt;/span&gt;Show&lt;span class="w"&gt; &lt;/span&gt;GTK+&lt;span class="w"&gt; &lt;/span&gt;Options

Application&lt;span class="w"&gt; &lt;/span&gt;Options:
&lt;span class="w"&gt;  &lt;/span&gt;-d,&lt;span class="w"&gt; &lt;/span&gt;--duration&lt;span class="o"&gt;=&lt;/span&gt;SECS&lt;span class="w"&gt;      &lt;/span&gt;Duration&lt;span class="w"&gt; &lt;/span&gt;of&lt;span class="w"&gt; &lt;/span&gt;animation&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;default:&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="m"&gt;10&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;seconds&lt;span class="o"&gt;)&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;-e,&lt;span class="w"&gt; &lt;/span&gt;--exec&lt;span class="o"&gt;=&lt;/span&gt;COMMAND&lt;span class="w"&gt;       &lt;/span&gt;Command&lt;span class="w"&gt; &lt;/span&gt;to&lt;span class="w"&gt; &lt;/span&gt;execute&lt;span class="w"&gt; &lt;/span&gt;and&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nb"&gt;time&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;--delay&lt;span class="o"&gt;=&lt;/span&gt;SECS&lt;span class="w"&gt;             &lt;/span&gt;Delay&lt;span class="w"&gt; &lt;/span&gt;before&lt;span class="w"&gt; &lt;/span&gt;start&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;default:&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="m"&gt;1&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;second&lt;span class="o"&gt;)&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;-c,&lt;span class="w"&gt; &lt;/span&gt;--cursor&lt;span class="w"&gt;             &lt;/span&gt;Record&lt;span class="w"&gt; &lt;/span&gt;mouse&lt;span class="w"&gt; &lt;/span&gt;cursor
&lt;span class="w"&gt;  &lt;/span&gt;-a,&lt;span class="w"&gt; &lt;/span&gt;--audio&lt;span class="w"&gt;              &lt;/span&gt;Record&lt;span class="w"&gt; &lt;/span&gt;audio
&lt;span class="w"&gt;  &lt;/span&gt;-x,&lt;span class="w"&gt; &lt;/span&gt;--x&lt;span class="o"&gt;=&lt;/span&gt;PIXEL&lt;span class="w"&gt;            &lt;/span&gt;X&lt;span class="w"&gt; &lt;/span&gt;coordinate&lt;span class="w"&gt; &lt;/span&gt;of&lt;span class="w"&gt; &lt;/span&gt;rectangle&lt;span class="w"&gt; &lt;/span&gt;to&lt;span class="w"&gt; &lt;/span&gt;record
&lt;span class="w"&gt;  &lt;/span&gt;-y,&lt;span class="w"&gt; &lt;/span&gt;--y&lt;span class="o"&gt;=&lt;/span&gt;PIXEL&lt;span class="w"&gt;            &lt;/span&gt;Y&lt;span class="w"&gt; &lt;/span&gt;coordinate&lt;span class="w"&gt; &lt;/span&gt;of&lt;span class="w"&gt; &lt;/span&gt;rectangle&lt;span class="w"&gt; &lt;/span&gt;to&lt;span class="w"&gt; &lt;/span&gt;record
&lt;span class="w"&gt;  &lt;/span&gt;-w,&lt;span class="w"&gt; &lt;/span&gt;--width&lt;span class="o"&gt;=&lt;/span&gt;PIXEL&lt;span class="w"&gt;        &lt;/span&gt;Width&lt;span class="w"&gt; &lt;/span&gt;of&lt;span class="w"&gt; &lt;/span&gt;recording&lt;span class="w"&gt; &lt;/span&gt;rectangle
&lt;span class="w"&gt;  &lt;/span&gt;-h,&lt;span class="w"&gt; &lt;/span&gt;--height&lt;span class="o"&gt;=&lt;/span&gt;PIXEL&lt;span class="w"&gt;       &lt;/span&gt;Height&lt;span class="w"&gt; &lt;/span&gt;of&lt;span class="w"&gt; &lt;/span&gt;recording&lt;span class="w"&gt; &lt;/span&gt;rectangle
&lt;span class="w"&gt;  &lt;/span&gt;-v,&lt;span class="w"&gt; &lt;/span&gt;--verbose&lt;span class="w"&gt;            &lt;/span&gt;Be&lt;span class="w"&gt; &lt;/span&gt;verbose
&lt;span class="w"&gt;  &lt;/span&gt;--display&lt;span class="o"&gt;=&lt;/span&gt;DISPLAY&lt;span class="w"&gt;        &lt;/span&gt;X&lt;span class="w"&gt; &lt;/span&gt;display&lt;span class="w"&gt; &lt;/span&gt;to&lt;span class="w"&gt; &lt;/span&gt;use
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;The two mostly useful are &lt;code&gt;-d&lt;/code&gt; (duration) and &lt;code&gt;--delay=SECS&lt;/code&gt; for a
delay. Duration is a trial-and-error iteration since usually I don't
know how long the screencast will run.&lt;/p&gt;</content><category term="dev"></category><category term="dev"></category><category term="lenovo"></category></entry><entry><title>Netbox revised</title><link href="https://fengxia41103.github.io/myblog/netbox.html" rel="alternate"></link><published>2018-06-06T14:00:00-04:00</published><updated>2018-08-01T21:50:00-04:00</updated><author><name>Feng Xia</name></author><id>tag:fengxia41103.github.io,2018-06-06:/myblog/netbox.html</id><summary type="html">&lt;p&gt;&lt;a href="http://netbox.readthedocs.io/en/latest/"&gt;Netbox&lt;/a&gt; is a nice level 1 tool (for levels, see &lt;a href="https://fengxia41103.github.io/myblog/capability model.html"&gt;capability model&lt;/a&gt;).
But we need more. Managing a lab or a rack is more than level 1. On
top of all these, we talk about automation, which implies capabilities
at least to level 4. Therefore, we used Netbox code as a starting
point, and built a POC.&lt;/p&gt;
&lt;h1&gt;Background&lt;/h1&gt;
&lt;p&gt;It has been a painful experience to witness how we are diagnosing
infrastructure, especially network connections, in a what I would call
&lt;code&gt;chasing the rabbit&lt;/code&gt; fashion in which &lt;code&gt;ping&lt;/code&gt;, &lt;code&gt;route&lt;/code&gt;, &lt;code&gt;vlan&lt;/code&gt;, &lt;code&gt;port&lt;/code&gt;
on a switch, to which port the two ends of a cable plugged into, all
coming to a single chain of a &lt;code&gt;valid&lt;/code&gt; connection. Part of it is to
verify hardware connections (cablings), part of software
configurations (many layers deep). A knowledgeable person can traverse
the link from one end to the other, but even he is faced with a harsh
reality of which area is to focus on.&lt;/p&gt;
&lt;p&gt;If you think of it in the highest level &amp;mdash; a topology design, its
mirror image is …&lt;/p&gt;</summary><content type="html">&lt;p&gt;&lt;a href="http://netbox.readthedocs.io/en/latest/"&gt;Netbox&lt;/a&gt; is a nice level 1 tool (for levels, see &lt;a href="https://fengxia41103.github.io/myblog/capability model.html"&gt;capability model&lt;/a&gt;).
But we need more. Managing a lab or a rack is more than level 1. On
top of all these, we talk about automation, which implies capabilities
at least to level 4. Therefore, we used Netbox code as a starting
point, and built a POC.&lt;/p&gt;
&lt;h1&gt;Background&lt;/h1&gt;
&lt;p&gt;It has been a painful experience to witness how we are diagnosing
infrastructure, especially network connections, in a what I would call
&lt;code&gt;chasing the rabbit&lt;/code&gt; fashion in which &lt;code&gt;ping&lt;/code&gt;, &lt;code&gt;route&lt;/code&gt;, &lt;code&gt;vlan&lt;/code&gt;, &lt;code&gt;port&lt;/code&gt;
on a switch, to which port the two ends of a cable plugged into, all
coming to a single chain of a &lt;code&gt;valid&lt;/code&gt; connection. Part of it is to
verify hardware connections (cablings), part of software
configurations (many layers deep). A knowledgeable person can traverse
the link from one end to the other, but even he is faced with a harsh
reality of which area is to focus on.&lt;/p&gt;
&lt;p&gt;If you think of it in the highest level &amp;mdash; a topology design, its
mirror image is the reality. Scanning devices to acquire and compose
the reality is what computer is good at. Therefore, like counting
inventory, it shall have the capability to &lt;strong&gt;replace&lt;/strong&gt; the typing of
repetitive commands by a human hand, and piece-meal ocean of meta data
into a &lt;strong&gt;logical, meaningful view&lt;/strong&gt; that saves operator mechanical
efforts. Without knowing the design, at least it should produce, and
even maintain, the reality view, on demand and continuously.&lt;/p&gt;
&lt;p&gt;Taking this further, if reality can be described, the same syntax
shall be used to describe &lt;strong&gt;expectation&lt;/strong&gt; (design). Now, we will be
equiped with both views and produce a &lt;strong&gt;diff&lt;/strong&gt; &amp;rarr; Previously we
are relying on an experienced operator to know where to look; in the
future this diff view highlights it, color-codes it, for anyone who
wants to look, anytime, and no devop expertise required.&lt;/p&gt;
&lt;p&gt;If you have read &lt;a href="https://fengxia41103.github.io/myblog/capability model.html"&gt;system capability model&lt;/a&gt;, you must have
identified that this is a capability approach. This shifts the focus
of management from bookkeeping to knowledge automation. The goal is
not to eliminate human factor, but to alleviate waste of their
bandwidth on things that can be well known, well modeled, and
scriptable.&lt;/p&gt;
&lt;p&gt;Analysis requires intelligence; SSH to ten machines does not.&lt;/p&gt;
&lt;p&gt;There are essentially two type of models: logical and physical. Logic
models are logical relationships, eg. device &amp;rarr; tenant. Tenant is
nothing but a logical concept. Physical models are describing a
relationship that requires a physical connection, eg. an interface is
connected to a switch port (via a cable).&lt;/p&gt;
&lt;h1&gt;Device&lt;/h1&gt;
&lt;p&gt;The center piece of Netbox models is the &lt;code&gt;Device&lt;/code&gt;, representing a
physical device such as server and switch. This makes sense as the
primary physical asset of a data center are certainly these devices. &lt;/p&gt;
&lt;figure class="col s12 center"&gt;
    &lt;img src="images/netbox%20device%20list.png"/&gt;
    &lt;figcaption&gt;Example list of devices&lt;/figcaption&gt;
&lt;/figure&gt;

&lt;h2&gt;Device role&lt;/h2&gt;
&lt;p&gt;&lt;code&gt;DeviceRole&lt;/code&gt; is a user-defined value list that can be assigned to a
device. Its common use is to group device by its function, such as
what we see above &amp;mdash; "Management Switch", "Ceph".&lt;/p&gt;
&lt;p&gt;A device role also defines a color, thus making a color-coded
presentation of a list of devices possible.&lt;/p&gt;
&lt;h2&gt;Device type&lt;/h2&gt;
&lt;p&gt;&lt;code&gt;DeviceType&lt;/code&gt; describes attributes such as manufacturer and model. There
are two important flags that will affect how a device can be used:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;is a &lt;code&gt;network device&lt;/code&gt;? &amp;larr; if not, the device will not have
   an interface &amp;rarr; therefore, it will not be able to link to an IP!&lt;/li&gt;
&lt;li&gt;can have &lt;code&gt;child device&lt;/code&gt;? &amp;rarr; if not, it will not have bay device
   (we model BMC controller as a bay device inside a server).&lt;/li&gt;
&lt;/ol&gt;
&lt;figure class="col s12 center"&gt;
    &lt;img src="images/netbox%20devicetype%20list.png"/&gt;
    &lt;figcaption&gt;Example list of device types&lt;/figcaption&gt;
&lt;/figure&gt;

&lt;h2&gt;Access a device&lt;/h2&gt;
&lt;p&gt;How to access a device? In bare essence
we need three things: &lt;strong&gt;(IP, username, password)&lt;/strong&gt; (we will explain
Netbox's way to control password in a later section). Further, we use
&lt;code&gt;platform&lt;/code&gt; value to determine access method:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;code&gt;linux&lt;/code&gt;: SSH&lt;/li&gt;
&lt;li&gt;&lt;code&gt;Lenovo ENOS/CNOS&lt;/code&gt;: these are Lenovo switch operating systems, and
   access method is Telnet (see &lt;a href="https://fengxia41103.github.io/myblog/switches.html"&gt;Network switch&lt;/a&gt; for details.)&lt;/li&gt;
&lt;/ol&gt;
&lt;figure class="row center"&gt;
    &lt;img src="images/netbox%20device%20section%201.png"
        class="col s6"/&gt;
    &lt;img src="images/netbox%20device%20section%202.png"
        class="col s6"/&gt;
    &lt;figcaption&gt;Device IP &amp; credential. A device can have multiple
    IP address but only one primary IP4 &amp; IP6. It can also
    have multiple credentials. We are using credential type
    "Nanagement" to highlight the one to use.&lt;/figcaption&gt;
&lt;/figure&gt;

&lt;h2&gt;Interface &amp;amp; topology&lt;/h2&gt;
&lt;p&gt;A device whose device type sets &lt;code&gt;is_network_device=True&lt;/code&gt; can be linked
to an &lt;code&gt;Interface&lt;/code&gt;, and an interface can be linked to an IP address.&lt;/p&gt;
&lt;figure class="col s12 center"&gt;
    &lt;img src="images/netbox%20device%20interface.png"/&gt;
    &lt;figcaption&gt;Device interfaces&lt;/figcaption&gt;
&lt;/figure&gt;

&lt;p&gt;An &lt;code&gt;InterfaceConnection&lt;/code&gt; linking two interfaces is the corner stone
to describe a network topology:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="n"&gt;CONNECTION_STATUS_PLANNED&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kc"&gt;False&lt;/span&gt;
&lt;span class="n"&gt;CONNECTION_STATUS_CONNECTED&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kc"&gt;True&lt;/span&gt;
&lt;span class="n"&gt;CONNECTION_STATUS_CHOICES&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;
    &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;CONNECTION_STATUS_PLANNED&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;Planned&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt;
    &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;CONNECTION_STATUS_CONNECTED&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;Connected&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt;
&lt;span class="p"&gt;]&lt;/span&gt;

&lt;span class="k"&gt;class&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nc"&gt;InterfaceConnection&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;models&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Model&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="sd"&gt;&amp;quot;&amp;quot;&amp;quot;&lt;/span&gt;
&lt;span class="sd"&gt;    An InterfaceConnection represents a symmetrical, one-to-one&lt;/span&gt;
&lt;span class="sd"&gt;    connection between two Interfaces. There is no significant&lt;/span&gt;
&lt;span class="sd"&gt;    difference between the interface_a and interface_b fields.&lt;/span&gt;
&lt;span class="sd"&gt;    &amp;quot;&amp;quot;&amp;quot;&lt;/span&gt;
    &lt;span class="n"&gt;interface_a&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;models&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;ForeignKey&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
        &lt;span class="s1"&gt;&amp;#39;Interface&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="n"&gt;related_name&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;connected_as_a&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="n"&gt;on_delete&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;models&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;CASCADE&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;interface_b&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;models&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;ForeignKey&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
        &lt;span class="s1"&gt;&amp;#39;Interface&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="n"&gt;related_name&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;connected_as_b&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="n"&gt;on_delete&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;models&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;CASCADE&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;connection_status&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;models&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;BooleanField&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
        &lt;span class="n"&gt;choices&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;CONNECTION_STATUS_CHOICES&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="n"&gt;default&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;CONNECTION_STATUS_CONNECTED&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="n"&gt;verbose_name&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;Status&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;In the example topology diagram below, we see:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Connect between port #34 of a switch (&lt;code&gt;LCTC-R1U39-SW&lt;/code&gt;) to a BMC
   interface (&lt;code&gt;ceph-1&lt;/code&gt; is the BMC controller's name).&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;A server (&lt;code&gt;ceph-node-brain2&lt;/code&gt;) has two interfaces &amp;mdash; &lt;code&gt;eno1&lt;/code&gt; and
   &lt;code&gt;ens4f1&lt;/code&gt;, where:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;code&gt;eno1&lt;/code&gt; is connected to port 2 of a switch (&lt;code&gt;R1U39&lt;/code&gt;), and&lt;/li&gt;
&lt;li&gt;&lt;code&gt;ens4f1&lt;/code&gt; is connected to port 18 of another switch (&lt;code&gt;R1U37&lt;/code&gt;).&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;figure class="col s12 center"&gt;
    &lt;img src="images/netbox%20device%20topology.png"/&gt;
    &lt;figcaption&gt;Example device view of a topology&lt;/figcaption&gt;
&lt;/figure&gt;

&lt;h2&gt;Children device (&lt;code&gt;DeviceBay&lt;/code&gt;)&lt;/h2&gt;
&lt;p&gt;A device can have device bays, which essentially forms a
&lt;code&gt;parent-children&lt;/code&gt; relationship. One use case of this relationship is
to register BMC controller as a bay device inside a server:&lt;/p&gt;
&lt;figure class="col s12 center"&gt;
    &lt;img src="images/netbox%20device%20bay%20device.png"/&gt;
    &lt;figcaption&gt;Device bay&lt;/figcaption&gt;
&lt;/figure&gt;

&lt;p&gt;Conditions to form a parent-child relationship:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;parent device allows bay/child (defined in &lt;code&gt;DeviceType&lt;/code&gt;)&lt;/li&gt;
&lt;li&gt;one can not install into itself&lt;/li&gt;
&lt;/ol&gt;
&lt;h2&gt;Related device&lt;/h2&gt;
&lt;p&gt;&lt;code&gt;Related devices&lt;/code&gt; is defined as devices that:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;belong to the same &lt;code&gt;site&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;and has the same device role&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;In Netbox this is only a convenience for navigation. However
we can extend this idea using other definitions.&lt;/p&gt;
&lt;figure class="col s12 center"&gt;
    &lt;img src="images/netbox%20device%20related%20devices.png"/&gt;
    &lt;figcaption&gt;Related devices&lt;/figcaption&gt;
&lt;/figure&gt;

&lt;h2&gt;Grouping&lt;/h2&gt;
&lt;p&gt;Just how many ways one can group devices? Maybe too many. &lt;strong&gt;Note&lt;/strong&gt;
that there are overlapping groups which are very confusing!&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Rack can also be grouped by &lt;code&gt;Site&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;Both rack and site can be grouped by &lt;code&gt;Tenant&lt;/code&gt;.&lt;/li&gt;
&lt;/ol&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="n"&gt;device_type&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;models&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;ForeignKey&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="s1"&gt;&amp;#39;DeviceType&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="n"&gt;related_name&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;instances&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="n"&gt;on_delete&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;models&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;PROTECT&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;device_role&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;models&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;ForeignKey&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="s1"&gt;&amp;#39;DeviceRole&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="n"&gt;related_name&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;devices&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="n"&gt;on_delete&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;models&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;PROTECT&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;tenant&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;models&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;ForeignKey&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="s2"&gt;&amp;quot;tenancy.Tenant&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="n"&gt;blank&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="kc"&gt;True&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;null&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="kc"&gt;True&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="n"&gt;related_name&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;devices&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="n"&gt;on_delete&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;models&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;PROTECT&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;platform&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;models&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;ForeignKey&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="s1"&gt;&amp;#39;Platform&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;related_name&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;devices&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="n"&gt;blank&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="kc"&gt;True&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;null&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="kc"&gt;True&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="n"&gt;on_delete&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;models&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;SET_NULL&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;site&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;models&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;ForeignKey&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="s1"&gt;&amp;#39;Site&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;related_name&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;devices&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="n"&gt;on_delete&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;models&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;PROTECT&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;rack&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;models&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;ForeignKey&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="s1"&gt;&amp;#39;Rack&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;related_name&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;devices&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="n"&gt;blank&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="kc"&gt;True&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;null&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="kc"&gt;True&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="n"&gt;on_delete&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;models&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;PROTECT&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;h1&gt;Rack&lt;/h1&gt;
&lt;p&gt;Rack is the physical grouping of devices. The most important thing
about rack is whether it has availabe space to &lt;strong&gt;contain a device&lt;/strong&gt;:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;rack height&lt;/li&gt;
&lt;li&gt;how much have been reserved (&lt;code&gt;RackReservation&lt;/code&gt;)?&lt;/li&gt;
&lt;li&gt;what devices does it already have? what are their height and
   depth? &lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Depth comes to play because some devices can be half-depth, thus
allowing two devices in the same slot &amp;mdash; one facing the front,
and one facing the back. Also, it is common that top-of-rack switch is
mounted facing back so that cables can access its port.&lt;/p&gt;
&lt;figure class="col s12 center"&gt;
    &lt;img src="images/netbox%20rack.png"/&gt;
    &lt;figcaption&gt;Example of a rack&lt;/figcaption&gt;
&lt;/figure&gt;

&lt;p&gt;There are four ways to group racks:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="n"&gt;site&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;models&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;ForeignKey&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="s1"&gt;&amp;#39;Site&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;related_name&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;racks&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="n"&gt;on_delete&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;models&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;PROTECT&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;group&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;models&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;ForeignKey&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="s1"&gt;&amp;#39;RackGroup&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;related_name&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;racks&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="n"&gt;blank&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="kc"&gt;True&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;null&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="kc"&gt;True&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="n"&gt;on_delete&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;models&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;SET_NULL&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;tenant&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;models&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;ForeignKey&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="n"&gt;Tenant&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="n"&gt;blank&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="kc"&gt;True&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;null&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="kc"&gt;True&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="n"&gt;related_name&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;racks&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="n"&gt;on_delete&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;models&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;PROTECT&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;role&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;models&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;ForeignKey&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="s1"&gt;&amp;#39;RackRole&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="n"&gt;related_name&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;racks&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="n"&gt;blank&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="kc"&gt;True&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;null&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="kc"&gt;True&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="n"&gt;on_delete&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;models&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;PROTECT&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;</content><category term="dev"></category><category term="dev"></category><category term="lenovo"></category></entry><entry><title>Django to REST</title><link href="https://fengxia41103.github.io/myblog/django%20to%20rest.html" rel="alternate"></link><published>2018-03-22T08:40:00-04:00</published><updated>2018-03-22T08:40:00-04:00</updated><author><name>Feng Xia</name></author><id>tag:fengxia41103.github.io,2018-03-22:/myblog/django to rest.html</id><summary type="html">&lt;figure class="col l6 m6 s12"&gt;
  &lt;img src="images/funny/the%20art%20of%20programming.jpg"
       class="center img-responsive"&gt;
&lt;/figure&gt;

&lt;p&gt;I have been building Django based web application for a while now. One
design/request I get often is a REST API. Once the model data is
exposed in REST, one can truly build a complete separate frontend
using things like Angular, react, and whatever you fancy. I have tried
a couple times myself following this architecture. On one hand it
gives a lot of flexibility and it looks nice, too &amp;larr; front end
technology is a lot of "{}", but it does look quite nice, and
responsive, too. But on the other, REST is a thing few understands
well except it is an API through which you can CRUD. Honestly, I don't
even understand yet how authentication is done, what is a good balance
between massaging data (in Tastypie's term, (de)-hydration) and
exposing data model raw.&lt;/p&gt;
&lt;p&gt;Anyway, here I want to document a practice I use, a really rudimentary
one, of making django model available as REST resource through
Tastypie.&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;a href="https://docs.djangoproject.com/en/2.0/ref/models/fields/"&gt;Django model reference&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://django-tastypie.readthedocs.io/en/latest/"&gt;Tastypie&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Let's say you are building a site called &lt;code&gt;mysite&lt;/code&gt;, and in …&lt;/p&gt;</summary><content type="html">&lt;figure class="col l6 m6 s12"&gt;
  &lt;img src="images/funny/the%20art%20of%20programming.jpg"
       class="center img-responsive"&gt;
&lt;/figure&gt;

&lt;p&gt;I have been building Django based web application for a while now. One
design/request I get often is a REST API. Once the model data is
exposed in REST, one can truly build a complete separate frontend
using things like Angular, react, and whatever you fancy. I have tried
a couple times myself following this architecture. On one hand it
gives a lot of flexibility and it looks nice, too &amp;larr; front end
technology is a lot of "{}", but it does look quite nice, and
responsive, too. But on the other, REST is a thing few understands
well except it is an API through which you can CRUD. Honestly, I don't
even understand yet how authentication is done, what is a good balance
between massaging data (in Tastypie's term, (de)-hydration) and
exposing data model raw.&lt;/p&gt;
&lt;p&gt;Anyway, here I want to document a practice I use, a really rudimentary
one, of making django model available as REST resource through
Tastypie.&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;a href="https://docs.djangoproject.com/en/2.0/ref/models/fields/"&gt;Django model reference&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://django-tastypie.readthedocs.io/en/latest/"&gt;Tastypie&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Let's say you are building a site called &lt;code&gt;mysite&lt;/code&gt;, and in it it has an
application called &lt;code&gt;myapp&lt;/code&gt;. So the file structure will be like
&lt;code&gt;gitroot/mysite/urls.py&lt;/code&gt; for site-level URLs, and
&lt;code&gt;gitroot/myapp/urls.py&lt;/code&gt; for app-level patterns. The confusing part is
that &lt;code&gt;myapp/urls.py&lt;/code&gt; will be folded into &lt;code&gt;mysite/urls.py&lt;/code&gt;. So the
thought is that a site can have multiple applications, each defining
its own &lt;strong&gt;sub-pattern&lt;/strong&gt;, while the &lt;code&gt;mysite/urls.py&lt;/code&gt; has the first run
of the match before handing URL to &lt;code&gt;myapp/urls.py&lt;/code&gt; to match
&lt;strong&gt;further&lt;/strong&gt;. So it's a matter of matching order.&lt;/p&gt;
&lt;p&gt;Anyway. So building a REST can be broken down into 5 steps:&lt;/p&gt;
&lt;figure class="col s12"&gt;
  &lt;img src="images/django%20to%20rest.png"
       class="center img-responsive"&gt;
&lt;/figure&gt;

&lt;p&gt;&lt;strong&gt;Step 1&lt;/strong&gt;: create an API varialbe name.&lt;/p&gt;
&lt;p&gt;Define an object &lt;code&gt;v1_api&lt;/code&gt; in &lt;code&gt;myapp/api.py&lt;/code&gt;. Name is not important at
all. It is a Tastypie's &lt;a href="https://github.com/django-tastypie/django-tastypie/blob/master/tastypie/api.py"&gt;&lt;code&gt;Api&lt;/code&gt;&lt;/a&gt; object, therefore it comes with an army
of capabilities:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="kn"&gt;from&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nn"&gt;tastypie.api&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;Api&lt;/span&gt;

&lt;span class="n"&gt;v1_api&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;Api&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;api_name&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;v1&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;&lt;strong&gt;Step 2&lt;/strong&gt;: wire URL patterns&lt;/p&gt;
&lt;p&gt;&lt;code&gt;v1_api&lt;/code&gt; defined in the previous step comes with a list of REST url
patterns, and this is the beauty of &lt;a href="https://django-tastypie.readthedocs.io/en/latest/"&gt;Tastypie&lt;/a&gt;. So all we need to
do is make these &lt;em&gt;sub-patterns&lt;/em&gt; available through URL matching. As
explained above, we need to wire these into &lt;code&gt;mysite/urls.py&lt;/code&gt;:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="kn"&gt;from&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nn"&gt;myapp.api&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;v1_api&lt;/span&gt; &lt;span class="k"&gt;as&lt;/span&gt; &lt;span class="n"&gt;myapp_api&lt;/span&gt;  &lt;span class="o"&gt;&amp;lt;--&lt;/span&gt; &lt;span class="n"&gt;the&lt;/span&gt; &lt;span class="n"&gt;variable&lt;/span&gt; &lt;span class="n"&gt;we&lt;/span&gt; &lt;span class="n"&gt;defined&lt;/span&gt;

&lt;span class="n"&gt;urlpatterns&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;patterns&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="c1"&gt;# REST&lt;/span&gt;
    &lt;span class="n"&gt;url&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="sa"&gt;r&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;^mysite/api/myapp/&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;    &lt;span class="o"&gt;&amp;lt;--&lt;/span&gt; &lt;span class="n"&gt;pattern&lt;/span&gt; &lt;span class="n"&gt;matching&lt;/span&gt;
        &lt;span class="n"&gt;include&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;myapp_api&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;urls&lt;/span&gt;&lt;span class="p"&gt;)),&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;--&lt;/span&gt; &lt;span class="n"&gt;sub&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;pattern&lt;/span&gt; &lt;span class="n"&gt;handler&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;&lt;strong&gt;Step 3&lt;/strong&gt;: define your django DB model&lt;/p&gt;
&lt;p&gt;Nothing fancy here. Just the old school of data modeling.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Step 4&lt;/strong&gt;: transform DB model to a resource model&lt;/p&gt;
&lt;p&gt;REST speaks &lt;em&gt;resources&lt;/em&gt;. Packaging a DB model into a resource is quite
simple:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="kn"&gt;from&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nn"&gt;tastypie.resources&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;ModelResource&lt;/span&gt;

&lt;span class="kn"&gt;from&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nn"&gt;myapp.models&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;MyModel&lt;/span&gt;  &lt;span class="o"&gt;&amp;lt;--&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nn"&gt;DB&lt;/span&gt; &lt;span class="n"&gt;model&lt;/span&gt;

&lt;span class="n"&gt;v1_api&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;Api&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;api_name&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;v1&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;--&lt;/span&gt; &lt;span class="n"&gt;we&lt;/span&gt; &lt;span class="n"&gt;have&lt;/span&gt; &lt;span class="n"&gt;seen&lt;/span&gt; &lt;span class="n"&gt;this&lt;/span&gt; &lt;span class="n"&gt;one&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;see&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;step 1&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="k"&gt;class&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nc"&gt;MyModelResource&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;ModelResource&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="k"&gt;class&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nc"&gt;Meta&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="n"&gt;queryset&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;MyModel&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;objects&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;all&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;  &lt;span class="o"&gt;&amp;lt;--&lt;/span&gt; &lt;span class="n"&gt;data&lt;/span&gt; &lt;span class="nb"&gt;set&lt;/span&gt; &lt;span class="n"&gt;to&lt;/span&gt; &lt;span class="n"&gt;display&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="nb"&gt;list&lt;/span&gt;
        &lt;span class="n"&gt;resource_name&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;mymodels&amp;quot;&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;--&lt;/span&gt; &lt;span class="n"&gt;string&lt;/span&gt; &lt;span class="n"&gt;used&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;REST&lt;/span&gt; &lt;span class="n"&gt;url&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;/mymodels/&amp;quot;&lt;/span&gt;
&lt;span class="n"&gt;v1_api&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;register&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;MyModelResource&lt;/span&gt;&lt;span class="p"&gt;())&lt;/span&gt;  &lt;span class="o"&gt;&amp;lt;--&lt;/span&gt; &lt;span class="n"&gt;expose&lt;/span&gt; &lt;span class="n"&gt;it&lt;/span&gt; &lt;span class="n"&gt;to&lt;/span&gt; &lt;span class="n"&gt;URL&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;This is the simpliest example to make magic happen. What's more you
can do with this now?&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;code&gt;.objects.all()&lt;/code&gt;: you don't have to expose everything. Any queryset
   is adequate. REST will allow filtering as well. So just need to be
   aware what your decision means.&lt;/li&gt;
&lt;li&gt;&lt;a href="http://django-tastypie.readthedocs.io/en/latest/resources.html#flow-through-the-request-response-cycle"&gt;de-hydrate&lt;/a&gt;: this is how you can massage your data set
   (essentially serializing and de-serializing) before you send data
   to user or taking data from data to DB.&lt;/li&gt;
&lt;li&gt;foreign key reverse lookup&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Django defines reverse lookup by defining a related name in model:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="k"&gt;class&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nc"&gt;Datacenter&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;BaseModel&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="k"&gt;pass&lt;/span&gt;
&lt;span class="k"&gt;class&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nc"&gt;Cluster&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;BaseModel&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="n"&gt;datacenter&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;models&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;ForeignKey&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;Datacenter&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
                                   &lt;span class="n"&gt;related_name&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;clusters&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;--&lt;/span&gt; &lt;span class="n"&gt;related_name&lt;/span&gt;&lt;span class="err"&gt;!&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Consequently, &lt;code&gt;DataCenterResource&lt;/code&gt; reverse lookup to &lt;code&gt;cluster&lt;/code&gt; will
be like this:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="k"&gt;class&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nc"&gt;DatacenterResource&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;MyModelResource&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
  &lt;span class="n"&gt;clusters&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;fields&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;ToManyField&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;vx.api.ClusterResource&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;--&lt;/span&gt; &lt;span class="n"&gt;FK&lt;/span&gt; &lt;span class="n"&gt;resource&lt;/span&gt;
                                &lt;span class="n"&gt;attribute&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;clusters&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;--&lt;/span&gt; &lt;span class="n"&gt;django&lt;/span&gt; &lt;span class="n"&gt;related&lt;/span&gt; &lt;span class="n"&gt;name&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;&lt;strong&gt;step 5&lt;/strong&gt;: enjoy&lt;/p&gt;
&lt;p&gt;Now go to &lt;code&gt;mysite/api/myapp/mymodels&lt;/code&gt; (&lt;code&gt;mysite/api/myapp/&lt;/code&gt; part is defined
in "step 1", &lt;code&gt;mymodels&lt;/code&gt; part is defined in "step 4"), it should show
the &lt;code&gt;queryset&lt;/code&gt; (defined in "step 4"). With REST, you can also do
things like &lt;code&gt;?format=json&lt;/code&gt; or &lt;code&gt;?format=yaml&lt;/code&gt;, and &lt;code&gt;?a_model_field__gt=&lt;/code&gt;
type of &lt;a href="http://django-tastypie.readthedocs.io/en/latest/interacting.html"&gt;filtering&lt;/a&gt;. Cool huh!?&lt;/p&gt;</content><category term="dev"></category><category term="dev"></category></entry><entry><title>KVM</title><link href="https://fengxia41103.github.io/myblog/kvm.html" rel="alternate"></link><published>2017-10-11T14:41:00-04:00</published><updated>2022-02-04T00:00:00-05:00</updated><author><name>Feng Xia</name></author><id>tag:fengxia41103.github.io,2017-10-11:/myblog/kvm.html</id><summary type="html">&lt;p&gt;&lt;a href="https://en.wikipedia.org/wiki/Kernel-based_Virtual_Machine"&gt;KVM&lt;/a&gt; is something new to me, and it sounds awesome. The experience
I want to have is a local dev that I can copy &amp;amp; paste from some base
image in case I forgot to take a snapshot at milestone. This way I
feel comfortable to stand up a sandbox, try out crazy things, then
discard it entirely at done, and repeat. So this means something
minimal, fast.&lt;/p&gt;
&lt;p&gt;First thing first, get &lt;code&gt;kvm&lt;/code&gt; and a few tools:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;$&lt;span class="w"&gt; &lt;/span&gt;apt&lt;span class="w"&gt; &lt;/span&gt;kvm&lt;span class="w"&gt; &lt;/span&gt;libvirt-bin&lt;span class="w"&gt; &lt;/span&gt;bridge-utils&lt;span class="w"&gt; &lt;/span&gt;cloud-utils&lt;span class="w"&gt; &lt;/span&gt;cloud-init&lt;span class="w"&gt; &lt;/span&gt;libguestfs-tools
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;h1&gt;Cloud image&lt;/h1&gt;
&lt;p&gt;Don't bother with full blown &lt;code&gt;.iso&lt;/code&gt;, use cloud images,
eg. &lt;a href="https://cloud-images.ubuntu.com/releases/16.04/release/"&gt;xenial 16.04&lt;/a&gt;, my de faco at writing. It's &amp;lt; 300M
and boots fast. Key to know at this point is the file format &amp;larr;
use &lt;code&gt;qemu-img info [.img]&lt;/code&gt; for &lt;code&gt;file format:&lt;/code&gt;.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;$&lt;span class="w"&gt; &lt;/span&gt;wget&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;.img&lt;span class="w"&gt; &lt;/span&gt;url&lt;span class="o"&gt;]&lt;/span&gt;

To&lt;span class="w"&gt; &lt;/span&gt;get&lt;span class="w"&gt; &lt;/span&gt;file&lt;span class="w"&gt; &lt;/span&gt;format:
$&lt;span class="w"&gt; &lt;/span&gt;qemu-img&lt;span class="w"&gt; &lt;/span&gt;info&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;.img&lt;span class="o"&gt;]&lt;/span&gt;
---------------------
image:&lt;span class="w"&gt; &lt;/span&gt;xenial-server-cloudimg-amd64-disk1.img
file&lt;span class="w"&gt; &lt;/span&gt;format:&lt;span class="w"&gt; &lt;/span&gt;qcow2
virtual&lt;span class="w"&gt; &lt;/span&gt;size:&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="m"&gt;2&lt;/span&gt;.2G&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="m"&gt;2361393152&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;bytes&lt;span class="o"&gt;)&lt;/span&gt;
disk&lt;span class="w"&gt; &lt;/span&gt;size:&lt;span class="w"&gt; &lt;/span&gt;277M
cluster_size:&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="m"&gt;65536&lt;/span&gt;
Format&lt;span class="w"&gt; &lt;/span&gt;specific&lt;span class="w"&gt; &lt;/span&gt;information:
&lt;span class="w"&gt;    &lt;/span&gt;compat:&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="m"&gt;0&lt;/span&gt;.10
&lt;span class="w"&gt;    &lt;/span&gt;refcount&lt;span class="w"&gt; &lt;/span&gt;bits:&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="m"&gt;16&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;h2&gt;Resize disk&lt;/h2&gt;
&lt;p&gt;One caveat caught me is that snapshot using &lt;a href="https://wiki.qemu.org/Documentation/CreateSnapshot"&gt;backing file&lt;/a&gt; inherits
the …&lt;/p&gt;</summary><content type="html">&lt;p&gt;&lt;a href="https://en.wikipedia.org/wiki/Kernel-based_Virtual_Machine"&gt;KVM&lt;/a&gt; is something new to me, and it sounds awesome. The experience
I want to have is a local dev that I can copy &amp;amp; paste from some base
image in case I forgot to take a snapshot at milestone. This way I
feel comfortable to stand up a sandbox, try out crazy things, then
discard it entirely at done, and repeat. So this means something
minimal, fast.&lt;/p&gt;
&lt;p&gt;First thing first, get &lt;code&gt;kvm&lt;/code&gt; and a few tools:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;$&lt;span class="w"&gt; &lt;/span&gt;apt&lt;span class="w"&gt; &lt;/span&gt;kvm&lt;span class="w"&gt; &lt;/span&gt;libvirt-bin&lt;span class="w"&gt; &lt;/span&gt;bridge-utils&lt;span class="w"&gt; &lt;/span&gt;cloud-utils&lt;span class="w"&gt; &lt;/span&gt;cloud-init&lt;span class="w"&gt; &lt;/span&gt;libguestfs-tools
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;h1&gt;Cloud image&lt;/h1&gt;
&lt;p&gt;Don't bother with full blown &lt;code&gt;.iso&lt;/code&gt;, use cloud images,
eg. &lt;a href="https://cloud-images.ubuntu.com/releases/16.04/release/"&gt;xenial 16.04&lt;/a&gt;, my de faco at writing. It's &amp;lt; 300M
and boots fast. Key to know at this point is the file format &amp;larr;
use &lt;code&gt;qemu-img info [.img]&lt;/code&gt; for &lt;code&gt;file format:&lt;/code&gt;.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;$&lt;span class="w"&gt; &lt;/span&gt;wget&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;.img&lt;span class="w"&gt; &lt;/span&gt;url&lt;span class="o"&gt;]&lt;/span&gt;

To&lt;span class="w"&gt; &lt;/span&gt;get&lt;span class="w"&gt; &lt;/span&gt;file&lt;span class="w"&gt; &lt;/span&gt;format:
$&lt;span class="w"&gt; &lt;/span&gt;qemu-img&lt;span class="w"&gt; &lt;/span&gt;info&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;.img&lt;span class="o"&gt;]&lt;/span&gt;
---------------------
image:&lt;span class="w"&gt; &lt;/span&gt;xenial-server-cloudimg-amd64-disk1.img
file&lt;span class="w"&gt; &lt;/span&gt;format:&lt;span class="w"&gt; &lt;/span&gt;qcow2
virtual&lt;span class="w"&gt; &lt;/span&gt;size:&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="m"&gt;2&lt;/span&gt;.2G&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="m"&gt;2361393152&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;bytes&lt;span class="o"&gt;)&lt;/span&gt;
disk&lt;span class="w"&gt; &lt;/span&gt;size:&lt;span class="w"&gt; &lt;/span&gt;277M
cluster_size:&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="m"&gt;65536&lt;/span&gt;
Format&lt;span class="w"&gt; &lt;/span&gt;specific&lt;span class="w"&gt; &lt;/span&gt;information:
&lt;span class="w"&gt;    &lt;/span&gt;compat:&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="m"&gt;0&lt;/span&gt;.10
&lt;span class="w"&gt;    &lt;/span&gt;refcount&lt;span class="w"&gt; &lt;/span&gt;bits:&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="m"&gt;16&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;h2&gt;Resize disk&lt;/h2&gt;
&lt;p&gt;One caveat caught me is that snapshot using &lt;a href="https://wiki.qemu.org/Documentation/CreateSnapshot"&gt;backing file&lt;/a&gt; inherits
the maximum disk space from its base image. Looking at the output
above, &lt;code&gt;virtual size&lt;/code&gt; (&lt;code&gt;2.2G&lt;/code&gt;) is the maxium disk space this image can
grow to; &lt;code&gt;disk size&lt;/code&gt; is just the &lt;code&gt;.img&lt;/code&gt; file's size on disk when you
do &lt;code&gt;ls -lh&lt;/code&gt;. We want to increase base image's virtual size and here is
how-to.&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;Resize original image &lt;span class="myhighlight"&gt;in
   place&lt;/span&gt;. This will add &lt;code&gt;20G&lt;/code&gt; to &lt;code&gt;virtual size&lt;/code&gt;. But this is
   not sufficient, the &lt;em&gt;disk&lt;/em&gt; inside this image needs to be &lt;em&gt;expanded&lt;/em&gt;
   also (see step #3 below). So think of this step as a &lt;em&gt;wish&lt;/em&gt; to the disk
   size I want to have, and step 3 is the actual implementation to
   make it a reality.&lt;/p&gt;
&lt;p&gt;&lt;code&gt;shell
$ qemu-img resize orig.img +20G
$ qemu-img info orig.img &amp;lt;-- confirm new "virtual size"&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Make a copy:&lt;/p&gt;
&lt;p&gt;&lt;code&gt;shell
$ cp orig.img orig-copy.qcow2&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Resize disk &lt;strong&gt;inside&lt;/strong&gt; the qcow2 image, and save (in this case, we
save newly expanded image back to &lt;code&gt;orig.img&lt;/code&gt;, but you can save to any
file name you want.):&lt;/p&gt;
&lt;p&gt;&lt;code&gt;shell
$ sudo virt-resize --expand /dev/sda1 orig-copy.qcow2 orig.img&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h1&gt;Backing files&lt;/h1&gt;
&lt;p&gt;&lt;a href="https://wiki.qemu.org/Documentation/CreateSnapshot"&gt;Backing files&lt;/a&gt; is awesome! The idea is also referred as &lt;em&gt;external
snapshots&lt;/em&gt;. A few useful references to understand this concept
&amp;mdash; &lt;a href="https://kashyapc.fedorapeople.org/virt/infra.next-2015/Advanced-Snapshots-with-libvirt-and-QEMU.pdf"&gt;Advanced snapshots w/ libvirt&lt;/a&gt; by
Redhat, &lt;a href="https://wiki.qemu.org/Documentation/CreateSnapshot"&gt;QEMU snapshot doc&lt;/a&gt;, and a &lt;a href="http://blog.programster.org/kvm-creating-thinly-provisioned-guests"&gt;blog&lt;/a&gt; whose diagram I'm
copying below which explained well what these snapshots are related.
In a nutshell, external snapshot keeps a &lt;em&gt;pointer&lt;/em&gt; to its base image
(&lt;strong&gt;backing files&lt;/strong&gt;). Any new writes will then be applied to the
snapshot image, not the backing file &amp;rarr; this feels like git
commits and branches, isn't it?&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;An example diagram is shown below in which 3 guests are cloned from a
base image, which is then updated, and a 4th guest is then cloned off
the updated base image. With all 5 virtual machines, the storage needs
is only about 4.4 GB (the size of the base image).An example diagram
is shown below in which 3 guests are cloned from a base image, which
is then updated, and a 4th guest is then cloned off the updated base
image. With all 5 virtual machines, the storage needs is only about
4.4 GB (the size of the base image).
&lt;/p&gt;
&lt;/blockquote&gt;
&lt;figure class="center-align responsive-image"&gt;
  &lt;svg xmlns="http://www.w3.org/2000/svg"
  xmlns:xlink="http://www.w3.org/1999/xlink" width="389px"
  height="509px" version="1.1" content="&lt;mxfile
  userAgent=&amp;quot;Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36
  (KHTML, like Gecko) Chrome/56.0.2924.88 Safari/537.36
  Vivaldi/1.7.735.46&amp;quot; version=&amp;quot;6.2.4&amp;quot;
  editor=&amp;quot;www.draw.io&amp;quot;
  type=&amp;quot;device&amp;quot;&gt;&lt;diagram&gt;7Vzfc6o4FP5rnNl9aIcQQHy8dnvv7sOd2Znuj3sfI0TMFIkTYrX7128iAQlBxArYVu1D5RCS8J3vnHxJwBF8WG6/MbRafKchjke2FW5H8LeRbQPxEf+k5TWzjG0vM0SMhKrQ3vBE/sPKaCnrmoQ41QpySmNOVroxoEmCA67ZEGN0oxeb01hvdYUibBieAhSb1n9JyBeZ1c/vQtp/xyRa5C0Db5KdmaHgOWJ0naj2Rjac7z7Z6SXK61I3mi5QSDclE3wcwQdGKc++LbcPOJbY5rBl1309cLboN8MJb3OBnV3wguK1uvW/Z+uEr4UNePeWI/5/W+OUy+OR7aHlagSnySyV/8RxLBqZhuRFfI3kV/9e1va9OCUaLp1Vt8xfc5g53kr7gi9jYQDia8oZfcYPNKZMWBKaiJLTOYnjignFJErEYSDuEwv79AUzToQDv6gTSxKGspnpZkE4flqhQLa5EXSVFdKEf0VLEkt6/oNZiBKkzIqLwM6PVW+Vv2QzeHsQbFC4UIQGpkvM2asooi5wVSUqKHw3O9zsGTZRJRYlcuVXIcXpqKh371fxRbm23s2wvZvtm1vPcyvInTiAX532foU3v57nV2gNF6+u4VfDGXKUkeAwyhEnVIIoegOnYkjkiCQS5Z2LDgKhxk40y2u0TgVo4urEhybxaxGyYQcQee0h6hQS9xTO3Lk1kDh1kPgdQDI+Dom4QGioQ4FWiuxyEEsR4wc4CIyIF2dmvuu4kngRQyERMJWvyqSPSdJC9jS6owy71wg7gL5ORWDi7tXA7nWAut8f6iHC/rwWdS/w8Wx+KdQHQHXSI6ou9kOnDlXfnkHP6xO5C/Azb6qXtODKv1qC7j4DQFkk6SGgNPXWFAnYbMuQXX/h5SpGXJ77Yylnm8cnT7849zvBNv31WvXYkSRv6XrDNfUYgK7p+S4EGThBkQ2owICjQ+IPKTdACwn2YfUGaNZ5lxQcoEedd3HFcQj3IXDtU8kNoTkOYXcJjvao3wYRHUewHFJ11Kze3VRHl6tAR1L9BWVHzQLfJxpiG2G3faiPsDXLqr1FXAu193FH2Ga2H1eUvY0ZoAXqSfhF7u/JLBKjNCWBDra4S/b6Q4b+vZsf/txlAnGwJbx0Shz9zK8KI5znDMr4gkY0QfHj3joN1uwFhxrM8qJmkEXP6ZoFWI9ljliEeZlojWrHrUE7tzEskj150btR5wLVwp+UJLwUYkD39Z1d8WLWfXXV3pFmRZ5eUXV9N7tlox7hSfRaKraSBdKG/kK9GWNz80j5XADt+Zj1YM/OwgXt0kSblZUbYW+EfTeE7XHGPswM56Sxa0jJAOzrywXNy3V2RTeDmilTU644IS24lTCrhnPbtACqO5rV/HIgL7wlFK9Q7Nz4cgZf+tzcHWRB5aTUDa0BU7e5vvLpQ3Hc7I0WT3a881BsK+neEopXONTf+HIGX9rsK7xjvrSbE560tlcd6mt2Jrrhy7jyPBaw3soXu1JTtS+fdcrYZiPnI5O3eKS/LXk9nQhOX9QtgiL3bLWKttR16zvcfaLLU+in5cr4VK5UoK95GvR9c8Wop0OymBPg267mYM+2G47Oh5EhdjVhGwF9HbuazoDzXNjpPFdLzkVC/pGXU8k5O/PGfJvzpD28EOjw9phxPf0BMKc6rLbeigB6RXDSX8o1nyZYr0KRWNNrT4fFclPD8lNv7+b1+LDBfI69+mwYjiczy7rAyt6gGc/c7zr4fpxzez/uPHFb59jeYuYzv+p0moJwbVO59RZPF1vJaqEgcrWgKYizl6ac3pYyq3ND8EYBASpjl1P1dIcCotPFoI4VZK3/T56xQ7uiIL2+/H+wpVMJUK3IqTKpOwLkIrdEAIZReEeTWGKYJmiVLqj6tYjrHh2h8TDKcK+PO+baygE3mfF75W5yBnzL3zHXQYI12/XctkKSPsuy2YKXtWFkN0+zIipzHL2/OU6fN7s1A3VHjhOH+1/kybLm/meP4OP/&lt;/diagram&gt;&lt;/mxfile&gt;"&gt;&lt;defs&gt;&lt;linearGradient
  x1="0%" y1="0%" x2="0%" y2="100%"
  id="mx-gradient-f8cecc-1-ffffff-1-s-0"&gt;&lt;stop offset="0%"
  style="stop-color:#f8cecc"&gt;&lt;/stop&gt;&lt;stop offset="100%"
  style="stop-color:#ffffff"&gt;&lt;/stop&gt;&lt;/linearGradient&gt;&lt;linearGradient
  x1="0%" y1="0%" x2="0%" y2="100%"
  id="mx-gradient-dae8fc-1-ffffff-1-s-0"&gt;&lt;stop offset="0%"
  style="stop-color:#dae8fc"&gt;&lt;/stop&gt;&lt;stop offset="100%"
  style="stop-color:#ffffff"&gt;&lt;/stop&gt;&lt;/linearGradient&gt;&lt;/defs&gt;&lt;g
  transform="translate(0.5,0.5)"&gt;&lt;g
  transform="translate(0.5,9.5)"&gt;&lt;switch&gt;&lt;foreignObject
  style="overflow:visible;" pointer-events="all" width="88" height="40"
  requiredFeatures="http://www.w3.org/TR/SVG11/feature#Extensibility"&gt;&lt;div
  xmlns="http://www.w3.org/1999/xhtml" style="display: inline-block;
  font-size: 12px; font-family: Verdana; color: rgb(0, 0, 0);
  line-height: 1.2; vertical-align: top; width: 88px; white-space:
  normal; word-wrap: normal; text-align: center;"&gt;&lt;div
  xmlns="http://www.w3.org/1999/xhtml"
  style="display:inline-block;text-align:inherit;text-decoration:inherit;"&gt;Ubuntu
  16.04 Guest 1&amp;nbsp;&lt;div&gt;8.2 MB&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;/foreignObject&gt;&lt;text
  x="44" y="26" fill="#000000" text-anchor="middle" font-size="12px"
  font-family="Verdana"&gt;[Not supported by viewer]&lt;/text&gt;&lt;/switch&gt;&lt;/g&gt;&lt;g
  transform="translate(0.5,114.5)"&gt;&lt;switch&gt;&lt;foreignObject
  style="overflow:visible;" pointer-events="all" width="88" height="40"
  requiredFeatures="http://www.w3.org/TR/SVG11/feature#Extensibility"&gt;&lt;div
  xmlns="http://www.w3.org/1999/xhtml" style="display: inline-block;
  font-size: 12px; font-family: Verdana; color: rgb(0, 0, 0);
  line-height: 1.2; vertical-align: top; width: 88px; white-space:
  normal; word-wrap: normal; text-align: center;"&gt;&lt;div
  xmlns="http://www.w3.org/1999/xhtml"
  style="display:inline-block;text-align:inherit;text-decoration:inherit;"&gt;Ubuntu
  16.04 Guest 2&lt;div&gt;8.2 MB&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;/foreignObject&gt;&lt;text x="44"
  y="26" fill="#000000" text-anchor="middle" font-size="12px"
  font-family="Verdana"&gt;[Not supported by viewer]&lt;/text&gt;&lt;/switch&gt;&lt;/g&gt;&lt;g
  transform="translate(0.5,229.5)"&gt;&lt;switch&gt;&lt;foreignObject
  style="overflow:visible;" pointer-events="all" width="88" height="40"
  requiredFeatures="http://www.w3.org/TR/SVG11/feature#Extensibility"&gt;&lt;div
  xmlns="http://www.w3.org/1999/xhtml" style="display: inline-block;
  font-size: 12px; font-family: Verdana; color: rgb(0, 0, 0);
  line-height: 1.2; vertical-align: top; width: 88px; white-space:
  normal; word-wrap: normal; text-align: center;"&gt;&lt;div
  xmlns="http://www.w3.org/1999/xhtml"
  style="display:inline-block;text-align:inherit;text-decoration:inherit;"&gt;Ubuntu
  16.04 Guest 3&lt;div&gt;8.2 MB&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;/foreignObject&gt;&lt;text x="44"
  y="26" fill="#000000" text-anchor="middle" font-size="12px"
  font-family="Verdana"&gt;[Not supported by
  viewer]&lt;/text&gt;&lt;/switch&gt;&lt;/g&gt;&lt;ellipse cx="263" cy="140" rx="30" ry="30"
  fill="#000000" stroke="#000000"
  transform="translate(2,3)rotate(90,263,140)"
  opacity="0.25"&gt;&lt;/ellipse&gt;&lt;ellipse cx="263" cy="140" rx="30" ry="30"
  fill="url(#mx-gradient-f8cecc-1-ffffff-1-s-0)" stroke="#b85450"
  transform="rotate(90,263,140)"
  pointer-events="none"&gt;&lt;/ellipse&gt;&lt;ellipse cx="125" cy="30" rx="30"
  ry="30" fill="#000000" stroke="#000000"
  transform="translate(2,3)rotate(90,125,30)"
  opacity="0.25"&gt;&lt;/ellipse&gt;&lt;ellipse cx="125" cy="30" rx="30" ry="30"
  fill="url(#mx-gradient-dae8fc-1-ffffff-1-s-0)" stroke="#6c8ebf"
  transform="rotate(90,125,30)" pointer-events="none"&gt;&lt;/ellipse&gt;&lt;ellipse
  cx="125" cy="140" rx="30" ry="30" fill="#000000" stroke="#000000"
  transform="translate(2,3)rotate(90,125,140)"
  opacity="0.25"&gt;&lt;/ellipse&gt;&lt;ellipse cx="125" cy="140" rx="30" ry="30"
  fill="#d5e8d4" stroke="#82b366" transform="rotate(90,125,140)"
  pointer-events="none"&gt;&lt;/ellipse&gt;&lt;ellipse cx="125" cy="250" rx="30"
  ry="30" fill="#000000" stroke="#000000"
  transform="translate(2,3)rotate(90,125,250)"
  opacity="0.25"&gt;&lt;/ellipse&gt;&lt;ellipse cx="125" cy="250" rx="30" ry="30"
  fill="#f5f5f5" stroke="#666666" transform="rotate(90,125,250)"
  pointer-events="none"&gt;&lt;/ellipse&gt;&lt;path d="M 233 140 Q 185 140 185 85 Q
  185 30 161.37 30" fill="none" stroke="#000000" stroke-miterlimit="10"
  pointer-events="none"&gt;&lt;/path&gt;&lt;path d="M 156.12 30 L 163.12 26.5 L
  161.37 30 L 163.12 33.5 Z" fill="#000000" stroke="#000000"
  stroke-miterlimit="10" pointer-events="none"&gt;&lt;/path&gt;&lt;path d="M 233 140
  Q 233 140 161.37 140" fill="none" stroke="#000000"
  stroke-miterlimit="10" pointer-events="none"&gt;&lt;/path&gt;&lt;path d="M 156.12
  140 L 163.12 136.5 L 161.37 140 L 163.12 143.5 Z" fill="#000000"
  stroke="#000000" stroke-miterlimit="10"
  pointer-events="none"&gt;&lt;/path&gt;&lt;path d="M 233 140 Q 194 140 194 195 Q
  194 250 161.37 250" fill="none" stroke="#000000"
  stroke-miterlimit="10" pointer-events="none"&gt;&lt;/path&gt;&lt;path d="M 156.12
  250 L 163.12 246.5 L 161.37 250 L 163.12 253.5 Z" fill="#000000"
  stroke="#000000" stroke-miterlimit="10"
  pointer-events="none"&gt;&lt;/path&gt;&lt;g
  transform="translate(200.5,59.5)"&gt;&lt;switch&gt;&lt;foreignObject
  style="overflow:visible;" pointer-events="all" width="133" height="40"
  requiredFeatures="http://www.w3.org/TR/SVG11/feature#Extensibility"&gt;&lt;div
  xmlns="http://www.w3.org/1999/xhtml" style="display: inline-block;
  font-size: 12px; font-family: Verdana; color: rgb(0, 0, 0);
  line-height: 1.2; vertical-align: top; width: 133px; white-space:
  normal; word-wrap: normal; text-align: center;"&gt;&lt;div
  xmlns="http://www.w3.org/1999/xhtml"
  style="display:inline-block;text-align:inherit;text-decoration:inherit;"&gt;Base
  Ubuntu 16.04 Template Image&amp;nbsp;&lt;div&gt;(4.4
  GB)&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;/foreignObject&gt;&lt;text x="67" y="26"
  fill="#000000" text-anchor="middle" font-size="12px"
  font-family="Verdana"&gt;[Not supported by
  viewer]&lt;/text&gt;&lt;/switch&gt;&lt;/g&gt;&lt;ellipse cx="263" cy="350" rx="30" ry="30"
  fill="#000000" stroke="#000000"
  transform="translate(2,3)rotate(90,263,350)"
  opacity="0.25"&gt;&lt;/ellipse&gt;&lt;ellipse cx="263" cy="350" rx="30" ry="30"
  fill="url(#mx-gradient-f8cecc-1-ffffff-1-s-0)" stroke="#b85450"
  transform="rotate(90,263,350)" pointer-events="none"&gt;&lt;/ellipse&gt;&lt;path
  d="M 263 170 L 263 313.63" fill="none" stroke="#000000"
  stroke-miterlimit="10" pointer-events="none"&gt;&lt;/path&gt;&lt;path d="M 263
  318.88 L 259.5 311.88 L 263 313.63 L 266.5 311.88 Z" fill="#000000"
  stroke="#000000" stroke-miterlimit="10"
  pointer-events="none"&gt;&lt;/path&gt;&lt;g
  transform="translate(270.5,238.5)"&gt;&lt;switch&gt;&lt;foreignObject
  style="overflow:visible;" pointer-events="all" width="48" height="12"
  requiredFeatures="http://www.w3.org/TR/SVG11/feature#Extensibility"&gt;&lt;div
  xmlns="http://www.w3.org/1999/xhtml" style="display: inline-block;
  font-size: 12px; font-family: Verdana; color: rgb(0, 0, 0);
  line-height: 1.2; vertical-align: top; width: 48px; white-space:
  nowrap; word-wrap: normal; text-align: center;"&gt;&lt;div
  xmlns="http://www.w3.org/1999/xhtml"
  style="display:inline-block;text-align:inherit;text-decoration:inherit;"&gt;updates&lt;/div&gt;&lt;/div&gt;&lt;/foreignObject&gt;&lt;text
  x="24" y="12" fill="#000000" text-anchor="middle" font-size="12px"
  font-family="Verdana"&gt;updates&lt;/text&gt;&lt;/switch&gt;&lt;/g&gt;&lt;ellipse cx="125"
  cy="350" rx="30" ry="30" fill="#000000" stroke="#000000"
  transform="translate(2,3)rotate(90,125,350)"
  opacity="0.25"&gt;&lt;/ellipse&gt;&lt;ellipse cx="125" cy="350" rx="30" ry="30"
  fill="#ffe6cc" stroke="#d79b00" transform="rotate(90,125,350)"
  pointer-events="none"&gt;&lt;/ellipse&gt;&lt;g
  transform="translate(0.5,324.5)"&gt;&lt;switch&gt;&lt;foreignObject
  style="overflow:visible;" pointer-events="all" width="88" height="40"
  requiredFeatures="http://www.w3.org/TR/SVG11/feature#Extensibility"&gt;&lt;div
  xmlns="http://www.w3.org/1999/xhtml" style="display: inline-block;
  font-size: 12px; font-family: Verdana; color: rgb(0, 0, 0);
  line-height: 1.2; vertical-align: top; width: 88px; white-space:
  normal; word-wrap: normal; text-align: center;"&gt;&lt;div
  xmlns="http://www.w3.org/1999/xhtml"
  style="display:inline-block;text-align:inherit;text-decoration:inherit;"&gt;Ubuntu
  16.04 Guest 4&lt;div&gt;8.2 MB&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;/foreignObject&gt;&lt;text x="44"
  y="26" fill="#000000" text-anchor="middle" font-size="12px"
  font-family="Verdana"&gt;[Not supported by
  viewer]&lt;/text&gt;&lt;/switch&gt;&lt;/g&gt;&lt;ellipse cx="263" cy="475" rx="30" ry="30"
  fill="#000000" stroke="#000000"
  transform="translate(2,3)rotate(90,263,475)"
  opacity="0.25"&gt;&lt;/ellipse&gt;&lt;ellipse cx="263" cy="475" rx="30" ry="30"
  fill="url(#mx-gradient-f8cecc-1-ffffff-1-s-0)" stroke="#b85450"
  transform="rotate(90,263,475)" pointer-events="none"&gt;&lt;/ellipse&gt;&lt;path
  d="M 233 350 L 161.37 350" fill="none" stroke="#000000"
  stroke-miterlimit="10" pointer-events="none"&gt;&lt;/path&gt;&lt;path d="M 156.12
  350 L 163.12 346.5 L 161.37 350 L 163.12 353.5 Z" fill="#000000"
  stroke="#000000" stroke-miterlimit="10"
  pointer-events="none"&gt;&lt;/path&gt;&lt;path d="M 263 380 L 263 438.63"
  fill="none" stroke="#000000" stroke-miterlimit="10"
  pointer-events="none"&gt;&lt;/path&gt;&lt;path d="M 263 443.88 L 259.5 436.88 L
  263 438.63 L 266.5 436.88 Z" fill="#000000" stroke="#000000"
  stroke-miterlimit="10" pointer-events="none"&gt;&lt;/path&gt;&lt;g
  transform="translate(295.5,126.5)"&gt;&lt;switch&gt;&lt;foreignObject
  style="overflow:visible;" pointer-events="all" width="88" height="26"
  requiredFeatures="http://www.w3.org/TR/SVG11/feature#Extensibility"&gt;&lt;div
  xmlns="http://www.w3.org/1999/xhtml" style="display: inline-block;
  font-size: 12px; font-family: Verdana; color: rgb(0, 0, 0);
  line-height: 1.2; vertical-align: top; width: 88px; white-space:
  normal; word-wrap: normal; text-align: center;"&gt;&lt;div
  xmlns="http://www.w3.org/1999/xhtml"
  style="display:inline-block;text-align:inherit;text-decoration:inherit;"&gt;read-only
  snapshot 1&lt;/div&gt;&lt;/div&gt;&lt;/foreignObject&gt;&lt;text x="44" y="19"
  fill="#000000" text-anchor="middle" font-size="12px"
  font-family="Verdana"&gt;read-only snapshot 1&lt;/text&gt;&lt;/switch&gt;&lt;/g&gt;&lt;g
  transform="translate(295.5,336.5)"&gt;&lt;switch&gt;&lt;foreignObject
  style="overflow:visible;" pointer-events="all" width="88" height="26"
  requiredFeatures="http://www.w3.org/TR/SVG11/feature#Extensibility"&gt;&lt;div
  xmlns="http://www.w3.org/1999/xhtml" style="display: inline-block;
  font-size: 12px; font-family: Verdana; color: rgb(0, 0, 0);
  line-height: 1.2; vertical-align: top; width: 88px; white-space:
  normal; word-wrap: normal; text-align: center;"&gt;&lt;div
  xmlns="http://www.w3.org/1999/xhtml"
  style="display:inline-block;text-align:inherit;text-decoration:inherit;"&gt;read-only
  snapshot 2&lt;/div&gt;&lt;/div&gt;&lt;/foreignObject&gt;&lt;text x="44" y="19"
  fill="#000000" text-anchor="middle" font-size="12px"
  font-family="Verdana"&gt;read-only snapshot 2&lt;/text&gt;&lt;/switch&gt;&lt;/g&gt;&lt;g
  transform="translate(298.5,454.5)"&gt;&lt;switch&gt;&lt;foreignObject
  style="overflow:visible;" pointer-events="all" width="88" height="40"
  requiredFeatures="http://www.w3.org/TR/SVG11/feature#Extensibility"&gt;&lt;div
  xmlns="http://www.w3.org/1999/xhtml" style="display: inline-block;
  font-size: 12px; font-family: Verdana; color: rgb(0, 0, 0);
  line-height: 1.2; vertical-align: top; width: 88px; white-space:
  normal; word-wrap: normal; text-align: center;"&gt;&lt;div
  xmlns="http://www.w3.org/1999/xhtml"
  style="display:inline-block;text-align:inherit;text-decoration:inherit;"&gt;current
  disk image writes go to.&lt;/div&gt;&lt;/div&gt;&lt;/foreignObject&gt;&lt;text x="44"
  y="26" fill="#000000" text-anchor="middle" font-size="12px"
  font-family="Verdana"&gt;current disk image writes go
  to.&lt;/text&gt;&lt;/switch&gt;&lt;/g&gt;&lt;/g&gt;&lt;/svg&gt;
&lt;/figure&gt;

&lt;p&gt;To create one using backing file:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;$&lt;span class="w"&gt; &lt;/span&gt;qemu-img&lt;span class="w"&gt; &lt;/span&gt;create&lt;span class="w"&gt; &lt;/span&gt;-f&lt;span class="w"&gt; &lt;/span&gt;qcow2&lt;span class="w"&gt; &lt;/span&gt;-b&lt;span class="w"&gt; &lt;/span&gt;resized-orig.img&lt;span class="w"&gt; &lt;/span&gt;mydev.snap
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;To verify:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="o"&gt;(&lt;/span&gt;dev&lt;span class="o"&gt;)&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;fengxia@fengxia-lenovo:~/workspace/tmp$&lt;span class="w"&gt; &lt;/span&gt;qemu-img&lt;span class="w"&gt; &lt;/span&gt;info&lt;span class="w"&gt; &lt;/span&gt;mydev.snap
image:&lt;span class="w"&gt; &lt;/span&gt;mydev.snap
file&lt;span class="w"&gt; &lt;/span&gt;format:&lt;span class="w"&gt; &lt;/span&gt;qcow2
virtual&lt;span class="w"&gt; &lt;/span&gt;size:&lt;span class="w"&gt; &lt;/span&gt;22G&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="m"&gt;23836229632&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;bytes&lt;span class="o"&gt;)&lt;/span&gt;
disk&lt;span class="w"&gt; &lt;/span&gt;size:&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="m"&gt;3&lt;/span&gt;.4G
cluster_size:&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="m"&gt;65536&lt;/span&gt;
backing&lt;span class="w"&gt; &lt;/span&gt;file:&lt;span class="w"&gt; &lt;/span&gt;resized-orig.img&lt;span class="w"&gt; &lt;/span&gt;&amp;lt;&amp;lt;--&lt;span class="w"&gt; &lt;/span&gt;here!
Format&lt;span class="w"&gt; &lt;/span&gt;specific&lt;span class="w"&gt; &lt;/span&gt;information:
&lt;span class="w"&gt;    &lt;/span&gt;compat:&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="m"&gt;1&lt;/span&gt;.1
&lt;span class="w"&gt;    &lt;/span&gt;lazy&lt;span class="w"&gt; &lt;/span&gt;refcounts:&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nb"&gt;false&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;refcount&lt;span class="w"&gt; &lt;/span&gt;bits:&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="m"&gt;16&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;corrupt:&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nb"&gt;false&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Then in KVM xml, use &lt;code&gt;mydev.snap&lt;/code&gt; as your primary disk:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="nt"&gt;&amp;lt;disk&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="na"&gt;type=&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;file&amp;#39;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="na"&gt;device=&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;disk&amp;#39;&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="nt"&gt;&amp;lt;driver&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="na"&gt;name=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;qemu&amp;quot;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="na"&gt;type=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;qcow2&amp;quot;&lt;/span&gt;&lt;span class="nt"&gt;/&amp;gt;&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="nt"&gt;&amp;lt;source&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="na"&gt;file=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;/home/fengxia/workspace/tmp/mydev.snap&amp;quot;&lt;/span&gt;&lt;span class="nt"&gt;/&amp;gt;&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="nt"&gt;&amp;lt;target&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="na"&gt;dev=&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;vda&amp;#39;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="na"&gt;bus=&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;virtio&amp;#39;&lt;/span&gt;&lt;span class="nt"&gt;/&amp;gt;&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="nt"&gt;&amp;lt;alias&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="na"&gt;name=&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;virtio-disk0&amp;#39;&lt;/span&gt;&lt;span class="nt"&gt;/&amp;gt;&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="nt"&gt;&amp;lt;address&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="na"&gt;type=&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;pci&amp;#39;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="na"&gt;domain=&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;0x0000&amp;#39;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="na"&gt;bus=&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;0x00&amp;#39;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="na"&gt;slot=&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;0x07&amp;#39;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="na"&gt;function=&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;0x0&amp;#39;&lt;/span&gt;&lt;span class="nt"&gt;/&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/disk&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;h1&gt;cloud-init&lt;/h1&gt;
&lt;p&gt;Using cloud images, however, is tricky, because it doesn't allow user
login (SSH only) and is expecting a &lt;a href="http://cloudinit.readthedocs.io/en/latest/"&gt;&lt;code&gt;cloud-init&lt;/code&gt;&lt;/a&gt;. Without it,
snapshots we made above will boot, but you can't login (tried "ubuntu,
passw0rd", "ubuntu, ubuntu", "ubuntu, [no password]", none works).&lt;/p&gt;
&lt;p&gt;To use &lt;a href="http://cloudinit.readthedocs.io/en/latest/"&gt;cloud-init&lt;/a&gt;, we need to create a &lt;code&gt;user-data&lt;/code&gt; file which
is actually a &lt;code&gt;cloud-config&lt;/code&gt; in YAML format. &lt;a href="http://cloudinit.readthedocs.io/en/latest/"&gt;cloud-init&lt;/a&gt;
can use other &lt;a href="http://cloudinit.readthedocs.io/en/latest/topics/format.html#user-data-script"&gt;formats&lt;/a&gt;. Take a look.
A minimal version of &lt;code&gt;cloud-config&lt;/code&gt; is shown below, which allows
&lt;code&gt;ubuntu&lt;/code&gt; user login using the &lt;code&gt;password&lt;/code&gt; value you defined here, eg. &lt;code&gt;whatever001&lt;/code&gt;.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="c1"&gt;#cloud-config&lt;/span&gt;
&lt;span class="nt"&gt;password&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="l l-Scalar l-Scalar-Plain"&gt;whatever001&lt;/span&gt;
&lt;span class="nt"&gt;chpasswd&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="nt"&gt;expire&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="l l-Scalar l-Scalar-Plain"&gt;False&lt;/span&gt;
&lt;span class="nt"&gt;ssh_pwauth&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="l l-Scalar l-Scalar-Plain"&gt;True&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Now how &lt;code&gt;cloud-init&lt;/code&gt; works? Essentially you make &lt;code&gt;user-data&lt;/code&gt; into
a disk or iso that &lt;span class="myhighlight"&gt;can be mounted&lt;/span&gt; to
your VM at boot. Your VM's OS image should have had &lt;code&gt;cloud-init&lt;/code&gt;
installed (and configured?) so when it boots it will &lt;strong&gt;search for
user-data &amp;amp; meta-data&lt;/strong&gt;, and run their instructions.&lt;/p&gt;
&lt;h2&gt;cloud-init in raw&lt;/h2&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;$&lt;span class="w"&gt; &lt;/span&gt;cloud-localds&lt;span class="w"&gt; &lt;/span&gt;-m&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nb"&gt;local&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;my-seed.img&lt;span class="w"&gt; &lt;/span&gt;my-user-data&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;my-meta-data&lt;span class="o"&gt;]&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;When using &lt;code&gt;cloud-localds&lt;/code&gt;, make sure to use &lt;code&gt;-m local&lt;/code&gt; so to enable
the &lt;a href="http://cloudinit.readthedocs.io/en/latest/topics/datasources/nocloud.html"&gt;&lt;code&gt;NoCloud&lt;/code&gt;&lt;/a&gt; data source (otherwise, booting will stuck with
error &lt;strong&gt;url_helper.py[WARNING]: Calling
'http://169.254.169.254/2009-04-04/meta-data/instance-id failed...&lt;/strong&gt;
because &lt;code&gt;cloud-init&lt;/code&gt; by default will expect a server somewhere serving
user-data and meta-data files. &lt;code&gt;NoCloud&lt;/code&gt; says they are on a local disk).&lt;/p&gt;
&lt;p&gt;Example as used in KVM's xml. Make sure &lt;code&gt;slot=&lt;/code&gt; index is unique,
and &lt;code&gt;&amp;lt;target dev=&lt;/code&gt; index is unique.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="nt"&gt;&amp;lt;disk&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="na"&gt;type=&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;file&amp;#39;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="na"&gt;device=&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;disk&amp;#39;&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="nt"&gt;&amp;lt;driver&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="na"&gt;name=&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;qemu&amp;#39;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="na"&gt;type=&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;raw&amp;#39;&lt;/span&gt;&lt;span class="nt"&gt;/&amp;gt;&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="nt"&gt;&amp;lt;source&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="na"&gt;file=&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;/home/fengxia/workspace/tmp/my-seed.img&amp;#39;&lt;/span&gt;&lt;span class="nt"&gt;/&amp;gt;&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="nt"&gt;&amp;lt;backingStore/&amp;gt;&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="nt"&gt;&amp;lt;target&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="na"&gt;dev=&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;vdb&amp;#39;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="na"&gt;bus=&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;virtio&amp;#39;&lt;/span&gt;&lt;span class="nt"&gt;/&amp;gt;&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="nt"&gt;&amp;lt;alias&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="na"&gt;name=&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;virtio-disk1&amp;#39;&lt;/span&gt;&lt;span class="nt"&gt;/&amp;gt;&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="nt"&gt;&amp;lt;address&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="na"&gt;type=&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;pci&amp;#39;&lt;/span&gt;&lt;span class="err"&gt;1&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="na"&gt;domain=&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;0x0000&amp;#39;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="na"&gt;bus=&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;0x00&amp;#39;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="na"&gt;slot=&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;0x09&amp;#39;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="na"&gt;function=&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;0x0&amp;#39;&lt;/span&gt;&lt;span class="nt"&gt;/&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/disk&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;h2&gt;cloud-init in ISO&lt;/h2&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;$&lt;span class="w"&gt; &lt;/span&gt;genisoimage&lt;span class="w"&gt; &lt;/span&gt;--output&lt;span class="w"&gt; &lt;/span&gt;my-seed.iso&lt;span class="w"&gt; &lt;/span&gt;-volid&lt;span class="w"&gt; &lt;/span&gt;cidata&lt;span class="w"&gt; &lt;/span&gt;-joliet&lt;span class="w"&gt; &lt;/span&gt;-rock&lt;span class="w"&gt; &lt;/span&gt;my-user-data&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;my-meta-data&lt;span class="o"&gt;]&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;The key here is &lt;code&gt;-volid&lt;/code&gt; value &lt;span class="myhighlight"&gt;must be &lt;code&gt;cidata&lt;/code&gt;&lt;/span&gt;!
Example KVM xml below. Again, &lt;code&gt;&amp;lt;target dev=&lt;/code&gt; index should be unique.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="nt"&gt;&amp;lt;disk&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="na"&gt;type=&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;file&amp;#39;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="na"&gt;device=&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;cdrom&amp;#39;&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="nt"&gt;&amp;lt;source&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="na"&gt;file=&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;/home/fengxia/workspace/tmp/my-seed.iso&amp;#39;&lt;/span&gt;&lt;span class="nt"&gt;/&amp;gt;&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="nt"&gt;&amp;lt;target&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="na"&gt;dev=&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;vdb&amp;#39;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="na"&gt;bus=&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;ide&amp;#39;&lt;/span&gt;&lt;span class="nt"&gt;/&amp;gt;&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="nt"&gt;&amp;lt;readonly/&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/disk&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;h1&gt;Sum it up&lt;/h1&gt;
&lt;p&gt;So back to our mission &amp;mdash; to use cloud image as base and external
snapshots as our dev sandbox:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Download a cloud image&lt;/li&gt;
&lt;li&gt;Resize image&lt;/li&gt;
&lt;li&gt;Create a snapshot with backing file&lt;/li&gt;
&lt;li&gt;Add &lt;code&gt;.snap&lt;/code&gt; as a disk in kvm xml&lt;/li&gt;
&lt;li&gt;Create &lt;code&gt;user-data&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Create &lt;code&gt;seed.img&lt;/code&gt; from user-data&lt;/li&gt;
&lt;li&gt;Add &lt;code&gt;seed.img&lt;/code&gt; as a disk in kvm xml&lt;/li&gt;
&lt;li&gt;&lt;code&gt;virsh create [your xml]&lt;/code&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Enjoy.&lt;/p&gt;
&lt;h1&gt;helper files&lt;/h1&gt;
&lt;p&gt;Everything you need is &lt;a href="http://github.com/fengxia41103/dev/kvm"&gt;here&lt;/a&gt;.To start a kvm from scratch. This
will download a &lt;a href="https://cloud-images.ubuntu.com/xenial/current/xenial-server-cloudimg-arm64-disk1.img"&gt;16.04 amd64 cloud image&lt;/a&gt; by default.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;$&lt;span class="w"&gt; &lt;/span&gt;python&lt;span class="w"&gt; &lt;/span&gt;startmykvm.py&lt;span class="w"&gt; &lt;/span&gt;--help

usage:&lt;span class="w"&gt; &lt;/span&gt;startmykvm.py&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;-h&lt;span class="o"&gt;]&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;--backing&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;BACKING&lt;span class="o"&gt;]]&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;--user-data&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;USER_DATA&lt;span class="o"&gt;]]&lt;/span&gt;
&lt;span class="w"&gt;                     &lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;--cloudimg&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;CLOUDIMG&lt;span class="o"&gt;]]&lt;/span&gt;
&lt;span class="w"&gt;                     &lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;--download-cloudimg&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;DOWNLOAD_CLOUDIMG&lt;span class="o"&gt;]]&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;--delete&lt;span class="o"&gt;]&lt;/span&gt;
&lt;span class="w"&gt;                     &lt;/span&gt;xml

Create&lt;span class="w"&gt; &lt;/span&gt;a&lt;span class="w"&gt; &lt;/span&gt;new&lt;span class="w"&gt; &lt;/span&gt;KVM&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;for&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;me

positional&lt;span class="w"&gt; &lt;/span&gt;arguments:
&lt;span class="w"&gt;  &lt;/span&gt;xml&lt;span class="w"&gt;                   &lt;/span&gt;My&lt;span class="w"&gt; &lt;/span&gt;XML&lt;span class="w"&gt; &lt;/span&gt;template.

optional&lt;span class="w"&gt; &lt;/span&gt;arguments:
&lt;span class="w"&gt;  &lt;/span&gt;-h,&lt;span class="w"&gt; &lt;/span&gt;--help&lt;span class="w"&gt;            &lt;/span&gt;show&lt;span class="w"&gt; &lt;/span&gt;this&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nb"&gt;help&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;message&lt;span class="w"&gt; &lt;/span&gt;and&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nb"&gt;exit&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;--backing&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;BACKING&lt;span class="o"&gt;]&lt;/span&gt;,&lt;span class="w"&gt; &lt;/span&gt;-b&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;BACKING&lt;span class="o"&gt;]&lt;/span&gt;
&lt;span class="w"&gt;                        &lt;/span&gt;Backfile&lt;span class="w"&gt; &lt;/span&gt;to&lt;span class="w"&gt; &lt;/span&gt;use&lt;span class="w"&gt; &lt;/span&gt;when&lt;span class="w"&gt; &lt;/span&gt;creating&lt;span class="w"&gt; &lt;/span&gt;a&lt;span class="w"&gt; &lt;/span&gt;snapshot.
&lt;span class="w"&gt;  &lt;/span&gt;--user-data&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;USER_DATA&lt;span class="o"&gt;]&lt;/span&gt;,&lt;span class="w"&gt; &lt;/span&gt;-u&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;USER_DATA&lt;span class="o"&gt;]&lt;/span&gt;
&lt;span class="w"&gt;                        &lt;/span&gt;Cloud-config&lt;span class="w"&gt; &lt;/span&gt;user-data&lt;span class="w"&gt; &lt;/span&gt;file.
&lt;span class="w"&gt;  &lt;/span&gt;--cloudimg&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;CLOUDIMG&lt;span class="o"&gt;]&lt;/span&gt;,&lt;span class="w"&gt; &lt;/span&gt;-c&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;CLOUDIMG&lt;span class="o"&gt;]&lt;/span&gt;
&lt;span class="w"&gt;                        &lt;/span&gt;A&lt;span class="w"&gt; &lt;/span&gt;cloud&lt;span class="w"&gt; &lt;/span&gt;image&lt;span class="w"&gt; &lt;/span&gt;file.
&lt;span class="w"&gt;  &lt;/span&gt;--download-cloudimg&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;DOWNLOAD_CLOUDIMG&lt;span class="o"&gt;]&lt;/span&gt;,&lt;span class="w"&gt; &lt;/span&gt;-d&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;DOWNLOAD_CLOUDIMG&lt;span class="o"&gt;]&lt;/span&gt;
&lt;span class="w"&gt;                        &lt;/span&gt;URL&lt;span class="w"&gt; &lt;/span&gt;to&lt;span class="w"&gt; &lt;/span&gt;download&lt;span class="w"&gt; &lt;/span&gt;cloud&lt;span class="w"&gt; &lt;/span&gt;image.&lt;span class="w"&gt; &lt;/span&gt;The&lt;span class="w"&gt; &lt;/span&gt;downloaded&lt;span class="w"&gt; &lt;/span&gt;file&lt;span class="w"&gt; &lt;/span&gt;will
&lt;span class="w"&gt;                        &lt;/span&gt;be&lt;span class="w"&gt; &lt;/span&gt;deleted&lt;span class="w"&gt; &lt;/span&gt;at&lt;span class="w"&gt; &lt;/span&gt;the&lt;span class="w"&gt; &lt;/span&gt;end&lt;span class="w"&gt; &lt;/span&gt;of&lt;span class="w"&gt; &lt;/span&gt;this&lt;span class="w"&gt; &lt;/span&gt;bootstrap.
&lt;span class="w"&gt;  &lt;/span&gt;--delete,&lt;span class="w"&gt; &lt;/span&gt;-D&lt;span class="w"&gt;          &lt;/span&gt;Set&lt;span class="w"&gt; &lt;/span&gt;to&lt;span class="w"&gt; &lt;/span&gt;delete&lt;span class="w"&gt; &lt;/span&gt;VM&lt;span class="w"&gt; &lt;/span&gt;defined&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;in&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;xml.
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;To start a kvm reusing an existing backing file:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;$&lt;span class="w"&gt; &lt;/span&gt;python&lt;span class="w"&gt; &lt;/span&gt;startmykvm.py&lt;span class="w"&gt; &lt;/span&gt;-b&lt;span class="w"&gt; &lt;/span&gt;&amp;lt;backing&amp;gt;.qcow2&lt;span class="w"&gt; &lt;/span&gt;mydev.xml
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;h1&gt;Migrate to another host&lt;/h1&gt;
&lt;p&gt;If you need to migrate VM to another host, follow this:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;code&gt;virsh shutdown&lt;/code&gt; the VMs&lt;/li&gt;
&lt;li&gt;&lt;code&gt;virsh dumpxml guest_name &amp;gt; guest_name.xml&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;scp&lt;/code&gt; four files, for example. Depending on the size of the VM,
   this can take a while.&lt;/p&gt;
&lt;p&gt;&lt;code&gt;shell
  -rw-rw-r-- 1 fengxia      fengxia        4919 Feb  4 18:17 x83lvdw0at
  -rw-rw-r-- 1 libvirt-qemu kvm          378880 Feb  4 18:17 x83lvdw0at.seed
  -rw-r--r-- 1 libvirt-qemu kvm     65200717824 Feb  4 21:25 x83lvdw0at.snap
  -rw-rw-r-- 1 fengxia      fengxia        4140 Feb  4 18:56 x83lvdw0at.xml&lt;/code&gt;
4. SSH to the destination host, &lt;code&gt;virsh define &amp;lt;guest_name&amp;gt;.xml&lt;/code&gt;
5. &lt;code&gt;virsh list --all&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Now you should see the VM, and &lt;code&gt;virsh start &amp;lt;guest_name&amp;gt;&lt;/code&gt;.&lt;/p&gt;</content><category term="dev"></category><category term="lenovo"></category></entry><entry><title>Linux laptop</title><link href="https://fengxia41103.github.io/myblog/linux%20laptop.html" rel="alternate"></link><published>2017-10-04T22:19:00-04:00</published><updated>2019-10-17T10:11:00-04:00</updated><author><name>Feng Xia</name></author><id>tag:fengxia41103.github.io,2017-10-04:/myblog/linux laptop.html</id><summary type="html">&lt;p&gt;Instructions to get Ubuntu Xenial &amp;amp; Bionic (or any Linux) as your laptop OS.&lt;/p&gt;
&lt;h1&gt;Install Linux&lt;/h1&gt;
&lt;p&gt;You can do a dual boot or just wipe the whole disk. Window's boot
manager will interfere, somehow, which I don't remember the details
anymore. Google it. Eventually it will work. The rest assumes you have
Linux installed.&lt;/p&gt;
&lt;p&gt;Also, follow &lt;a href="https://fengxia41103.github.io/myblog/emacs.html"&gt;these steps&lt;/a&gt; to get your Linux in a good shape.&lt;/p&gt;
&lt;h1&gt;VPN&lt;/h1&gt;
&lt;p&gt;Most importantly, you need VPN.&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Go to &lt;code&gt;otp.company.com&lt;/code&gt; to register your phone number.&lt;/li&gt;
&lt;li&gt;Install &lt;code&gt;Company OTP&lt;/code&gt; from your app store.&lt;/li&gt;
&lt;li&gt;Keep &lt;code&gt;Company OTP&lt;/code&gt; app running so you can see the active OTP.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;apt install openconnect screen tmux&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;In a screen, &lt;code&gt;sudo openconnect -u [username] webvpn.us.company.com&lt;/code&gt;&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;first password: your regular domain login pwd&lt;/li&gt;
&lt;li&gt;second one: OTP&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;If works, you should see something like this:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;root@fengxia-company:~#&lt;span class="w"&gt; &lt;/span&gt;openconnect&lt;span class="w"&gt; &lt;/span&gt;-u&lt;span class="w"&gt; &lt;/span&gt;fxia1&lt;span class="w"&gt; &lt;/span&gt;webvpn.us.company.com
POST&lt;span class="w"&gt; &lt;/span&gt;https://webvpn.us.company.com/
Attempting&lt;span class="w"&gt; &lt;/span&gt;to&lt;span class="w"&gt; &lt;/span&gt;connect&lt;span class="w"&gt; &lt;/span&gt;to&lt;span class="w"&gt; &lt;/span&gt;server&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="m"&gt;104&lt;/span&gt;.232.254.247:443
SSL&lt;span class="w"&gt; &lt;/span&gt;negotiation&lt;span class="w"&gt; &lt;/span&gt;with&lt;span class="w"&gt; &lt;/span&gt;webvpn.us.company.com
Connected&lt;span class="w"&gt; &lt;/span&gt;to&lt;span class="w"&gt; &lt;/span&gt;HTTPS&lt;span class="w"&gt; &lt;/span&gt;on&lt;span class="w"&gt; &lt;/span&gt;webvpn.us.company.com
Got …&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;</summary><content type="html">&lt;p&gt;Instructions to get Ubuntu Xenial &amp;amp; Bionic (or any Linux) as your laptop OS.&lt;/p&gt;
&lt;h1&gt;Install Linux&lt;/h1&gt;
&lt;p&gt;You can do a dual boot or just wipe the whole disk. Window's boot
manager will interfere, somehow, which I don't remember the details
anymore. Google it. Eventually it will work. The rest assumes you have
Linux installed.&lt;/p&gt;
&lt;p&gt;Also, follow &lt;a href="https://fengxia41103.github.io/myblog/emacs.html"&gt;these steps&lt;/a&gt; to get your Linux in a good shape.&lt;/p&gt;
&lt;h1&gt;VPN&lt;/h1&gt;
&lt;p&gt;Most importantly, you need VPN.&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Go to &lt;code&gt;otp.company.com&lt;/code&gt; to register your phone number.&lt;/li&gt;
&lt;li&gt;Install &lt;code&gt;Company OTP&lt;/code&gt; from your app store.&lt;/li&gt;
&lt;li&gt;Keep &lt;code&gt;Company OTP&lt;/code&gt; app running so you can see the active OTP.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;apt install openconnect screen tmux&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;In a screen, &lt;code&gt;sudo openconnect -u [username] webvpn.us.company.com&lt;/code&gt;&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;first password: your regular domain login pwd&lt;/li&gt;
&lt;li&gt;second one: OTP&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;If works, you should see something like this:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;root@fengxia-company:~#&lt;span class="w"&gt; &lt;/span&gt;openconnect&lt;span class="w"&gt; &lt;/span&gt;-u&lt;span class="w"&gt; &lt;/span&gt;fxia1&lt;span class="w"&gt; &lt;/span&gt;webvpn.us.company.com
POST&lt;span class="w"&gt; &lt;/span&gt;https://webvpn.us.company.com/
Attempting&lt;span class="w"&gt; &lt;/span&gt;to&lt;span class="w"&gt; &lt;/span&gt;connect&lt;span class="w"&gt; &lt;/span&gt;to&lt;span class="w"&gt; &lt;/span&gt;server&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="m"&gt;104&lt;/span&gt;.232.254.247:443
SSL&lt;span class="w"&gt; &lt;/span&gt;negotiation&lt;span class="w"&gt; &lt;/span&gt;with&lt;span class="w"&gt; &lt;/span&gt;webvpn.us.company.com
Connected&lt;span class="w"&gt; &lt;/span&gt;to&lt;span class="w"&gt; &lt;/span&gt;HTTPS&lt;span class="w"&gt; &lt;/span&gt;on&lt;span class="w"&gt; &lt;/span&gt;webvpn.us.company.com
Got&lt;span class="w"&gt; &lt;/span&gt;HTTP&lt;span class="w"&gt; &lt;/span&gt;response:&lt;span class="w"&gt; &lt;/span&gt;HTTP/1.0&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="m"&gt;302&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;Object&lt;span class="w"&gt; &lt;/span&gt;Moved
GET&lt;span class="w"&gt; &lt;/span&gt;https://webvpn.us.company.com/
Attempting&lt;span class="w"&gt; &lt;/span&gt;to&lt;span class="w"&gt; &lt;/span&gt;connect&lt;span class="w"&gt; &lt;/span&gt;to&lt;span class="w"&gt; &lt;/span&gt;server&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="m"&gt;104&lt;/span&gt;.232.254.247:443
SSL&lt;span class="w"&gt; &lt;/span&gt;negotiation&lt;span class="w"&gt; &lt;/span&gt;with&lt;span class="w"&gt; &lt;/span&gt;webvpn.us.company.com
Connected&lt;span class="w"&gt; &lt;/span&gt;to&lt;span class="w"&gt; &lt;/span&gt;HTTPS&lt;span class="w"&gt; &lt;/span&gt;on&lt;span class="w"&gt; &lt;/span&gt;webvpn.us.company.com
Got&lt;span class="w"&gt; &lt;/span&gt;HTTP&lt;span class="w"&gt; &lt;/span&gt;response:&lt;span class="w"&gt; &lt;/span&gt;HTTP/1.0&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="m"&gt;302&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;Object&lt;span class="w"&gt; &lt;/span&gt;Moved
GET&lt;span class="w"&gt; &lt;/span&gt;https://webvpn.us.company.com/+webvpn+/index.html
SSL&lt;span class="w"&gt; &lt;/span&gt;negotiation&lt;span class="w"&gt; &lt;/span&gt;with&lt;span class="w"&gt; &lt;/span&gt;webvpn.us.company.com
Connected&lt;span class="w"&gt; &lt;/span&gt;to&lt;span class="w"&gt; &lt;/span&gt;HTTPS&lt;span class="w"&gt; &lt;/span&gt;on&lt;span class="w"&gt; &lt;/span&gt;webvpn.us.company.com
Please&lt;span class="w"&gt; &lt;/span&gt;enter&lt;span class="w"&gt; &lt;/span&gt;your&lt;span class="w"&gt; &lt;/span&gt;username&lt;span class="w"&gt; &lt;/span&gt;and&lt;span class="w"&gt; &lt;/span&gt;password.

Password:&lt;span class="w"&gt;  &lt;/span&gt;&amp;lt;---&lt;span class="w"&gt; &lt;/span&gt;A/D&lt;span class="w"&gt; &lt;/span&gt;password
Password:&lt;span class="w"&gt;  &lt;/span&gt;&amp;lt;---&lt;span class="w"&gt; &lt;/span&gt;OTP

POST&lt;span class="w"&gt; &lt;/span&gt;https://webvpn.us.company.com/+webvpn+/index.html
Got&lt;span class="w"&gt; &lt;/span&gt;CONNECT&lt;span class="w"&gt; &lt;/span&gt;response:&lt;span class="w"&gt; &lt;/span&gt;HTTP/1.1&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="m"&gt;200&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;OK
CSTP&lt;span class="w"&gt; &lt;/span&gt;connected.&lt;span class="w"&gt; &lt;/span&gt;DPD&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="m"&gt;30&lt;/span&gt;,&lt;span class="w"&gt; &lt;/span&gt;Keepalive&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="m"&gt;30&lt;/span&gt;
Connected&lt;span class="w"&gt; &lt;/span&gt;tun0&lt;span class="w"&gt; &lt;/span&gt;as&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="m"&gt;10&lt;/span&gt;.38.102.28,&lt;span class="w"&gt; &lt;/span&gt;using&lt;span class="w"&gt; &lt;/span&gt;SSL
Established&lt;span class="w"&gt; &lt;/span&gt;DTLS&lt;span class="w"&gt; &lt;/span&gt;connection&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;using&lt;span class="w"&gt; &lt;/span&gt;GnuTLS&lt;span class="o"&gt;)&lt;/span&gt;.&lt;span class="w"&gt; &lt;/span&gt;Ciphersuite&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;DTLS0.9&lt;span class="o"&gt;)&lt;/span&gt;-&lt;span class="o"&gt;(&lt;/span&gt;RSA&lt;span class="o"&gt;)&lt;/span&gt;-&lt;span class="o"&gt;(&lt;/span&gt;AES-256-CBC&lt;span class="o"&gt;)&lt;/span&gt;-&lt;span class="o"&gt;(&lt;/span&gt;SHA1&lt;span class="o"&gt;)&lt;/span&gt;.
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;A list of VPN servers:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;webvpn.cn.company.com&lt;/code&gt;   for China user&lt;/li&gt;
&lt;li&gt;&lt;code&gt;webvpn.hk.company.com&lt;/code&gt;   for AP region user&lt;/li&gt;
&lt;li&gt;&lt;code&gt;webvpn.us.company.com&lt;/code&gt;   for AG region user&lt;/li&gt;
&lt;li&gt;&lt;code&gt;webvpn.sk.company.com&lt;/code&gt;   for EMEA user​    &lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;recompile openconnect &amp;amp; vpnc-script&lt;/h2&gt;
&lt;p&gt;Well, once a while the enterprise decides to change their server
configuration so that one server works, but the other keeps failing
even though you have typed in the correct everything &amp;mdash; my &lt;code&gt;.hk&lt;/code&gt;
server was happy (but complaining about a cert mismatch, not a blocker
though), while my &lt;code&gt;.us&lt;/code&gt; server just won't work.&lt;/p&gt;
&lt;p&gt;Time to recompile from &lt;a href="https://www.infradead.org/openconnect/vpnc-script.html"&gt;source&lt;/a&gt;:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;get source: &lt;code&gt;git clone
   git://git.infradead.org/users/dwmw2/openconnect.git&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;The usual steps: &lt;code&gt;./autogen.sh &amp;amp;&amp;amp; ./configure&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;Download the &lt;a href="http://git.infradead.org/users/dwmw2/vpnc-scripts.git/blob_plain/HEAD:/vpnc-script"&gt;latest vpnc-script&lt;/a&gt; or install &lt;code&gt;apt install vpnc&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;Remove the stock openconnect: &lt;code&gt;apt remove openconnect &amp;amp;&amp;amp; apt purge
   openconnect&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;make&lt;/code&gt; and &lt;code&gt;sudo make install&lt;/code&gt;. Check that it's installed in
   &lt;code&gt;/usr/local/bin&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;Run it again, this time using the &lt;code&gt;vpnc-script&lt;/code&gt; if you have one:
   &lt;code&gt;openconnect -u username --reconnect-timeout 600 --script &amp;lt;path to
   vnpc-script&amp;gt; webvpn.us.company.com&lt;/code&gt;.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Enjoy your VPN.&lt;/p&gt;
&lt;h1&gt;Email&lt;/h1&gt;
&lt;p&gt;These settings work for Thunderbird. Terminology may be different for
other clients.&lt;/p&gt;
&lt;p&gt;Incoming (IMAP) settings:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;server: &lt;code&gt;outlookae.company.com&lt;/code&gt;, port &lt;code&gt;993&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;username: your domain login&lt;/li&gt;
&lt;li&gt;connection security: &lt;code&gt;SSL/TLS&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;authentication method: &lt;code&gt;Normal password&lt;/code&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Outgoing (SMTP) settings:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;server: &lt;code&gt;mailae.company.com&lt;/code&gt;, port &lt;code&gt;587&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;connection security: &lt;code&gt;STARTTLS&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;authentication method: &lt;code&gt;NTLM&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;username: domain login&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Alternatively, use &lt;a href="https://fengxia41103.github.io/myblog/mbsync mu4e email.html"&gt;mbsync w/ Davmail&lt;/a&gt;.&lt;/p&gt;
&lt;h1&gt;Lync&lt;/h1&gt;
&lt;p&gt;A couple options: &lt;a href="https://www.skype.com/en/download-skype/skype-for-computer/"&gt;skype for business&lt;/a&gt;, &lt;a href="https://launchpad.net/~sipe-collab/+archive/ubuntu/ppa"&gt;pidgin-sipe&lt;/a&gt;.&lt;/p&gt;
&lt;h2&gt;pidgin&lt;/h2&gt;
&lt;p&gt;&lt;strong&gt;DON'T use the stock package!&lt;/strong&gt; It will not work. And don't follow
&lt;a href="http://sipe.sourceforge.net/install/"&gt;this instruction&lt;/a&gt;, either.  The only way to get it working is
&lt;a href="https://launchpad.net/~sipe-collab/+archive/ubuntu/ppa"&gt;this&lt;/a&gt; to install &lt;code&gt;pidgin pidgin-sipe&lt;/code&gt;, then add configuration
listed below!&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;add ppa: &lt;code&gt;add-apt-repository ppa:sipe-collab/ppa&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;apt update &amp;amp;&amp;amp; apt install pidgin pidgin-sipe&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;snap install remmina&lt;/code&gt; &lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Create a new account with these settings:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;protocol: &lt;code&gt;Office Communicator&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;username: &lt;code&gt;you@company.com&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;password: domain password&lt;/li&gt;
&lt;li&gt;connection type: &lt;code&gt;Auto&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;user agent: &lt;code&gt;UCCAPI/16.0.6001.1073 OC/16.0.6001.1073 (Skype for Business)&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;authentication scheme: &lt;code&gt;NTLM&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;remote desktop client: &lt;code&gt;remmina&lt;/code&gt; (or &lt;code&gt;xfreerdp&lt;/code&gt;)&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Leave everything else as default/blank.&lt;/p&gt;
&lt;h1&gt;jira &amp;amp; Emacs&lt;/h1&gt;
&lt;p&gt;See my &lt;a href="https://fengxia41103.github.io/myblog/jira.html"&gt;jira&lt;/a&gt; and &lt;a href="https://fengxia41103.github.io/myblog/emacs.html"&gt;emacs&lt;/a&gt; articles.&lt;/p&gt;</content><category term="dev"></category></entry><entry><title>Sensitive touchpad</title><link href="https://fengxia41103.github.io/myblog/sensitive%20touchpad.html" rel="alternate"></link><published>2017-10-04T21:15:00-04:00</published><updated>2017-10-04T21:15:00-04:00</updated><author><name>Feng Xia</name></author><id>tag:fengxia41103.github.io,2017-10-04:/myblog/sensitive touchpad.html</id><summary type="html">&lt;p&gt;The symptom is that typing jumps all over the place.&lt;/p&gt;
&lt;h1&gt;Tune sensitivity&lt;/h1&gt;
&lt;p&gt;The idea here is to use &lt;code&gt;xinput&lt;/code&gt; command to tune finger sensitivity
values so to find a good balance. Also, we are to &lt;strong&gt;disable&lt;/strong&gt; touch
point (the little read dot rubber thingy on Lenovo's laptops) since I
don't ever use it.&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;xinput list&lt;/code&gt; to get a list (uses the &lt;code&gt;ssh -X&lt;/code&gt; if on remote
   machine):&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="err"&gt;```&lt;/span&gt;&lt;span class="n"&gt;shell&lt;/span&gt;
&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;dev&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;fengxia&lt;/span&gt;&lt;span class="nv"&gt;@fengxia&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="nl"&gt;lenovo&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="o"&gt;~/&lt;/span&gt;&lt;span class="n"&gt;workspace&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;wss&lt;/span&gt;&lt;span class="err"&gt;$&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;xinput&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;list&lt;/span&gt;
&lt;span class="err"&gt;⎡&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;Virtual&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;core&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;pointer&lt;/span&gt;&lt;span class="w"&gt;                      &lt;/span&gt;&lt;span class="n"&gt;id&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="n"&gt;master pointer  (3)&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt;
&lt;span class="err"&gt;⎜&lt;/span&gt;&lt;span class="w"&gt;   &lt;/span&gt;&lt;span class="err"&gt;↳&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;Virtual&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;core&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;XTEST&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;pointer&lt;/span&gt;&lt;span class="w"&gt;                &lt;/span&gt;&lt;span class="n"&gt;id&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="n"&gt;slave  pointer  (2)&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt;
&lt;span class="err"&gt;⎜&lt;/span&gt;&lt;span class="w"&gt;   &lt;/span&gt;&lt;span class="err"&gt;↳&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;SynPS&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;Synaptics&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;TouchPad&lt;/span&gt;&lt;span class="w"&gt;                &lt;/span&gt;&lt;span class="n"&gt;id&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;11&lt;/span&gt;&lt;span class="w"&gt;   &lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="n"&gt;slave  pointer  (2)&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt;
&lt;span class="err"&gt;⎜&lt;/span&gt;&lt;span class="w"&gt;   &lt;/span&gt;&lt;span class="err"&gt;↳&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;TPPS&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;IBM&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;TrackPoint&lt;/span&gt;&lt;span class="w"&gt;                     &lt;/span&gt;&lt;span class="n"&gt;id&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;13&lt;/span&gt;&lt;span class="w"&gt;   &lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="n"&gt;slave  pointer  (2)&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt;
&lt;span class="err"&gt;⎣&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;Virtual&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;core&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;keyboard&lt;/span&gt;&lt;span class="w"&gt;                     &lt;/span&gt;&lt;span class="n"&gt;id&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="n"&gt;master keyboard (2)&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="err"&gt;↳&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;Virtual&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;core&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;XTEST&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;keyboard&lt;/span&gt;&lt;span class="w"&gt;               &lt;/span&gt;&lt;span class="n"&gt;id&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="n"&gt;slave  keyboard (3)&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="err"&gt;↳&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nf"&gt;Power&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;Button&lt;/span&gt;&lt;span class="w"&gt;                              &lt;/span&gt;&lt;span class="n"&gt;id&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;6&lt;/span&gt;&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="n"&gt;slave  keyboard (3)&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="err"&gt;↳&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;Video&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;Bus&lt;/span&gt;&lt;span class="w"&gt;                                 &lt;/span&gt;&lt;span class="n"&gt;id&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;7&lt;/span&gt;&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="n"&gt;slave  keyboard (3)&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="err"&gt;↳&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;Sleep&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;Button&lt;/span&gt;&lt;span class="w"&gt;                              &lt;/span&gt;&lt;span class="n"&gt;id&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;8&lt;/span&gt;&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="n"&gt;slave  keyboard (3)&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="err"&gt;↳&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;Integrated&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;Camera&lt;/span&gt;&lt;span class="w"&gt;                         &lt;/span&gt;&lt;span class="n"&gt;id&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;9&lt;/span&gt;&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="n"&gt;slave  keyboard (3)&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="err"&gt;↳&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;AT&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;Translated&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;Set&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;keyboard&lt;/span&gt;&lt;span class="w"&gt;              &lt;/span&gt;&lt;span class="n"&gt;id&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;10&lt;/span&gt;&lt;span class="w"&gt;   &lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="n"&gt;slave  keyboard (3)&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="err"&gt;↳&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;ThinkPad&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;Extra&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;Buttons&lt;/span&gt;&lt;span class="w"&gt;                    &lt;/span&gt;&lt;span class="n"&gt;id&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;12&lt;/span&gt;&lt;span class="w"&gt;   &lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="n"&gt;slave  keyboard (3)&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt;
&lt;span class="err"&gt;```&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;To …&lt;/p&gt;&lt;/li&gt;&lt;/ol&gt;</summary><content type="html">&lt;p&gt;The symptom is that typing jumps all over the place.&lt;/p&gt;
&lt;h1&gt;Tune sensitivity&lt;/h1&gt;
&lt;p&gt;The idea here is to use &lt;code&gt;xinput&lt;/code&gt; command to tune finger sensitivity
values so to find a good balance. Also, we are to &lt;strong&gt;disable&lt;/strong&gt; touch
point (the little read dot rubber thingy on Lenovo's laptops) since I
don't ever use it.&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;xinput list&lt;/code&gt; to get a list (uses the &lt;code&gt;ssh -X&lt;/code&gt; if on remote
   machine):&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="err"&gt;```&lt;/span&gt;&lt;span class="n"&gt;shell&lt;/span&gt;
&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;dev&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;fengxia&lt;/span&gt;&lt;span class="nv"&gt;@fengxia&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="nl"&gt;lenovo&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="o"&gt;~/&lt;/span&gt;&lt;span class="n"&gt;workspace&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;wss&lt;/span&gt;&lt;span class="err"&gt;$&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;xinput&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;list&lt;/span&gt;
&lt;span class="err"&gt;⎡&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;Virtual&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;core&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;pointer&lt;/span&gt;&lt;span class="w"&gt;                      &lt;/span&gt;&lt;span class="n"&gt;id&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="n"&gt;master pointer  (3)&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt;
&lt;span class="err"&gt;⎜&lt;/span&gt;&lt;span class="w"&gt;   &lt;/span&gt;&lt;span class="err"&gt;↳&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;Virtual&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;core&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;XTEST&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;pointer&lt;/span&gt;&lt;span class="w"&gt;                &lt;/span&gt;&lt;span class="n"&gt;id&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="n"&gt;slave  pointer  (2)&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt;
&lt;span class="err"&gt;⎜&lt;/span&gt;&lt;span class="w"&gt;   &lt;/span&gt;&lt;span class="err"&gt;↳&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;SynPS&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;Synaptics&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;TouchPad&lt;/span&gt;&lt;span class="w"&gt;                &lt;/span&gt;&lt;span class="n"&gt;id&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;11&lt;/span&gt;&lt;span class="w"&gt;   &lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="n"&gt;slave  pointer  (2)&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt;
&lt;span class="err"&gt;⎜&lt;/span&gt;&lt;span class="w"&gt;   &lt;/span&gt;&lt;span class="err"&gt;↳&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;TPPS&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;IBM&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;TrackPoint&lt;/span&gt;&lt;span class="w"&gt;                     &lt;/span&gt;&lt;span class="n"&gt;id&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;13&lt;/span&gt;&lt;span class="w"&gt;   &lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="n"&gt;slave  pointer  (2)&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt;
&lt;span class="err"&gt;⎣&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;Virtual&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;core&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;keyboard&lt;/span&gt;&lt;span class="w"&gt;                     &lt;/span&gt;&lt;span class="n"&gt;id&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="n"&gt;master keyboard (2)&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="err"&gt;↳&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;Virtual&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;core&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;XTEST&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;keyboard&lt;/span&gt;&lt;span class="w"&gt;               &lt;/span&gt;&lt;span class="n"&gt;id&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="n"&gt;slave  keyboard (3)&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="err"&gt;↳&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nf"&gt;Power&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;Button&lt;/span&gt;&lt;span class="w"&gt;                              &lt;/span&gt;&lt;span class="n"&gt;id&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;6&lt;/span&gt;&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="n"&gt;slave  keyboard (3)&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="err"&gt;↳&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;Video&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;Bus&lt;/span&gt;&lt;span class="w"&gt;                                 &lt;/span&gt;&lt;span class="n"&gt;id&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;7&lt;/span&gt;&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="n"&gt;slave  keyboard (3)&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="err"&gt;↳&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;Sleep&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;Button&lt;/span&gt;&lt;span class="w"&gt;                              &lt;/span&gt;&lt;span class="n"&gt;id&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;8&lt;/span&gt;&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="n"&gt;slave  keyboard (3)&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="err"&gt;↳&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;Integrated&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;Camera&lt;/span&gt;&lt;span class="w"&gt;                         &lt;/span&gt;&lt;span class="n"&gt;id&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;9&lt;/span&gt;&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="n"&gt;slave  keyboard (3)&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="err"&gt;↳&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;AT&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;Translated&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;Set&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;keyboard&lt;/span&gt;&lt;span class="w"&gt;              &lt;/span&gt;&lt;span class="n"&gt;id&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;10&lt;/span&gt;&lt;span class="w"&gt;   &lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="n"&gt;slave  keyboard (3)&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="err"&gt;↳&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;ThinkPad&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;Extra&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;Buttons&lt;/span&gt;&lt;span class="w"&gt;                    &lt;/span&gt;&lt;span class="n"&gt;id&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;12&lt;/span&gt;&lt;span class="w"&gt;   &lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="n"&gt;slave  keyboard (3)&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt;
&lt;span class="err"&gt;```&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;To disable a device, eg. &lt;em&gt;TPPS/2 IBM TrackPoint&lt;/em&gt; (index 13):
   &lt;code&gt;xinput disable 13&lt;/code&gt;.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;To view device details: &lt;code&gt;xinput list-props 11&lt;/code&gt;:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="err"&gt;```&lt;/span&gt;&lt;span class="n"&gt;shell&lt;/span&gt;
&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;dev&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;fengxia&lt;/span&gt;&lt;span class="nv"&gt;@fengxia&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="nl"&gt;lenovo&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="o"&gt;~/&lt;/span&gt;&lt;span class="n"&gt;workspace&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;wss&lt;/span&gt;&lt;span class="err"&gt;$&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;xinput&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;list&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;props&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;11&lt;/span&gt;
&lt;span class="n"&gt;Device&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;SynPS/2 Synaptics TouchPad&amp;#39;&lt;/span&gt;&lt;span class="err"&gt;:&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="n"&gt;Device&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;Enabled&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;139&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="err"&gt;:&lt;/span&gt;&lt;span class="w"&gt;   &lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="n"&gt;Coordinate&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;Transformation&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;Matrix&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;141&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="err"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mf"&gt;1.000000&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mf"&gt;0.000000&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mf"&gt;0.000000&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mf"&gt;0.000000&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mf"&gt;1.000000&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mf"&gt;0.000000&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mf"&gt;0.000000&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mf"&gt;0.000000&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mf"&gt;1.000000&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="n"&gt;Device&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;Accel&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;Profile&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;263&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="err"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="n"&gt;Device&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;Accel&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;Constant&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;Deceleration&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;264&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="err"&gt;:&lt;/span&gt;&lt;span class="w"&gt;   &lt;/span&gt;&lt;span class="mf"&gt;2.500000&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="n"&gt;Device&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;Accel&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;Adaptive&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;Deceleration&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;265&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="err"&gt;:&lt;/span&gt;&lt;span class="w"&gt;   &lt;/span&gt;&lt;span class="mf"&gt;1.000000&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="n"&gt;Device&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;Accel&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;Velocity&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;Scaling&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;266&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="err"&gt;:&lt;/span&gt;&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="mf"&gt;12.500000&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="n"&gt;Synaptics&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;Edges&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;267&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="err"&gt;:&lt;/span&gt;&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="mi"&gt;1571&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;5369&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;1353&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;4499&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="n"&gt;Synaptics&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;Finger&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;268&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="err"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;55&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;60&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="n"&gt;Synaptics&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;Tap&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nc"&gt;Time&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;269&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="err"&gt;:&lt;/span&gt;&lt;span class="w"&gt;   &lt;/span&gt;&lt;span class="mi"&gt;180&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="n"&gt;Synaptics&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;Tap&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;Move&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;270&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="err"&gt;:&lt;/span&gt;&lt;span class="w"&gt;   &lt;/span&gt;&lt;span class="mi"&gt;252&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="n"&gt;Synaptics&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;Tap&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;Durations&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;271&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="err"&gt;:&lt;/span&gt;&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="mi"&gt;180&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;100&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;100&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="n"&gt;Synaptics&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;ClickPad&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;272&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="err"&gt;:&lt;/span&gt;&lt;span class="w"&gt;   &lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="n"&gt;Synaptics&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;Middle&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;Button&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;Timeout&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;273&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="err"&gt;:&lt;/span&gt;&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="n"&gt;Synaptics&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;Two&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;Finger&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;Pressure&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;274&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="err"&gt;:&lt;/span&gt;&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="mi"&gt;282&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="n"&gt;Synaptics&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;Two&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;Finger&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;Width&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;275&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="err"&gt;:&lt;/span&gt;&lt;span class="w"&gt;   &lt;/span&gt;&lt;span class="mi"&gt;7&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="n"&gt;Synaptics&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;Scrolling&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;Distance&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;276&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="err"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;114&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;114&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="n"&gt;Synaptics&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;Edge&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;Scrolling&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;277&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="err"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="n"&gt;Synaptics&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;Two&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;Finger&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;Scrolling&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;278&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="err"&gt;:&lt;/span&gt;&lt;span class="w"&gt;   &lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="n"&gt;Synaptics&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;Move&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;Speed&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;279&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="err"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mf"&gt;1.000000&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mf"&gt;1.750000&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mf"&gt;0.034886&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mf"&gt;0.000000&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="n"&gt;Synaptics&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;Off&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;280&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="err"&gt;:&lt;/span&gt;&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="n"&gt;Synaptics&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;Locked&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;Drags&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;281&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="err"&gt;:&lt;/span&gt;&lt;span class="w"&gt;   &lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="n"&gt;Synaptics&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;Locked&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;Drags&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;Timeout&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;282&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="err"&gt;:&lt;/span&gt;&lt;span class="w"&gt;   &lt;/span&gt;&lt;span class="mi"&gt;5000&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="n"&gt;Synaptics&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;Tap&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;Action&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;283&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="err"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="n"&gt;Synaptics&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;Click&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;Action&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;284&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="err"&gt;:&lt;/span&gt;&lt;span class="w"&gt;   &lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="n"&gt;Synaptics&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;Circular&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;Scrolling&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;285&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="err"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="n"&gt;Synaptics&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;Circular&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;Scrolling&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;Distance&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;286&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="err"&gt;:&lt;/span&gt;&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="mf"&gt;0.100000&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="n"&gt;Synaptics&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;Circular&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;Scrolling&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;Trigger&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;287&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="err"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="n"&gt;Synaptics&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;Circular&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;Pad&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;288&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="err"&gt;:&lt;/span&gt;&lt;span class="w"&gt;   &lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="n"&gt;Synaptics&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;Palm&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;Detection&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;289&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="err"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="n"&gt;Synaptics&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;Palm&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;Dimensions&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;290&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="err"&gt;:&lt;/span&gt;&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="mi"&gt;10&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;200&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="n"&gt;Synaptics&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;Coasting&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;Speed&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;291&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="err"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mf"&gt;20.000000&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mf"&gt;50.000000&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="n"&gt;Synaptics&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;Pressure&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;Motion&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;292&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="err"&gt;:&lt;/span&gt;&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="mi"&gt;30&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;160&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="n"&gt;Synaptics&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;Pressure&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;Motion&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;Factor&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;293&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="err"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mf"&gt;1.000000&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mf"&gt;1.000000&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="n"&gt;Synaptics&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;Resolution&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;Detect&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;294&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="err"&gt;:&lt;/span&gt;&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="n"&gt;Synaptics&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;Grab&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;Event&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;Device&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;295&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="err"&gt;:&lt;/span&gt;&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="n"&gt;Synaptics&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;Gestures&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;296&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="err"&gt;:&lt;/span&gt;&lt;span class="w"&gt;   &lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="n"&gt;Synaptics&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;Capabilities&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;297&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="err"&gt;:&lt;/span&gt;&lt;span class="w"&gt;   &lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="n"&gt;Synaptics&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;Pad&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;Resolution&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;298&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="err"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;68&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;46&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="n"&gt;Synaptics&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;Area&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;299&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="err"&gt;:&lt;/span&gt;&lt;span class="w"&gt;   &lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="n"&gt;Synaptics&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;Soft&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;Button&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;Areas&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;300&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="err"&gt;:&lt;/span&gt;&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="mi"&gt;3470&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;4095&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="n"&gt;Synaptics&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;Noise&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;Cancellation&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;301&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="err"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;28&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;28&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="n"&gt;Device&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;Product&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;ID&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;257&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="err"&gt;:&lt;/span&gt;&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;7&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="n"&gt;Device&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;Node&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;258&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="err"&gt;:&lt;/span&gt;&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="ss"&gt;&amp;quot;/dev/input/event5&amp;quot;&lt;/span&gt;
&lt;span class="err"&gt;```&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;To tweak touchpad sensitivity: look for line &lt;code&gt;Synaptics Finger
   (268):   55, 60, 0&lt;/code&gt;:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;55 = FingerLow (as you remove your finger from the touchpad)&lt;/li&gt;
&lt;li&gt;60 = FingerHigh (pressure required to use the touchpad).&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;The higher the number, the less sensitive it
becomes&lt;/strong&gt;. On X1 4th gen, setting to &lt;code&gt;60 65&lt;/code&gt; makes it feels
solid, &lt;code&gt;65 70&lt;/code&gt; is hardly responsive. 
The old values of &lt;code&gt;25 30&lt;/code&gt; was too sensitive.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;```shell
xinput set-prop 11 268 60 65 0
```
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Search for &lt;code&gt;synaptics.conf&lt;/code&gt;. On X1 4th gen, it's located at
   &lt;code&gt;/usr/share/X11/xorg.conf.d/50-synaptics.conf&lt;/code&gt;. Add two lines to
   it (alternatively, add the &lt;code&gt;set-prop&lt;/code&gt; line from step 4 
   to your &lt;code&gt;.bashrc&lt;/code&gt; works too):&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;```shell
Section &amp;quot;InputClass&amp;quot;
       Identifier &amp;quot;touchpad catchall&amp;quot;
       Driver &amp;quot;synaptics&amp;quot;
       MatchIsTouchpad &amp;quot;on&amp;quot;
       Option &amp;quot;FingerLow&amp;quot; &amp;quot;60&amp;quot; # &amp;lt;--
       Option &amp;quot;FingerHigh&amp;quot; &amp;quot;65&amp;quot; # &amp;lt;--
```
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Reboot, and verify using &lt;code&gt;xinput list-props [index]&lt;/code&gt; that new values
are in use. You should be good now.&lt;/p&gt;
&lt;h1&gt;Disable touchpad while typing&lt;/h1&gt;
&lt;p&gt;Another trick is to &lt;em&gt;disable&lt;/em&gt; touchpad while typing. This definitely
removed the jumpy typing almost completly. However, you have to issue
this command after running &lt;code&gt;emacs&lt;/code&gt; for some reason. Otherwise, &lt;code&gt;emacs&lt;/code&gt;
will stuck in initialization forever.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;$&lt;span class="w"&gt; &lt;/span&gt;syndaemon&lt;span class="w"&gt; &lt;/span&gt;-i&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="m"&gt;0&lt;/span&gt;.5&lt;span class="w"&gt; &lt;/span&gt;-d&lt;span class="w"&gt; &lt;/span&gt;-K&lt;span class="w"&gt; &lt;/span&gt;-R
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;</content><category term="dev"></category><category term="dev"></category></entry><entry><title>Bye Bye GFW</title><link href="https://fengxia41103.github.io/myblog/bye%20bye%20gfw.html" rel="alternate"></link><published>2017-04-30T22:53:00-04:00</published><updated>2017-04-30T22:53:00-04:00</updated><author><name>Feng Xia</name></author><id>tag:fengxia41103.github.io,2017-04-30:/myblog/bye bye gfw.html</id><summary type="html">&lt;figure class="col l3 m3 s12"&gt;
  &lt;img src="images/funny/gfw.jpg"/&gt;
&lt;/figure&gt;

&lt;p&gt;The GFW is nothing but an anti-humanity instance that blocks knowledge
transfer and information sharing in the 21st century when brain is the
competition advantage and this gov decides to sacrifice all the future
with a vain hope that creativity can continue to flourish while its
citizens are excluded from the rest of the world. The most frustrating
point is that technology forums are handicapped in the crossfire to a
ridiculous degree, for example, my experience with Stackoverflow has
been downgraded to having at least 50% &lt;strong&gt;dead links&lt;/strong&gt; due to the
blocking. Come on! and you are talking about technology innovation!?
Get a grip.&lt;/p&gt;
&lt;p&gt;How do I know this ia bad!? Well, when my brain has to slow down to
cope with incoming information, it is a sign that this place is
culturally backwards and hopeless, because my brain, though not that
much impressive and has average power most of the time, is being
wasted due to artificial barrier which has no reason to exist
especially in the name of &lt;strong&gt;political stability&lt;/strong&gt; (and harmony!? give …&lt;/p&gt;</summary><content type="html">&lt;figure class="col l3 m3 s12"&gt;
  &lt;img src="images/funny/gfw.jpg"/&gt;
&lt;/figure&gt;

&lt;p&gt;The GFW is nothing but an anti-humanity instance that blocks knowledge
transfer and information sharing in the 21st century when brain is the
competition advantage and this gov decides to sacrifice all the future
with a vain hope that creativity can continue to flourish while its
citizens are excluded from the rest of the world. The most frustrating
point is that technology forums are handicapped in the crossfire to a
ridiculous degree, for example, my experience with Stackoverflow has
been downgraded to having at least 50% &lt;strong&gt;dead links&lt;/strong&gt; due to the
blocking. Come on! and you are talking about technology innovation!?
Get a grip.&lt;/p&gt;
&lt;p&gt;How do I know this ia bad!? Well, when my brain has to slow down to
cope with incoming information, it is a sign that this place is
culturally backwards and hopeless, because my brain, though not that
much impressive and has average power most of the time, is being
wasted due to artificial barrier which has no reason to exist
especially in the name of &lt;strong&gt;political stability&lt;/strong&gt; (and harmony!? give
me a break). This, is not acceptable. The time is not stopping for
such idleness, so a minute waiting for the timeout is a minute my life
will never get back. I don't need suspension of the "page not found"
at the end of the 2 minutes, especially when I know the page IS there,
and the "page is not found" or "coonection error" is a pure blunt
lie. So in the end, it's the lie I can not bear.&lt;/p&gt;
&lt;h1&gt;Leap&lt;/h1&gt;
&lt;p&gt;Now suppose there is a SSH server sitting outside the block, here is
how to punch a hole and stay connected with life:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;From SSH client machine, &lt;code&gt;$ ssh -C -D 1080 username@ssh-server-ip&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;In firefox, configure a SOCK proxy:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;code&gt;Preferences -&amp;gt; Advances -&amp;gt; Networking&lt;/code&gt;, set up &lt;code&gt;Manual proxy&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;Set up as shown below:&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;figure class="s12 center"&gt;
    &lt;img src="images/firefox%20manual%20proxy.png" /&gt;
    &lt;figcaption&gt;Firefox manual proxy setup&lt;/figcaption&gt;
&lt;/figure&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Restart firefox, then go to &lt;code&gt;http://www.google.com&lt;/code&gt;.&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Welcome back to the world.&lt;/p&gt;</content><category term="dev"></category><category term="dev"></category></entry><entry><title>You got mail</title><link href="https://fengxia41103.github.io/myblog/mbsync%20mu4e%20email.html" rel="alternate"></link><published>2017-04-24T10:15:00-04:00</published><updated>2019-05-21T10:27:00-04:00</updated><author><name>Feng Xia</name></author><id>tag:fengxia41103.github.io,2017-04-24:/myblog/mbsync mu4e email.html</id><summary type="html">&lt;figure class="col l5 m6 s12"&gt;
  &lt;img src="images/hahn.png"
       class="center img-responsive"&gt;
&lt;/figure&gt;

&lt;p&gt;After becoming an Emacs user for the last few months, I acquired a
burning desire to migrate as much as my daily text editing activities
into Emacs environment, in particular, emails.&lt;/p&gt;
&lt;p&gt;Having tried &lt;a href="https://fengxia41103.github.io/myblog/downloads/davmail.properties"&gt;offlineimap&lt;/a&gt; for a bit, I ended up battling its
configuration to make it work (sort of) with Hotmail's IMAP. Gmail
worked flawlessly, but boy, Microsoft, get a grip. No wonder hotmail
is dying. But in the end I'm just one guy who holds on something
linking my youth days, for sentimental purpose. So without being able
to win the battle with offlineimap, I started searching for
alternatives, then I found &lt;a href="http://isync.sourceforge.net/mbsync.html"&gt;mbsync&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Its &lt;a href="http://isync.sourceforge.net/mbsync.html"&gt;man page&lt;/a&gt; is worth a read. It looks intimidating at first
glance, but it isn't really. In a nutshell, it defines three things:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;strong&gt;A remote store&lt;/strong&gt;: this also links to an &lt;strong&gt;Account&lt;/strong&gt;, which of
   course holds your email credentials.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;A local store&lt;/strong&gt;: this defines local file structure where you want
   to emails to be downloaded to.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;A channel&lt;/strong&gt;: a link that connects the a remote store with a local
   store …&lt;/li&gt;&lt;/ol&gt;</summary><content type="html">&lt;figure class="col l5 m6 s12"&gt;
  &lt;img src="images/hahn.png"
       class="center img-responsive"&gt;
&lt;/figure&gt;

&lt;p&gt;After becoming an Emacs user for the last few months, I acquired a
burning desire to migrate as much as my daily text editing activities
into Emacs environment, in particular, emails.&lt;/p&gt;
&lt;p&gt;Having tried &lt;a href="https://fengxia41103.github.io/myblog/downloads/davmail.properties"&gt;offlineimap&lt;/a&gt; for a bit, I ended up battling its
configuration to make it work (sort of) with Hotmail's IMAP. Gmail
worked flawlessly, but boy, Microsoft, get a grip. No wonder hotmail
is dying. But in the end I'm just one guy who holds on something
linking my youth days, for sentimental purpose. So without being able
to win the battle with offlineimap, I started searching for
alternatives, then I found &lt;a href="http://isync.sourceforge.net/mbsync.html"&gt;mbsync&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Its &lt;a href="http://isync.sourceforge.net/mbsync.html"&gt;man page&lt;/a&gt; is worth a read. It looks intimidating at first
glance, but it isn't really. In a nutshell, it defines three things:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;strong&gt;A remote store&lt;/strong&gt;: this also links to an &lt;strong&gt;Account&lt;/strong&gt;, which of
   course holds your email credentials.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;A local store&lt;/strong&gt;: this defines local file structure where you want
   to emails to be downloaded to.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;A channel&lt;/strong&gt;: a link that connects the a remote store with a local
   store.&lt;/li&gt;
&lt;/ol&gt;
&lt;figure class="col s12"&gt;
  &lt;img src="images/mbsync.png"
       class="center img-responsive"&gt;
  &lt;figcaption&gt;mbsync components&lt;/figcaption&gt;
&lt;/figure&gt;

&lt;h1&gt;Account&lt;/h1&gt;
&lt;p&gt;&lt;strong&gt;Acount&lt;/strong&gt; sections define your email accounts:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;for hotmail: &lt;code&gt;imap.outlook.com&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;for gmail:&lt;code&gt;imap.gmail.com&lt;/code&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="c1"&gt;# Hotmail account&lt;/span&gt;
IMAPAccount&lt;span class="w"&gt; &lt;/span&gt;hotmail&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="c1"&gt;# &amp;lt;-- user defined name&lt;/span&gt;
Host&lt;span class="w"&gt; &lt;/span&gt;imap.outlook.com&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="c1"&gt;# or imap.gmail.com&lt;/span&gt;
User&lt;span class="w"&gt; &lt;/span&gt;yours&lt;span class="w"&gt; &lt;/span&gt;email&lt;span class="w"&gt; &lt;/span&gt;address
Pass&lt;span class="w"&gt; &lt;/span&gt;xxxx

&lt;span class="c1"&gt;# These settings work for both gmail and hotmail&lt;/span&gt;
UseIMAPS&lt;span class="w"&gt; &lt;/span&gt;yes
RequireSSL&lt;span class="w"&gt; &lt;/span&gt;yes

&lt;span class="c1"&gt;# This might be Ubuntu 16.04 specific&lt;/span&gt;
CertificateFile&lt;span class="w"&gt; &lt;/span&gt;/etc/ssl/certs/ca-certificates.crt
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;h2&gt;certs&lt;/h2&gt;
&lt;p&gt;Whiling setting up corporate one, for which you are likely looking at
a outlook server on the other end, I ran into an error cert is not
matching the server's.  To solve this, we actually need to pull down a
new cert (from the mail server itself) and config &lt;code&gt;CertificateFile&lt;/code&gt; to
that file. I followed the steps &lt;a href="https://wiki.archlinux.org/index.php/Isync#Step_.231:_Get_the_certificates"&gt;here&lt;/a&gt;.&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;Create a bash script, &lt;a href="https://fengxia41103.github.io/myblog/downloads/emacs/get_certs.sh"&gt;&lt;code&gt;get_certs.sh&lt;/code&gt;&lt;/a&gt;, to facilitate the
   command line:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="err"&gt;```&lt;/span&gt;&lt;span class="s s-Atom"&gt;shell&lt;/span&gt;
&lt;span class="s s-Atom"&gt;#&lt;/span&gt;&lt;span class="p"&gt;!&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="s s-Atom"&gt;bin&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="s s-Atom"&gt;sh&lt;/span&gt;
&lt;span class="nv"&gt;SERVER&lt;/span&gt;&lt;span class="s s-Atom"&gt;=&lt;/span&gt;&lt;span class="err"&gt;$&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="o"&gt;:-&lt;/span&gt;&lt;span class="s s-Atom"&gt;my&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="s s-Atom"&gt;server&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="s s-Atom"&gt;com&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="nv"&gt;PORT&lt;/span&gt;&lt;span class="s s-Atom"&gt;=&lt;/span&gt;&lt;span class="err"&gt;$&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="o"&gt;:-&lt;/span&gt;&lt;span class="mi"&gt;993&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="nv"&gt;CERT_FOLDER&lt;/span&gt;&lt;span class="s s-Atom"&gt;=&lt;/span&gt;&lt;span class="err"&gt;$&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="o"&gt;:-~/&lt;/span&gt;&lt;span class="s s-Atom"&gt;certs&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="s s-Atom"&gt;openssl&lt;/span&gt; &lt;span class="s s-Atom"&gt;s_client&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="s s-Atom"&gt;connect&lt;/span&gt; &lt;span class="err"&gt;$&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nv"&gt;SERVER&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="err"&gt;$&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nv"&gt;PORT&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="s s-Atom"&gt;showcerts&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="s s-Atom"&gt;&amp;gt;&amp;amp;&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="s s-Atom"&gt;dev&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="s s-Atom"&gt;null&lt;/span&gt; &lt;span class="p"&gt;|&lt;/span&gt; &lt;span class="s s-Atom"&gt;sed&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="s s-Atom"&gt;ne&lt;/span&gt; &lt;span class="s s-Atom"&gt;&amp;#39;/-BEGIN CERTIFICATE-/,/-END CERTIFICATE-/p&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;|&lt;/span&gt; &lt;span class="s s-Atom"&gt;sed&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="s s-Atom"&gt;ne&lt;/span&gt; &lt;span class="s s-Atom"&gt;&amp;#39;1,/-END CERTIFICATE-/p&amp;#39;&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="err"&gt;$&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nv"&gt;CERT_FOLDER&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="s s-Atom"&gt;/&lt;/span&gt;&lt;span class="err"&gt;$&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nv"&gt;SERVER&lt;/span&gt;&lt;span class="p"&gt;}.&lt;/span&gt;&lt;span class="s s-Atom"&gt;pem&lt;/span&gt;
&lt;span class="err"&gt;```&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Create a &lt;code&gt;~/.cert&lt;/code&gt; directory, then run:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;```shell
sh get_certs.sh some.imap.server port ~/.cert/
eg:
sh get_certs.sh outlookae.&amp;lt;your company&amp;gt;.com 993 ~/.cert/
```
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Cert file will have a name &lt;code&gt;some.imap.server.pem&lt;/code&gt;. Use that in
   &lt;code&gt;CertificateFile&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;Alternatively, run the cmd manually:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;$&lt;span class="w"&gt; &lt;/span&gt;openssl&lt;span class="w"&gt; &lt;/span&gt;s_client&lt;span class="w"&gt; &lt;/span&gt;-connect&lt;span class="w"&gt; &lt;/span&gt;&amp;lt;your&lt;span class="w"&gt; &lt;/span&gt;server.com&amp;gt;:993

Example&lt;span class="w"&gt; &lt;/span&gt;output:

---
Server&lt;span class="w"&gt; &lt;/span&gt;certificate
-----BEGIN&lt;span class="w"&gt; &lt;/span&gt;CERTIFICATE-----
MIIGljCCBX6gAwIBAgIQCdcdxK7NPHWJoI9zDG7qUDANBgkqhkiG9w0BAQsFADBe
MQswCQYDVQQGEwJVUzEVMBMGA1UEChMMRGlnaUNlcnQgSW5jMRkwFwYDVQQLExB3
d3cuZGlnaWNlcnQuY29tMR0wGwYDVQQDExRHZW9UcnVzdCBSU0EgQ0EgMjAxODAe
Fw0xODA0MjgwMDAwMDBaFw0xODEwMTcxMjAwMDBaMG4xCzAJBgNVBAYTAkNOMRAw
DgYDVQQIEwdiZWlqaW5nMRAwDgYDVQQHEwdiZWlqaW5nMSEwHwYDVQQKExhMZW5v
dm8gKEJlaWppbmcpIExpbWl0ZWQxGDAWBgNVBAMTD21haWwubGVub3ZvLmNvbTCC
ASIwDQYJKoZIhvcNAQEBBQADggEPADCCAQoCggEBAIX5GrFQTPLxep6rWrvqUmX3
+qHCVQYZDE7lXGvI+cqZSRXeYH5PE3BHoH/45u620lYvu9zcKCImeyS8klZi8ZX9
5KxFlssl6qn8kiCx/pEZbwy1XXquvIplqvCG5SN074736Pin1X1w6mSujItAdXhh
2S959hg+Vdu//b6EktMVUq1smmjtG9V4YMXPtL5Dhf744AGuuFLTMmtuJxrajQQ/
1LOI7VVgu99KLuJ4p6zpNv4Oqx9YVZE8n9iJbBBVql60VQ7nWJBTx0tMoK6S0h/B
FUdsbk3L3GV4RRGBPfj0NC4+zRLjzzvzFRePhjizBWOCAaQfkK96nw+QLXz6lT0C
AwEAAaOCAz4wggM6MB8GA1UdIwQYMBaAFJBY/7CcdahRVHex7fKjQxY4nmzFMB0G
A1UdDgQWBBTjHVASVMSS5vbUq7OaL/aZsWOMMjCBsAYDVR0RBIGoMIGlgg9tYWls
Lmxlbm92by5jb22CEW1haWx1cy5sZW5vdm8uY29tghlhdXRvZGlzY292ZXIubW90
b3JvbGEuY29tggxtb3Rvcm9sYS5jb22CEW1haWxhcC5sZW5vdm8uY29tghFtYWls
YWUubGVub3ZvLmNvbYIXYXV0b2Rpc2NvdmVyLm5lY3AuY28uanCCF2F1dG9kaXNj
b3Zlci5sZW5vdm8uY29tMA4GA1UdDwEB/wQEAwIFoDAdBgNVHSUEFjAUBggrBgEF
BQcDAQYIKwYBBQUHAwIwPwYDVR0fBDgwNjA0oDKgMIYuaHR0cDovL2NkcDEuZGln
aWNlcnQuY29tL0dlb1RydXN0UlNBQ0EyMDE4LmNybDBMBgNVHSAERTBDMDcGCWCG
SAGG/WwBATAqMCgGCCsGAQUFBwIBFhxodHRwczovL3d3dy5kaWdpY2VydC5jb20v
Q1BTMAgGBmeBDAECAjB0BggrBgEFBQcBAQRoMGYwJQYIKwYBBQUHMAGGGWh0dHA6
Ly9vY3NwMS5kaWdpY2VydC5jb20wPQYIKwYBBQUHMAKGMWh0dHA6Ly9jYWNlcnRz
Lmdlb3RydXN0LmNvbS9HZW9UcnVzdFJTQUNBMjAxOC5jcnQwCQYDVR0TBAIwADCC
AQQGCisGAQQB1nkCBAIEgfUEgfIA8AB1ALvZ37wfinG1k5Qjl6qSe0c4V5UKq1Lo
GpCWZDaOHtGFAAABYwr7gWoAAAQDAEYwRAIgBBogB6jO59BheNJs2iCL8xYZdXqW
JbP+6WTrHLptQ3wCIDZZzf0bwPNfn+nJQFf16tui94evPkb2OQysfro8lVLzAHcA
b1N2rDHwMRnYmQCkURX/dxUcEdkCwQApBo2yCJo32RMAAAFjCvuCVQAABAMASDBG
AiEA/1ncX/FX8by4rQDg5uyIXTciZBcZoySzQ1gZl9kTNggCIQCfaCniFF4cdTMK
SXCfffl3N5AwuMyr/Js35+o4dRsffjANBgkqhkiG9w0BAQsFAAOCAQEAeMf6y/dz
oEuQNV4EEdH/afHX/3Ttr9uuJ9TER7kQas5ri9e1KjZy37LpgotyspufHHPp/X2S
D5hltCLxiQg98ZOybtBeiCixKB3MTDxtGDWdYg6MfDMYx+tLeqEBLuDJ3DKg6vtj
EK6wbkJbt+fEWUz/dWVqOf/Z/ZfpFXvmKVGplxxNLJVowl2RJhXzW6XXg22ZsOXi
FB2e/JTWHrUyZAyStDDuce/BmmRMImlvCo0LdWGx5hu0ggnAq6MSOJu/m5CyVOuc
+jXvW64RwfzUVMnfCgly9pf3wkINeRQDHVtn7pnbg0fIk1xPgT5YOOrjSXZK7xwT
&lt;span class="nv"&gt;h4Dw9xNfks5zyQ&lt;/span&gt;&lt;span class="o"&gt;==&lt;/span&gt;
-----END&lt;span class="w"&gt; &lt;/span&gt;CERTIFICATE-----
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Then copy and paste it to &lt;code&gt;.cert/&amp;lt;your cert file&amp;gt;.pem&lt;/code&gt;.&lt;/p&gt;
&lt;h1&gt;Stores&lt;/h1&gt;
&lt;h2&gt;Remote store&lt;/h2&gt;
&lt;p&gt;Use &lt;code&gt;IMAPStore&lt;/code&gt; to pair email account with a remote. The name of
remote store is user defined.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;IMAPStore&lt;span class="w"&gt; &lt;/span&gt;gmail-remote&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="c1"&gt;# &amp;lt;-- user defined name&lt;/span&gt;
Account&lt;span class="w"&gt; &lt;/span&gt;gmail&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="c1"&gt;# &amp;lt;-- the account name defined in Account section&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;h2&gt;Local store&lt;/h2&gt;
&lt;p&gt;Don't quite understand this one. Default local maildir is set to
&lt;code&gt;~/Maildir&lt;/code&gt; (seems to be the default).&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;MaildirStore&lt;span class="w"&gt; &lt;/span&gt;gmail-local
Path&lt;span class="w"&gt; &lt;/span&gt;~/Maildir/Gmail/
Inbox&lt;span class="w"&gt; &lt;/span&gt;~/Maildir/Gmail/inbox/
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;h1&gt;Channels&lt;/h1&gt;
&lt;p&gt;Defines a channel to link a &lt;code&gt;remote store&lt;/code&gt; with a &lt;code&gt;local store&lt;/code&gt;:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;Channel&lt;span class="w"&gt; &lt;/span&gt;gmail-inbox
Master&lt;span class="w"&gt; &lt;/span&gt;:gmail-remote:&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="c1"&gt;# &amp;lt;-- remote store&lt;/span&gt;
Slave&lt;span class="w"&gt; &lt;/span&gt;:gmail-local:inbox&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="c1"&gt;# &amp;lt;-- local dir&lt;/span&gt;
Create&lt;span class="w"&gt; &lt;/span&gt;Both
Expunge&lt;span class="w"&gt; &lt;/span&gt;Both
SyncState&lt;span class="w"&gt; &lt;/span&gt;*
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;h1&gt;Groups&lt;/h1&gt;
&lt;p&gt;This is just a batch command mode where you group a list of &lt;code&gt;channels&lt;/code&gt; into
one blog which can then be evoked using command line &lt;code&gt;mbsync group-name-xyz&lt;/code&gt;:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;Group&lt;span class="w"&gt; &lt;/span&gt;gmail
Channel&lt;span class="w"&gt; &lt;/span&gt;gmail-trash
Channel&lt;span class="w"&gt; &lt;/span&gt;gmail-inbox
Channel&lt;span class="w"&gt; &lt;/span&gt;gmail-sent
Channel&lt;span class="w"&gt; &lt;/span&gt;gmail-all
Channel&lt;span class="w"&gt; &lt;/span&gt;gmail-starred
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;h1&gt;mbsync config&lt;/h1&gt;
&lt;p&gt;Follow these steps to set up your local folders:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Copy and paste this config to &lt;code&gt;~/.mbsyncrc&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;Create these folders: &lt;code&gt;~/Maildir&lt;/code&gt;, &lt;code&gt;~/Maildir/Hotmail&lt;/code&gt;, and
   &lt;code&gt;~/Maildir/Gmail&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;Run command &lt;code&gt;mbsync -a&lt;/code&gt;, sit back, and watch your remote emails got
   pull down and backed up locally.&lt;/li&gt;
&lt;li&gt;Clear old index &lt;code&gt;rm -r ~/.mu&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;Run &lt;code&gt;mu index&lt;/code&gt; to index local emails.&lt;/li&gt;
&lt;/ol&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="c1"&gt;# mbsyncrc based on&lt;/span&gt;
&lt;span class="c1"&gt;# http://www.ict4g.net/adolfo/notes/2014/12/27/EmacsIMAP.html&lt;/span&gt;
&lt;span class="c1"&gt;# ACCOUNT INFORMATION&lt;/span&gt;

&lt;span class="c1"&gt;############################################&lt;/span&gt;
&lt;span class="c1"&gt;#&lt;/span&gt;
&lt;span class="c1"&gt;#       Accounts&lt;/span&gt;
&lt;span class="c1"&gt;#&lt;/span&gt;
&lt;span class="c1"&gt;###########################################&lt;/span&gt;
&lt;span class="c1"&gt;# Hotmail account&lt;/span&gt;
IMAPAccount&lt;span class="w"&gt; &lt;/span&gt;hotmail
&lt;span class="c1"&gt;# Address to connect to&lt;/span&gt;
Host&lt;span class="w"&gt; &lt;/span&gt;imap.outlook.com
User&lt;span class="w"&gt; &lt;/span&gt;yours@hotmail.com
Pass&lt;span class="w"&gt; &lt;/span&gt;xxxx
UseIMAPS&lt;span class="w"&gt; &lt;/span&gt;yes
RequireSSL&lt;span class="w"&gt; &lt;/span&gt;yes
CertificateFile&lt;span class="w"&gt; &lt;/span&gt;/etc/ssl/certs/ca-certificates.crt


&lt;span class="c1"&gt;# Gmail account&lt;/span&gt;
IMAPAccount&lt;span class="w"&gt; &lt;/span&gt;gmail
&lt;span class="c1"&gt;# Address to connect to&lt;/span&gt;
Host&lt;span class="w"&gt; &lt;/span&gt;imap.gmail.com
User&lt;span class="w"&gt; &lt;/span&gt;yours@gmail.com
Pass&lt;span class="w"&gt; &lt;/span&gt;xxxx
UseIMAPS&lt;span class="w"&gt; &lt;/span&gt;yes
RequireSSL&lt;span class="w"&gt; &lt;/span&gt;yes
CertificateFile&lt;span class="w"&gt; &lt;/span&gt;/etc/ssl/certs/ca-certificates.crt

&lt;span class="c1"&gt;############################################&lt;/span&gt;
&lt;span class="c1"&gt;#&lt;/span&gt;
&lt;span class="c1"&gt;#       IMAP stores&lt;/span&gt;
&lt;span class="c1"&gt;#&lt;/span&gt;
&lt;span class="c1"&gt;###########################################&lt;/span&gt;

&lt;span class="c1"&gt;# THEN WE SPECIFY THE LOCAL AND REMOTE STORAGE&lt;/span&gt;
&lt;span class="c1"&gt;# - THE REMOTE STORAGE IS WHERE WE GET THE MAIL FROM (E.G., THE&lt;/span&gt;
&lt;span class="c1"&gt;#   SPECIFICATION OF AN IMAP ACCOUNT)&lt;/span&gt;
&lt;span class="c1"&gt;# - THE LOCAL STORAGE IS WHERE WE STORE THE EMAIL ON OUR COMPUTER&lt;/span&gt;

&lt;span class="c1"&gt;# REMOTE STORAGE (USE THE IMAP ACCOUNT SPECIFIED ABOVE)&lt;/span&gt;
IMAPStore&lt;span class="w"&gt; &lt;/span&gt;gmail-remote
Account&lt;span class="w"&gt; &lt;/span&gt;gmail

&lt;span class="c1"&gt;# LOCAL STORAGE (CREATE DIRECTORIES with mkdir -p Maildir/gmail)&lt;/span&gt;
MaildirStore&lt;span class="w"&gt; &lt;/span&gt;gmail-local
Path&lt;span class="w"&gt; &lt;/span&gt;~/Maildir/Gmail/
Inbox&lt;span class="w"&gt; &lt;/span&gt;~/Maildir/Gmail/inbox/

IMAPStore&lt;span class="w"&gt; &lt;/span&gt;hotmail-remote
Account&lt;span class="w"&gt; &lt;/span&gt;hotmail

MaildirStore&lt;span class="w"&gt; &lt;/span&gt;hotmail-local
Path&lt;span class="w"&gt; &lt;/span&gt;~/Maildir/Hotmail/
Inbox&lt;span class="w"&gt; &lt;/span&gt;~/Maildir/Hotmail/inbox/

&lt;span class="c1"&gt;############################################&lt;/span&gt;
&lt;span class="c1"&gt;#&lt;/span&gt;
&lt;span class="c1"&gt;#       gmail channels&lt;/span&gt;
&lt;span class="c1"&gt;#&lt;/span&gt;
&lt;span class="c1"&gt;###########################################&lt;/span&gt;

&lt;span class="c1"&gt;# CONNECTIONS SPECIFY LINKS BETWEEN REMOTE AND LOCAL FOLDERS&lt;/span&gt;
&lt;span class="c1"&gt;#&lt;/span&gt;
&lt;span class="c1"&gt;# CONNECTIONS ARE SPECIFIED USING PATTERNS, WHICH MATCH REMOTE MAIl&lt;/span&gt;
&lt;span class="c1"&gt;# FOLDERS. SOME COMMONLY USED PATTERS INCLUDE:&lt;/span&gt;
&lt;span class="c1"&gt;#&lt;/span&gt;
&lt;span class="c1"&gt;# 1 &amp;quot;*&amp;quot; TO MATCH EVERYTHING&lt;/span&gt;
&lt;span class="c1"&gt;# 2 &amp;quot;!DIR&amp;quot; TO EXCLUDE &amp;quot;DIR&amp;quot;&lt;/span&gt;
&lt;span class="c1"&gt;# 3 &amp;quot;DIR&amp;quot; TO MATCH DIR&lt;/span&gt;
Channel&lt;span class="w"&gt; &lt;/span&gt;gmail-inbox
Master&lt;span class="w"&gt; &lt;/span&gt;:gmail-remote:
Slave&lt;span class="w"&gt; &lt;/span&gt;:gmail-local:inbox
Create&lt;span class="w"&gt; &lt;/span&gt;Both
Expunge&lt;span class="w"&gt; &lt;/span&gt;Both
SyncState&lt;span class="w"&gt; &lt;/span&gt;*

Channel&lt;span class="w"&gt; &lt;/span&gt;gmail-trash
Master&lt;span class="w"&gt; &lt;/span&gt;:gmail-remote:&lt;span class="s2"&gt;&amp;quot;[Gmail]/Trash&amp;quot;&lt;/span&gt;
Slave&lt;span class="w"&gt; &lt;/span&gt;:gmail-local:trash
Create&lt;span class="w"&gt; &lt;/span&gt;Both
Expunge&lt;span class="w"&gt; &lt;/span&gt;Both
SyncState&lt;span class="w"&gt; &lt;/span&gt;*

Channel&lt;span class="w"&gt; &lt;/span&gt;gmail-all
Master&lt;span class="w"&gt; &lt;/span&gt;:gmail-remote:&lt;span class="s2"&gt;&amp;quot;[Gmail]/All Mail&amp;quot;&lt;/span&gt;
Slave&lt;span class="w"&gt; &lt;/span&gt;:gmail-local:all
Create&lt;span class="w"&gt; &lt;/span&gt;Both
Expunge&lt;span class="w"&gt; &lt;/span&gt;Both
SyncState&lt;span class="w"&gt; &lt;/span&gt;*

Channel&lt;span class="w"&gt; &lt;/span&gt;gmail-sent
Master&lt;span class="w"&gt; &lt;/span&gt;:gmail-remote:&lt;span class="s2"&gt;&amp;quot;[Gmail]/Sent Mail&amp;quot;&lt;/span&gt;
Slave&lt;span class="w"&gt; &lt;/span&gt;:gmail-local:sent
Create&lt;span class="w"&gt; &lt;/span&gt;Both
Expunge&lt;span class="w"&gt; &lt;/span&gt;Both
SyncState&lt;span class="w"&gt; &lt;/span&gt;*

Channel&lt;span class="w"&gt; &lt;/span&gt;gmail-allChannel&lt;span class="w"&gt; &lt;/span&gt;gmail-starred
Master&lt;span class="w"&gt; &lt;/span&gt;:gmail-remote:&lt;span class="s2"&gt;&amp;quot;[Gmail]/Starred&amp;quot;&lt;/span&gt;
Slave&lt;span class="w"&gt; &lt;/span&gt;:gmail-local:starred
Create&lt;span class="w"&gt; &lt;/span&gt;Both
Expunge&lt;span class="w"&gt; &lt;/span&gt;Both
SyncState&lt;span class="w"&gt; &lt;/span&gt;*


&lt;span class="c1"&gt;############################################&lt;/span&gt;
&lt;span class="c1"&gt;#&lt;/span&gt;
&lt;span class="c1"&gt;#       hotmail channels&lt;/span&gt;
&lt;span class="c1"&gt;#&lt;/span&gt;
&lt;span class="c1"&gt;###########################################&lt;/span&gt;

Channel&lt;span class="w"&gt; &lt;/span&gt;hotmail-trash
Master&lt;span class="w"&gt; &lt;/span&gt;:hotmail-remote:&lt;span class="s2"&gt;&amp;quot;Trash&amp;quot;&lt;/span&gt;
Slave&lt;span class="w"&gt; &lt;/span&gt;:hotmail-local:trash
Create&lt;span class="w"&gt; &lt;/span&gt;Both
Expunge&lt;span class="w"&gt; &lt;/span&gt;Both
SyncState&lt;span class="w"&gt; &lt;/span&gt;*

Channel&lt;span class="w"&gt; &lt;/span&gt;hotmail-inbox
Master&lt;span class="w"&gt; &lt;/span&gt;:hotmail-remote:&lt;span class="s2"&gt;&amp;quot;Inbox&amp;quot;&lt;/span&gt;
Slave&lt;span class="w"&gt; &lt;/span&gt;:hotmail-local:inbox
Create&lt;span class="w"&gt; &lt;/span&gt;Both
Expunge&lt;span class="w"&gt; &lt;/span&gt;Both
SyncState&lt;span class="w"&gt; &lt;/span&gt;*

&lt;span class="c1"&gt;# This will pull subfolders in /Inbox/&lt;/span&gt;
&lt;span class="c1"&gt;# and create &amp;quot;.sth&amp;quot; for each subdir&lt;/span&gt;
Channel&lt;span class="w"&gt; &lt;/span&gt;hotmail-inbox-sub
Master&lt;span class="w"&gt; &lt;/span&gt;:hotmail-remote:&lt;span class="s2"&gt;&amp;quot;Inbox/&amp;quot;&lt;/span&gt;
Slave&lt;span class="w"&gt; &lt;/span&gt;:hotmail-local:inbox/
Pattern&lt;span class="w"&gt; &lt;/span&gt;*
Create&lt;span class="w"&gt; &lt;/span&gt;Both
Expunge&lt;span class="w"&gt; &lt;/span&gt;Both
SyncState&lt;span class="w"&gt; &lt;/span&gt;*


Channel&lt;span class="w"&gt; &lt;/span&gt;hotmail-chat
Master&lt;span class="w"&gt; &lt;/span&gt;:hotmail-remote:&lt;span class="s2"&gt;&amp;quot;cHAT&amp;quot;&lt;/span&gt;
Slave&lt;span class="w"&gt; &lt;/span&gt;:hotmail-local:chat
Create&lt;span class="w"&gt; &lt;/span&gt;Both
Expunge&lt;span class="w"&gt; &lt;/span&gt;Both
SyncState&lt;span class="w"&gt; &lt;/span&gt;*

Channel&lt;span class="w"&gt; &lt;/span&gt;hotmail-sent
Master&lt;span class="w"&gt; &lt;/span&gt;:hotmail-remote:&lt;span class="s2"&gt;&amp;quot;Sent&amp;quot;&lt;/span&gt;
Slave&lt;span class="w"&gt; &lt;/span&gt;:hotmail-local:sent
Create&lt;span class="w"&gt; &lt;/span&gt;Both
Expunge&lt;span class="w"&gt; &lt;/span&gt;Both
SyncState&lt;span class="w"&gt; &lt;/span&gt;*



&lt;span class="c1"&gt;############################################&lt;/span&gt;
&lt;span class="c1"&gt;#&lt;/span&gt;
&lt;span class="c1"&gt;#       groups -- they are batch commands&lt;/span&gt;
&lt;span class="c1"&gt;#&lt;/span&gt;
&lt;span class="c1"&gt;###########################################&lt;/span&gt;

&lt;span class="c1"&gt;# GROUPS PUT TOGETHER CHANNELS, SO THAT WE CAN INVOKE&lt;/span&gt;
&lt;span class="c1"&gt;# MBSYNC ON A GROUP TO SYNC ALL CHANNELS&lt;/span&gt;
&lt;span class="c1"&gt;#&lt;/span&gt;
&lt;span class="c1"&gt;# FOR INSTANCE: &amp;quot;mbsync hotmail&amp;quot; GETS MAIL FROM&lt;/span&gt;
&lt;span class="c1"&gt;# &amp;quot;hotmail-inbox&amp;quot;, &amp;quot;hotmail-sent&amp;quot;, and &amp;quot;hotmail-trash&amp;quot;&lt;/span&gt;

Group&lt;span class="w"&gt; &lt;/span&gt;gmail
Channel&lt;span class="w"&gt; &lt;/span&gt;gmail-trash
Channel&lt;span class="w"&gt; &lt;/span&gt;gmail-inbox
Channel&lt;span class="w"&gt; &lt;/span&gt;gmail-sent
Channel&lt;span class="w"&gt; &lt;/span&gt;gmail-all
Channel&lt;span class="w"&gt; &lt;/span&gt;gmail-starred

Group&lt;span class="w"&gt; &lt;/span&gt;hotmail
Channel&lt;span class="w"&gt; &lt;/span&gt;hotmail-trash
Channel&lt;span class="w"&gt; &lt;/span&gt;hotmail-inbox
Channel&lt;span class="w"&gt; &lt;/span&gt;hotmail-inbox-sub
Channel&lt;span class="w"&gt; &lt;/span&gt;hotmail-chat
Channel&lt;span class="w"&gt; &lt;/span&gt;hotmail-sent
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;h1&gt;How to list remote folders&lt;/h1&gt;
&lt;p&gt;Well, to design your pull, you need to know what is on the remote
IMAP. It turned out that each IMAP server structures things
differently, eg. using &lt;code&gt;Inbox&lt;/code&gt; vs. &lt;code&gt;INBOX&lt;/code&gt;, how confusing. Helped by
&lt;a href="https://delog.wordpress.com/2011/05/10/access-imap-server-from-the-command-line-using-openssl/"&gt;this blog&lt;/a&gt;, it turned out we can &lt;em&gt;login&lt;/em&gt; into the IMAP server
(manually) and investigate what we are looking at:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;openssl&lt;span class="w"&gt; &lt;/span&gt;s_client&lt;span class="w"&gt; &lt;/span&gt;-crlf&lt;span class="w"&gt; &lt;/span&gt;-connect&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;your&lt;span class="w"&gt; &lt;/span&gt;company&lt;span class="w"&gt; &lt;/span&gt;IMAP&lt;span class="w"&gt; &lt;/span&gt;server&lt;span class="o"&gt;]&lt;/span&gt;:993
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Once you see something like this &lt;code&gt;* OK Gimap ready for requests from
200.199.23.105 o16if3544685ybc.1111&lt;/code&gt;, you are in. There won't be any
&lt;em&gt;commandline prompt&lt;/em&gt;, it just sits there. So keep going:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;tag&lt;span class="w"&gt; &lt;/span&gt;login&lt;span class="w"&gt; &lt;/span&gt;user@company.com&lt;span class="w"&gt; &lt;/span&gt;password
tag&lt;span class="w"&gt; &lt;/span&gt;LIST&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;&amp;quot;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;*&amp;quot;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Viol la! Look what we have got! &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;tag&lt;span class="w"&gt; &lt;/span&gt;login&lt;span class="w"&gt; &lt;/span&gt;fxia1@company.com&lt;span class="w"&gt; &lt;/span&gt;password
tag&lt;span class="w"&gt; &lt;/span&gt;OK&lt;span class="w"&gt; &lt;/span&gt;LOGIN&lt;span class="w"&gt; &lt;/span&gt;completed.
tag&lt;span class="w"&gt; &lt;/span&gt;LIST&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;&amp;quot;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;*&amp;quot;&lt;/span&gt;
*&lt;span class="w"&gt; &lt;/span&gt;LIST&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="se"&gt;\H&lt;/span&gt;asChildren&lt;span class="o"&gt;)&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;/&amp;quot;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;Archives
*&lt;span class="w"&gt; &lt;/span&gt;LIST&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="se"&gt;\H&lt;/span&gt;asNoChildren&lt;span class="o"&gt;)&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;/&amp;quot;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;Archives/2017
*&lt;span class="w"&gt; &lt;/span&gt;LIST&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="se"&gt;\H&lt;/span&gt;asNoChildren&lt;span class="o"&gt;)&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;/&amp;quot;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;Archives/juju mailing list&amp;quot;&lt;/span&gt;
*&lt;span class="w"&gt; &lt;/span&gt;LIST&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="se"&gt;\H&lt;/span&gt;asNoChildren&lt;span class="o"&gt;)&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;/&amp;quot;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;Calendar
*&lt;span class="w"&gt; &lt;/span&gt;LIST&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="se"&gt;\H&lt;/span&gt;asNoChildren&lt;span class="o"&gt;)&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;/&amp;quot;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;Contacts
*&lt;span class="w"&gt; &lt;/span&gt;LIST&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="se"&gt;\M&lt;/span&gt;arked&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="se"&gt;\H&lt;/span&gt;asNoChildren&lt;span class="o"&gt;)&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;/&amp;quot;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;Conversation History&amp;quot;&lt;/span&gt;
*&lt;span class="w"&gt; &lt;/span&gt;LIST&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="se"&gt;\M&lt;/span&gt;arked&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="se"&gt;\H&lt;/span&gt;asNoChildren&lt;span class="o"&gt;)&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;/&amp;quot;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;Deleted Items&amp;quot;&lt;/span&gt;
*&lt;span class="w"&gt; &lt;/span&gt;LIST&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="se"&gt;\H&lt;/span&gt;asNoChildren&lt;span class="o"&gt;)&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;/&amp;quot;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;Drafts
*&lt;span class="w"&gt; &lt;/span&gt;LIST&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="se"&gt;\M&lt;/span&gt;arked&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="se"&gt;\H&lt;/span&gt;asChildren&lt;span class="o"&gt;)&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;/&amp;quot;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;INBOX
*&lt;span class="w"&gt; &lt;/span&gt;LIST&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="se"&gt;\H&lt;/span&gt;asChildren&lt;span class="o"&gt;)&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;/&amp;quot;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;INBOX/administration
*&lt;span class="w"&gt; &lt;/span&gt;LIST&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="se"&gt;\H&lt;/span&gt;asNoChildren&lt;span class="o"&gt;)&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;/&amp;quot;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;INBOX/administration/something
*&lt;span class="w"&gt; &lt;/span&gt;LIST&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="se"&gt;\H&lt;/span&gt;asNoChildren&lt;span class="o"&gt;)&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;/&amp;quot;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;INBOX/administration/hr
*&lt;span class="w"&gt; &lt;/span&gt;LIST&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="se"&gt;\H&lt;/span&gt;asNoChildren&lt;span class="o"&gt;)&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;/&amp;quot;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;INBOX/administration/akjd
*&lt;span class="w"&gt; &lt;/span&gt;LIST&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="se"&gt;\H&lt;/span&gt;asNoChildren&lt;span class="o"&gt;)&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;/&amp;quot;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;INBOX/administration/wow
*&lt;span class="w"&gt; &lt;/span&gt;LIST&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="se"&gt;\H&lt;/span&gt;asNoChildren&lt;span class="o"&gt;)&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;/&amp;quot;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;INBOX/administration/workday
*&lt;span class="w"&gt; &lt;/span&gt;LIST&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="se"&gt;\H&lt;/span&gt;asChildren&lt;span class="o"&gt;)&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;/&amp;quot;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;INBOX/Canonical
*&lt;span class="w"&gt; &lt;/span&gt;LIST&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="se"&gt;\H&lt;/span&gt;asNoChildren&lt;span class="o"&gt;)&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;/&amp;quot;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;INBOX/Canonical/juju
*&lt;span class="w"&gt; &lt;/span&gt;LIST&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="se"&gt;\H&lt;/span&gt;asNoChildren&lt;span class="o"&gt;)&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;/&amp;quot;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;INBOX/home improvement&amp;quot;&lt;/span&gt;
*&lt;span class="w"&gt; &lt;/span&gt;LIST&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="se"&gt;\H&lt;/span&gt;asNoChildren&lt;span class="o"&gt;)&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;/&amp;quot;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;INBOX/miro
*&lt;span class="w"&gt; &lt;/span&gt;LIST&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="se"&gt;\H&lt;/span&gt;asNoChildren&lt;span class="o"&gt;)&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;/&amp;quot;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;INBOX/no need to read&amp;quot;&lt;/span&gt;
*&lt;span class="w"&gt; &lt;/span&gt;LIST&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="se"&gt;\H&lt;/span&gt;asChildren&lt;span class="o"&gt;)&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;/&amp;quot;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;INBOX/team

............
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;So the key to notice here is that this
IMAP server uses capitalized &lt;strong&gt;INBOX&lt;/strong&gt;. Therefore, to pull all
sub-folders into, we need to setup mbsync as such:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;Channel&lt;span class="w"&gt; &lt;/span&gt;your-inbox-sub
Master&lt;span class="w"&gt; &lt;/span&gt;:your-remote:&lt;span class="s2"&gt;&amp;quot;INBOX/&amp;quot;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&amp;lt;&amp;lt;--&lt;span class="w"&gt; &lt;/span&gt;must&lt;span class="w"&gt; &lt;/span&gt;match&lt;span class="w"&gt; &lt;/span&gt;what&lt;span class="w"&gt; &lt;/span&gt;you&lt;span class="w"&gt; &lt;/span&gt;saw&lt;span class="w"&gt; &lt;/span&gt;from&lt;span class="w"&gt; &lt;/span&gt;server,&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;case&lt;/span&gt;-sensitive
Slave&lt;span class="w"&gt; &lt;/span&gt;:your-local:inbox/
Pattern&lt;span class="w"&gt; &lt;/span&gt;*
Create&lt;span class="w"&gt; &lt;/span&gt;Both
Expunge&lt;span class="w"&gt; &lt;/span&gt;Both
SyncState&lt;span class="w"&gt; &lt;/span&gt;*
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Now if you issue &lt;code&gt;mbsync your-inbox-sub&lt;/code&gt; will pull in all &lt;code&gt;INBOX&lt;/code&gt; and
&lt;strong&gt;its subfolders&lt;/strong&gt;. Awesome.&lt;/p&gt;
&lt;h1&gt;gmail &amp;mdash; less secured&lt;/h1&gt;
&lt;p&gt;Sending username and pwd to login in Gmail will be blocked. A couple
things you need to do:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Go to &lt;code&gt;settings&lt;/code&gt; and &lt;strong&gt;enable&lt;/strong&gt; IMAP.&lt;/li&gt;
&lt;li&gt;Go to https://www.google.com/settings/security/lesssecureapps to
   enable &lt;code&gt;Less secured app&lt;/code&gt; setting.&lt;/li&gt;
&lt;li&gt;Make sure the folder defined in &lt;code&gt;Account&lt;/code&gt; section for local store
   actually exists (&lt;code&gt;mbsync&lt;/code&gt; will not create &lt;code&gt;~/Maildir/Hotmail&lt;/code&gt; for you!)&lt;/li&gt;
&lt;/ol&gt;
&lt;h1&gt;Outlook webmail&lt;/h1&gt;
&lt;figure class="col l6 m6 s12"&gt;
  &lt;img src="images/davmail.png"
       class="center img-responsive"&gt;
  &lt;figcaption&gt;davmail settings&lt;/figcaption&gt;
&lt;/figure&gt;

&lt;p&gt;Working outlook/exchange server is tough. The company's server changes
configuration all the time, and it completly messed up w/ IMAP login
when one server allows &lt;code&gt;PLAIN&lt;/code&gt; while another requires &lt;code&gt;NTLM&lt;/code&gt;, and so
on. It has been a nightmare, because it worked for weeks, months, and
will suddenly decided to stop working, and you don't get emails
anymore! Fall back is Thunderbird, but then, once you are used to
&lt;code&gt;mu4e&lt;/code&gt;, going back to anything looked like outlook is a pain.&lt;/p&gt;
&lt;p&gt;Finally, here is a savior,
&lt;a href="http://davmail.sourceforge.net/"&gt;davmail&lt;/a&gt;&lt;sup id="fnref:1"&gt;&lt;a class="footnote-ref" href="#fn:1"&gt;1&lt;/a&gt;&lt;/sup&gt;. It works a gateway between
your computer and outlook web mail (aka. OWA &amp;mdash; outlook web
access). So you can now point your &lt;code&gt;mbsync&lt;/code&gt; to a local port (default
&lt;code&gt;1143&lt;/code&gt;, and davmail will route mbsync's IMAP requests to the remote
OWA server, nice!&lt;/p&gt;
&lt;p&gt;The &lt;code&gt;mbsync&lt;/code&gt; config is quite straightforward:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;IMAPAccount&lt;span class="w"&gt; &lt;/span&gt;company-name
Host&lt;span class="w"&gt; &lt;/span&gt;localhost&lt;span class="w"&gt; &lt;/span&gt;&amp;lt;--&lt;span class="w"&gt; &lt;/span&gt;using&lt;span class="w"&gt; &lt;/span&gt;davmail&lt;span class="w"&gt; &lt;/span&gt;as&lt;span class="w"&gt; &lt;/span&gt;gateway
User&lt;span class="w"&gt; &lt;/span&gt;xxx
Pass&lt;span class="w"&gt; &lt;/span&gt;xxx
Port&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="m"&gt;1143&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&amp;lt;--&lt;span class="w"&gt; &lt;/span&gt;default&lt;span class="w"&gt; &lt;/span&gt;davmail&lt;span class="w"&gt; &lt;/span&gt;IMAP&lt;span class="w"&gt; &lt;/span&gt;port
SSLType&lt;span class="w"&gt; &lt;/span&gt;None
AuthMech&lt;span class="w"&gt; &lt;/span&gt;LOGIN
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;and here is the &lt;code&gt;davmail&lt;/code&gt; &lt;a href="https://fengxia41103.github.io/myblog/downloads/davmail.properties"&gt;settings&lt;/a&gt; (copy it to
&lt;code&gt;~/.davmail.properties&lt;/code&gt;). The best way to run it is to use a tmux,
then run it as background process &lt;code&gt;davmail &amp;amp;&lt;/code&gt;. Alternatively, you can
set &lt;code&gt;davmail.server=true&lt;/code&gt;, then use &lt;code&gt;nohup&lt;/code&gt;. But w/ tmux running
dettached session., I really don't see any benefit of doing this
anymore.&lt;/p&gt;
&lt;figure class="col s12"&gt;
  &lt;img src="images/mbsync%20setup.png"
       class="center img-responsive"&gt;
  &lt;figcaption&gt;My mbsync setup for retrieving and sending mails&lt;/figcaption&gt;
&lt;/figure&gt;

&lt;div class="footnote"&gt;
&lt;hr&gt;
&lt;ol&gt;
&lt;li id="fn:1"&gt;
&lt;p&gt;Btw, I was having issue w/ v5.3.1. Downgrade it to 5.2 (released
in Aug 2019) worked out better.&amp;#160;&lt;a class="footnote-backref" href="#fnref:1" title="Jump back to footnote 1 in the text"&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;</content><category term="dev"></category><category term="dev"></category></entry><entry><title>Emacs</title><link href="https://fengxia41103.github.io/myblog/emacs.html" rel="alternate"></link><published>2017-01-21T11:45:00-05:00</published><updated>2020-11-23T18:14:00-05:00</updated><author><name>Feng Xia</name></author><id>tag:fengxia41103.github.io,2017-01-21:/myblog/emacs.html</id><summary type="html">&lt;p&gt;What a wonderful editor!&lt;/p&gt;
&lt;p&gt;I wouldn't even call it an editor because it can do so much beyond
text editing. Still on the learning curve to get a grasp of what it
can do in my daily development workflow.&lt;/p&gt;
&lt;h1&gt;install emacs26&lt;/h1&gt;
&lt;p&gt;The easiest way to get this: &lt;code&gt;sudo add-apt-repository
ppa:kelleyk/emacs&lt;/code&gt;, then &lt;code&gt;apt remove emacs emacs25 &amp;amp;&amp;amp; apt update &amp;amp;&amp;amp;
apt install emacs26&lt;/code&gt;, then verify &lt;code&gt;emacs --version&lt;/code&gt;.&lt;/p&gt;
&lt;h1&gt;bootstrap &amp;amp; config&lt;/h1&gt;
&lt;p&gt;Welcome the wonderful &lt;code&gt;org-mode&lt;/code&gt; and the &lt;a href="https://fengxia41103.github.io/myblog/downloads/emacs/emacs_setup.html"&gt;config file in org-mode&lt;/a&gt;. Bootstrap is easy:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;backup your current emacs: &lt;code&gt;mv ~/.emacs.d ~/.emacs.d.bak&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;create &lt;code&gt;.emacs&lt;/code&gt;, or copy &lt;a href="https://fengxia41103.github.io/myblog/downloads/emacs/dot_emacs.el"&gt;.emacs&lt;/a&gt; to &lt;code&gt;~&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;launch emacs, sit back, and once all packages are downloaded and
   compiled, you are done.&lt;/li&gt;
&lt;/ol&gt;
&lt;h1&gt;replace in files&lt;/h1&gt;
&lt;p&gt;Replacing a string match in multiple files is common, but
tricky. Emacs doesn't make this intuitive at all. Follow these steps
to get there:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;code&gt;M-x find-grep-dired&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;Find-grep (directory)&lt;/code&gt;: is to select the root folder for the scan&lt;/li&gt;
&lt;li&gt;&lt;code&gt;Find-grep (grep regexp)&lt;/code&gt;: is the regex for the string pattern you
   are searching, eg. &lt;code&gt;"images/&lt;/code&gt; is to find anything starts with a
   double …&lt;/li&gt;&lt;/ol&gt;</summary><content type="html">&lt;p&gt;What a wonderful editor!&lt;/p&gt;
&lt;p&gt;I wouldn't even call it an editor because it can do so much beyond
text editing. Still on the learning curve to get a grasp of what it
can do in my daily development workflow.&lt;/p&gt;
&lt;h1&gt;install emacs26&lt;/h1&gt;
&lt;p&gt;The easiest way to get this: &lt;code&gt;sudo add-apt-repository
ppa:kelleyk/emacs&lt;/code&gt;, then &lt;code&gt;apt remove emacs emacs25 &amp;amp;&amp;amp; apt update &amp;amp;&amp;amp;
apt install emacs26&lt;/code&gt;, then verify &lt;code&gt;emacs --version&lt;/code&gt;.&lt;/p&gt;
&lt;h1&gt;bootstrap &amp;amp; config&lt;/h1&gt;
&lt;p&gt;Welcome the wonderful &lt;code&gt;org-mode&lt;/code&gt; and the &lt;a href="https://fengxia41103.github.io/myblog/downloads/emacs/emacs_setup.html"&gt;config file in org-mode&lt;/a&gt;. Bootstrap is easy:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;backup your current emacs: &lt;code&gt;mv ~/.emacs.d ~/.emacs.d.bak&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;create &lt;code&gt;.emacs&lt;/code&gt;, or copy &lt;a href="https://fengxia41103.github.io/myblog/downloads/emacs/dot_emacs.el"&gt;.emacs&lt;/a&gt; to &lt;code&gt;~&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;launch emacs, sit back, and once all packages are downloaded and
   compiled, you are done.&lt;/li&gt;
&lt;/ol&gt;
&lt;h1&gt;replace in files&lt;/h1&gt;
&lt;p&gt;Replacing a string match in multiple files is common, but
tricky. Emacs doesn't make this intuitive at all. Follow these steps
to get there:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;code&gt;M-x find-grep-dired&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;Find-grep (directory)&lt;/code&gt;: is to select the root folder for the scan&lt;/li&gt;
&lt;li&gt;&lt;code&gt;Find-grep (grep regexp)&lt;/code&gt;: is the regex for the string pattern you
   are searching, eg. &lt;code&gt;"images/&lt;/code&gt; is to find anything starts with a
   double quote sign and &lt;code&gt;images/&lt;/code&gt; after &amp;larr; in my attempt to
   change image from relative path to absolute path.&lt;/li&gt;
&lt;li&gt;A new buffer will open w/ the list of files that contains a match.&lt;/li&gt;
&lt;li&gt;In that buffer, press &lt;code&gt;t&lt;/code&gt; to select all (press &lt;code&gt;t&lt;/code&gt; again will
   toggle it off).&lt;/li&gt;
&lt;li&gt;Press &lt;code&gt;Q&lt;/code&gt; (capital).&lt;/li&gt;
&lt;li&gt;&lt;code&gt;Query replace regexp in marked files...&lt;/code&gt;:&lt;/li&gt;
&lt;li&gt;set the old string&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;with:&lt;/code&gt;: set new string&lt;/p&gt;
&lt;p&gt;If you skip these two steps, it will use the default (the previous replacement).
8. A buffer will open showing the line that can be replaced:&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;y&lt;/code&gt;: replace it&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;code&gt;n&lt;/code&gt;: skip&lt;/li&gt;
&lt;li&gt;&lt;code&gt;Y&lt;/code&gt;: replace all w/ YES &amp;rarr; and watch the mini buffer showing
    "x occurance" flashing so you know replacement is happening.&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;q&lt;/code&gt;: quit&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;C-x s&lt;/code&gt;, then &lt;code&gt;!&lt;/code&gt; to save all buffers.&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;I find that the easiest way to revert a mistake is to &lt;code&gt;git checkout
-f&lt;/code&gt;, then start this exercise from beginning.&lt;/p&gt;
&lt;p&gt;Happy coding.&lt;/p&gt;</content><category term="dev"></category><category term="dev"></category></entry><entry><title>Spectrwm</title><link href="https://fengxia41103.github.io/myblog/spectrwm.html" rel="alternate"></link><published>2017-01-21T11:45:00-05:00</published><updated>2017-01-21T11:45:00-05:00</updated><author><name>Feng Xia</name></author><id>tag:fengxia41103.github.io,2017-01-21:/myblog/spectrwm.html</id><summary type="html">&lt;p&gt;My favourate &lt;a href="https://wiki.archlinux.org/index.php/spectrwm"&gt;desktop manage&lt;/a&gt; which tiles windows neatly so I never
worry about cluttered view while opening and closing windows. &lt;/p&gt;
&lt;p&gt;Here is the &lt;a href="https://fengxia41103.github.io/myblog/downloads/spectrwm.conf"&gt;config&lt;/a&gt; file I'm using.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="c1"&gt;# PLEASE READ THE MAN PAGE BEFORE EDITING THIS FILE!&lt;/span&gt;
&lt;span class="c1"&gt;# http://opensource.conformal.com/cgi-bin/man-cgi?spectrwm&lt;/span&gt;

&lt;span class="c1"&gt;# colors for focussed and unfocussed window borders&lt;/span&gt;
&lt;span class="c1"&gt;# NOTE: all colors in this file are in hex! see XQueryColor for examples&lt;/span&gt;
&lt;span class="nv"&gt;color_focus&lt;/span&gt;&lt;span class="w"&gt;     &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;red
&lt;span class="nv"&gt;color_unfocus&lt;/span&gt;&lt;span class="w"&gt;       &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;rgb:88/88/88

&lt;span class="c1"&gt;# bar settings&lt;/span&gt;
&lt;span class="nv"&gt;bar_enabled&lt;/span&gt;&lt;span class="w"&gt;     &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="m"&gt;1&lt;/span&gt;
&lt;span class="nv"&gt;bar_border_width&lt;/span&gt;&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="m"&gt;1&lt;/span&gt;
bar_border&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="m"&gt;1&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt;&lt;span class="w"&gt;       &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;rgb:00/80/80
bar_color&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="m"&gt;1&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt;&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;black
bar_font_color&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="m"&gt;1&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt;&lt;span class="w"&gt;   &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;rgb:a0/a0/a0
&lt;span class="nv"&gt;bar_font&lt;/span&gt;&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;-*-terminus-medium-*-*-*-*-*-*-*-*-*-*-*
&lt;span class="c1"&gt;#bar_action     = baraction.sh&lt;/span&gt;
&lt;span class="nv"&gt;bar_action&lt;/span&gt;&lt;span class="w"&gt;      &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;conky
&lt;span class="nv"&gt;bar_delay&lt;/span&gt;&lt;span class="w"&gt;       &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="m"&gt;1&lt;/span&gt;
&lt;span class="nv"&gt;bar_justify&lt;/span&gt;&lt;span class="w"&gt;     &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;right
&lt;span class="nv"&gt;bar_at_bottom&lt;/span&gt;&lt;span class="w"&gt;       &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="m"&gt;0&lt;/span&gt;
&lt;span class="nv"&gt;stack_enabled&lt;/span&gt;&lt;span class="w"&gt;           &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="m"&gt;1&lt;/span&gt;
&lt;span class="nv"&gt;clock_enabled&lt;/span&gt;&lt;span class="w"&gt;           &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="m"&gt;1&lt;/span&gt;
&lt;span class="nv"&gt;clock_format&lt;/span&gt;&lt;span class="w"&gt;            &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;%a&lt;span class="w"&gt; &lt;/span&gt;%b&lt;span class="w"&gt; &lt;/span&gt;%d&lt;span class="w"&gt; &lt;/span&gt;%R&lt;span class="w"&gt; &lt;/span&gt;%Z&lt;span class="w"&gt; &lt;/span&gt;%Y
&lt;span class="nv"&gt;title_name_enabled&lt;/span&gt;&lt;span class="w"&gt;      &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="m"&gt;0&lt;/span&gt;
&lt;span class="nv"&gt;title_class_enabled&lt;/span&gt;&lt;span class="w"&gt;     &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="m"&gt;0&lt;/span&gt;
&lt;span class="nv"&gt;window_name_enabled&lt;/span&gt;&lt;span class="w"&gt;     &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="m"&gt;0&lt;/span&gt;
&lt;span class="nv"&gt;verbose_layout&lt;/span&gt;&lt;span class="w"&gt;          &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="m"&gt;1&lt;/span&gt;
&lt;span class="nv"&gt;focus_mode&lt;/span&gt;&lt;span class="w"&gt;              &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;default
&lt;span class="nv"&gt;disable_border&lt;/span&gt;&lt;span class="w"&gt;          &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="m"&gt;1&lt;/span&gt;
&lt;span class="nv"&gt;border_width&lt;/span&gt;&lt;span class="w"&gt;            &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="m"&gt;1&lt;/span&gt;
&lt;span class="nv"&gt;urgent_enabled&lt;/span&gt;&lt;span class="w"&gt;          &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="m"&gt;1&lt;/span&gt;

&lt;span class="c1"&gt;# spawn app&lt;/span&gt;
program&lt;span class="o"&gt;[&lt;/span&gt;term&lt;span class="o"&gt;]&lt;/span&gt;&lt;span class="w"&gt;           &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;terminator
&lt;span class="c1"&gt;#program[screenshot_all]        = screenshot.sh full&lt;/span&gt;
&lt;span class="c1"&gt;#program[screenshot_wind]= screenshot.sh window&lt;/span&gt;
&lt;span class="c1"&gt;#program[lock]          = xlock&lt;/span&gt;
&lt;span class="c1"&gt;#program[initscr]       = initscreen.sh&lt;/span&gt;
program&lt;span class="o"&gt;[&lt;/span&gt;menu&lt;span class="o"&gt;]&lt;/span&gt;&lt;span class="w"&gt;           &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;dmenu_run&lt;span class="w"&gt; &lt;/span&gt;-fn&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nv"&gt;$bar_font&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;-nb&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nv"&gt;$bar_color&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;-nf&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nv"&gt;$bar_font_color&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;-sb&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nv"&gt;$bar_border&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;-sf&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nv"&gt;$bar_color&lt;/span&gt;
&lt;span class="nv"&gt;spawn_term&lt;/span&gt;&lt;span class="w"&gt;              &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;terminator

&lt;span class="c1"&gt;# dialog box size ratio .3 &amp;gt;= r &amp;lt; 1 …&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;</summary><content type="html">&lt;p&gt;My favourate &lt;a href="https://wiki.archlinux.org/index.php/spectrwm"&gt;desktop manage&lt;/a&gt; which tiles windows neatly so I never
worry about cluttered view while opening and closing windows. &lt;/p&gt;
&lt;p&gt;Here is the &lt;a href="https://fengxia41103.github.io/myblog/downloads/spectrwm.conf"&gt;config&lt;/a&gt; file I'm using.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="c1"&gt;# PLEASE READ THE MAN PAGE BEFORE EDITING THIS FILE!&lt;/span&gt;
&lt;span class="c1"&gt;# http://opensource.conformal.com/cgi-bin/man-cgi?spectrwm&lt;/span&gt;

&lt;span class="c1"&gt;# colors for focussed and unfocussed window borders&lt;/span&gt;
&lt;span class="c1"&gt;# NOTE: all colors in this file are in hex! see XQueryColor for examples&lt;/span&gt;
&lt;span class="nv"&gt;color_focus&lt;/span&gt;&lt;span class="w"&gt;     &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;red
&lt;span class="nv"&gt;color_unfocus&lt;/span&gt;&lt;span class="w"&gt;       &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;rgb:88/88/88

&lt;span class="c1"&gt;# bar settings&lt;/span&gt;
&lt;span class="nv"&gt;bar_enabled&lt;/span&gt;&lt;span class="w"&gt;     &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="m"&gt;1&lt;/span&gt;
&lt;span class="nv"&gt;bar_border_width&lt;/span&gt;&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="m"&gt;1&lt;/span&gt;
bar_border&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="m"&gt;1&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt;&lt;span class="w"&gt;       &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;rgb:00/80/80
bar_color&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="m"&gt;1&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt;&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;black
bar_font_color&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="m"&gt;1&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt;&lt;span class="w"&gt;   &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;rgb:a0/a0/a0
&lt;span class="nv"&gt;bar_font&lt;/span&gt;&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;-*-terminus-medium-*-*-*-*-*-*-*-*-*-*-*
&lt;span class="c1"&gt;#bar_action     = baraction.sh&lt;/span&gt;
&lt;span class="nv"&gt;bar_action&lt;/span&gt;&lt;span class="w"&gt;      &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;conky
&lt;span class="nv"&gt;bar_delay&lt;/span&gt;&lt;span class="w"&gt;       &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="m"&gt;1&lt;/span&gt;
&lt;span class="nv"&gt;bar_justify&lt;/span&gt;&lt;span class="w"&gt;     &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;right
&lt;span class="nv"&gt;bar_at_bottom&lt;/span&gt;&lt;span class="w"&gt;       &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="m"&gt;0&lt;/span&gt;
&lt;span class="nv"&gt;stack_enabled&lt;/span&gt;&lt;span class="w"&gt;           &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="m"&gt;1&lt;/span&gt;
&lt;span class="nv"&gt;clock_enabled&lt;/span&gt;&lt;span class="w"&gt;           &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="m"&gt;1&lt;/span&gt;
&lt;span class="nv"&gt;clock_format&lt;/span&gt;&lt;span class="w"&gt;            &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;%a&lt;span class="w"&gt; &lt;/span&gt;%b&lt;span class="w"&gt; &lt;/span&gt;%d&lt;span class="w"&gt; &lt;/span&gt;%R&lt;span class="w"&gt; &lt;/span&gt;%Z&lt;span class="w"&gt; &lt;/span&gt;%Y
&lt;span class="nv"&gt;title_name_enabled&lt;/span&gt;&lt;span class="w"&gt;      &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="m"&gt;0&lt;/span&gt;
&lt;span class="nv"&gt;title_class_enabled&lt;/span&gt;&lt;span class="w"&gt;     &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="m"&gt;0&lt;/span&gt;
&lt;span class="nv"&gt;window_name_enabled&lt;/span&gt;&lt;span class="w"&gt;     &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="m"&gt;0&lt;/span&gt;
&lt;span class="nv"&gt;verbose_layout&lt;/span&gt;&lt;span class="w"&gt;          &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="m"&gt;1&lt;/span&gt;
&lt;span class="nv"&gt;focus_mode&lt;/span&gt;&lt;span class="w"&gt;              &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;default
&lt;span class="nv"&gt;disable_border&lt;/span&gt;&lt;span class="w"&gt;          &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="m"&gt;1&lt;/span&gt;
&lt;span class="nv"&gt;border_width&lt;/span&gt;&lt;span class="w"&gt;            &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="m"&gt;1&lt;/span&gt;
&lt;span class="nv"&gt;urgent_enabled&lt;/span&gt;&lt;span class="w"&gt;          &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="m"&gt;1&lt;/span&gt;

&lt;span class="c1"&gt;# spawn app&lt;/span&gt;
program&lt;span class="o"&gt;[&lt;/span&gt;term&lt;span class="o"&gt;]&lt;/span&gt;&lt;span class="w"&gt;           &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;terminator
&lt;span class="c1"&gt;#program[screenshot_all]        = screenshot.sh full&lt;/span&gt;
&lt;span class="c1"&gt;#program[screenshot_wind]= screenshot.sh window&lt;/span&gt;
&lt;span class="c1"&gt;#program[lock]          = xlock&lt;/span&gt;
&lt;span class="c1"&gt;#program[initscr]       = initscreen.sh&lt;/span&gt;
program&lt;span class="o"&gt;[&lt;/span&gt;menu&lt;span class="o"&gt;]&lt;/span&gt;&lt;span class="w"&gt;           &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;dmenu_run&lt;span class="w"&gt; &lt;/span&gt;-fn&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nv"&gt;$bar_font&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;-nb&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nv"&gt;$bar_color&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;-nf&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nv"&gt;$bar_font_color&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;-sb&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nv"&gt;$bar_border&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;-sf&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nv"&gt;$bar_color&lt;/span&gt;
&lt;span class="nv"&gt;spawn_term&lt;/span&gt;&lt;span class="w"&gt;              &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;terminator

&lt;span class="c1"&gt;# dialog box size ratio .3 &amp;gt;= r &amp;lt; 1&lt;/span&gt;
&lt;span class="c1"&gt;# dialog_ratio          = 0.6&lt;/span&gt;

&lt;span class="c1"&gt;# Split a non-Xrandr dual head setup into one region per monitor&lt;/span&gt;
&lt;span class="c1"&gt;# (non-standard driver-based multihead is not seen by spectrwm)&lt;/span&gt;
&lt;span class="c1"&gt;# region                = screen[1]:1280x1024+0+0&lt;/span&gt;
&lt;span class="c1"&gt;# region                = screen[1]:1280x1024+1280+0&lt;/span&gt;

&lt;span class="c1"&gt;# Launch applications in a workspace of choice&lt;/span&gt;
&lt;span class="nv"&gt;autorun&lt;/span&gt;&lt;span class="w"&gt;         &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;ws&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="m"&gt;1&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt;:terminator
&lt;span class="nv"&gt;autorun&lt;/span&gt;&lt;span class="w"&gt;         &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;ws&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="m"&gt;2&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt;:google-chrome
&lt;span class="nv"&gt;autorun&lt;/span&gt;&lt;span class="w"&gt;         &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;ws&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="m"&gt;3&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt;:emacs

&lt;span class="c1"&gt;# workspace layout&lt;/span&gt;
&lt;span class="c1"&gt;# layout                = ws[1]:4:0:0:0:vertical&lt;/span&gt;
&lt;span class="c1"&gt;# layout                = ws[2]:0:0:0:0:horizontal&lt;/span&gt;
&lt;span class="c1"&gt;# layout                = ws[3]:0:0:0:0:fullscreen&lt;/span&gt;

&lt;span class="c1"&gt;# mod key, (windows key is Mod4) (apple key on OSX is Mod2)&lt;/span&gt;
&lt;span class="nv"&gt;modkey&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;Mod4

&lt;span class="c1"&gt;# Clear key bindings and load new key bindings from the specified file.&lt;/span&gt;
&lt;span class="c1"&gt;# This allows you to load pre-defined key bindings for your keyboard layout.&lt;/span&gt;
&lt;span class="c1"&gt;# keyboard_mapping = ~/.spectrwm_us.conf&lt;/span&gt;

&lt;span class="c1"&gt;# quirks&lt;/span&gt;
&lt;span class="c1"&gt;# remove with: quirk[class:name] = NONE&lt;/span&gt;
&lt;span class="c1"&gt;# quirk[MPlayer:xv]                     = FLOAT + FULLSCREEN + FOCUSPREV&lt;/span&gt;
quirk&lt;span class="o"&gt;[&lt;/span&gt;OpenOffice.org&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="m"&gt;2&lt;/span&gt;.4:VCLSalFrame&lt;span class="o"&gt;]&lt;/span&gt;&lt;span class="w"&gt;   &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;FLOAT
quirk&lt;span class="o"&gt;[&lt;/span&gt;OpenOffice.org&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="m"&gt;3&lt;/span&gt;.0:VCLSalFrame&lt;span class="o"&gt;]&lt;/span&gt;&lt;span class="w"&gt;   &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;FLOAT
quirk&lt;span class="o"&gt;[&lt;/span&gt;OpenOffice.org&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="m"&gt;3&lt;/span&gt;.1:VCLSalFrame&lt;span class="o"&gt;]&lt;/span&gt;&lt;span class="w"&gt;   &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;FLOAT
&lt;span class="c1"&gt;# quirk[Firefox-bin:firefox-bin]                = TRANSSZ&lt;/span&gt;
&lt;span class="c1"&gt;# quirk[Firefox:Dialog]                 = FLOAT&lt;/span&gt;
&lt;span class="c1"&gt;# quirk[Gimp:gimp]                      = FLOAT + ANYWHERE&lt;/span&gt;
&lt;span class="c1"&gt;# quirk[XTerm:xterm]                    = XTERM_FONTADJ&lt;/span&gt;
&lt;span class="c1"&gt;# quirk[xine:Xine Window]                       = FLOAT + ANYWHERE&lt;/span&gt;
&lt;span class="c1"&gt;# quirk[Xitk:Xitk Combo]                        = FLOAT + ANYWHERE&lt;/span&gt;
&lt;span class="c1"&gt;# quirk[xine:xine Panel]                        = FLOAT + ANYWHERE&lt;/span&gt;
&lt;span class="c1"&gt;# quirk[Xitk:Xine Window]                       = FLOAT + ANYWHERE&lt;/span&gt;
&lt;span class="c1"&gt;# quirk[xine:xine Video Fullscreen Window] = FULLSCREEN + FLOAT&lt;/span&gt;
&lt;span class="c1"&gt;# quirk[pcb:pcb]                                = FLOAT&lt;/span&gt;

&lt;span class="c1"&gt;# EXAMPLE: define firefox program and bind to key&lt;/span&gt;
&lt;span class="c1"&gt;# program[firefox]      = firefox http://spectrwm.org/&lt;/span&gt;
&lt;span class="c1"&gt;# bind[firefox]         = MOD+Shift+b&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;For this to work properly, also install &lt;a href="https://github.com/brndnmtthws/conky"&gt;conky&lt;/a&gt; and write
&lt;em&gt;.conkyrc&lt;/em&gt; file:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;out_to_x&lt;span class="w"&gt; &lt;/span&gt;no
out_to_console&lt;span class="w"&gt; &lt;/span&gt;yes
update_interval&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="m"&gt;1&lt;/span&gt;.0
total_run_times&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="m"&gt;0&lt;/span&gt;
use_spacer&lt;span class="w"&gt; &lt;/span&gt;none
TEXT
Up:&lt;span class="si"&gt;${&lt;/span&gt;&lt;span class="nv"&gt;uptime_short&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;|&lt;/span&gt;Temp:&lt;span class="si"&gt;${&lt;/span&gt;&lt;span class="nv"&gt;acpitemp&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;C&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;|&lt;/span&gt;Batt:&lt;span class="si"&gt;${&lt;/span&gt;&lt;span class="nv"&gt;battery_short&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;|&lt;/span&gt;&lt;span class="si"&gt;${&lt;/span&gt;&lt;span class="nv"&gt;addr&lt;/span&gt;&lt;span class="p"&gt; wlan0&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;|&lt;/span&gt;RAM:&lt;span class="nv"&gt;$memperc&lt;/span&gt;%&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;|&lt;/span&gt;CPU:&lt;span class="si"&gt;${&lt;/span&gt;&lt;span class="nv"&gt;cpu&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;%&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;|&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="si"&gt;${&lt;/span&gt;&lt;span class="nv"&gt;downspeedf&lt;/span&gt;&lt;span class="p"&gt; wlan0&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;</content><category term="dev"></category><category term="dev"></category></entry><entry><title>Deployment architecture</title><link href="https://fengxia41103.github.io/myblog/deployment%20architecture.html" rel="alternate"></link><published>2016-09-09T23:05:00-04:00</published><updated>2017-08-22T21:52:00-04:00</updated><author><name>Feng Xia</name></author><id>tag:fengxia41103.github.io,2016-09-09:/myblog/deployment architecture.html</id><summary type="html">&lt;p&gt;Deployment strategy for &lt;a href="https://fengxia41103.github.io/myblog/general system architecture.html"&gt;system architecture&lt;/a&gt; is centered around AWS
services: EC2 for application server, RDS for database, and S3 for
static files and media files.  AWS does have message service as
well. But to maintain a fair level of portability, I am not using
that. Instead, vanilla message broker such as Redis or RabbitMQ is
used and is deployed on a separate EC2 instance.  In general I tend to
have concerns over investing a critical system component to a 3rd
party service because they usually will introduce some customization
quirks that make it a real pain when migrating to another service
provider or platform later on. I have not run into such problem with
AWS, but would like to keep options open.&lt;/p&gt;
&lt;figure class="col l12 m12 s12"&gt;
  &lt;img src="images/deployment_architecture.png"
  &lt;figcaption&gt;Deployment architecture&lt;/figcaption&gt;
&lt;/figure&gt;

&lt;p&gt;Notice that I do not have multiple database in the diagram. First of
all, I have not had use of DB cluster. Secondly, database replica is
covered by AWS snapshot which has been a great fail-safe tool for
system backup and recovery.  This brings up an important point I'd
like to …&lt;/p&gt;</summary><content type="html">&lt;p&gt;Deployment strategy for &lt;a href="https://fengxia41103.github.io/myblog/general system architecture.html"&gt;system architecture&lt;/a&gt; is centered around AWS
services: EC2 for application server, RDS for database, and S3 for
static files and media files.  AWS does have message service as
well. But to maintain a fair level of portability, I am not using
that. Instead, vanilla message broker such as Redis or RabbitMQ is
used and is deployed on a separate EC2 instance.  In general I tend to
have concerns over investing a critical system component to a 3rd
party service because they usually will introduce some customization
quirks that make it a real pain when migrating to another service
provider or platform later on. I have not run into such problem with
AWS, but would like to keep options open.&lt;/p&gt;
&lt;figure class="col l12 m12 s12"&gt;
  &lt;img src="images/deployment_architecture.png"
  &lt;figcaption&gt;Deployment architecture&lt;/figcaption&gt;
&lt;/figure&gt;

&lt;p&gt;Notice that I do not have multiple database in the diagram. First of
all, I have not had use of DB cluster. Secondly, database replica is
covered by AWS snapshot which has been a great fail-safe tool for
system backup and recovery.  This brings up an important point I'd
like to advocate:&lt;/p&gt;
&lt;blockquote&gt;
    AWS services are in general far better
    than a setup that a developer can pull off.
&lt;/blockquote&gt;

&lt;p&gt;So unless one has a strong case, don't reinvent the wheels.
Use AWS to save myself from building these essential infrastructure
so that I could focus on writing application code to solve
client's real problems. Service such as &lt;a href="https://www.heroku.com/"&gt;Heroku&lt;/a&gt; and &lt;a href="https://cloud.google.com/appengine/"&gt;GAE&lt;/a&gt;
are even more hands-off if the application architecture
can fit into their platform.&lt;/p&gt;</content><category term="dev"></category><category term="dev"></category></entry><entry><title>General system architecture</title><link href="https://fengxia41103.github.io/myblog/general%20system%20architecture.html" rel="alternate"></link><published>2016-09-08T21:15:00-04:00</published><updated>2018-10-17T00:00:00-04:00</updated><author><name>Feng Xia</name></author><id>tag:fengxia41103.github.io,2016-09-08:/myblog/general system architecture.html</id><summary type="html">&lt;figure class="col l6 m6 s12"&gt;
  &lt;img src="images/architecture_joke.jpg"
       class="center img-responsive"&gt;
&lt;/figure&gt;

&lt;p&gt;The word "system architect" has been puzzling to me.  I was hired to
be one at one point. But it was not a comfortable position. How much
do we understand the business?  What is the problem we are to solve?
How does the current "architecture" fail? What is the downfall of this
(or any) proposal? Overall, I feel an architecture emerges along with
development and research. The more we start to understand the client's
needs, habits, workflows, relationships, priorities, the more
information we have when evaluating and making decisions on whether
one piece in the stack fits or not, and why so. It is, IMHO, a
backwards process when an architecture is pre-defined as if it is set
in stone. We need to start from somewhere, but keeping in mind that it
evolves and shifts like a living organ.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;System architecture evolves and shifts like a living organ.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;This is a system architecture I have been using recently in
projects. It is divided into four components:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;foreground service provider&lt;/strong&gt;: this includes machinery that
  interface with …&lt;/p&gt;&lt;/li&gt;&lt;/ol&gt;</summary><content type="html">&lt;figure class="col l6 m6 s12"&gt;
  &lt;img src="images/architecture_joke.jpg"
       class="center img-responsive"&gt;
&lt;/figure&gt;

&lt;p&gt;The word "system architect" has been puzzling to me.  I was hired to
be one at one point. But it was not a comfortable position. How much
do we understand the business?  What is the problem we are to solve?
How does the current "architecture" fail? What is the downfall of this
(or any) proposal? Overall, I feel an architecture emerges along with
development and research. The more we start to understand the client's
needs, habits, workflows, relationships, priorities, the more
information we have when evaluating and making decisions on whether
one piece in the stack fits or not, and why so. It is, IMHO, a
backwards process when an architecture is pre-defined as if it is set
in stone. We need to start from somewhere, but keeping in mind that it
evolves and shifts like a living organ.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;System architecture evolves and shifts like a living organ.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;This is a system architecture I have been using recently in
projects. It is divided into four components:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;foreground service provider&lt;/strong&gt;: this includes machinery that
  interface with web server, taking HTTP and AJAX requests, and
  generate response to request.  The core of this component is Python
  &lt;a href="https://www.djangoproject.com/"&gt;Django&lt;/a&gt;. Django is chosen for its reputation, for my past
  experience, for its maturity, excellent documentations and a broad
  user base. Backed by Python, it is a great &lt;em&gt;starting point&lt;/em&gt; for
  building a web application.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;background service provider&lt;/strong&gt;: it handles all code executions
  that do &lt;strong&gt;not&lt;/strong&gt; need be in synchronous fashion with a user request.
  The key here is task queue integrated using &lt;a href="http://www.celeryproject.org/"&gt;Celery&lt;/a&gt; with &lt;a href="http://redis.io/"&gt;Redis&lt;/a&gt;
  or &lt;a href="https://www.rabbitmq.com/"&gt;RabbitMQ&lt;/a&gt;. These replaced what used to be messy multithreading
  code that were prone to error and hard to debug. Besides,
  architecture wise these message queues extend well, so it's a
  natural fit for cloud deployment.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;data storage service&lt;/strong&gt;: traditional RDBMS and file system. A
  consideration here is certainly to include remote storage such as
  AWS. The key point is to separate static data (style sheets, JS
  scripts, media files) from dynamic application data. A side note. I
  think the distinction is rather misleading since most application
  data become stale(static) also once generated, and many image data
  nowadays are saved in DB (so system backup takes one step instead of
  two).  Both have its use.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;integration service&lt;/strong&gt;: customized code to implement third
  party system integration. In general, CRUD operations are handled
  through frontend API(REST) service. There is also so called
  &lt;em&gt;backdoor tasks&lt;/em&gt; that covers cases where data may get pumped
  directly into data storage via ORM layers. Such cases may include
  initial data import, runtime data synchronization, data extraction
  and system backup.&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;figure class="s12 center"&gt;
  &lt;img src="images/system%20architecture.png"/&gt;
    &lt;figcaption&gt;Feng's system architecture diagram&lt;/figcaption&gt;
&lt;/figure&gt;

&lt;p&gt;The beauty of this architecture is that message queue becomes a
distribution hub where tasks are dispatched to different destination
end point for processing. This greatly reduces the complexity of
inter- and intra- system communication. Knowing that queue servers can
be easily extended if load become heavy is yet another benefit to have
in term of scalability.&lt;/p&gt;
&lt;p&gt;As shown in the diagram, background queue tasks are being used solely
to generate and consume &lt;strong&gt;model data&lt;/strong&gt; (including media data since
media has always some meta data components).  This means they do
&lt;strong&gt;not&lt;/strong&gt; participate to generate inline view response. Instead, they
take instruction from user input and distribute those intensive code
for asynchronous processing.  This remedies Django's synchronous
nature (I say it is synchronous in the sense of that a Django's native
process will receive and process view request without interrupt or
callback.  Django &lt;a href="https://docs.djangoproject.com/en/1.10/topics/signals/"&gt;signals&lt;/a&gt; are asynchronous,
however.) where a long running code section could bring the entire
application to halt.&lt;/p&gt;</content><category term="dev"></category><category term="dev"></category></entry><entry><title>DIY Pelican theme</title><link href="https://fengxia41103.github.io/myblog/pelican%20theme.html" rel="alternate"></link><published>2016-09-04T11:00:00-04:00</published><updated>2016-09-04T11:00:00-04:00</updated><author><name>Feng Xia</name></author><id>tag:fengxia41103.github.io,2016-09-04:/myblog/pelican theme.html</id><summary type="html">&lt;p&gt;As a Python house, &lt;a href="http://blog.getpelican.com"&gt;Pelican&lt;/a&gt; is definitely a winner for our blog
site. But like any software engineer who hold a high standard to his
work, I got turned off by all the &lt;a href="http://www.pelicanthemes.com/)"&gt;available themes&lt;/a&gt;.  "Ugly",
"Where is the document?", "Why my translation is not shown?", I felt
running in a maze where there were reflections of exit everywhere, but
none was real. "Well, if it's in Python, we can make one." Solution is
that simple.  Besides, we love &lt;a href="http://jinja.pocoo.org/docs/dev/"&gt;Jinja2&lt;/a&gt; template systems, and
Pelican has spelled out &lt;a href="http://docs.getpelican.com/en/3.6.3/themes.html#templates-and-variables"&gt;everything&lt;/a&gt; we need.&lt;/p&gt;
&lt;p&gt;Quickly we wrote down a few on wish list:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;The design must be based on &lt;a href="http://getbootstrap.com/components/"&gt;Bootstrap&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Includes &lt;a href="http://fontawesome.io/icons/"&gt;Fontawesome&lt;/a&gt;, &lt;a href="https://datatables.net/"&gt;Datatable&lt;/a&gt;, &lt;a href="http://lokeshdhakar.com/projects/lightbox2/"&gt;Lightbox2&lt;/a&gt;, and &lt;a href="http://alexgorbatchev.com/SyntaxHighlighter/"&gt;SyntaxHighlighter&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;Reuse elements I have designed for &lt;a href="https://fengxia41103.github.io/myblog/demo.html"&gt;showcases&lt;/a&gt;, such as layout, CSS and images.&lt;/li&gt;
&lt;li&gt;Colors we like: &lt;font color="#337ab7"&gt;blue(#337ab7)&lt;/font&gt; and &lt;span class="myhighlight"&gt;red(#d52349)&lt;/span&gt;.&lt;/li&gt;
&lt;li&gt;&lt;a href="https://fonts.google.com/"&gt;Google fonts&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;The actual work was pretty straightforward. Follow Pelican official document
to set up a working directory:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;├──&lt;span class="w"&gt; &lt;/span&gt;static
│&lt;span class="w"&gt;   &lt;/span&gt;├──&lt;span class="w"&gt; &lt;/span&gt;bower_components
│&lt;span class="w"&gt;   &lt;/span&gt;├──&lt;span class="w"&gt; &lt;/span&gt;css
│&lt;span class="w"&gt;   &lt;/span&gt;│&lt;span class="w"&gt;   &lt;/span&gt;└──&lt;span class="w"&gt; &lt;/span&gt;my.css
│&lt;span class="w"&gt;   &lt;/span&gt;└──&lt;span class="w"&gt; &lt;/span&gt;js
│&lt;span class="w"&gt;       &lt;/span&gt;├──&lt;span class="w"&gt; &lt;/span&gt;html5shiv.min.js
│&lt;span class="w"&gt;       &lt;/span&gt;└──&lt;span class="w"&gt; &lt;/span&gt;respond.min.js
└──&lt;span class="w"&gt; &lt;/span&gt;templates
&lt;span class="w"&gt;    &lt;/span&gt;├──&lt;span class="w"&gt; &lt;/span&gt;article.html
&lt;span class="w"&gt;    &lt;/span&gt;├──&lt;span class="w"&gt; &lt;/span&gt;author.html
&lt;span class="w"&gt;    &lt;/span&gt;├──&lt;span class="w"&gt; &lt;/span&gt;category.html
&lt;span class="w"&gt;    &lt;/span&gt;├──&lt;span class="w"&gt; &lt;/span&gt;index.html
&lt;span class="w"&gt;    &lt;/span&gt;├──&lt;span class="w"&gt; &lt;/span&gt;layout.html
&lt;span class="w"&gt;    &lt;/span&gt;├──&lt;span class="w"&gt; &lt;/span&gt;page …&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;</summary><content type="html">&lt;p&gt;As a Python house, &lt;a href="http://blog.getpelican.com"&gt;Pelican&lt;/a&gt; is definitely a winner for our blog
site. But like any software engineer who hold a high standard to his
work, I got turned off by all the &lt;a href="http://www.pelicanthemes.com/)"&gt;available themes&lt;/a&gt;.  "Ugly",
"Where is the document?", "Why my translation is not shown?", I felt
running in a maze where there were reflections of exit everywhere, but
none was real. "Well, if it's in Python, we can make one." Solution is
that simple.  Besides, we love &lt;a href="http://jinja.pocoo.org/docs/dev/"&gt;Jinja2&lt;/a&gt; template systems, and
Pelican has spelled out &lt;a href="http://docs.getpelican.com/en/3.6.3/themes.html#templates-and-variables"&gt;everything&lt;/a&gt; we need.&lt;/p&gt;
&lt;p&gt;Quickly we wrote down a few on wish list:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;The design must be based on &lt;a href="http://getbootstrap.com/components/"&gt;Bootstrap&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Includes &lt;a href="http://fontawesome.io/icons/"&gt;Fontawesome&lt;/a&gt;, &lt;a href="https://datatables.net/"&gt;Datatable&lt;/a&gt;, &lt;a href="http://lokeshdhakar.com/projects/lightbox2/"&gt;Lightbox2&lt;/a&gt;, and &lt;a href="http://alexgorbatchev.com/SyntaxHighlighter/"&gt;SyntaxHighlighter&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;Reuse elements I have designed for &lt;a href="https://fengxia41103.github.io/myblog/demo.html"&gt;showcases&lt;/a&gt;, such as layout, CSS and images.&lt;/li&gt;
&lt;li&gt;Colors we like: &lt;font color="#337ab7"&gt;blue(#337ab7)&lt;/font&gt; and &lt;span class="myhighlight"&gt;red(#d52349)&lt;/span&gt;.&lt;/li&gt;
&lt;li&gt;&lt;a href="https://fonts.google.com/"&gt;Google fonts&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;The actual work was pretty straightforward. Follow Pelican official document
to set up a working directory:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;├──&lt;span class="w"&gt; &lt;/span&gt;static
│&lt;span class="w"&gt;   &lt;/span&gt;├──&lt;span class="w"&gt; &lt;/span&gt;bower_components
│&lt;span class="w"&gt;   &lt;/span&gt;├──&lt;span class="w"&gt; &lt;/span&gt;css
│&lt;span class="w"&gt;   &lt;/span&gt;│&lt;span class="w"&gt;   &lt;/span&gt;└──&lt;span class="w"&gt; &lt;/span&gt;my.css
│&lt;span class="w"&gt;   &lt;/span&gt;└──&lt;span class="w"&gt; &lt;/span&gt;js
│&lt;span class="w"&gt;       &lt;/span&gt;├──&lt;span class="w"&gt; &lt;/span&gt;html5shiv.min.js
│&lt;span class="w"&gt;       &lt;/span&gt;└──&lt;span class="w"&gt; &lt;/span&gt;respond.min.js
└──&lt;span class="w"&gt; &lt;/span&gt;templates
&lt;span class="w"&gt;    &lt;/span&gt;├──&lt;span class="w"&gt; &lt;/span&gt;article.html
&lt;span class="w"&gt;    &lt;/span&gt;├──&lt;span class="w"&gt; &lt;/span&gt;author.html
&lt;span class="w"&gt;    &lt;/span&gt;├──&lt;span class="w"&gt; &lt;/span&gt;category.html
&lt;span class="w"&gt;    &lt;/span&gt;├──&lt;span class="w"&gt; &lt;/span&gt;index.html
&lt;span class="w"&gt;    &lt;/span&gt;├──&lt;span class="w"&gt; &lt;/span&gt;layout.html
&lt;span class="w"&gt;    &lt;/span&gt;├──&lt;span class="w"&gt; &lt;/span&gt;page.html
&lt;span class="w"&gt;    &lt;/span&gt;└──&lt;span class="w"&gt; &lt;/span&gt;tag.html
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;&lt;code&gt;bower_components&lt;/code&gt; has all the third party libraries.  The key is the
&lt;code&gt;layout.html&lt;/code&gt; which is the root template of all others.  Once this is
set up, creating an individual page is simple. Just replace the &lt;code&gt;{%
block content %}&lt;/code&gt; with relevant content and you are done.  &lt;/p&gt;
&lt;p&gt;Like what you see? Roll up your sleeves and make a new theme. 1,2,3, Go!&lt;/p&gt;</content><category term="dev"></category><category term="dev"></category></entry><entry><title>Buildbot continuous integration setup</title><link href="https://fengxia41103.github.io/myblog/buildbot.html" rel="alternate"></link><published>2016-07-20T10:45:00-04:00</published><updated>2016-07-20T10:45:00-04:00</updated><author><name>Feng Xia</name></author><id>tag:fengxia41103.github.io,2016-07-20:/myblog/buildbot.html</id><summary type="html">&lt;p&gt;The whole point of quick development cycle is to shorten
the path between a verbal or written requirement, and an actionable
application that reflects an implementation of this requirement. Therefore,
it becomes crucial to set up an CI environment not only to facilitate
development and testing, but to enforce our practice of agile prototyping
by setting up a complete automated test instance for our clients that closely
mirrors development progress. Once achieved, clients and developers can now
truely accalaim that they are &lt;em&gt;on the same page&lt;/em&gt;.&lt;/p&gt;
&lt;h1&gt;Buildbot&lt;/h1&gt;
&lt;p&gt;We chose &lt;a href="http://buildbot.net/"&gt;buildbot&lt;/a&gt; as our CI tool.
Another common choice is the &lt;a href="https://jenkins.io/"&gt;jenkins&lt;/a&gt;. Jenkins
is in Java. So in order to maintain a technology stack as consistent as
we can, we opted to buildbot for this purpose.&lt;/p&gt;
&lt;h2&gt;Installation&lt;/h2&gt;
&lt;p&gt;Create a python virtualenv and use pip is all it takes:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;$&lt;span class="w"&gt; &lt;/span&gt;workon&lt;span class="w"&gt; &lt;/span&gt;build
$&lt;span class="w"&gt; &lt;/span&gt;pip&lt;span class="w"&gt; &lt;/span&gt;install&lt;span class="w"&gt; &lt;/span&gt;buildbot
$&lt;span class="w"&gt; &lt;/span&gt;pip&lt;span class="w"&gt; &lt;/span&gt;install&lt;span class="w"&gt; &lt;/span&gt;buildbot-slave
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;For configuration, you can refer to&lt;/p&gt;
&lt;p&gt;&lt;a href="http://docs.buildbot.net/current/tutorial/firstrun.html"&gt;buildbot tutorial&lt;/a&gt;
for more details.&lt;/p&gt;
&lt;p&gt;On our test server, I have set the paths to:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;master: ~/build-master&lt;/li&gt;
&lt;li&gt;slave: ~/build-slave&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;Run service&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;activate &lt;em&gt;build&lt;/em&gt; virtualenv.&lt;/li&gt;
&lt;li&gt;to …&lt;/li&gt;&lt;/ol&gt;</summary><content type="html">&lt;p&gt;The whole point of quick development cycle is to shorten
the path between a verbal or written requirement, and an actionable
application that reflects an implementation of this requirement. Therefore,
it becomes crucial to set up an CI environment not only to facilitate
development and testing, but to enforce our practice of agile prototyping
by setting up a complete automated test instance for our clients that closely
mirrors development progress. Once achieved, clients and developers can now
truely accalaim that they are &lt;em&gt;on the same page&lt;/em&gt;.&lt;/p&gt;
&lt;h1&gt;Buildbot&lt;/h1&gt;
&lt;p&gt;We chose &lt;a href="http://buildbot.net/"&gt;buildbot&lt;/a&gt; as our CI tool.
Another common choice is the &lt;a href="https://jenkins.io/"&gt;jenkins&lt;/a&gt;. Jenkins
is in Java. So in order to maintain a technology stack as consistent as
we can, we opted to buildbot for this purpose.&lt;/p&gt;
&lt;h2&gt;Installation&lt;/h2&gt;
&lt;p&gt;Create a python virtualenv and use pip is all it takes:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;$&lt;span class="w"&gt; &lt;/span&gt;workon&lt;span class="w"&gt; &lt;/span&gt;build
$&lt;span class="w"&gt; &lt;/span&gt;pip&lt;span class="w"&gt; &lt;/span&gt;install&lt;span class="w"&gt; &lt;/span&gt;buildbot
$&lt;span class="w"&gt; &lt;/span&gt;pip&lt;span class="w"&gt; &lt;/span&gt;install&lt;span class="w"&gt; &lt;/span&gt;buildbot-slave
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;For configuration, you can refer to&lt;/p&gt;
&lt;p&gt;&lt;a href="http://docs.buildbot.net/current/tutorial/firstrun.html"&gt;buildbot tutorial&lt;/a&gt;
for more details.&lt;/p&gt;
&lt;p&gt;On our test server, I have set the paths to:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;master: ~/build-master&lt;/li&gt;
&lt;li&gt;slave: ~/build-slave&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;Run service&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;activate &lt;em&gt;build&lt;/em&gt; virtualenv.&lt;/li&gt;
&lt;li&gt;to start master: buildbot start build-master&lt;/li&gt;
&lt;li&gt;to start slave: buildslave start build-slave&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;To view and administrate our &lt;a href="http://fengxia.co:8011"&gt;CI server&lt;/a&gt;:
* username: admin
* pwd: xxxxxx&lt;/p&gt;
&lt;p&gt;To restart master and slave:
* master: buildbot restart build-master
* slave: buildslave restart build-slave&lt;/p&gt;
&lt;p&gt;If config has been modified, it is useful to run &lt;em&gt;buildbot checkconfig build-master&lt;/em&gt;
to check configurations for error.&lt;/p&gt;
&lt;p&gt;Note that it is recommended to start master before the slave.
In practice I have not experienced any problem if this order was reversed.&lt;/p&gt;
&lt;h2&gt;Build master configurations&lt;/h2&gt;
&lt;p&gt;We modified the stock &lt;em&gt;master.cfg&lt;/em&gt; to make slaves modular. With this,
adding a new slave only requires two changes:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;import slave's .py&lt;/li&gt;
&lt;li&gt;add slave configurations to master (nearly a copy and paste)&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Sample &lt;em&gt;master.cfg&lt;/em&gt; is shown here:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;    &lt;span class="c1"&gt;# -*- python -*-&lt;/span&gt;
    &lt;span class="c1"&gt;# ex: set syntax=python:&lt;/span&gt;

    &lt;span class="kn"&gt;from&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nn"&gt;buildbot.plugins&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;
    &lt;span class="kn"&gt;from&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nn"&gt;buildbot.plugins&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;steps&lt;/span&gt;
    &lt;span class="kn"&gt;from&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nn"&gt;buildbot.plugins&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;status&lt;/span&gt;
    &lt;span class="kn"&gt;from&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nn"&gt;buildbot.status&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;html&lt;/span&gt;
    &lt;span class="kn"&gt;from&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nn"&gt;buildbot.status.web&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;authz&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;auth&lt;/span&gt;

    &lt;span class="c1"&gt;# &amp;lt;====================================&lt;/span&gt;
    &lt;span class="c1"&gt;# import slave configuration&lt;/span&gt;
    &lt;span class="kn"&gt;import&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nn"&gt;test_gkp&lt;/span&gt;
    &lt;span class="c1"&gt;# &amp;lt;====================================&lt;/span&gt;

    &lt;span class="c1"&gt;# This is the dictionary that the buildmaster pays attention to. We also use&lt;/span&gt;
    &lt;span class="c1"&gt;# a shorter alias to save typing.&lt;/span&gt;
    &lt;span class="n"&gt;c&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;BuildmasterConfig&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;

        &lt;span class="c1"&gt;####### CHANGESOURCES&lt;/span&gt;
        &lt;span class="c1"&gt;# the &amp;#39;change_source&amp;#39; setting tells the buildmaster how it should find out&lt;/span&gt;
        &lt;span class="c1"&gt;# about source code changes.  Here we point to the buildbot clone of pyflakes.&lt;/span&gt;
        &lt;span class="s1"&gt;&amp;#39;change_source&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;[],&lt;/span&gt;

        &lt;span class="c1"&gt;####### SCHEDULERS&lt;/span&gt;
        &lt;span class="c1"&gt;# Configure the Schedulers, which decide how to react to incoming changes.  In this&lt;/span&gt;
        &lt;span class="c1"&gt;# case, just kick off a &amp;#39;runtests&amp;#39; build&lt;/span&gt;
        &lt;span class="s1"&gt;&amp;#39;schedulers&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;[],&lt;/span&gt;
        &lt;span class="s1"&gt;&amp;#39;builders&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;[]&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;

    &lt;span class="c1"&gt;# &amp;lt;====================================&lt;/span&gt;
    &lt;span class="c1"&gt;# Add slave configuration to master&lt;/span&gt;
    &lt;span class="n"&gt;target&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;test_gkp&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;MyTarget&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
    &lt;span class="n"&gt;c&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;change_source&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;+=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;target&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;change_source&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
    &lt;span class="n"&gt;c&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;schedulers&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;+=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;target&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;scheduler&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;target&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;force_scheduler&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
    &lt;span class="n"&gt;c&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;builders&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;+=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;target&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;builder&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
    &lt;span class="c1"&gt;# &amp;lt;====================================&lt;/span&gt;

    &lt;span class="c1"&gt;####### BUILDSLAVES&lt;/span&gt;

    &lt;span class="c1"&gt;# The &amp;#39;slaves&amp;#39; list defines the set of recognized buildslaves. Each element is&lt;/span&gt;
    &lt;span class="c1"&gt;# a BuildSlave object, specifying a unique slave name and password.  The same&lt;/span&gt;
    &lt;span class="c1"&gt;# slave name and password must be configured on the slave.&lt;/span&gt;
    &lt;span class="n"&gt;slave1&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;buildslave&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;BuildSlave&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;myslave&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;xxxxxx&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;c&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;slaves&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;slave1&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;

    &lt;span class="c1"&gt;# &amp;#39;protocols&amp;#39; contains information about protocols which master will use for&lt;/span&gt;
    &lt;span class="c1"&gt;# communicating with slaves.&lt;/span&gt;
    &lt;span class="c1"&gt;# You must define at least &amp;#39;port&amp;#39; option that slaves could connect to your master&lt;/span&gt;
    &lt;span class="c1"&gt;# with this protocol.&lt;/span&gt;
    &lt;span class="c1"&gt;# &amp;#39;port&amp;#39; must match the value configured into the buildslaves (with their&lt;/span&gt;
    &lt;span class="c1"&gt;# --master option)&lt;/span&gt;
    &lt;span class="n"&gt;c&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;protocols&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;pb&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;port&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;9989&lt;/span&gt;&lt;span class="p"&gt;}}&lt;/span&gt;

    &lt;span class="c1"&gt;# including web pages, email senders, and IRC bots.&lt;/span&gt;

    &lt;span class="n"&gt;c&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;status&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[]&lt;/span&gt;
    &lt;span class="n"&gt;irc_status&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;status&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;IRC&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
        &lt;span class="n"&gt;host&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;irc.freenode.org&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="n"&gt;nick&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;TEST-Build&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="n"&gt;channels&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;#fengxia.co&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
    &lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;c&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;status&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;append&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;irc_status&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

    &lt;span class="n"&gt;authz_cfg&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;authz&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Authz&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
        &lt;span class="c1"&gt;# change any of these to True to enable; see the manual for more&lt;/span&gt;
        &lt;span class="c1"&gt;# options&lt;/span&gt;
        &lt;span class="n"&gt;auth&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;auth&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;BasicAuth&lt;/span&gt;&lt;span class="p"&gt;([(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;admin&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;xxxxxx&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)],&lt;/span&gt;
        &lt;span class="n"&gt;gracefulShutdown&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kc"&gt;True&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="n"&gt;forceBuild&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;auth&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="c1"&gt;# use this to test your slave once it is set up&lt;/span&gt;
        &lt;span class="n"&gt;forceAllBuilds&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;auth&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;  &lt;span class="c1"&gt;# ..or this&lt;/span&gt;
        &lt;span class="n"&gt;pingBuilder&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kc"&gt;False&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="n"&gt;stopBuild&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kc"&gt;True&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="n"&gt;stopAllBuilds&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kc"&gt;False&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="n"&gt;cancelPendingBuild&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kc"&gt;True&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="p"&gt;)&lt;/span&gt;

    &lt;span class="c1"&gt;####### STATUS TARGETS&lt;/span&gt;
    &lt;span class="c1"&gt;# &amp;#39;status&amp;#39; is a list of Status Targets. The results of each build will be&lt;/span&gt;
    &lt;span class="c1"&gt;# pushed to these targets. buildbot/status/*.py has a variety to choose from,&lt;/span&gt;
    &lt;span class="n"&gt;c&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;status&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;append&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;html&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;WebStatus&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;http_port&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;8010&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;authz&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;authz_cfg&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;

    &lt;span class="c1"&gt;####### PROJECT IDENTITY&lt;/span&gt;
    &lt;span class="c1"&gt;# the &amp;#39;title&amp;#39; string will appear at the top of this buildbot&lt;/span&gt;
    &lt;span class="c1"&gt;# installation&amp;#39;s html.WebStatus home page (linked to the&lt;/span&gt;
    &lt;span class="c1"&gt;# &amp;#39;titleURL&amp;#39;) and is embedded in the title of the waterfall HTML page.&lt;/span&gt;
    &lt;span class="n"&gt;c&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;title&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;Fengxia.co&amp;quot;&lt;/span&gt;
    &lt;span class="n"&gt;c&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;titleURL&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;http://fengxia.co&amp;quot;&lt;/span&gt;

    &lt;span class="c1"&gt;# the &amp;#39;buildbotURL&amp;#39; string should point to the location where the buildbot&amp;#39;s&lt;/span&gt;
    &lt;span class="c1"&gt;# internal web server (usually the html.WebStatus page) is visible. This&lt;/span&gt;
    &lt;span class="c1"&gt;# typically uses the port number set in the Waterfall &amp;#39;status&amp;#39; entry, but&lt;/span&gt;
    &lt;span class="c1"&gt;# with an externally-visible host name which the buildbot cannot figure out&lt;/span&gt;
    &lt;span class="c1"&gt;# without some help.&lt;/span&gt;
    &lt;span class="n"&gt;c&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;buildbotURL&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;http://localhost:8010/&amp;quot;&lt;/span&gt;

    &lt;span class="c1"&gt;####### DB URL&lt;/span&gt;
    &lt;span class="n"&gt;c&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;db&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="c1"&gt;# This specifies what database buildbot uses to store its state.  You can leave&lt;/span&gt;
        &lt;span class="c1"&gt;# this at its default for all but the largest installations.&lt;/span&gt;
        &lt;span class="s1"&gt;&amp;#39;db_url&amp;#39;&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;sqlite:///state.sqlite&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;A couple notes of master.cfg connfigurations:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;slave1 = buildslave.BuildSlave("myslave", "xxxxxx"): the name and password
must be the same as the ones used to create build-slave.&lt;/li&gt;
&lt;li&gt;auth=auth.BasicAuth([("admin","xxxxx")]: defines the admin username
and password to buildbot's admin web UI.&lt;/li&gt;
&lt;/ol&gt;
&lt;h2&gt;Build slave configurations&lt;/h2&gt;
&lt;p&gt;We set up a new configuration for each slave, which corresponds to a project.
Take &lt;em&gt;test_gkp&lt;/em&gt; configuration for example:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="c1"&gt;# -*- python -*-&lt;/span&gt;
&lt;span class="c1"&gt;# ex: set syntax=python:&lt;/span&gt;

&lt;span class="kn"&gt;from&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nn"&gt;buildbot.plugins&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;
&lt;span class="kn"&gt;from&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nn"&gt;buildbot.plugins&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;steps&lt;/span&gt;
&lt;span class="kn"&gt;from&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nn"&gt;buildbot.plugins&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;status&lt;/span&gt;

&lt;span class="k"&gt;class&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nc"&gt;MyTarget&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt;
    &lt;span class="k"&gt;def&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="fm"&gt;__init__&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="c1"&gt;# project configs&lt;/span&gt;
        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;name&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;test-gkp&amp;#39;&lt;/span&gt;

        &lt;span class="n"&gt;project_configs&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="s1"&gt;&amp;#39;git&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;http://fengxia41103:xxxxxx@github.com/fengxia41103/gkp.git&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
            &lt;span class="s1"&gt;&amp;#39;git username&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;fengxia41103&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
            &lt;span class="s1"&gt;&amp;#39;git password&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;xxxxxx&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
            &lt;span class="s1"&gt;&amp;#39;git source&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;~/build-slave/mybuild-&lt;/span&gt;&lt;span class="si"&gt;%s&lt;/span&gt;&lt;span class="s1"&gt;/build&amp;#39;&lt;/span&gt;&lt;span class="o"&gt;%&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
            &lt;span class="s1"&gt;&amp;#39;build name&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;mybuild-&lt;/span&gt;&lt;span class="si"&gt;%s&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;&lt;/span&gt;&lt;span class="o"&gt;%&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;name&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt;

        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;change_source&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;changes&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;GitPoller&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
            &lt;span class="n"&gt;project_configs&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;git&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt;
            &lt;span class="n"&gt;branch&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;master&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
            &lt;span class="n"&gt;pollinterval&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;300&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

        &lt;span class="c1"&gt;####### SCHEDULERS&lt;/span&gt;
        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;scheduler&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;schedulers&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;SingleBranchScheduler&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
            &lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;&lt;span class="si"&gt;%s&lt;/span&gt;&lt;span class="s2"&gt;-all&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;%&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
            &lt;span class="n"&gt;change_filter&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;util&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;ChangeFilter&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;branch&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;master&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;
            &lt;span class="n"&gt;treeStableTimer&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;300&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
            &lt;span class="n"&gt;builderNames&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;project_configs&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;build name&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;]])&lt;/span&gt;
        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;force_scheduler&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;schedulers&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;ForceScheduler&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
            &lt;span class="n"&gt;name&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;&lt;/span&gt;&lt;span class="si"&gt;%s&lt;/span&gt;&lt;span class="s1"&gt;-force&amp;#39;&lt;/span&gt;&lt;span class="o"&gt;%&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
            &lt;span class="n"&gt;builderNames&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;project_configs&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;build name&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;]])&lt;/span&gt;

        &lt;span class="c1"&gt;####### BUILDERS&lt;/span&gt;
        &lt;span class="c1"&gt;# The &amp;#39;builders&amp;#39; list defines the Builders, which tell Buildbot how to perform a build:&lt;/span&gt;
        &lt;span class="c1"&gt;# what steps, and which slaves can execute them.  Note that any particular build will&lt;/span&gt;
        &lt;span class="c1"&gt;# only take place on one slave.&lt;/span&gt;
        &lt;span class="n"&gt;factory&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;util&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;BuildFactory&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;

        &lt;span class="c1"&gt;# check out the source&lt;/span&gt;
        &lt;span class="n"&gt;get_source&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;steps&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Git&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
            &lt;span class="n"&gt;repourl&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;project_configs&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;git&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt;
            &lt;span class="n"&gt;mode&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;full&amp;#39;&lt;/span&gt;
        &lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="n"&gt;restart_nginx&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;steps&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;ShellCommand&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
            &lt;span class="n"&gt;command&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;
                &lt;span class="s1"&gt;&amp;#39;sudo&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
                &lt;span class="s1"&gt;&amp;#39;service&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
                &lt;span class="s1"&gt;&amp;#39;nginx&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
                &lt;span class="s1"&gt;&amp;#39;restart&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
            &lt;span class="p"&gt;],&lt;/span&gt;
            &lt;span class="n"&gt;usePTY&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kc"&gt;True&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
            &lt;span class="n"&gt;description&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;restarting nginx service&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
            &lt;span class="n"&gt;descriptionDone&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;nginx reservice has been restarted&amp;#39;&lt;/span&gt;
        &lt;span class="p"&gt;)&lt;/span&gt;

        &lt;span class="n"&gt;factory&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;addStep&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;get_source&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="n"&gt;factory&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;addStep&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;restart_system_service&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;builder&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;util&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;BuilderConfig&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
            &lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;project_configs&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;build name&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt;
            &lt;span class="n"&gt;slavenames&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;myslave&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt;
            &lt;span class="n"&gt;factory&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;factory&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;h2&gt;Add a new project to CI&lt;/h2&gt;
&lt;p&gt;Adding a new project to CI takes a few steps:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Create slave configuration .py.&lt;/li&gt;
&lt;li&gt;Add it to build-master/master.cfg.&lt;/li&gt;
&lt;li&gt;Restart build master: buildbot restart build-master.&lt;/li&gt;
&lt;li&gt;Login to buildbot admin web UI to confirm that slave has been added successfully.&lt;/li&gt;
&lt;li&gt;Force a build to test.&lt;/li&gt;
&lt;/ol&gt;
&lt;h2&gt;Daily workflow&lt;/h2&gt;
&lt;p&gt;Once CI has been integrated, developer needs only submit changes to Git
and wait for the next build to refresh the test environment. For &lt;em&gt;hot fixes&lt;/em&gt;
build master can also kickoff a force build to make the changes avaialbe
immediately in test environment.&lt;/p&gt;
&lt;h1&gt;Build master admin&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="http://fengxia.co:8011"&gt;Build master&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</content><category term="dev"></category><category term="dev"></category></entry><entry><title>Crawler, TOR, and be a good web citizen</title><link href="https://fengxia41103.github.io/myblog/tor%20crawler.html" rel="alternate"></link><published>2015-03-04T13:00:00-05:00</published><updated>2015-03-04T13:00:00-05:00</updated><author><name>Feng Xia</name></author><id>tag:fengxia41103.github.io,2015-03-04:/myblog/tor crawler.html</id><summary type="html">&lt;p&gt;Many projects I have done involved harvesting data from
public sites. Data crawling is an exciting business. On one hand, it
is easy to develop a crawler these days. In the Python world,
plenty tutorials will show you how to build
a simple crawler using the &lt;a href="https://docs.python.org/2/library/urllib.html"&gt;Python urllib&lt;/a&gt;,
or building upon some more sophisticate tool like
&lt;a href="http://doc.scrapy.org/en/latest/intro/tutorial.html"&gt;Scrapy&lt;/a&gt;.&lt;/p&gt;
&lt;figure class="s12 center"&gt;
  &lt;img src="images/regular_expressions.png"/&gt;
  &lt;figcaption&gt;Fun with regular expression&lt;/figcaption&gt;
&lt;/figure&gt;

&lt;p&gt;But before carried away by the fun and the power,
let's lay down a ground rule &amp;mdash; to respect
 peer server and try hard being a good web citizen.
We surely learned a few lessons here. So please
take notes and hopefully you won't fall into the same pit.&lt;/p&gt;
&lt;h1&gt;Banned&lt;/h1&gt;
&lt;p&gt;We used to joke about this &amp;mdash; if you haven't been banned by a server,
you haven't hit it hard enough. Well, we were banned.&lt;/p&gt;
&lt;p&gt;Our first version was a simple urllib based agent and could be run
in multiprocessing mode. Target was a public site run
by a small startup firm, which by rumor consisted mostly of
developers, too. So we took this on almost …&lt;/p&gt;</summary><content type="html">&lt;p&gt;Many projects I have done involved harvesting data from
public sites. Data crawling is an exciting business. On one hand, it
is easy to develop a crawler these days. In the Python world,
plenty tutorials will show you how to build
a simple crawler using the &lt;a href="https://docs.python.org/2/library/urllib.html"&gt;Python urllib&lt;/a&gt;,
or building upon some more sophisticate tool like
&lt;a href="http://doc.scrapy.org/en/latest/intro/tutorial.html"&gt;Scrapy&lt;/a&gt;.&lt;/p&gt;
&lt;figure class="s12 center"&gt;
  &lt;img src="images/regular_expressions.png"/&gt;
  &lt;figcaption&gt;Fun with regular expression&lt;/figcaption&gt;
&lt;/figure&gt;

&lt;p&gt;But before carried away by the fun and the power,
let's lay down a ground rule &amp;mdash; to respect
 peer server and try hard being a good web citizen.
We surely learned a few lessons here. So please
take notes and hopefully you won't fall into the same pit.&lt;/p&gt;
&lt;h1&gt;Banned&lt;/h1&gt;
&lt;p&gt;We used to joke about this &amp;mdash; if you haven't been banned by a server,
you haven't hit it hard enough. Well, we were banned.&lt;/p&gt;
&lt;p&gt;Our first version was a simple urllib based agent and could be run
in multiprocessing mode. Target was a public site run
by a small startup firm, which by rumor consisted mostly of
developers, too. So we took this on almost like an arm race.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="kn"&gt;from&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nn"&gt;urllib3&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;PoolManager&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;Retry&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;Timeout&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;ProxyManager&lt;/span&gt;

&lt;span class="k"&gt;class&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nc"&gt;PlainUtility&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt;

    &lt;span class="k"&gt;def&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="fm"&gt;__init__&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="n"&gt;user_agent&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;Mozilla/5.0 (Windows; U; Windows NT 5.1; en-US; rv:1.9.0.7) Gecko/2009021910 Firefox/3.0.7&amp;#39;&lt;/span&gt;
        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;headers&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;User-Agent&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;user_agent&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;
        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;ip_url&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;http://icanhazip.com/&amp;#39;&lt;/span&gt;
        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;logger&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;logging&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;getLogger&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;gkp&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="n"&gt;retries&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;Retry&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;connect&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;read&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;redirect&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;agent&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;PoolManager&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
            &lt;span class="mi"&gt;10&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;retries&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;retries&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;timeout&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;Timeout&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;total&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mf"&gt;30.0&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;

    &lt;span class="k"&gt;def&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nf"&gt;current_ip&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;request&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;ip_url&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

    &lt;span class="k"&gt;def&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nf"&gt;request&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;url&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="n"&gt;r&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;agent&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;request&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;GET&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;url&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;r&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;status&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="mi"&gt;200&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
            &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;r&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;data&lt;/span&gt;
        &lt;span class="k"&gt;else&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
            &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;logger&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;error&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;status &lt;/span&gt;&lt;span class="si"&gt;%s&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;&lt;/span&gt; &lt;span class="o"&gt;%&lt;/span&gt; &lt;span class="n"&gt;r&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;status&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;We kicked off the crawler in multiprocessing mode (between 200-300
subprocesses) and sat back to watch data pouring in, until
a &lt;code&gt;403 forbidden&lt;/code&gt;, ban!
Needless to say, the server must have experienced a trigger event which
prompted the action. What could it be?&lt;/p&gt;
&lt;p&gt;First, load. We suspected the load we were generating put us on the
radar. This was a public site who claimed a over three million live
daily users. However, I have always viewed such information with a
grain of salt. So in this case, we guessed those million members were
certainly not clicking at the same time as we were, and that site was
likely hosted on a budget server as many startups have done. With this
consideration, one measure to implement &amp;mdash; throttling (and if you
have a website, don't blow up your user number to make it look too good
to be True, unless you are ready to handle the hits.)&lt;/p&gt;
&lt;p&gt;Further, from the time
we were hitting the server to the time the ban came in, a few days
have elapsed. So the reaction was likely taken by a manual intervention
instead of a computerized protection. This is a security hazard on their
end.&lt;/p&gt;
&lt;p&gt;Last, we moved to a different wifi access and used the same code, it
went through without a glitch. So another thing became clear, the
defense was IP based, which meant all computers in our office were
helpless now because they shared the same outbound IP.&lt;/p&gt;
&lt;p&gt;A few possibilities to resolve this. First, moving around &lt;em&gt;free&lt;/em&gt; wifi.
But that is just not nice. Crossed off the list with a 100% vote.
Second, use a VPN. This is a good and common approach. We could use
either an in-house server or a commercial one. But that's too, "boring",
said one developer. So after a few
tries, we ended up with something quite interesting, simple yet
powerful.&lt;/p&gt;
&lt;p&gt;Besides the old school &lt;code&gt;PlainUtility&lt;/code&gt;, I have introduced
two upgrades &amp;rarr; &lt;code&gt;TorUtility&lt;/code&gt; and &lt;code&gt;SeleniumUtility&lt;/code&gt;. Both
added a layer of indirection to the puzzle, but also a layer of protection.&lt;/p&gt;
&lt;h1&gt;TOR&lt;/h1&gt;
&lt;p&gt;First layer added to our stack is to use
&lt;a href="https://www.torproject.org/"&gt;TOR&lt;/a&gt; network as our proxy to
serve request. Further, because TOR service is a socket proxy, not a
HTTP proxy, we installed another layer, &lt;a href="https://www.privoxy.org/"&gt;privoxy&lt;/a&gt; in between to connect the two.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="k"&gt;class&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nc"&gt;TorUtility&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt;

    &lt;span class="k"&gt;def&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="fm"&gt;__init__&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="n"&gt;user_agent&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;Mozilla/5.0 (Windows; U; Windows NT 5.1; en-US; rv:1.9.0.7) Gecko/2009021910 Firefox/3.0.7&amp;#39;&lt;/span&gt;
        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;headers&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;User-Agent&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;user_agent&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;
        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;ip_url&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;http://icanhazip.com/&amp;#39;&lt;/span&gt;
        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;logger&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;logging&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;getLogger&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;gkp&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="n"&gt;retries&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;Retry&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;connect&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;read&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;redirect&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;agent&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;ProxyManager&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
            &lt;span class="s1"&gt;&amp;#39;http://localhost:8118/&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;retries&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;retries&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;timeout&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;Timeout&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;total&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mf"&gt;60.0&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;

    &lt;span class="k"&gt;def&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nf"&gt;renewTorIdentity&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;passAuth&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="k"&gt;try&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
            &lt;span class="n"&gt;s&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;socket&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;socket&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
            &lt;span class="n"&gt;s&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;connect&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;localhost&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;9051&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
            &lt;span class="n"&gt;s&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;send&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;AUTHENTICATE &amp;quot;&lt;/span&gt;&lt;span class="si"&gt;{0}&lt;/span&gt;&lt;span class="s1"&gt;&amp;quot;&lt;/span&gt;&lt;span class="se"&gt;\r\n&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;format&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;passAuth&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
            &lt;span class="n"&gt;resp&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;s&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;recv&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1024&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

            &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;resp&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;startswith&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;250&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
                &lt;span class="n"&gt;s&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;send&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;signal NEWNYM&lt;/span&gt;&lt;span class="se"&gt;\r\n&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
                &lt;span class="n"&gt;resp&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;s&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;recv&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1024&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

                &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;resp&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;startswith&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;250&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
                    &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;logger&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;info&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;Identity renewed&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
                &lt;span class="k"&gt;else&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
                    &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;logger&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;info&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;response 2:&lt;/span&gt;&lt;span class="si"&gt;%s&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;&lt;/span&gt; &lt;span class="o"&gt;%&lt;/span&gt; &lt;span class="n"&gt;resp&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

            &lt;span class="k"&gt;else&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
                &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;logger&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;info&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;response 1:&lt;/span&gt;&lt;span class="si"&gt;%s&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;&lt;/span&gt; &lt;span class="o"&gt;%&lt;/span&gt; &lt;span class="n"&gt;resp&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

        &lt;span class="k"&gt;except&lt;/span&gt; &lt;span class="ne"&gt;Exception&lt;/span&gt; &lt;span class="k"&gt;as&lt;/span&gt; &lt;span class="n"&gt;e&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
            &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;logger&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;error&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;Can&amp;#39;t renew identity: &lt;/span&gt;&lt;span class="si"&gt;%s&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;&lt;/span&gt; &lt;span class="o"&gt;%&lt;/span&gt; &lt;span class="n"&gt;e&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

    &lt;span class="k"&gt;def&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nf"&gt;renew_connection&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="k"&gt;with&lt;/span&gt; &lt;span class="n"&gt;Controller&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;from_port&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;port&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;9051&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;as&lt;/span&gt; &lt;span class="n"&gt;controller&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
            &lt;span class="n"&gt;controller&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;authenticate&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;natalie&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
            &lt;span class="n"&gt;controller&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;signal&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;Signal&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;NEWNYM&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;logger&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;info&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;*&amp;#39;&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="mi"&gt;50&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;logger&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;info&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;&lt;/span&gt;&lt;span class="se"&gt;\t&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="mi"&gt;6&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;Renew TOR IP: &lt;/span&gt;&lt;span class="si"&gt;%s&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;&lt;/span&gt; &lt;span class="o"&gt;%&lt;/span&gt;
                         &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;request&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;ip_url&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;logger&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;info&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;*&amp;#39;&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="mi"&gt;50&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

    &lt;span class="k"&gt;def&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nf"&gt;request&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;url&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="n"&gt;r&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;agent&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;request&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;GET&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;url&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;r&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;status&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="mi"&gt;200&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
            &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;r&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;data&lt;/span&gt;
        &lt;span class="k"&gt;elif&lt;/span&gt; &lt;span class="n"&gt;r&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;status&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="mi"&gt;403&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
            &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;renew_connection&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
        &lt;span class="k"&gt;else&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
            &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;logger&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;error&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;status &lt;/span&gt;&lt;span class="si"&gt;%s&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;&lt;/span&gt; &lt;span class="o"&gt;%&lt;/span&gt; &lt;span class="n"&gt;r&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;status&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;&amp;#39;&lt;/span&gt;

    &lt;span class="k"&gt;def&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nf"&gt;current_ip&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;request&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;ip_url&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Now, with the help of the TOR, we are browsing
internet with &lt;em&gt;anonymity&lt;/em&gt;. TOR maintains a pool
of IP addresses, but a renew request does not guarantee to generate
a new IP. On top of this, some IPs were probably located on the moon because
a request took &lt;em&gt;forever&lt;/em&gt;, which on our end were a flashing timeout messages across
screen. Internally we maintain a life counter on a connection
and renew it when counter is up so we could return the IP back to the IP.&lt;/p&gt;
&lt;h2&gt;TOR config&lt;/h2&gt;
&lt;p&gt;The key to config the TOR was to enable &lt;code&gt;ControlPort&lt;/code&gt; and set up &lt;code&gt;HashedControlPassword&lt;/code&gt;.
The password would be used when sending request to the local TOR service such as renewing a connection. TOR
service would in turn pass that on to TOR network on our behalf.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;In&lt;span class="w"&gt; &lt;/span&gt;/etc/tor/torrc:

&lt;span class="c1"&gt;## The port on which Tor will listen for local connections from Tor&lt;/span&gt;
&lt;span class="c1"&gt;## controller applications, as documented in control-spec.txt.&lt;/span&gt;
ControlPort&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="m"&gt;9051&lt;/span&gt;

&lt;span class="c1"&gt;## If you enable the controlport, be sure to enable one of these&lt;/span&gt;
&lt;span class="c1"&gt;## authentication methods, to prevent attackers from accessing it.&lt;/span&gt;
HashedControlPassword&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="m"&gt;16&lt;/span&gt;:872860B76453A77D60CA2BB8C1A7042072093276A3D701AD684053EC4C
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Password is created using &lt;a href="https://www.torproject.org/docs/tor-manual.html.en"&gt;TOR commandline&lt;/a&gt;.&lt;/p&gt;
&lt;h2&gt;Privoxy config&lt;/h2&gt;
&lt;p&gt;In &lt;code&gt;/etc/privoxy/config&lt;/code&gt;, we set up a receiving port and a forwarding port.
Forwarding port was set to 9050 as that's the default listening port by
the TOR service.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;listen-address&lt;span class="w"&gt;  &lt;/span&gt;localhost:8118
forward-socks5&lt;span class="w"&gt;   &lt;/span&gt;/&lt;span class="w"&gt;   &lt;/span&gt;&lt;span class="m"&gt;127&lt;/span&gt;.0.0.1:9050
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;h1&gt;Phantom&lt;/h1&gt;
&lt;p&gt;Now with the link between us and the target out of the way, we wanted
to change our agent from a urllib brute force to a nicer consumer.
Our goal was to drive a &lt;em&gt;real&lt;/em&gt; web browser so our reading of the site
is no different from a real user.
Tapped into our experience with automated web testing, &lt;a href="http://phantomjs.org/"&gt;PhantomJS&lt;/a&gt;
and &lt;a href="http://www.seleniumhq.org/"&gt;Selenium&lt;/a&gt; were a natural choice for the job.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="kn"&gt;from&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nn"&gt;selenium&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;webdriver&lt;/span&gt;
&lt;span class="kn"&gt;from&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nn"&gt;selenium.webdriver.common.desired_capabilities&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;DesiredCapabilities&lt;/span&gt;


&lt;span class="k"&gt;class&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nc"&gt;SeleniumUtility&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt;

    &lt;span class="k"&gt;def&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="fm"&gt;__init__&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;use_tor&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="kc"&gt;True&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;ip_url&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;http://icanhazip.com/&amp;#39;&lt;/span&gt;
        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;logger&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;logging&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;getLogger&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;gkp&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

        &lt;span class="n"&gt;dcap&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;dict&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;DesiredCapabilities&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;PHANTOMJS&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="n"&gt;dcap&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;phantomjs.page.settings.userAgent&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
            &lt;span class="s2"&gt;&amp;quot;Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/53 &amp;quot;&lt;/span&gt;
            &lt;span class="s2"&gt;&amp;quot;(KHTML, like Gecko) Chrome/15.0.87&amp;quot;&lt;/span&gt;
        &lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="c1"&gt;# DesiredCapabilities.PHANTOMJS[&amp;#39;phantomjs.page.settings.userAgent&amp;#39;] = user_agent&lt;/span&gt;
        &lt;span class="n"&gt;service_args&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;
            &lt;span class="s1"&gt;&amp;#39;--proxy=127.0.0.1:8118&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;  &lt;span class="c1"&gt;# provixy proxy&lt;/span&gt;
            &lt;span class="s1"&gt;&amp;#39;--proxy-type=http&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="p"&gt;]&lt;/span&gt;
        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;use_tor&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
            &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;agent&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;webdriver&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;PhantomJS&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
                &lt;span class="s1"&gt;&amp;#39;phantomjs&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;service_args&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;service_args&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;desired_capabilities&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;dcap&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="k"&gt;else&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
            &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;agent&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;webdriver&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;PhantomJS&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
                &lt;span class="s1"&gt;&amp;#39;phantomjs&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;desired_capabilities&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;dcap&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;agent&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;set_page_load_timeout&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;120&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

    &lt;span class="k"&gt;def&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nf"&gt;request&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;url&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;xrange&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
            &lt;span class="k"&gt;try&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
                &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;agent&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;url&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
                &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;agent&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;page_source&lt;/span&gt;
            &lt;span class="k"&gt;except&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
                &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;logger&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;error&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;#&lt;/span&gt;&lt;span class="si"&gt;%d&lt;/span&gt;&lt;span class="s1"&gt; request timeout&amp;#39;&lt;/span&gt; &lt;span class="o"&gt;%&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

    &lt;span class="k"&gt;def&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="fm"&gt;__del__&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;agent&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;quit&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;At this point, the stack has blown quite a bit from a native Python urllib
to now &lt;strong&gt;Python+Java+Javascript&lt;/strong&gt; and a third party web proxy tool.
The downside was apparently the complexity. But the upside was also obvious.
I have achieved a better control over our data harvesting process.
More importantly, we tried our best to be a good web citizen, and let's stick
to that.&lt;/p&gt;
&lt;h1&gt;Final design&lt;/h1&gt;
&lt;p&gt;After all the tweaks, the final design of my crawler comes down to this:&lt;/p&gt;
&lt;figure class="s12 center"&gt;
  &lt;img src="images/crawler.jpg"/&gt;
  &lt;figcaption&gt;Crawler architecture&lt;/figcaption&gt;
&lt;/figure&gt;</content><category term="dev"></category><category term="dev"></category></entry></feed>