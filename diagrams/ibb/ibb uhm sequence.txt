@startuml
autonumber "<font color=red><b>Message 00:"

actor Admin

box "Platform Services"
  participant "Inventory Service" as Netbox
  participant "Automation Service" as Tower
  participant "OS Deployment Service" as LXCA
  participant "Software Repository Service" as Satellite
  participant "Config Repo Service" as Config
end box

collections Servers #ff6a00

== PHASE 1: Register resource ==

Admin -> Tower: apply_workflow(inventory_server_id, workflow_id)
Tower -> Netbox: get_server_bmc_info(inventory_server_id)
Netbox -> Tower: (bmc_ip, bmc_credentials)
Tower -> LXCA: manage(bmc_ip, bmc_credentials)
LXCA -> Tower: `hw_mgt_server_id` if successful; NULL if failed.

== PHASE 2: Apply HW configs ==

alt role based
  Tower -> Netbox: get_server_role(inventory_server_id)
  Netbox -> Tower: server_role
  Tower -> Config: get_server_configs(server_role)
  Config -> Tower: role based `hw_configs`
  note left: configs is determined by `device role`

  Tower -> LXCA: config_server(hw_mgt_server_id, hw_configs).

else UUID based
  Tower -> Config: get_server_configs(uuid)
  Config -> Tower: UUID based `hw_configs`
  note left: configs is determined by device `UUID`

  Tower -> LXCA: config_server(uuid, hw_configs).
end

LXCA -> Servers: apply_configs(hw_configs)
LXCA -> Tower: config result `TRUE|FALSE`

== PHASE 3: PROVISION OS ==

alt role base
  Tower -> Netbox: get_server_role(inventory_server_id)
  Netbox -> Tower: server_role
  Tower -> Config: get_server_os(server_role)
  Config -> Tower: role based `os_configs`
  Tower -> LXCA: provision_os(hw_mgt_server_id, os_configs)
  LXCA -> Servers: provision_os(hw_mgt_server_id, os_configs)
  LXCA -> Tower: provision result `TRUE|FALSE`
  Tower -> Netbox: update_server_ssh_info(ip, username, pwd)

else UUID based
  Tower -> Config: get_server_os(uuid)
  Config -> Tower: UUID based `os_configs`
  Tower -> LXCA: provision_os(uuid, os_configs)
end

LXCA -> Servers: provision_os(hw_mgt_server_id, os_configs)
LXCA -> Tower: provision result `TRUE|FALSE`
Tower -> Netbox: update_server_ssh_info(ip, username, pwd)

== PHASE 4: REGISTER TO SOFTWARE REPO ==

alt role based
  Tower -> Netbox: get_server_role(inventory_server_id)
  Netbox -> Tower: server_role
  Tower -> Config: get_server_repo_key(server_role)
  Config -> Tower: role based `repo_service_key_name`

else UUID based
  Tower -> Config: get_server_repo_key(uuid)
  Config -> Tower: UUID based `repo_service_key_name`
end

Tower -> Satellite: register_server_to_repo(repo_service_key_name)

@enduml
